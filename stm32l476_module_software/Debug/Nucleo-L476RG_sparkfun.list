
Nucleo-L476RG_sparkfun.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011908  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005b14  08011a98  08011a98  00021a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080175ac  080175ac  0003036c  2**0
                  CONTENTS
  4 .ARM          00000008  080175ac  080175ac  000275ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080175b4  080175b4  0003036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080175b4  080175b4  000275b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080175b8  080175b8  000275b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000036c  20000000  080175bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  2000036c  08017928  0003036c  2**2
                  ALLOC
 10 ._user_heap_stack 00002200  20000868  08017928  00030868  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003036c  2**0
                  CONTENTS, READONLY
 12 .comment      0000008f  00000000  00000000  0003039c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0006261d  00000000  00000000  0003042b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000e73c  00000000  00000000  00092a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022b0  00000000  00000000  000a1188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aae  00000000  00000000  000a3438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022e0d  00000000  00000000  000a3ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000f6a0  00000000  00000000  000c6cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00008960  00000000  00000000  000d6394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000072  00000000  00000000  000decf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000198a5  00000000  00000000  000ded66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00003a10  00000000  00000000  000f860b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000036c 	.word	0x2000036c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011a80 	.word	0x08011a80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000370 	.word	0x20000370
 80001cc:	08011a80 	.word	0x08011a80

080001d0 <acc_alg_biquad_q3_12_complex_direct_form_1_reverse>:
 80001d0:	f06f 0c03 	mvn.w	ip, #3
 80001d4:	3904      	subs	r1, #4
 80001d6:	e004      	b.n	80001e2 <head_complex>

080001d8 <acc_alg_biquad_q3_12_complex_direct_form_1>:
 80001d8:	f04f 0c04 	mov.w	ip, #4
 80001dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80001e0:	4252      	negs	r2, r2

080001e2 <head_complex>:
 80001e2:	0092      	lsls	r2, r2, #2
 80001e4:	d100      	bne.n	80001e8 <init_complex>
 80001e6:	4770      	bx	lr

080001e8 <init_complex>:
 80001e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ec:	eac3 4603 	pkhbt	r6, r3, r3, lsl #16
 80001f0:	eac3 4723 	pkhtb	r7, r3, r3, asr #16
 80001f4:	f8b0 a000 	ldrh.w	sl, [r0]
 80001f8:	8844      	ldrh	r4, [r0, #2]
 80001fa:	8883      	ldrh	r3, [r0, #4]
 80001fc:	88c5      	ldrh	r5, [r0, #6]
 80001fe:	8900      	ldrh	r0, [r0, #8]
 8000200:	f5c5 4570 	rsb	r5, r5, #61440	; 0xf000
 8000204:	eac3 4e00 	pkhbt	lr, r3, r0, lsl #16
 8000208:	4663      	mov	r3, ip
 800020a:	eac4 4c05 	pkhbt	ip, r4, r5, lsl #16
 800020e:	b234      	sxth	r4, r6
 8000210:	b23d      	sxth	r5, r7
 8000212:	ea4f 3804 	mov.w	r8, r4, lsl #12
 8000216:	ea4f 3905 	mov.w	r9, r5, lsl #12
 800021a:	0034      	movs	r4, r6
 800021c:	003d      	movs	r5, r7

0800021e <loop_complex>:
 800021e:	5888      	ldr	r0, [r1, r2]
 8000220:	fb1a 8800 	smlabb	r8, sl, r0, r8
 8000224:	fb1a 9910 	smlabt	r9, sl, r0, r9
 8000228:	fb2c 8804 	smlad	r8, ip, r4, r8
 800022c:	fb2c 9915 	smladx	r9, ip, r5, r9
 8000230:	fb4e 8806 	smlsd	r8, lr, r6, r8
 8000234:	fb4e 9917 	smlsdx	r9, lr, r7, r9
 8000238:	0026      	movs	r6, r4
 800023a:	002f      	movs	r7, r5
 800023c:	eac0 1408 	pkhbt	r4, r0, r8, lsl #4
 8000240:	eac0 3529 	pkhtb	r5, r0, r9, asr #12
 8000244:	0428      	lsls	r0, r5, #16
 8000246:	eac0 4024 	pkhtb	r0, r0, r4, asr #16
 800024a:	5088      	str	r0, [r1, r2]
 800024c:	18d2      	adds	r2, r2, r3
 800024e:	d1e6      	bne.n	800021e <loop_complex>
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000254 <acc_alg_biquad_q3_12_direct_form_1_reverse>:
 8000254:	f06f 0c01 	mvn.w	ip, #1
 8000258:	3902      	subs	r1, #2
 800025a:	e004      	b.n	8000266 <head_real>

0800025c <acc_alg_biquad_q3_12_direct_form_1>:
 800025c:	f05f 0c02 	movs.w	ip, #2
 8000260:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8000264:	4252      	negs	r2, r2

08000266 <head_real>:
 8000266:	0052      	lsls	r2, r2, #1
 8000268:	d100      	bne.n	800026c <init_real>
 800026a:	4770      	bx	lr

0800026c <init_real>:
 800026c:	e92d 44f0 	stmdb	sp!, {r4, r5, r6, r7, sl, lr}
 8000270:	4667      	mov	r7, ip
 8000272:	f8b0 a000 	ldrh.w	sl, [r0]
 8000276:	8844      	ldrh	r4, [r0, #2]
 8000278:	8885      	ldrh	r5, [r0, #4]
 800027a:	88c6      	ldrh	r6, [r0, #6]
 800027c:	8900      	ldrh	r0, [r0, #8]
 800027e:	f5c6 4670 	rsb	r6, r6, #61440	; 0xf000
 8000282:	eac4 4c06 	pkhbt	ip, r4, r6, lsl #16
 8000286:	eac5 4e00 	pkhbt	lr, r5, r0, lsl #16
 800028a:	eac3 4403 	pkhbt	r4, r3, r3, lsl #16
 800028e:	0025      	movs	r5, r4
 8000290:	b21b      	sxth	r3, r3
 8000292:	031e      	lsls	r6, r3, #12

08000294 <loop_real>:
 8000294:	5a88      	ldrh	r0, [r1, r2]
 8000296:	fb1a 6600 	smlabb	r6, sl, r0, r6
 800029a:	fb2c 6604 	smlad	r6, ip, r4, r6
 800029e:	fb4e 6605 	smlsd	r6, lr, r5, r6
 80002a2:	0025      	movs	r5, r4
 80002a4:	eac0 1406 	pkhbt	r4, r0, r6, lsl #4
 80002a8:	1420      	asrs	r0, r4, #16
 80002aa:	5288      	strh	r0, [r1, r2]
 80002ac:	19d2      	adds	r2, r2, r7
 80002ae:	d1f1      	bne.n	8000294 <loop_real>
 80002b0:	e8bd 84f0 	ldmia.w	sp!, {r4, r5, r6, r7, sl, pc}
	...

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <strlen>:
 8000360:	4603      	mov	r3, r0
 8000362:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000366:	2a00      	cmp	r2, #0
 8000368:	d1fb      	bne.n	8000362 <strlen+0x2>
 800036a:	1a18      	subs	r0, r3, r0
 800036c:	3801      	subs	r0, #1
 800036e:	4770      	bx	lr

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	; 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	3c01      	subs	r4, #1
 80004ac:	bf28      	it	cs
 80004ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004b2:	d2e9      	bcs.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__gedf2>:
 8000b0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b10:	e006      	b.n	8000b20 <__cmpdf2+0x4>
 8000b12:	bf00      	nop

08000b14 <__ledf2>:
 8000b14:	f04f 0c01 	mov.w	ip, #1
 8000b18:	e002      	b.n	8000b20 <__cmpdf2+0x4>
 8000b1a:	bf00      	nop

08000b1c <__cmpdf2>:
 8000b1c:	f04f 0c01 	mov.w	ip, #1
 8000b20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	bf18      	it	ne
 8000b32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b36:	d01b      	beq.n	8000b70 <__cmpdf2+0x54>
 8000b38:	b001      	add	sp, #4
 8000b3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b3e:	bf0c      	ite	eq
 8000b40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b44:	ea91 0f03 	teqne	r1, r3
 8000b48:	bf02      	ittt	eq
 8000b4a:	ea90 0f02 	teqeq	r0, r2
 8000b4e:	2000      	moveq	r0, #0
 8000b50:	4770      	bxeq	lr
 8000b52:	f110 0f00 	cmn.w	r0, #0
 8000b56:	ea91 0f03 	teq	r1, r3
 8000b5a:	bf58      	it	pl
 8000b5c:	4299      	cmppl	r1, r3
 8000b5e:	bf08      	it	eq
 8000b60:	4290      	cmpeq	r0, r2
 8000b62:	bf2c      	ite	cs
 8000b64:	17d8      	asrcs	r0, r3, #31
 8000b66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b6a:	f040 0001 	orr.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__cmpdf2+0x64>
 8000b7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7e:	d107      	bne.n	8000b90 <__cmpdf2+0x74>
 8000b80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d1d6      	bne.n	8000b38 <__cmpdf2+0x1c>
 8000b8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8e:	d0d3      	beq.n	8000b38 <__cmpdf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	4662      	mov	r2, ip
 8000b9e:	468c      	mov	ip, r1
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4663      	mov	r3, ip
 8000ba4:	e000      	b.n	8000ba8 <__aeabi_cdcmpeq>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdcmpeq>:
 8000ba8:	b501      	push	{r0, lr}
 8000baa:	f7ff ffb7 	bl	8000b1c <__cmpdf2>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	bf48      	it	mi
 8000bb2:	f110 0f00 	cmnmi.w	r0, #0
 8000bb6:	bd01      	pop	{r0, pc}

08000bb8 <__aeabi_dcmpeq>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff fff4 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bc0:	bf0c      	ite	eq
 8000bc2:	2001      	moveq	r0, #1
 8000bc4:	2000      	movne	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_dcmplt>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffea 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bd4:	bf34      	ite	cc
 8000bd6:	2001      	movcc	r0, #1
 8000bd8:	2000      	movcs	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_dcmple>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff ffe0 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000be8:	bf94      	ite	ls
 8000bea:	2001      	movls	r0, #1
 8000bec:	2000      	movhi	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_dcmpge>:
 8000bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf8:	f7ff ffce 	bl	8000b98 <__aeabi_cdrcmple>
 8000bfc:	bf94      	ite	ls
 8000bfe:	2001      	movls	r0, #1
 8000c00:	2000      	movhi	r0, #0
 8000c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c06:	bf00      	nop

08000c08 <__aeabi_dcmpgt>:
 8000c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c0c:	f7ff ffc4 	bl	8000b98 <__aeabi_cdrcmple>
 8000c10:	bf34      	ite	cc
 8000c12:	2001      	movcc	r0, #1
 8000c14:	2000      	movcs	r0, #0
 8000c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1a:	bf00      	nop

08000c1c <__aeabi_dcmpun>:
 8000c1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x10>
 8000c26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c2a:	d10a      	bne.n	8000c42 <__aeabi_dcmpun+0x26>
 8000c2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x20>
 8000c36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_dcmpun+0x26>
 8000c3c:	f04f 0000 	mov.w	r0, #0
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0001 	mov.w	r0, #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2iz>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c50:	d215      	bcs.n	8000c7e <__aeabi_d2iz+0x36>
 8000c52:	d511      	bpl.n	8000c78 <__aeabi_d2iz+0x30>
 8000c54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c5c:	d912      	bls.n	8000c84 <__aeabi_d2iz+0x3c>
 8000c5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c72:	bf18      	it	ne
 8000c74:	4240      	negne	r0, r0
 8000c76:	4770      	bx	lr
 8000c78:	f04f 0000 	mov.w	r0, #0
 8000c7c:	4770      	bx	lr
 8000c7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c82:	d105      	bne.n	8000c90 <__aeabi_d2iz+0x48>
 8000c84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	bf08      	it	eq
 8000c8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c8e:	4770      	bx	lr
 8000c90:	f04f 0000 	mov.w	r0, #0
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <HAL_Init+0x3c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <HAL_Init+0x3c>)
 8000fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000faa:	2003      	movs	r0, #3
 8000fac:	f000 f962 	bl	8001274 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f000 f80f 	bl	8000fd4 <HAL_InitTick>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d002      	beq.n	8000fc2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	71fb      	strb	r3, [r7, #7]
 8000fc0:	e001      	b.n	8000fc6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fc2:	f004 fe51 	bl	8005c68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40022000 	.word	0x40022000

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_InitTick+0x6c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d023      	beq.n	8001030 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <HAL_InitTick+0x70>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_InitTick+0x6c>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f96d 	bl	80012de <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d10f      	bne.n	800102a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d809      	bhi.n	8001024 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f000 f937 	bl	800128a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800101c:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <HAL_InitTick+0x74>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	e007      	b.n	8001034 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	73fb      	strb	r3, [r7, #15]
 8001028:	e004      	b.n	8001034 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	e001      	b.n	8001034 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001034:	7bfb      	ldrb	r3, [r7, #15]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000004 	.word	0x20000004
 8001044:	20000020 	.word	0x20000020
 8001048:	20000000 	.word	0x20000000

0800104c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x20>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x24>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <HAL_IncTick+0x24>)
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000004 	.word	0x20000004
 8001070:	20000388 	.word	0x20000388

08001074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <HAL_GetTick+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000388 	.word	0x20000388

0800108c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001094:	f7ff ffee 	bl	8001074 <HAL_GetTick>
 8001098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a4:	d005      	beq.n	80010b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <HAL_Delay+0x44>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010b2:	bf00      	nop
 80010b4:	f7ff ffde 	bl	8001074 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d8f7      	bhi.n	80010b4 <HAL_Delay+0x28>
  {
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000004 	.word	0x20000004

080010d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f0:	4013      	ands	r3, r2
 80010f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001106:	4a04      	ldr	r2, [pc, #16]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	60d3      	str	r3, [r2, #12]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <__NVIC_GetPriorityGrouping+0x18>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	f003 0307 	and.w	r3, r3, #7
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	2b00      	cmp	r3, #0
 8001148:	db0b      	blt.n	8001162 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	f003 021f 	and.w	r2, r3, #31
 8001150:	4907      	ldr	r1, [pc, #28]	; (8001170 <__NVIC_EnableIRQ+0x38>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	095b      	lsrs	r3, r3, #5
 8001158:	2001      	movs	r0, #1
 800115a:	fa00 f202 	lsl.w	r2, r0, r2
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000e100 	.word	0xe000e100

08001174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	db0a      	blt.n	800119e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	b2da      	uxtb	r2, r3
 800118c:	490c      	ldr	r1, [pc, #48]	; (80011c0 <__NVIC_SetPriority+0x4c>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	0112      	lsls	r2, r2, #4
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	440b      	add	r3, r1
 8001198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800119c:	e00a      	b.n	80011b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4908      	ldr	r1, [pc, #32]	; (80011c4 <__NVIC_SetPriority+0x50>)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	3b04      	subs	r3, #4
 80011ac:	0112      	lsls	r2, r2, #4
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	440b      	add	r3, r1
 80011b2:	761a      	strb	r2, [r3, #24]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000e100 	.word	0xe000e100
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	; 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f1c3 0307 	rsb	r3, r3, #7
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	bf28      	it	cs
 80011e6:	2304      	movcs	r3, #4
 80011e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3304      	adds	r3, #4
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	d902      	bls.n	80011f8 <NVIC_EncodePriority+0x30>
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3b03      	subs	r3, #3
 80011f6:	e000      	b.n	80011fa <NVIC_EncodePriority+0x32>
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43da      	mvns	r2, r3
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	401a      	ands	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001210:	f04f 31ff 	mov.w	r1, #4294967295
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa01 f303 	lsl.w	r3, r1, r3
 800121a:	43d9      	mvns	r1, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	4313      	orrs	r3, r2
         );
}
 8001222:	4618      	mov	r0, r3
 8001224:	3724      	adds	r7, #36	; 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001240:	d301      	bcc.n	8001246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001242:	2301      	movs	r3, #1
 8001244:	e00f      	b.n	8001266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <SysTick_Config+0x40>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124e:	210f      	movs	r1, #15
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f7ff ff8e 	bl	8001174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <SysTick_Config+0x40>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <SysTick_Config+0x40>)
 8001260:	2207      	movs	r2, #7
 8001262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	e000e010 	.word	0xe000e010

08001274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff29 	bl	80010d4 <__NVIC_SetPriorityGrouping>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800129c:	f7ff ff3e 	bl	800111c <__NVIC_GetPriorityGrouping>
 80012a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	6978      	ldr	r0, [r7, #20]
 80012a8:	f7ff ff8e 	bl	80011c8 <NVIC_EncodePriority>
 80012ac:	4602      	mov	r2, r0
 80012ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff5d 	bl	8001174 <__NVIC_SetPriority>
}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff31 	bl	8001138 <__NVIC_EnableIRQ>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ffa2 	bl	8001230 <SysTick_Config>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e098      	b.n	800143c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	4b4d      	ldr	r3, [pc, #308]	; (8001448 <HAL_DMA_Init+0x150>)
 8001312:	429a      	cmp	r2, r3
 8001314:	d80f      	bhi.n	8001336 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	4b4b      	ldr	r3, [pc, #300]	; (800144c <HAL_DMA_Init+0x154>)
 800131e:	4413      	add	r3, r2
 8001320:	4a4b      	ldr	r2, [pc, #300]	; (8001450 <HAL_DMA_Init+0x158>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	091b      	lsrs	r3, r3, #4
 8001328:	009a      	lsls	r2, r3, #2
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a48      	ldr	r2, [pc, #288]	; (8001454 <HAL_DMA_Init+0x15c>)
 8001332:	641a      	str	r2, [r3, #64]	; 0x40
 8001334:	e00e      	b.n	8001354 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	4b46      	ldr	r3, [pc, #280]	; (8001458 <HAL_DMA_Init+0x160>)
 800133e:	4413      	add	r3, r2
 8001340:	4a43      	ldr	r2, [pc, #268]	; (8001450 <HAL_DMA_Init+0x158>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	091b      	lsrs	r3, r3, #4
 8001348:	009a      	lsls	r2, r3, #2
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a42      	ldr	r2, [pc, #264]	; (800145c <HAL_DMA_Init+0x164>)
 8001352:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2202      	movs	r2, #2
 8001358:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800136a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800136e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001378:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001384:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001390:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	4313      	orrs	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013ae:	d039      	beq.n	8001424 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	4a27      	ldr	r2, [pc, #156]	; (8001454 <HAL_DMA_Init+0x15c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d11a      	bne.n	80013f0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80013ba:	4b29      	ldr	r3, [pc, #164]	; (8001460 <HAL_DMA_Init+0x168>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	f003 031c 	and.w	r3, r3, #28
 80013c6:	210f      	movs	r1, #15
 80013c8:	fa01 f303 	lsl.w	r3, r1, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	4924      	ldr	r1, [pc, #144]	; (8001460 <HAL_DMA_Init+0x168>)
 80013d0:	4013      	ands	r3, r2
 80013d2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80013d4:	4b22      	ldr	r3, [pc, #136]	; (8001460 <HAL_DMA_Init+0x168>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6859      	ldr	r1, [r3, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e0:	f003 031c 	and.w	r3, r3, #28
 80013e4:	fa01 f303 	lsl.w	r3, r1, r3
 80013e8:	491d      	ldr	r1, [pc, #116]	; (8001460 <HAL_DMA_Init+0x168>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	600b      	str	r3, [r1, #0]
 80013ee:	e019      	b.n	8001424 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80013f0:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <HAL_DMA_Init+0x16c>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f8:	f003 031c 	and.w	r3, r3, #28
 80013fc:	210f      	movs	r1, #15
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	4917      	ldr	r1, [pc, #92]	; (8001464 <HAL_DMA_Init+0x16c>)
 8001406:	4013      	ands	r3, r2
 8001408:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <HAL_DMA_Init+0x16c>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6859      	ldr	r1, [r3, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f003 031c 	and.w	r3, r3, #28
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	4911      	ldr	r1, [pc, #68]	; (8001464 <HAL_DMA_Init+0x16c>)
 8001420:	4313      	orrs	r3, r2
 8001422:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	40020407 	.word	0x40020407
 800144c:	bffdfff8 	.word	0xbffdfff8
 8001450:	cccccccd 	.word	0xcccccccd
 8001454:	40020000 	.word	0x40020000
 8001458:	bffdfbf8 	.word	0xbffdfbf8
 800145c:	40020400 	.word	0x40020400
 8001460:	400200a8 	.word	0x400200a8
 8001464:	400204a8 	.word	0x400204a8

08001468 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001480:	2b01      	cmp	r3, #1
 8001482:	d101      	bne.n	8001488 <HAL_DMA_Start_IT+0x20>
 8001484:	2302      	movs	r3, #2
 8001486:	e04b      	b.n	8001520 <HAL_DMA_Start_IT+0xb8>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b01      	cmp	r3, #1
 800149a:	d13a      	bne.n	8001512 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2202      	movs	r2, #2
 80014a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2200      	movs	r2, #0
 80014a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 0201 	bic.w	r2, r2, #1
 80014b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	68b9      	ldr	r1, [r7, #8]
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f000 f96b 	bl	800179c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d008      	beq.n	80014e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f042 020e 	orr.w	r2, r2, #14
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	e00f      	b.n	8001500 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0204 	bic.w	r2, r2, #4
 80014ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 020a 	orr.w	r2, r2, #10
 80014fe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	e005      	b.n	800151e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800151a:	2302      	movs	r3, #2
 800151c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800151e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d008      	beq.n	8001552 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2204      	movs	r2, #4
 8001544:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e022      	b.n	8001598 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 020e 	bic.w	r2, r2, #14
 8001560:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 0201 	bic.w	r2, r2, #1
 8001570:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	f003 021c 	and.w	r2, r3, #28
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	2101      	movs	r1, #1
 8001580:	fa01 f202 	lsl.w	r2, r1, r2
 8001584:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001596:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001598:	4618      	mov	r0, r3
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d005      	beq.n	80015c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2204      	movs	r2, #4
 80015c0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	73fb      	strb	r3, [r7, #15]
 80015c6:	e029      	b.n	800161c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 020e 	bic.w	r2, r2, #14
 80015d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0201 	bic.w	r2, r2, #1
 80015e6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ec:	f003 021c 	and.w	r2, r3, #28
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	2101      	movs	r1, #1
 80015f6:	fa01 f202 	lsl.w	r2, r1, r2
 80015fa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	4798      	blx	r3
    }
  }
  return status;
 800161c:	7bfb      	ldrb	r3, [r7, #15]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b084      	sub	sp, #16
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	f003 031c 	and.w	r3, r3, #28
 8001646:	2204      	movs	r2, #4
 8001648:	409a      	lsls	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4013      	ands	r3, r2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d026      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x7a>
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	d021      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0320 	and.w	r3, r3, #32
 8001666:	2b00      	cmp	r3, #0
 8001668:	d107      	bne.n	800167a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0204 	bic.w	r2, r2, #4
 8001678:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	f003 021c 	and.w	r2, r3, #28
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	2104      	movs	r1, #4
 8001688:	fa01 f202 	lsl.w	r2, r1, r2
 800168c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	2b00      	cmp	r3, #0
 8001694:	d071      	beq.n	800177a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800169e:	e06c      	b.n	800177a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a4:	f003 031c 	and.w	r3, r3, #28
 80016a8:	2202      	movs	r2, #2
 80016aa:	409a      	lsls	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d02e      	beq.n	8001712 <HAL_DMA_IRQHandler+0xec>
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d029      	beq.n	8001712 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0320 	and.w	r3, r3, #32
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10b      	bne.n	80016e4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 020a 	bic.w	r2, r2, #10
 80016da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e8:	f003 021c 	and.w	r2, r3, #28
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	2102      	movs	r1, #2
 80016f2:	fa01 f202 	lsl.w	r2, r1, r2
 80016f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	2b00      	cmp	r3, #0
 8001706:	d038      	beq.n	800177a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001710:	e033      	b.n	800177a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f003 031c 	and.w	r3, r3, #28
 800171a:	2208      	movs	r2, #8
 800171c:	409a      	lsls	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4013      	ands	r3, r2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d02a      	beq.n	800177c <HAL_DMA_IRQHandler+0x156>
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	d025      	beq.n	800177c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 020e 	bic.w	r2, r2, #14
 800173e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001744:	f003 021c 	and.w	r2, r3, #28
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	2101      	movs	r1, #1
 800174e:	fa01 f202 	lsl.w	r2, r1, r2
 8001752:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176e:	2b00      	cmp	r3, #0
 8001770:	d004      	beq.n	800177c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800177a:	bf00      	nop
 800177c:	bf00      	nop
}
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
 80017a8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f003 021c 	and.w	r2, r3, #28
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	2101      	movs	r1, #1
 80017b8:	fa01 f202 	lsl.w	r2, r1, r2
 80017bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b10      	cmp	r3, #16
 80017cc:	d108      	bne.n	80017e0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017de:	e007      	b.n	80017f0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	60da      	str	r2, [r3, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b087      	sub	sp, #28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180a:	e17f      	b.n	8001b0c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	2101      	movs	r1, #1
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	fa01 f303 	lsl.w	r3, r1, r3
 8001818:	4013      	ands	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 8171 	beq.w	8001b06 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d00b      	beq.n	8001844 <HAL_GPIO_Init+0x48>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b02      	cmp	r3, #2
 8001832:	d007      	beq.n	8001844 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001838:	2b11      	cmp	r3, #17
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b12      	cmp	r3, #18
 8001842:	d130      	bne.n	80018a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	2203      	movs	r2, #3
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	68da      	ldr	r2, [r3, #12]
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800187a:	2201      	movs	r2, #1
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	091b      	lsrs	r3, r3, #4
 8001890:	f003 0201 	and.w	r2, r3, #1
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d118      	bne.n	80018e4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018b8:	2201      	movs	r2, #1
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	08db      	lsrs	r3, r3, #3
 80018ce:	f003 0201 	and.w	r2, r3, #1
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4313      	orrs	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b02      	cmp	r3, #2
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x128>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b12      	cmp	r3, #18
 8001922:	d123      	bne.n	800196c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	08da      	lsrs	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3208      	adds	r2, #8
 800192c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	220f      	movs	r2, #15
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	08da      	lsrs	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3208      	adds	r2, #8
 8001966:	6939      	ldr	r1, [r7, #16]
 8001968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0203 	and.w	r2, r3, #3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80ac 	beq.w	8001b06 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	4b5f      	ldr	r3, [pc, #380]	; (8001b2c <HAL_GPIO_Init+0x330>)
 80019b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b2:	4a5e      	ldr	r2, [pc, #376]	; (8001b2c <HAL_GPIO_Init+0x330>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6613      	str	r3, [r2, #96]	; 0x60
 80019ba:	4b5c      	ldr	r3, [pc, #368]	; (8001b2c <HAL_GPIO_Init+0x330>)
 80019bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019c6:	4a5a      	ldr	r2, [pc, #360]	; (8001b30 <HAL_GPIO_Init+0x334>)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	089b      	lsrs	r3, r3, #2
 80019cc:	3302      	adds	r3, #2
 80019ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	220f      	movs	r2, #15
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019f0:	d025      	beq.n	8001a3e <HAL_GPIO_Init+0x242>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4f      	ldr	r2, [pc, #316]	; (8001b34 <HAL_GPIO_Init+0x338>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d01f      	beq.n	8001a3a <HAL_GPIO_Init+0x23e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4e      	ldr	r2, [pc, #312]	; (8001b38 <HAL_GPIO_Init+0x33c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d019      	beq.n	8001a36 <HAL_GPIO_Init+0x23a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4d      	ldr	r2, [pc, #308]	; (8001b3c <HAL_GPIO_Init+0x340>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d013      	beq.n	8001a32 <HAL_GPIO_Init+0x236>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a4c      	ldr	r2, [pc, #304]	; (8001b40 <HAL_GPIO_Init+0x344>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d00d      	beq.n	8001a2e <HAL_GPIO_Init+0x232>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4b      	ldr	r2, [pc, #300]	; (8001b44 <HAL_GPIO_Init+0x348>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d007      	beq.n	8001a2a <HAL_GPIO_Init+0x22e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a4a      	ldr	r2, [pc, #296]	; (8001b48 <HAL_GPIO_Init+0x34c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d101      	bne.n	8001a26 <HAL_GPIO_Init+0x22a>
 8001a22:	2306      	movs	r3, #6
 8001a24:	e00c      	b.n	8001a40 <HAL_GPIO_Init+0x244>
 8001a26:	2307      	movs	r3, #7
 8001a28:	e00a      	b.n	8001a40 <HAL_GPIO_Init+0x244>
 8001a2a:	2305      	movs	r3, #5
 8001a2c:	e008      	b.n	8001a40 <HAL_GPIO_Init+0x244>
 8001a2e:	2304      	movs	r3, #4
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x244>
 8001a32:	2303      	movs	r3, #3
 8001a34:	e004      	b.n	8001a40 <HAL_GPIO_Init+0x244>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e002      	b.n	8001a40 <HAL_GPIO_Init+0x244>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <HAL_GPIO_Init+0x244>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	f002 0203 	and.w	r2, r2, #3
 8001a46:	0092      	lsls	r2, r2, #2
 8001a48:	4093      	lsls	r3, r2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a50:	4937      	ldr	r1, [pc, #220]	; (8001b30 <HAL_GPIO_Init+0x334>)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	089b      	lsrs	r3, r3, #2
 8001a56:	3302      	adds	r3, #2
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a5e:	4b3b      	ldr	r3, [pc, #236]	; (8001b4c <HAL_GPIO_Init+0x350>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a82:	4a32      	ldr	r2, [pc, #200]	; (8001b4c <HAL_GPIO_Init+0x350>)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a88:	4b30      	ldr	r3, [pc, #192]	; (8001b4c <HAL_GPIO_Init+0x350>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aac:	4a27      	ldr	r2, [pc, #156]	; (8001b4c <HAL_GPIO_Init+0x350>)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ab2:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <HAL_GPIO_Init+0x350>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ad6:	4a1d      	ldr	r2, [pc, #116]	; (8001b4c <HAL_GPIO_Init+0x350>)
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <HAL_GPIO_Init+0x350>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b00:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <HAL_GPIO_Init+0x350>)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa22 f303 	lsr.w	r3, r2, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f47f ae78 	bne.w	800180c <HAL_GPIO_Init+0x10>
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	371c      	adds	r7, #28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010000 	.word	0x40010000
 8001b34:	48000400 	.word	0x48000400
 8001b38:	48000800 	.word	0x48000800
 8001b3c:	48000c00 	.word	0x48000c00
 8001b40:	48001000 	.word	0x48001000
 8001b44:	48001400 	.word	0x48001400
 8001b48:	48001800 	.word	0x48001800
 8001b4c:	40010400 	.word	0x40010400

08001b50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	887b      	ldrh	r3, [r7, #2]
 8001b62:	4013      	ands	r3, r2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
 8001b6c:	e001      	b.n	8001b72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	807b      	strh	r3, [r7, #2]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b90:	787b      	ldrb	r3, [r7, #1]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b96:	887a      	ldrh	r2, [r7, #2]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b9c:	e002      	b.n	8001ba4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b9e:	887a      	ldrh	r2, [r7, #2]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bbc:	695a      	ldr	r2, [r3, #20]
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d006      	beq.n	8001bd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bc6:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f003 fcca 	bl	8005568 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40010400 	.word	0x40010400

08001be0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40007000 	.word	0x40007000

08001bfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c0a:	d130      	bne.n	8001c6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c0c:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c18:	d038      	beq.n	8001c8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c22:	4a1e      	ldr	r2, [pc, #120]	; (8001c9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2232      	movs	r2, #50	; 0x32
 8001c30:	fb02 f303 	mul.w	r3, r2, r3
 8001c34:	4a1b      	ldr	r2, [pc, #108]	; (8001ca4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c36:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3a:	0c9b      	lsrs	r3, r3, #18
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c40:	e002      	b.n	8001c48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c54:	d102      	bne.n	8001c5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f2      	bne.n	8001c42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c68:	d110      	bne.n	8001c8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e00f      	b.n	8001c8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c7a:	d007      	beq.n	8001c8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c84:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40007000 	.word	0x40007000
 8001ca0:	20000020 	.word	0x20000020
 8001ca4:	431bde83 	.word	0x431bde83

08001ca8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e3d8      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cba:	4b97      	ldr	r3, [pc, #604]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cc4:	4b94      	ldr	r3, [pc, #592]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 80e4 	beq.w	8001ea4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d007      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x4a>
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	2b0c      	cmp	r3, #12
 8001ce6:	f040 808b 	bne.w	8001e00 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	f040 8087 	bne.w	8001e00 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cf2:	4b89      	ldr	r3, [pc, #548]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d005      	beq.n	8001d0a <HAL_RCC_OscConfig+0x62>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e3b0      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a1a      	ldr	r2, [r3, #32]
 8001d0e:	4b82      	ldr	r3, [pc, #520]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d004      	beq.n	8001d24 <HAL_RCC_OscConfig+0x7c>
 8001d1a:	4b7f      	ldr	r3, [pc, #508]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d22:	e005      	b.n	8001d30 <HAL_RCC_OscConfig+0x88>
 8001d24:	4b7c      	ldr	r3, [pc, #496]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d2a:	091b      	lsrs	r3, r3, #4
 8001d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d223      	bcs.n	8001d7c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 fd43 	bl	80027c4 <RCC_SetFlashLatencyFromMSIRange>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e391      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d48:	4b73      	ldr	r3, [pc, #460]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a72      	ldr	r2, [pc, #456]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001d4e:	f043 0308 	orr.w	r3, r3, #8
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	4b70      	ldr	r3, [pc, #448]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	496d      	ldr	r1, [pc, #436]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d66:	4b6c      	ldr	r3, [pc, #432]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	021b      	lsls	r3, r3, #8
 8001d74:	4968      	ldr	r1, [pc, #416]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	604b      	str	r3, [r1, #4]
 8001d7a:	e025      	b.n	8001dc8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d7c:	4b66      	ldr	r3, [pc, #408]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a65      	ldr	r2, [pc, #404]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001d82:	f043 0308 	orr.w	r3, r3, #8
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	4b63      	ldr	r3, [pc, #396]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	4960      	ldr	r1, [pc, #384]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d9a:	4b5f      	ldr	r3, [pc, #380]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	021b      	lsls	r3, r3, #8
 8001da8:	495b      	ldr	r1, [pc, #364]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d109      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f000 fd03 	bl	80027c4 <RCC_SetFlashLatencyFromMSIRange>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e351      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dc8:	f000 fc38 	bl	800263c <HAL_RCC_GetSysClockFreq>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4b52      	ldr	r3, [pc, #328]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	091b      	lsrs	r3, r3, #4
 8001dd4:	f003 030f 	and.w	r3, r3, #15
 8001dd8:	4950      	ldr	r1, [pc, #320]	; (8001f1c <HAL_RCC_OscConfig+0x274>)
 8001dda:	5ccb      	ldrb	r3, [r1, r3]
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
 8001de4:	4a4e      	ldr	r2, [pc, #312]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001de6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001de8:	4b4e      	ldr	r3, [pc, #312]	; (8001f24 <HAL_RCC_OscConfig+0x27c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff f8f1 	bl	8000fd4 <HAL_InitTick>
 8001df2:	4603      	mov	r3, r0
 8001df4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d052      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	e335      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d032      	beq.n	8001e6e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e08:	4b43      	ldr	r3, [pc, #268]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a42      	ldr	r2, [pc, #264]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e14:	f7ff f92e 	bl	8001074 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e1c:	f7ff f92a 	bl	8001074 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e31e      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e2e:	4b3a      	ldr	r3, [pc, #232]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e3a:	4b37      	ldr	r3, [pc, #220]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a36      	ldr	r2, [pc, #216]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001e40:	f043 0308 	orr.w	r3, r3, #8
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	4b34      	ldr	r3, [pc, #208]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	4931      	ldr	r1, [pc, #196]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e58:	4b2f      	ldr	r3, [pc, #188]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	021b      	lsls	r3, r3, #8
 8001e66:	492c      	ldr	r1, [pc, #176]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]
 8001e6c:	e01a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e6e:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a29      	ldr	r2, [pc, #164]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e7a:	f7ff f8fb 	bl	8001074 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e82:	f7ff f8f7 	bl	8001074 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e2eb      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e94:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f0      	bne.n	8001e82 <HAL_RCC_OscConfig+0x1da>
 8001ea0:	e000      	b.n	8001ea4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ea2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d074      	beq.n	8001f9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d005      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x21a>
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	2b0c      	cmp	r3, #12
 8001eba:	d10e      	bne.n	8001eda <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d10b      	bne.n	8001eda <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d064      	beq.n	8001f98 <HAL_RCC_OscConfig+0x2f0>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d160      	bne.n	8001f98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e2c8      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x24a>
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	e026      	b.n	8001f40 <HAL_RCC_OscConfig+0x298>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001efa:	d115      	bne.n	8001f28 <HAL_RCC_OscConfig+0x280>
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001f02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a02      	ldr	r2, [pc, #8]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	e014      	b.n	8001f40 <HAL_RCC_OscConfig+0x298>
 8001f16:	bf00      	nop
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	08011c0c 	.word	0x08011c0c
 8001f20:	20000020 	.word	0x20000020
 8001f24:	20000000 	.word	0x20000000
 8001f28:	4ba0      	ldr	r3, [pc, #640]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a9f      	ldr	r2, [pc, #636]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 8001f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	4b9d      	ldr	r3, [pc, #628]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a9c      	ldr	r2, [pc, #624]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 8001f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d013      	beq.n	8001f70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7ff f894 	bl	8001074 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f50:	f7ff f890 	bl	8001074 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b64      	cmp	r3, #100	; 0x64
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e284      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f62:	4b92      	ldr	r3, [pc, #584]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x2a8>
 8001f6e:	e014      	b.n	8001f9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7ff f880 	bl	8001074 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f78:	f7ff f87c 	bl	8001074 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b64      	cmp	r3, #100	; 0x64
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e270      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f8a:	4b88      	ldr	r3, [pc, #544]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x2d0>
 8001f96:	e000      	b.n	8001f9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d060      	beq.n	8002068 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d005      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x310>
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2b0c      	cmp	r3, #12
 8001fb0:	d119      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d116      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fb8:	4b7c      	ldr	r3, [pc, #496]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x328>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e24d      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd0:	4b76      	ldr	r3, [pc, #472]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	061b      	lsls	r3, r3, #24
 8001fde:	4973      	ldr	r1, [pc, #460]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fe4:	e040      	b.n	8002068 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d023      	beq.n	8002036 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fee:	4b6f      	ldr	r3, [pc, #444]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a6e      	ldr	r2, [pc, #440]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 8001ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffa:	f7ff f83b 	bl	8001074 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002002:	f7ff f837 	bl	8001074 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e22b      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002014:	4b65      	ldr	r3, [pc, #404]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f0      	beq.n	8002002 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002020:	4b62      	ldr	r3, [pc, #392]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	061b      	lsls	r3, r3, #24
 800202e:	495f      	ldr	r1, [pc, #380]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 8002030:	4313      	orrs	r3, r2
 8002032:	604b      	str	r3, [r1, #4]
 8002034:	e018      	b.n	8002068 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002036:	4b5d      	ldr	r3, [pc, #372]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a5c      	ldr	r2, [pc, #368]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 800203c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002042:	f7ff f817 	bl	8001074 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800204a:	f7ff f813 	bl	8001074 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e207      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800205c:	4b53      	ldr	r3, [pc, #332]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f0      	bne.n	800204a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b00      	cmp	r3, #0
 8002072:	d03c      	beq.n	80020ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d01c      	beq.n	80020b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800207c:	4b4b      	ldr	r3, [pc, #300]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 800207e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002082:	4a4a      	ldr	r2, [pc, #296]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208c:	f7fe fff2 	bl	8001074 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002094:	f7fe ffee 	bl	8001074 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e1e2      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020a6:	4b41      	ldr	r3, [pc, #260]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 80020a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0ef      	beq.n	8002094 <HAL_RCC_OscConfig+0x3ec>
 80020b4:	e01b      	b.n	80020ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b6:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 80020b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020bc:	4a3b      	ldr	r2, [pc, #236]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 80020be:	f023 0301 	bic.w	r3, r3, #1
 80020c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c6:	f7fe ffd5 	bl	8001074 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ce:	f7fe ffd1 	bl	8001074 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e1c5      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020e0:	4b32      	ldr	r3, [pc, #200]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 80020e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1ef      	bne.n	80020ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 80a6 	beq.w	8002248 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020fc:	2300      	movs	r3, #0
 80020fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002100:	4b2a      	ldr	r3, [pc, #168]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 8002102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10d      	bne.n	8002128 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800210c:	4b27      	ldr	r3, [pc, #156]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 800210e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002110:	4a26      	ldr	r2, [pc, #152]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 8002112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002116:	6593      	str	r3, [r2, #88]	; 0x58
 8002118:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 800211a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002124:	2301      	movs	r3, #1
 8002126:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002128:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <HAL_RCC_OscConfig+0x508>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d118      	bne.n	8002166 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002134:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <HAL_RCC_OscConfig+0x508>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a1d      	ldr	r2, [pc, #116]	; (80021b0 <HAL_RCC_OscConfig+0x508>)
 800213a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002140:	f7fe ff98 	bl	8001074 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002148:	f7fe ff94 	bl	8001074 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e188      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <HAL_RCC_OscConfig+0x508>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d108      	bne.n	8002180 <HAL_RCC_OscConfig+0x4d8>
 800216e:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 8002170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002174:	4a0d      	ldr	r2, [pc, #52]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800217e:	e029      	b.n	80021d4 <HAL_RCC_OscConfig+0x52c>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2b05      	cmp	r3, #5
 8002186:	d115      	bne.n	80021b4 <HAL_RCC_OscConfig+0x50c>
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218e:	4a07      	ldr	r2, [pc, #28]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002198:	4b04      	ldr	r3, [pc, #16]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 800219a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219e:	4a03      	ldr	r2, [pc, #12]	; (80021ac <HAL_RCC_OscConfig+0x504>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021a8:	e014      	b.n	80021d4 <HAL_RCC_OscConfig+0x52c>
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40007000 	.word	0x40007000
 80021b4:	4b91      	ldr	r3, [pc, #580]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 80021b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ba:	4a90      	ldr	r2, [pc, #576]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 80021bc:	f023 0301 	bic.w	r3, r3, #1
 80021c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021c4:	4b8d      	ldr	r3, [pc, #564]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 80021c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ca:	4a8c      	ldr	r2, [pc, #560]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 80021cc:	f023 0304 	bic.w	r3, r3, #4
 80021d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d016      	beq.n	800220a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021dc:	f7fe ff4a 	bl	8001074 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e4:	f7fe ff46 	bl	8001074 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e138      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021fa:	4b80      	ldr	r3, [pc, #512]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 80021fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0ed      	beq.n	80021e4 <HAL_RCC_OscConfig+0x53c>
 8002208:	e015      	b.n	8002236 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220a:	f7fe ff33 	bl	8001074 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002210:	e00a      	b.n	8002228 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002212:	f7fe ff2f 	bl	8001074 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e121      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002228:	4b74      	ldr	r3, [pc, #464]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 800222a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1ed      	bne.n	8002212 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002236:	7ffb      	ldrb	r3, [r7, #31]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d105      	bne.n	8002248 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800223c:	4b6f      	ldr	r3, [pc, #444]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 800223e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002240:	4a6e      	ldr	r2, [pc, #440]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 8002242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002246:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 810c 	beq.w	800246a <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002256:	2b02      	cmp	r3, #2
 8002258:	f040 80d4 	bne.w	8002404 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800225c:	4b67      	ldr	r3, [pc, #412]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f003 0203 	and.w	r2, r3, #3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226c:	429a      	cmp	r2, r3
 800226e:	d130      	bne.n	80022d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	3b01      	subs	r3, #1
 800227c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800227e:	429a      	cmp	r2, r3
 8002280:	d127      	bne.n	80022d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800228e:	429a      	cmp	r2, r3
 8002290:	d11f      	bne.n	80022d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800229c:	2a07      	cmp	r2, #7
 800229e:	bf14      	ite	ne
 80022a0:	2201      	movne	r2, #1
 80022a2:	2200      	moveq	r2, #0
 80022a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d113      	bne.n	80022d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b4:	085b      	lsrs	r3, r3, #1
 80022b6:	3b01      	subs	r3, #1
 80022b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d109      	bne.n	80022d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	085b      	lsrs	r3, r3, #1
 80022ca:	3b01      	subs	r3, #1
 80022cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d06e      	beq.n	80023b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	2b0c      	cmp	r3, #12
 80022d6:	d069      	beq.n	80023ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022d8:	4b48      	ldr	r3, [pc, #288]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d105      	bne.n	80022f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022e4:	4b45      	ldr	r3, [pc, #276]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0bb      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022f4:	4b41      	ldr	r3, [pc, #260]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a40      	ldr	r2, [pc, #256]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 80022fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002300:	f7fe feb8 	bl	8001074 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002308:	f7fe feb4 	bl	8001074 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e0a8      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800231a:	4b38      	ldr	r3, [pc, #224]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002326:	4b35      	ldr	r3, [pc, #212]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	4b35      	ldr	r3, [pc, #212]	; (8002400 <HAL_RCC_OscConfig+0x758>)
 800232c:	4013      	ands	r3, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002336:	3a01      	subs	r2, #1
 8002338:	0112      	lsls	r2, r2, #4
 800233a:	4311      	orrs	r1, r2
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002340:	0212      	lsls	r2, r2, #8
 8002342:	4311      	orrs	r1, r2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002348:	0852      	lsrs	r2, r2, #1
 800234a:	3a01      	subs	r2, #1
 800234c:	0552      	lsls	r2, r2, #21
 800234e:	4311      	orrs	r1, r2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002354:	0852      	lsrs	r2, r2, #1
 8002356:	3a01      	subs	r2, #1
 8002358:	0652      	lsls	r2, r2, #25
 800235a:	4311      	orrs	r1, r2
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002360:	0912      	lsrs	r2, r2, #4
 8002362:	0452      	lsls	r2, r2, #17
 8002364:	430a      	orrs	r2, r1
 8002366:	4925      	ldr	r1, [pc, #148]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 8002368:	4313      	orrs	r3, r2
 800236a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800236c:	4b23      	ldr	r3, [pc, #140]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a22      	ldr	r2, [pc, #136]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 8002372:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002376:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002378:	4b20      	ldr	r3, [pc, #128]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	4a1f      	ldr	r2, [pc, #124]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 800237e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002382:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002384:	f7fe fe76 	bl	8001074 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238c:	f7fe fe72 	bl	8001074 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e066      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800239e:	4b17      	ldr	r3, [pc, #92]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023aa:	e05e      	b.n	800246a <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e05d      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b0:	4b12      	ldr	r3, [pc, #72]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d156      	bne.n	800246a <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023bc:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0e      	ldr	r2, [pc, #56]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 80023c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4a0b      	ldr	r2, [pc, #44]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 80023ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023d4:	f7fe fe4e 	bl	8001074 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023dc:	f7fe fe4a 	bl	8001074 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e03e      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ee:	4b03      	ldr	r3, [pc, #12]	; (80023fc <HAL_RCC_OscConfig+0x754>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x734>
 80023fa:	e036      	b.n	800246a <HAL_RCC_OscConfig+0x7c2>
 80023fc:	40021000 	.word	0x40021000
 8002400:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	2b0c      	cmp	r3, #12
 8002408:	d02d      	beq.n	8002466 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240a:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <HAL_RCC_OscConfig+0x7cc>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a19      	ldr	r2, [pc, #100]	; (8002474 <HAL_RCC_OscConfig+0x7cc>)
 8002410:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002414:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002416:	4b17      	ldr	r3, [pc, #92]	; (8002474 <HAL_RCC_OscConfig+0x7cc>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d105      	bne.n	800242e <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002422:	4b14      	ldr	r3, [pc, #80]	; (8002474 <HAL_RCC_OscConfig+0x7cc>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	4a13      	ldr	r2, [pc, #76]	; (8002474 <HAL_RCC_OscConfig+0x7cc>)
 8002428:	f023 0303 	bic.w	r3, r3, #3
 800242c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <HAL_RCC_OscConfig+0x7cc>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	4a10      	ldr	r2, [pc, #64]	; (8002474 <HAL_RCC_OscConfig+0x7cc>)
 8002434:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800243c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243e:	f7fe fe19 	bl	8001074 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002446:	f7fe fe15 	bl	8001074 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e009      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_RCC_OscConfig+0x7cc>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f0      	bne.n	8002446 <HAL_RCC_OscConfig+0x79e>
 8002464:	e001      	b.n	800246a <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3720      	adds	r7, #32
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021000 	.word	0x40021000

08002478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0c8      	b.n	800261e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800248c:	4b66      	ldr	r3, [pc, #408]	; (8002628 <HAL_RCC_ClockConfig+0x1b0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d910      	bls.n	80024bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b63      	ldr	r3, [pc, #396]	; (8002628 <HAL_RCC_ClockConfig+0x1b0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 0207 	bic.w	r2, r3, #7
 80024a2:	4961      	ldr	r1, [pc, #388]	; (8002628 <HAL_RCC_ClockConfig+0x1b0>)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b5f      	ldr	r3, [pc, #380]	; (8002628 <HAL_RCC_ClockConfig+0x1b0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0b0      	b.n	800261e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d04c      	beq.n	8002562 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d107      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d0:	4b56      	ldr	r3, [pc, #344]	; (800262c <HAL_RCC_ClockConfig+0x1b4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d121      	bne.n	8002520 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e09e      	b.n	800261e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d107      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024e8:	4b50      	ldr	r3, [pc, #320]	; (800262c <HAL_RCC_ClockConfig+0x1b4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d115      	bne.n	8002520 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e092      	b.n	800261e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d107      	bne.n	8002510 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002500:	4b4a      	ldr	r3, [pc, #296]	; (800262c <HAL_RCC_ClockConfig+0x1b4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d109      	bne.n	8002520 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e086      	b.n	800261e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002510:	4b46      	ldr	r3, [pc, #280]	; (800262c <HAL_RCC_ClockConfig+0x1b4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e07e      	b.n	800261e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002520:	4b42      	ldr	r3, [pc, #264]	; (800262c <HAL_RCC_ClockConfig+0x1b4>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f023 0203 	bic.w	r2, r3, #3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	493f      	ldr	r1, [pc, #252]	; (800262c <HAL_RCC_ClockConfig+0x1b4>)
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002532:	f7fe fd9f 	bl	8001074 <HAL_GetTick>
 8002536:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002538:	e00a      	b.n	8002550 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253a:	f7fe fd9b 	bl	8001074 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	; 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e066      	b.n	800261e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002550:	4b36      	ldr	r3, [pc, #216]	; (800262c <HAL_RCC_ClockConfig+0x1b4>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 020c 	and.w	r2, r3, #12
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	429a      	cmp	r2, r3
 8002560:	d1eb      	bne.n	800253a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800256e:	4b2f      	ldr	r3, [pc, #188]	; (800262c <HAL_RCC_ClockConfig+0x1b4>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	492c      	ldr	r1, [pc, #176]	; (800262c <HAL_RCC_ClockConfig+0x1b4>)
 800257c:	4313      	orrs	r3, r2
 800257e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002580:	4b29      	ldr	r3, [pc, #164]	; (8002628 <HAL_RCC_ClockConfig+0x1b0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d210      	bcs.n	80025b0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258e:	4b26      	ldr	r3, [pc, #152]	; (8002628 <HAL_RCC_ClockConfig+0x1b0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f023 0207 	bic.w	r2, r3, #7
 8002596:	4924      	ldr	r1, [pc, #144]	; (8002628 <HAL_RCC_ClockConfig+0x1b0>)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800259e:	4b22      	ldr	r3, [pc, #136]	; (8002628 <HAL_RCC_ClockConfig+0x1b0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e036      	b.n	800261e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025bc:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_RCC_ClockConfig+0x1b4>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4918      	ldr	r1, [pc, #96]	; (800262c <HAL_RCC_ClockConfig+0x1b4>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d009      	beq.n	80025ee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025da:	4b14      	ldr	r3, [pc, #80]	; (800262c <HAL_RCC_ClockConfig+0x1b4>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4910      	ldr	r1, [pc, #64]	; (800262c <HAL_RCC_ClockConfig+0x1b4>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025ee:	f000 f825 	bl	800263c <HAL_RCC_GetSysClockFreq>
 80025f2:	4602      	mov	r2, r0
 80025f4:	4b0d      	ldr	r3, [pc, #52]	; (800262c <HAL_RCC_ClockConfig+0x1b4>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	490c      	ldr	r1, [pc, #48]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 8002600:	5ccb      	ldrb	r3, [r1, r3]
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	fa22 f303 	lsr.w	r3, r2, r3
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe fcde 	bl	8000fd4 <HAL_InitTick>
 8002618:	4603      	mov	r3, r0
 800261a:	72fb      	strb	r3, [r7, #11]

  return status;
 800261c:	7afb      	ldrb	r3, [r7, #11]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40022000 	.word	0x40022000
 800262c:	40021000 	.word	0x40021000
 8002630:	08011c0c 	.word	0x08011c0c
 8002634:	20000020 	.word	0x20000020
 8002638:	20000000 	.word	0x20000000

0800263c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800263c:	b480      	push	{r7}
 800263e:	b089      	sub	sp, #36	; 0x24
 8002640:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	2300      	movs	r3, #0
 8002648:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800264a:	4b3e      	ldr	r3, [pc, #248]	; (8002744 <HAL_RCC_GetSysClockFreq+0x108>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002654:	4b3b      	ldr	r3, [pc, #236]	; (8002744 <HAL_RCC_GetSysClockFreq+0x108>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_GetSysClockFreq+0x34>
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	2b0c      	cmp	r3, #12
 8002668:	d121      	bne.n	80026ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d11e      	bne.n	80026ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002670:	4b34      	ldr	r3, [pc, #208]	; (8002744 <HAL_RCC_GetSysClockFreq+0x108>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d107      	bne.n	800268c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800267c:	4b31      	ldr	r3, [pc, #196]	; (8002744 <HAL_RCC_GetSysClockFreq+0x108>)
 800267e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002682:	0a1b      	lsrs	r3, r3, #8
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	61fb      	str	r3, [r7, #28]
 800268a:	e005      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800268c:	4b2d      	ldr	r3, [pc, #180]	; (8002744 <HAL_RCC_GetSysClockFreq+0x108>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	091b      	lsrs	r3, r3, #4
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002698:	4a2b      	ldr	r2, [pc, #172]	; (8002748 <HAL_RCC_GetSysClockFreq+0x10c>)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10d      	bne.n	80026c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026ac:	e00a      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d102      	bne.n	80026ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026b4:	4b25      	ldr	r3, [pc, #148]	; (800274c <HAL_RCC_GetSysClockFreq+0x110>)
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	e004      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	2b08      	cmp	r3, #8
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026c0:	4b23      	ldr	r3, [pc, #140]	; (8002750 <HAL_RCC_GetSysClockFreq+0x114>)
 80026c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	2b0c      	cmp	r3, #12
 80026c8:	d134      	bne.n	8002734 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026ca:	4b1e      	ldr	r3, [pc, #120]	; (8002744 <HAL_RCC_GetSysClockFreq+0x108>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d003      	beq.n	80026e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d003      	beq.n	80026e8 <HAL_RCC_GetSysClockFreq+0xac>
 80026e0:	e005      	b.n	80026ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026e2:	4b1a      	ldr	r3, [pc, #104]	; (800274c <HAL_RCC_GetSysClockFreq+0x110>)
 80026e4:	617b      	str	r3, [r7, #20]
      break;
 80026e6:	e005      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026e8:	4b19      	ldr	r3, [pc, #100]	; (8002750 <HAL_RCC_GetSysClockFreq+0x114>)
 80026ea:	617b      	str	r3, [r7, #20]
      break;
 80026ec:	e002      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	617b      	str	r3, [r7, #20]
      break;
 80026f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026f4:	4b13      	ldr	r3, [pc, #76]	; (8002744 <HAL_RCC_GetSysClockFreq+0x108>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	3301      	adds	r3, #1
 8002700:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002702:	4b10      	ldr	r3, [pc, #64]	; (8002744 <HAL_RCC_GetSysClockFreq+0x108>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	0a1b      	lsrs	r3, r3, #8
 8002708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	fb03 f202 	mul.w	r2, r3, r2
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	fbb2 f3f3 	udiv	r3, r2, r3
 8002718:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800271a:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <HAL_RCC_GetSysClockFreq+0x108>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	0e5b      	lsrs	r3, r3, #25
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	3301      	adds	r3, #1
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002732:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002734:	69bb      	ldr	r3, [r7, #24]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3724      	adds	r7, #36	; 0x24
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40021000 	.word	0x40021000
 8002748:	08011c24 	.word	0x08011c24
 800274c:	00f42400 	.word	0x00f42400
 8002750:	007a1200 	.word	0x007a1200

08002754 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <HAL_RCC_GetHCLKFreq+0x14>)
 800275a:	681b      	ldr	r3, [r3, #0]
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	20000020 	.word	0x20000020

0800276c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002770:	f7ff fff0 	bl	8002754 <HAL_RCC_GetHCLKFreq>
 8002774:	4602      	mov	r2, r0
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	4904      	ldr	r1, [pc, #16]	; (8002794 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002782:	5ccb      	ldrb	r3, [r1, r3]
 8002784:	f003 031f 	and.w	r3, r3, #31
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000
 8002794:	08011c1c 	.word	0x08011c1c

08002798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800279c:	f7ff ffda 	bl	8002754 <HAL_RCC_GetHCLKFreq>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	0adb      	lsrs	r3, r3, #11
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	4904      	ldr	r1, [pc, #16]	; (80027c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	f003 031f 	and.w	r3, r3, #31
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021000 	.word	0x40021000
 80027c0:	08011c1c 	.word	0x08011c1c

080027c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027cc:	2300      	movs	r3, #0
 80027ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027d0:	4b2a      	ldr	r3, [pc, #168]	; (800287c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027dc:	f7ff fa00 	bl	8001be0 <HAL_PWREx_GetVoltageRange>
 80027e0:	6178      	str	r0, [r7, #20]
 80027e2:	e014      	b.n	800280e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027e4:	4b25      	ldr	r3, [pc, #148]	; (800287c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e8:	4a24      	ldr	r2, [pc, #144]	; (800287c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ee:	6593      	str	r3, [r2, #88]	; 0x58
 80027f0:	4b22      	ldr	r3, [pc, #136]	; (800287c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027fc:	f7ff f9f0 	bl	8001be0 <HAL_PWREx_GetVoltageRange>
 8002800:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002802:	4b1e      	ldr	r3, [pc, #120]	; (800287c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002806:	4a1d      	ldr	r2, [pc, #116]	; (800287c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800280c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002814:	d10b      	bne.n	800282e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b80      	cmp	r3, #128	; 0x80
 800281a:	d919      	bls.n	8002850 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2ba0      	cmp	r3, #160	; 0xa0
 8002820:	d902      	bls.n	8002828 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002822:	2302      	movs	r3, #2
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	e013      	b.n	8002850 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002828:	2301      	movs	r3, #1
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	e010      	b.n	8002850 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b80      	cmp	r3, #128	; 0x80
 8002832:	d902      	bls.n	800283a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002834:	2303      	movs	r3, #3
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	e00a      	b.n	8002850 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b80      	cmp	r3, #128	; 0x80
 800283e:	d102      	bne.n	8002846 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002840:	2302      	movs	r3, #2
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	e004      	b.n	8002850 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b70      	cmp	r3, #112	; 0x70
 800284a:	d101      	bne.n	8002850 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800284c:	2301      	movs	r3, #1
 800284e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f023 0207 	bic.w	r2, r3, #7
 8002858:	4909      	ldr	r1, [pc, #36]	; (8002880 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002860:	4b07      	ldr	r3, [pc, #28]	; (8002880 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	429a      	cmp	r2, r3
 800286c:	d001      	beq.n	8002872 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000
 8002880:	40022000 	.word	0x40022000

08002884 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800288c:	2300      	movs	r3, #0
 800288e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002890:	2300      	movs	r3, #0
 8002892:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800289c:	2b00      	cmp	r3, #0
 800289e:	d041      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028a8:	d02a      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80028aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028ae:	d824      	bhi.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028b4:	d008      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028ba:	d81e      	bhi.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00a      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80028c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028c4:	d010      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028c6:	e018      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028c8:	4b86      	ldr	r3, [pc, #536]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4a85      	ldr	r2, [pc, #532]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028d4:	e015      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3304      	adds	r3, #4
 80028da:	2100      	movs	r1, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 fabb 	bl	8002e58 <RCCEx_PLLSAI1_Config>
 80028e2:	4603      	mov	r3, r0
 80028e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028e6:	e00c      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3320      	adds	r3, #32
 80028ec:	2100      	movs	r1, #0
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fba6 	bl	8003040 <RCCEx_PLLSAI2_Config>
 80028f4:	4603      	mov	r3, r0
 80028f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028f8:	e003      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	74fb      	strb	r3, [r7, #19]
      break;
 80028fe:	e000      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002900:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002902:	7cfb      	ldrb	r3, [r7, #19]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10b      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002908:	4b76      	ldr	r3, [pc, #472]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002916:	4973      	ldr	r1, [pc, #460]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800291e:	e001      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002920:	7cfb      	ldrb	r3, [r7, #19]
 8002922:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d041      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002934:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002938:	d02a      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800293a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800293e:	d824      	bhi.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002940:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002944:	d008      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002946:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800294a:	d81e      	bhi.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002954:	d010      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002956:	e018      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002958:	4b62      	ldr	r3, [pc, #392]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	4a61      	ldr	r2, [pc, #388]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002962:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002964:	e015      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3304      	adds	r3, #4
 800296a:	2100      	movs	r1, #0
 800296c:	4618      	mov	r0, r3
 800296e:	f000 fa73 	bl	8002e58 <RCCEx_PLLSAI1_Config>
 8002972:	4603      	mov	r3, r0
 8002974:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002976:	e00c      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3320      	adds	r3, #32
 800297c:	2100      	movs	r1, #0
 800297e:	4618      	mov	r0, r3
 8002980:	f000 fb5e 	bl	8003040 <RCCEx_PLLSAI2_Config>
 8002984:	4603      	mov	r3, r0
 8002986:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002988:	e003      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	74fb      	strb	r3, [r7, #19]
      break;
 800298e:	e000      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002990:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002992:	7cfb      	ldrb	r3, [r7, #19]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10b      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002998:	4b52      	ldr	r3, [pc, #328]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029a6:	494f      	ldr	r1, [pc, #316]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029ae:	e001      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b0:	7cfb      	ldrb	r3, [r7, #19]
 80029b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80a0 	beq.w	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c2:	2300      	movs	r3, #0
 80029c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029c6:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80029d6:	2300      	movs	r3, #0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00d      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029dc:	4b41      	ldr	r3, [pc, #260]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e0:	4a40      	ldr	r2, [pc, #256]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e6:	6593      	str	r3, [r2, #88]	; 0x58
 80029e8:	4b3e      	ldr	r3, [pc, #248]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f4:	2301      	movs	r3, #1
 80029f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029f8:	4b3b      	ldr	r3, [pc, #236]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a3a      	ldr	r2, [pc, #232]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a04:	f7fe fb36 	bl	8001074 <HAL_GetTick>
 8002a08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a0a:	e009      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a0c:	f7fe fb32 	bl	8001074 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d902      	bls.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	74fb      	strb	r3, [r7, #19]
        break;
 8002a1e:	e005      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a20:	4b31      	ldr	r3, [pc, #196]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0ef      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a2c:	7cfb      	ldrb	r3, [r7, #19]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d15c      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a32:	4b2c      	ldr	r3, [pc, #176]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d01f      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d019      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a50:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a5c:	4b21      	ldr	r3, [pc, #132]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a62:	4a20      	ldr	r2, [pc, #128]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a72:	4a1c      	ldr	r2, [pc, #112]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a7c:	4a19      	ldr	r2, [pc, #100]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d016      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8e:	f7fe faf1 	bl	8001074 <HAL_GetTick>
 8002a92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a94:	e00b      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a96:	f7fe faed 	bl	8001074 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d902      	bls.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	74fb      	strb	r3, [r7, #19]
            break;
 8002aac:	e006      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aae:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0ec      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002abc:	7cfb      	ldrb	r3, [r7, #19]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10c      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ac2:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad2:	4904      	ldr	r1, [pc, #16]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ada:	e009      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002adc:	7cfb      	ldrb	r3, [r7, #19]
 8002ade:	74bb      	strb	r3, [r7, #18]
 8002ae0:	e006      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002ae2:	bf00      	nop
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aec:	7cfb      	ldrb	r3, [r7, #19]
 8002aee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002af0:	7c7b      	ldrb	r3, [r7, #17]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d105      	bne.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af6:	4b9e      	ldr	r3, [pc, #632]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afa:	4a9d      	ldr	r2, [pc, #628]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b0e:	4b98      	ldr	r3, [pc, #608]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b14:	f023 0203 	bic.w	r2, r3, #3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	4994      	ldr	r1, [pc, #592]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b30:	4b8f      	ldr	r3, [pc, #572]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b36:	f023 020c 	bic.w	r2, r3, #12
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	498c      	ldr	r1, [pc, #560]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b52:	4b87      	ldr	r3, [pc, #540]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	4983      	ldr	r1, [pc, #524]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b74:	4b7e      	ldr	r3, [pc, #504]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	497b      	ldr	r1, [pc, #492]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0310 	and.w	r3, r3, #16
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b96:	4b76      	ldr	r3, [pc, #472]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba4:	4972      	ldr	r1, [pc, #456]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bb8:	4b6d      	ldr	r3, [pc, #436]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc6:	496a      	ldr	r1, [pc, #424]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bda:	4b65      	ldr	r3, [pc, #404]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be8:	4961      	ldr	r1, [pc, #388]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bfc:	4b5c      	ldr	r3, [pc, #368]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0a:	4959      	ldr	r1, [pc, #356]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c1e:	4b54      	ldr	r3, [pc, #336]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c2c:	4950      	ldr	r1, [pc, #320]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c40:	4b4b      	ldr	r3, [pc, #300]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4e:	4948      	ldr	r1, [pc, #288]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c62:	4b43      	ldr	r3, [pc, #268]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c70:	493f      	ldr	r1, [pc, #252]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d028      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c84:	4b3a      	ldr	r3, [pc, #232]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c92:	4937      	ldr	r1, [pc, #220]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ca2:	d106      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ca4:	4b32      	ldr	r3, [pc, #200]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	4a31      	ldr	r2, [pc, #196]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002caa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cae:	60d3      	str	r3, [r2, #12]
 8002cb0:	e011      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cba:	d10c      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 f8c8 	bl	8002e58 <RCCEx_PLLSAI1_Config>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ccc:	7cfb      	ldrb	r3, [r7, #19]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002cd2:	7cfb      	ldrb	r3, [r7, #19]
 8002cd4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d028      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ce2:	4b23      	ldr	r3, [pc, #140]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf0:	491f      	ldr	r1, [pc, #124]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d00:	d106      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d02:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	4a1a      	ldr	r2, [pc, #104]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d0c:	60d3      	str	r3, [r2, #12]
 8002d0e:	e011      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	2101      	movs	r1, #1
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 f899 	bl	8002e58 <RCCEx_PLLSAI1_Config>
 8002d26:	4603      	mov	r3, r0
 8002d28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d2a:	7cfb      	ldrb	r3, [r7, #19]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d30:	7cfb      	ldrb	r3, [r7, #19]
 8002d32:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d02b      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4e:	4908      	ldr	r1, [pc, #32]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d5e:	d109      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d60:	4b03      	ldr	r3, [pc, #12]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4a02      	ldr	r2, [pc, #8]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d6a:	60d3      	str	r3, [r2, #12]
 8002d6c:	e014      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3304      	adds	r3, #4
 8002d82:	2101      	movs	r1, #1
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 f867 	bl	8002e58 <RCCEx_PLLSAI1_Config>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d8e:	7cfb      	ldrb	r3, [r7, #19]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d94:	7cfb      	ldrb	r3, [r7, #19]
 8002d96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d02f      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002da4:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002daa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002db2:	4928      	ldr	r1, [pc, #160]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dc2:	d10d      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	2102      	movs	r1, #2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 f844 	bl	8002e58 <RCCEx_PLLSAI1_Config>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dd4:	7cfb      	ldrb	r3, [r7, #19]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d014      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002dda:	7cfb      	ldrb	r3, [r7, #19]
 8002ddc:	74bb      	strb	r3, [r7, #18]
 8002dde:	e011      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002de4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3320      	adds	r3, #32
 8002dee:	2102      	movs	r1, #2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 f925 	bl	8003040 <RCCEx_PLLSAI2_Config>
 8002df6:	4603      	mov	r3, r0
 8002df8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dfa:	7cfb      	ldrb	r3, [r7, #19]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e00:	7cfb      	ldrb	r3, [r7, #19]
 8002e02:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00a      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e10:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e16:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e1e:	490d      	ldr	r1, [pc, #52]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00b      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e32:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e42:	4904      	ldr	r1, [pc, #16]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e4a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40021000 	.word	0x40021000

08002e58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e66:	4b75      	ldr	r3, [pc, #468]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d018      	beq.n	8002ea4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e72:	4b72      	ldr	r3, [pc, #456]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f003 0203 	and.w	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d10d      	bne.n	8002e9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
       ||
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d009      	beq.n	8002e9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e8a:	4b6c      	ldr	r3, [pc, #432]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	091b      	lsrs	r3, r3, #4
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
       ||
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d047      	beq.n	8002f2e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
 8002ea2:	e044      	b.n	8002f2e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d018      	beq.n	8002ede <RCCEx_PLLSAI1_Config+0x86>
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d825      	bhi.n	8002efc <RCCEx_PLLSAI1_Config+0xa4>
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d002      	beq.n	8002eba <RCCEx_PLLSAI1_Config+0x62>
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d009      	beq.n	8002ecc <RCCEx_PLLSAI1_Config+0x74>
 8002eb8:	e020      	b.n	8002efc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002eba:	4b60      	ldr	r3, [pc, #384]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d11d      	bne.n	8002f02 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eca:	e01a      	b.n	8002f02 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ecc:	4b5b      	ldr	r3, [pc, #364]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d116      	bne.n	8002f06 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002edc:	e013      	b.n	8002f06 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ede:	4b57      	ldr	r3, [pc, #348]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10f      	bne.n	8002f0a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002eea:	4b54      	ldr	r3, [pc, #336]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002efa:	e006      	b.n	8002f0a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
      break;
 8002f00:	e004      	b.n	8002f0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f02:	bf00      	nop
 8002f04:	e002      	b.n	8002f0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f06:	bf00      	nop
 8002f08:	e000      	b.n	8002f0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10d      	bne.n	8002f2e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f12:	4b4a      	ldr	r3, [pc, #296]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6819      	ldr	r1, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	430b      	orrs	r3, r1
 8002f28:	4944      	ldr	r1, [pc, #272]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d17d      	bne.n	8003030 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f34:	4b41      	ldr	r3, [pc, #260]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a40      	ldr	r2, [pc, #256]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f40:	f7fe f898 	bl	8001074 <HAL_GetTick>
 8002f44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f46:	e009      	b.n	8002f5c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f48:	f7fe f894 	bl	8001074 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d902      	bls.n	8002f5c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	73fb      	strb	r3, [r7, #15]
        break;
 8002f5a:	e005      	b.n	8002f68 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f5c:	4b37      	ldr	r3, [pc, #220]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1ef      	bne.n	8002f48 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d160      	bne.n	8003030 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d111      	bne.n	8002f98 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f74:	4b31      	ldr	r3, [pc, #196]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6892      	ldr	r2, [r2, #8]
 8002f84:	0211      	lsls	r1, r2, #8
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68d2      	ldr	r2, [r2, #12]
 8002f8a:	0912      	lsrs	r2, r2, #4
 8002f8c:	0452      	lsls	r2, r2, #17
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	492a      	ldr	r1, [pc, #168]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	610b      	str	r3, [r1, #16]
 8002f96:	e027      	b.n	8002fe8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d112      	bne.n	8002fc4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f9e:	4b27      	ldr	r3, [pc, #156]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002fa6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6892      	ldr	r2, [r2, #8]
 8002fae:	0211      	lsls	r1, r2, #8
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6912      	ldr	r2, [r2, #16]
 8002fb4:	0852      	lsrs	r2, r2, #1
 8002fb6:	3a01      	subs	r2, #1
 8002fb8:	0552      	lsls	r2, r2, #21
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	491f      	ldr	r1, [pc, #124]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	610b      	str	r3, [r1, #16]
 8002fc2:	e011      	b.n	8002fe8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fcc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6892      	ldr	r2, [r2, #8]
 8002fd4:	0211      	lsls	r1, r2, #8
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6952      	ldr	r2, [r2, #20]
 8002fda:	0852      	lsrs	r2, r2, #1
 8002fdc:	3a01      	subs	r2, #1
 8002fde:	0652      	lsls	r2, r2, #25
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	4916      	ldr	r1, [pc, #88]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002fe8:	4b14      	ldr	r3, [pc, #80]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a13      	ldr	r2, [pc, #76]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ff2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff4:	f7fe f83e 	bl	8001074 <HAL_GetTick>
 8002ff8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ffa:	e009      	b.n	8003010 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ffc:	f7fe f83a 	bl	8001074 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d902      	bls.n	8003010 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	73fb      	strb	r3, [r7, #15]
          break;
 800300e:	e005      	b.n	800301c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0ef      	beq.n	8002ffc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003024:	691a      	ldr	r2, [r3, #16]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	4904      	ldr	r1, [pc, #16]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 800302c:	4313      	orrs	r3, r2
 800302e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003030:	7bfb      	ldrb	r3, [r7, #15]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000

08003040 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800304e:	4b6a      	ldr	r3, [pc, #424]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d018      	beq.n	800308c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800305a:	4b67      	ldr	r3, [pc, #412]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f003 0203 	and.w	r2, r3, #3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d10d      	bne.n	8003086 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
       ||
 800306e:	2b00      	cmp	r3, #0
 8003070:	d009      	beq.n	8003086 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003072:	4b61      	ldr	r3, [pc, #388]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	091b      	lsrs	r3, r3, #4
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
       ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d047      	beq.n	8003116 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	73fb      	strb	r3, [r7, #15]
 800308a:	e044      	b.n	8003116 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b03      	cmp	r3, #3
 8003092:	d018      	beq.n	80030c6 <RCCEx_PLLSAI2_Config+0x86>
 8003094:	2b03      	cmp	r3, #3
 8003096:	d825      	bhi.n	80030e4 <RCCEx_PLLSAI2_Config+0xa4>
 8003098:	2b01      	cmp	r3, #1
 800309a:	d002      	beq.n	80030a2 <RCCEx_PLLSAI2_Config+0x62>
 800309c:	2b02      	cmp	r3, #2
 800309e:	d009      	beq.n	80030b4 <RCCEx_PLLSAI2_Config+0x74>
 80030a0:	e020      	b.n	80030e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030a2:	4b55      	ldr	r3, [pc, #340]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d11d      	bne.n	80030ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b2:	e01a      	b.n	80030ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030b4:	4b50      	ldr	r3, [pc, #320]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d116      	bne.n	80030ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c4:	e013      	b.n	80030ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030c6:	4b4c      	ldr	r3, [pc, #304]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10f      	bne.n	80030f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030d2:	4b49      	ldr	r3, [pc, #292]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030e2:	e006      	b.n	80030f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
      break;
 80030e8:	e004      	b.n	80030f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030ea:	bf00      	nop
 80030ec:	e002      	b.n	80030f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030ee:	bf00      	nop
 80030f0:	e000      	b.n	80030f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10d      	bne.n	8003116 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030fa:	4b3f      	ldr	r3, [pc, #252]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6819      	ldr	r1, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	3b01      	subs	r3, #1
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	430b      	orrs	r3, r1
 8003110:	4939      	ldr	r1, [pc, #228]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003112:	4313      	orrs	r3, r2
 8003114:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d167      	bne.n	80031ec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800311c:	4b36      	ldr	r3, [pc, #216]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a35      	ldr	r2, [pc, #212]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003126:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003128:	f7fd ffa4 	bl	8001074 <HAL_GetTick>
 800312c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800312e:	e009      	b.n	8003144 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003130:	f7fd ffa0 	bl	8001074 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d902      	bls.n	8003144 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	73fb      	strb	r3, [r7, #15]
        break;
 8003142:	e005      	b.n	8003150 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003144:	4b2c      	ldr	r3, [pc, #176]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1ef      	bne.n	8003130 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d14a      	bne.n	80031ec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d111      	bne.n	8003180 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800315c:	4b26      	ldr	r3, [pc, #152]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6892      	ldr	r2, [r2, #8]
 800316c:	0211      	lsls	r1, r2, #8
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	68d2      	ldr	r2, [r2, #12]
 8003172:	0912      	lsrs	r2, r2, #4
 8003174:	0452      	lsls	r2, r2, #17
 8003176:	430a      	orrs	r2, r1
 8003178:	491f      	ldr	r1, [pc, #124]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800317a:	4313      	orrs	r3, r2
 800317c:	614b      	str	r3, [r1, #20]
 800317e:	e011      	b.n	80031a4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003180:	4b1d      	ldr	r3, [pc, #116]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003188:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6892      	ldr	r2, [r2, #8]
 8003190:	0211      	lsls	r1, r2, #8
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6912      	ldr	r2, [r2, #16]
 8003196:	0852      	lsrs	r2, r2, #1
 8003198:	3a01      	subs	r2, #1
 800319a:	0652      	lsls	r2, r2, #25
 800319c:	430a      	orrs	r2, r1
 800319e:	4916      	ldr	r1, [pc, #88]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031a4:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a13      	ldr	r2, [pc, #76]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b0:	f7fd ff60 	bl	8001074 <HAL_GetTick>
 80031b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031b6:	e009      	b.n	80031cc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031b8:	f7fd ff5c 	bl	8001074 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d902      	bls.n	80031cc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	73fb      	strb	r3, [r7, #15]
          break;
 80031ca:	e005      	b.n	80031d8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031cc:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0ef      	beq.n	80031b8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031de:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	4904      	ldr	r1, [pc, #16]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40021000 	.word	0x40021000

080031fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e095      	b.n	800333a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	2b00      	cmp	r3, #0
 8003214:	d108      	bne.n	8003228 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800321e:	d009      	beq.n	8003234 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	61da      	str	r2, [r3, #28]
 8003226:	e005      	b.n	8003234 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d106      	bne.n	8003254 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f002 fd2e 	bl	8005cb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800326a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003274:	d902      	bls.n	800327c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	e002      	b.n	8003282 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800327c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003280:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800328a:	d007      	beq.n	800329c <HAL_SPI_Init+0xa0>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003294:	d002      	beq.n	800329c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032d4:	431a      	orrs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032de:	ea42 0103 	orr.w	r1, r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	0c1b      	lsrs	r3, r3, #16
 80032f8:	f003 0204 	and.w	r2, r3, #4
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	f003 0310 	and.w	r3, r3, #16
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003318:	ea42 0103 	orr.w	r1, r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003360:	2302      	movs	r3, #2
 8003362:	e16c      	b.n	800363e <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003372:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800337a:	7dbb      	ldrb	r3, [r7, #22]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d00d      	beq.n	800339c <HAL_SPI_TransmitReceive_DMA+0x58>
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003386:	d106      	bne.n	8003396 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d102      	bne.n	8003396 <HAL_SPI_TransmitReceive_DMA+0x52>
 8003390:	7dbb      	ldrb	r3, [r7, #22]
 8003392:	2b04      	cmp	r3, #4
 8003394:	d002      	beq.n	800339c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003396:	2302      	movs	r3, #2
 8003398:	75fb      	strb	r3, [r7, #23]
    goto error;
 800339a:	e14b      	b.n	8003634 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d005      	beq.n	80033ae <HAL_SPI_TransmitReceive_DMA+0x6a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <HAL_SPI_TransmitReceive_DMA+0x6a>
 80033a8:	887b      	ldrh	r3, [r7, #2]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d102      	bne.n	80033b4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033b2:	e13f      	b.n	8003634 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d003      	beq.n	80033c8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2205      	movs	r2, #5
 80033c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	887a      	ldrh	r2, [r7, #2]
 80033d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	887a      	ldrh	r2, [r7, #2]
 80033de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	887a      	ldrh	r2, [r7, #2]
 80033ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	887a      	ldrh	r2, [r7, #2]
 80033f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8003410:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800341a:	d908      	bls.n	800342e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800342a:	605a      	str	r2, [r3, #4]
 800342c:	e06f      	b.n	800350e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800343c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003448:	d126      	bne.n	8003498 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10f      	bne.n	8003476 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003464:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800346a:	b29b      	uxth	r3, r3
 800346c:	085b      	lsrs	r3, r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003474:	e010      	b.n	8003498 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003484:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800348a:	b29b      	uxth	r3, r3
 800348c:	085b      	lsrs	r3, r3, #1
 800348e:	b29b      	uxth	r3, r3
 8003490:	3301      	adds	r3, #1
 8003492:	b29a      	uxth	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a2:	d134      	bne.n	800350e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034b2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d111      	bne.n	80034e8 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034d2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034da:	b29b      	uxth	r3, r3
 80034dc:	085b      	lsrs	r3, r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80034e6:	e012      	b.n	800350e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034f6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034fe:	b29b      	uxth	r3, r3
 8003500:	085b      	lsrs	r3, r3, #1
 8003502:	b29b      	uxth	r3, r3
 8003504:	3301      	adds	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b04      	cmp	r3, #4
 8003518:	d108      	bne.n	800352c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351e:	4a4a      	ldr	r2, [pc, #296]	; (8003648 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003526:	4a49      	ldr	r2, [pc, #292]	; (800364c <HAL_SPI_TransmitReceive_DMA+0x308>)
 8003528:	62da      	str	r2, [r3, #44]	; 0x2c
 800352a:	e007      	b.n	800353c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003530:	4a47      	ldr	r2, [pc, #284]	; (8003650 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8003532:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003538:	4a46      	ldr	r2, [pc, #280]	; (8003654 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800353a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003540:	4a45      	ldr	r2, [pc, #276]	; (8003658 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8003542:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003548:	2200      	movs	r2, #0
 800354a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	330c      	adds	r3, #12
 8003556:	4619      	mov	r1, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003564:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003566:	f7fd ff7f 	bl	8001468 <HAL_DMA_Start_IT>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00c      	beq.n	800358a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003574:	f043 0210 	orr.w	r2, r3, #16
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8003588:	e054      	b.n	8003634 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0201 	orr.w	r2, r2, #1
 8003598:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359e:	2200      	movs	r2, #0
 80035a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a6:	2200      	movs	r2, #0
 80035a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ae:	2200      	movs	r2, #0
 80035b0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	2200      	movs	r2, #0
 80035b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	4619      	mov	r1, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	330c      	adds	r3, #12
 80035ca:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80035d2:	f7fd ff49 	bl	8001468 <HAL_DMA_Start_IT>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00c      	beq.n	80035f6 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e0:	f043 0210 	orr.w	r2, r3, #16
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80035f4:	e01e      	b.n	8003634 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003600:	2b40      	cmp	r3, #64	; 0x40
 8003602:	d007      	beq.n	8003614 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003612:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0220 	orr.w	r2, r2, #32
 8003622:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0202 	orr.w	r2, r2, #2
 8003632:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800363c:	7dfb      	ldrb	r3, [r7, #23]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	080039cd 	.word	0x080039cd
 800364c:	08003895 	.word	0x08003895
 8003650:	080039e9 	.word	0x080039e9
 8003654:	0800393d 	.word	0x0800393d
 8003658:	08003a05 	.word	0x08003a05

0800365c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10e      	bne.n	800369c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003684:	2b00      	cmp	r3, #0
 8003686:	d009      	beq.n	800369c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	d004      	beq.n	800369c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	4798      	blx	r3
    return;
 800369a:	e0ce      	b.n	800383a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d009      	beq.n	80036ba <HAL_SPI_IRQHandler+0x5e>
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d004      	beq.n	80036ba <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	4798      	blx	r3
    return;
 80036b8:	e0bf      	b.n	800383a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10a      	bne.n	80036da <HAL_SPI_IRQHandler+0x7e>
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d105      	bne.n	80036da <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 80b0 	beq.w	800383a <HAL_SPI_IRQHandler+0x1de>
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80aa 	beq.w	800383a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d023      	beq.n	8003738 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d011      	beq.n	8003720 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003700:	f043 0204 	orr.w	r2, r3, #4
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003708:	2300      	movs	r3, #0
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	e00b      	b.n	8003738 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003720:	2300      	movs	r3, #0
 8003722:	613b      	str	r3, [r7, #16]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	693b      	ldr	r3, [r7, #16]
        return;
 8003736:	e080      	b.n	800383a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b00      	cmp	r3, #0
 8003740:	d014      	beq.n	800376c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003746:	f043 0201 	orr.w	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00c      	beq.n	8003790 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377a:	f043 0208 	orr.w	r2, r3, #8
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003782:	2300      	movs	r3, #0
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003794:	2b00      	cmp	r3, #0
 8003796:	d04f      	beq.n	8003838 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037a6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d104      	bne.n	80037c4 <HAL_SPI_IRQHandler+0x168>
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d034      	beq.n	800382e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0203 	bic.w	r2, r2, #3
 80037d2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d011      	beq.n	8003800 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e0:	4a17      	ldr	r2, [pc, #92]	; (8003840 <HAL_SPI_IRQHandler+0x1e4>)
 80037e2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fd fedb 	bl	80015a4 <HAL_DMA_Abort_IT>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003804:	2b00      	cmp	r3, #0
 8003806:	d016      	beq.n	8003836 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380c:	4a0c      	ldr	r2, [pc, #48]	; (8003840 <HAL_SPI_IRQHandler+0x1e4>)
 800380e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003814:	4618      	mov	r0, r3
 8003816:	f7fd fec5 	bl	80015a4 <HAL_DMA_Abort_IT>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003824:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800382c:	e003      	b.n	8003836 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f826 	bl	8003880 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003834:	e000      	b.n	8003838 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003836:	bf00      	nop
    return;
 8003838:	bf00      	nop
  }
}
 800383a:	3720      	adds	r7, #32
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	08003a45 	.word	0x08003a45

08003844 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038a2:	f7fd fbe7 	bl	8001074 <HAL_GetTick>
 80038a6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	2b20      	cmp	r3, #32
 80038b4:	d03c      	beq.n	8003930 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0220 	bic.w	r2, r2, #32
 80038c4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10d      	bne.n	80038ea <SPI_DMAReceiveCplt+0x56>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038d6:	d108      	bne.n	80038ea <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0203 	bic.w	r2, r2, #3
 80038e6:	605a      	str	r2, [r3, #4]
 80038e8:	e007      	b.n	80038fa <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0201 	bic.w	r2, r2, #1
 80038f8:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	2164      	movs	r1, #100	; 0x64
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 f9d0 	bl	8003ca4 <SPI_EndRxTransaction>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f7ff ffa9 	bl	8003880 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800392e:	e002      	b.n	8003936 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f7ff ff87 	bl	8003844 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003948:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800394a:	f7fd fb93 	bl	8001074 <HAL_GetTick>
 800394e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b20      	cmp	r3, #32
 800395c:	d030      	beq.n	80039c0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0220 	bic.w	r2, r2, #32
 800396c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	2164      	movs	r1, #100	; 0x64
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 f9ee 	bl	8003d54 <SPI_EndRxTxTransaction>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d005      	beq.n	800398a <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003982:	f043 0220 	orr.w	r2, r3, #32
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0203 	bic.w	r2, r2, #3
 8003998:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f7ff ff61 	bl	8003880 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80039be:	e002      	b.n	80039c6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f001 fbe7 	bl	8005194 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f7ff ff3c 	bl	8003858 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80039e0:	bf00      	nop
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f7ff ff38 	bl	800386c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80039fc:	bf00      	nop
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0203 	bic.w	r2, r2, #3
 8003a20:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a26:	f043 0210 	orr.w	r2, r3, #16
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f7ff ff22 	bl	8003880 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a3c:	bf00      	nop
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f7ff ff0d 	bl	8003880 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a66:	bf00      	nop
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	603b      	str	r3, [r7, #0]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a80:	f7fd faf8 	bl	8001074 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a90:	f7fd faf0 	bl	8001074 <HAL_GetTick>
 8003a94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a96:	4b39      	ldr	r3, [pc, #228]	; (8003b7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	015b      	lsls	r3, r3, #5
 8003a9c:	0d1b      	lsrs	r3, r3, #20
 8003a9e:	69fa      	ldr	r2, [r7, #28]
 8003aa0:	fb02 f303 	mul.w	r3, r2, r3
 8003aa4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aa6:	e054      	b.n	8003b52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aae:	d050      	beq.n	8003b52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ab0:	f7fd fae0 	bl	8001074 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	69fa      	ldr	r2, [r7, #28]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d902      	bls.n	8003ac6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d13d      	bne.n	8003b42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ad4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ade:	d111      	bne.n	8003b04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae8:	d004      	beq.n	8003af4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af2:	d107      	bne.n	8003b04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b0c:	d10f      	bne.n	8003b2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e017      	b.n	8003b72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	bf0c      	ite	eq
 8003b62:	2301      	moveq	r3, #1
 8003b64:	2300      	movne	r3, #0
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	461a      	mov	r2, r3
 8003b6a:	79fb      	ldrb	r3, [r7, #7]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d19b      	bne.n	8003aa8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3720      	adds	r7, #32
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20000020 	.word	0x20000020

08003b80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003b8e:	f7fd fa71 	bl	8001074 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b96:	1a9b      	subs	r3, r3, r2
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b9e:	f7fd fa69 	bl	8001074 <HAL_GetTick>
 8003ba2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ba4:	4b3e      	ldr	r3, [pc, #248]	; (8003ca0 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	00da      	lsls	r2, r3, #3
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	0d1b      	lsrs	r3, r3, #20
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	fb02 f303 	mul.w	r3, r2, r3
 8003bba:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8003bbc:	e062      	b.n	8003c84 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003bc4:	d109      	bne.n	8003bda <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d106      	bne.n	8003bda <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	330c      	adds	r3, #12
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003bd8:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be0:	d050      	beq.n	8003c84 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003be2:	f7fd fa47 	bl	8001074 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	69fa      	ldr	r2, [r7, #28]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d902      	bls.n	8003bf8 <SPI_WaitFifoStateUntilTimeout+0x78>
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d13d      	bne.n	8003c74 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c10:	d111      	bne.n	8003c36 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c1a:	d004      	beq.n	8003c26 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c24:	d107      	bne.n	8003c36 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c3e:	d10f      	bne.n	8003c60 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e010      	b.n	8003c96 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	3b01      	subs	r3, #1
 8003c82:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d194      	bne.n	8003bbe <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3720      	adds	r7, #32
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000020 	.word	0x20000020

08003ca4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cb8:	d111      	bne.n	8003cde <SPI_EndRxTransaction+0x3a>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc2:	d004      	beq.n	8003cce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ccc:	d107      	bne.n	8003cde <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cdc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2180      	movs	r1, #128	; 0x80
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f7ff fec1 	bl	8003a70 <SPI_WaitFlagStateUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d007      	beq.n	8003d04 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf8:	f043 0220 	orr.w	r2, r3, #32
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e023      	b.n	8003d4c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d0c:	d11d      	bne.n	8003d4a <SPI_EndRxTransaction+0xa6>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d16:	d004      	beq.n	8003d22 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d20:	d113      	bne.n	8003d4a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f7ff ff26 	bl	8003b80 <SPI_WaitFifoStateUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d007      	beq.n	8003d4a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3e:	f043 0220 	orr.w	r2, r3, #32
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e000      	b.n	8003d4c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f7ff ff07 	bl	8003b80 <SPI_WaitFifoStateUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d7c:	f043 0220 	orr.w	r2, r3, #32
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e027      	b.n	8003dd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	2180      	movs	r1, #128	; 0x80
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f7ff fe6c 	bl	8003a70 <SPI_WaitFlagStateUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d007      	beq.n	8003dae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da2:	f043 0220 	orr.w	r2, r3, #32
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e014      	b.n	8003dd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f7ff fee0 	bl	8003b80 <SPI_WaitFifoStateUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d007      	beq.n	8003dd6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dca:	f043 0220 	orr.w	r2, r3, #32
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e000      	b.n	8003dd8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e040      	b.n	8003e74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f001 fffa 	bl	8005dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2224      	movs	r2, #36	; 0x24
 8003e0c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0201 	bic.w	r2, r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fbf2 	bl	8004608 <UART_SetConfig>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d101      	bne.n	8003e2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e022      	b.n	8003e74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fea0 	bl	8004b7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 ff27 	bl	8004cc0 <UART_CheckIdleState>
 8003e72:	4603      	mov	r3, r0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08a      	sub	sp, #40	; 0x28
 8003e80:	af02      	add	r7, sp, #8
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	f040 8082 	bne.w	8003f9a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <HAL_UART_Transmit+0x26>
 8003e9c:	88fb      	ldrh	r3, [r7, #6]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e07a      	b.n	8003f9c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_UART_Transmit+0x38>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e073      	b.n	8003f9c <HAL_UART_Transmit+0x120>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2221      	movs	r2, #33	; 0x21
 8003ec8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eca:	f7fd f8d3 	bl	8001074 <HAL_GetTick>
 8003ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	88fa      	ldrh	r2, [r7, #6]
 8003ed4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	88fa      	ldrh	r2, [r7, #6]
 8003edc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee8:	d108      	bne.n	8003efc <HAL_UART_Transmit+0x80>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d104      	bne.n	8003efc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	e003      	b.n	8003f04 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003f0c:	e02d      	b.n	8003f6a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2200      	movs	r2, #0
 8003f16:	2180      	movs	r1, #128	; 0x80
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 ff1a 	bl	8004d52 <UART_WaitOnFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e039      	b.n	8003f9c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10b      	bne.n	8003f46 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	881a      	ldrh	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f3a:	b292      	uxth	r2, r2
 8003f3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	3302      	adds	r3, #2
 8003f42:	61bb      	str	r3, [r7, #24]
 8003f44:	e008      	b.n	8003f58 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	781a      	ldrb	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	b292      	uxth	r2, r2
 8003f50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	3301      	adds	r3, #1
 8003f56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1cb      	bne.n	8003f0e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	2140      	movs	r1, #64	; 0x40
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 fee6 	bl	8004d52 <UART_WaitOnFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e005      	b.n	8003f9c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2220      	movs	r2, #32
 8003f94:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	e000      	b.n	8003f9c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003f9a:	2302      	movs	r3, #2
  }
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3720      	adds	r7, #32
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	d131      	bne.n	800401e <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <HAL_UART_Receive_DMA+0x22>
 8003fc0:	88fb      	ldrh	r3, [r7, #6]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e02a      	b.n	8004020 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_UART_Receive_DMA+0x34>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e023      	b.n	8004020 <HAL_UART_Receive_DMA+0x7c>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a0f      	ldr	r2, [pc, #60]	; (8004028 <HAL_UART_Receive_DMA+0x84>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00e      	beq.n	800400e <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d007      	beq.n	800400e <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800400c:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800400e:	88fb      	ldrh	r3, [r7, #6]
 8004010:	461a      	mov	r2, r3
 8004012:	68b9      	ldr	r1, [r7, #8]
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 ff19 	bl	8004e4c <UART_Start_Receive_DMA>
 800401a:	4603      	mov	r3, r0
 800401c:	e000      	b.n	8004020 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800401e:	2302      	movs	r3, #2
  }
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40008000 	.word	0x40008000

0800402c <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Disable TCIE, TXEIE and TXFTIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004042:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404e:	2b80      	cmp	r3, #128	; 0x80
 8004050:	d125      	bne.n	800409e <HAL_UART_AbortTransmit+0x72>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004060:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004066:	2b00      	cmp	r3, #0
 8004068:	d019      	beq.n	800409e <HAL_UART_AbortTransmit+0x72>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800406e:	2200      	movs	r2, #0
 8004070:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004076:	4618      	mov	r0, r3
 8004078:	f7fd fa56 	bl	8001528 <HAL_DMA_Abort>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00d      	beq.n	800409e <HAL_UART_AbortTransmit+0x72>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004086:	4618      	mov	r0, r3
 8004088:	f7fd fb7c 	bl	8001784 <HAL_DMA_GetError>
 800408c:	4603      	mov	r3, r0
 800408e:	2b20      	cmp	r3, #32
 8004090:	d105      	bne.n	800409e <HAL_UART_AbortTransmit+0x72>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2210      	movs	r2, #16
 8004096:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e007      	b.n	80040ae <HAL_UART_AbortTransmit+0x82>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2220      	movs	r2, #32
 80040aa:	679a      	str	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b082      	sub	sp, #8
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
#else
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040cc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0201 	bic.w	r2, r2, #1
 80040dc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d107      	bne.n	80040f6 <HAL_UART_AbortReceive+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0210 	bic.w	r2, r2, #16
 80040f4:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004100:	2b40      	cmp	r3, #64	; 0x40
 8004102:	d125      	bne.n	8004150 <HAL_UART_AbortReceive+0x9a>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004112:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004118:	2b00      	cmp	r3, #0
 800411a:	d019      	beq.n	8004150 <HAL_UART_AbortReceive+0x9a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004120:	2200      	movs	r2, #0
 8004122:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004128:	4618      	mov	r0, r3
 800412a:	f7fd f9fd 	bl	8001528 <HAL_DMA_Abort>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00d      	beq.n	8004150 <HAL_UART_AbortReceive+0x9a>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004138:	4618      	mov	r0, r3
 800413a:	f7fd fb23 	bl	8001784 <HAL_DMA_GetError>
 800413e:	4603      	mov	r3, r0
 8004140:	2b20      	cmp	r3, #32
 8004142:	d105      	bne.n	8004150 <HAL_UART_AbortReceive+0x9a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2210      	movs	r2, #16
 8004148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e018      	b.n	8004182 <HAL_UART_AbortReceive+0xcc>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	220f      	movs	r2, #15
 800415e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	8b1b      	ldrh	r3, [r3, #24]
 8004166:	b29a      	uxth	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0208 	orr.w	r2, r2, #8
 8004170:	b292      	uxth	r2, r2
 8004172:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041ac:	69fa      	ldr	r2, [r7, #28]
 80041ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80041b2:	4013      	ands	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d113      	bne.n	80041e4 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f003 0320 	and.w	r3, r3, #32
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00e      	beq.n	80041e4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d009      	beq.n	80041e4 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 81cf 	beq.w	8004578 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	4798      	blx	r3
      }
      return;
 80041e2:	e1c9      	b.n	8004578 <HAL_UART_IRQHandler+0x3ec>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 80e8 	beq.w	80043bc <HAL_UART_IRQHandler+0x230>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d105      	bne.n	8004202 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4b6e      	ldr	r3, [pc, #440]	; (80043b4 <HAL_UART_IRQHandler+0x228>)
 80041fa:	4013      	ands	r3, r2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 80dd 	beq.w	80043bc <HAL_UART_IRQHandler+0x230>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d010      	beq.n	800422e <HAL_UART_IRQHandler+0xa2>
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00b      	beq.n	800422e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2201      	movs	r2, #1
 800421c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004224:	f043 0201 	orr.w	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d010      	beq.n	800425a <HAL_UART_IRQHandler+0xce>
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00b      	beq.n	800425a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2202      	movs	r2, #2
 8004248:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004250:	f043 0204 	orr.w	r2, r3, #4
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	2b00      	cmp	r3, #0
 8004262:	d010      	beq.n	8004286 <HAL_UART_IRQHandler+0xfa>
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00b      	beq.n	8004286 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2204      	movs	r2, #4
 8004274:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800427c:	f043 0202 	orr.w	r2, r3, #2
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b00      	cmp	r3, #0
 800428e:	d015      	beq.n	80042bc <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b00      	cmp	r3, #0
 8004298:	d104      	bne.n	80042a4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00b      	beq.n	80042bc <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2208      	movs	r2, #8
 80042aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042b2:	f043 0208 	orr.w	r2, r3, #8
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d011      	beq.n	80042ea <HAL_UART_IRQHandler+0x15e>
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00c      	beq.n	80042ea <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042e0:	f043 0220 	orr.w	r2, r3, #32
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 8143 	beq.w	800457c <HAL_UART_IRQHandler+0x3f0>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00c      	beq.n	800431a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	f003 0320 	and.w	r3, r3, #32
 8004306:	2b00      	cmp	r3, #0
 8004308:	d007      	beq.n	800431a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004320:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432c:	2b40      	cmp	r3, #64	; 0x40
 800432e:	d004      	beq.n	800433a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004336:	2b00      	cmp	r3, #0
 8004338:	d031      	beq.n	800439e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fe07 	bl	8004f4e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434a:	2b40      	cmp	r3, #64	; 0x40
 800434c:	d123      	bne.n	8004396 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800435c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	2b00      	cmp	r3, #0
 8004364:	d013      	beq.n	800438e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436a:	4a13      	ldr	r2, [pc, #76]	; (80043b8 <HAL_UART_IRQHandler+0x22c>)
 800436c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004372:	4618      	mov	r0, r3
 8004374:	f7fd f916 	bl	80015a4 <HAL_DMA_Abort_IT>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d017      	beq.n	80043ae <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004388:	4610      	mov	r0, r2
 800438a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800438c:	e00f      	b.n	80043ae <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f001 f8a8 	bl	80054e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004394:	e00b      	b.n	80043ae <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f001 f8a4 	bl	80054e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800439c:	e007      	b.n	80043ae <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f001 f8a0 	bl	80054e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80043ac:	e0e6      	b.n	800457c <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ae:	bf00      	nop
    return;
 80043b0:	e0e4      	b.n	800457c <HAL_UART_IRQHandler+0x3f0>
 80043b2:	bf00      	nop
 80043b4:	04000120 	.word	0x04000120
 80043b8:	080050f9 	.word	0x080050f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	f040 80a5 	bne.w	8004510 <HAL_UART_IRQHandler+0x384>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 809f 	beq.w	8004510 <HAL_UART_IRQHandler+0x384>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8099 	beq.w	8004510 <HAL_UART_IRQHandler+0x384>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2210      	movs	r2, #16
 80043e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f0:	2b40      	cmp	r3, #64	; 0x40
 80043f2:	d154      	bne.n	800449e <HAL_UART_IRQHandler+0x312>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80043fe:	893b      	ldrh	r3, [r7, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 80bd 	beq.w	8004580 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800440c:	893a      	ldrh	r2, [r7, #8]
 800440e:	429a      	cmp	r2, r3
 8004410:	f080 80b6 	bcs.w	8004580 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	893a      	ldrh	r2, [r7, #8]
 8004418:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b00      	cmp	r3, #0
 800442a:	d12a      	bne.n	8004482 <HAL_UART_IRQHandler+0x2f6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800443a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0201 	bic.w	r2, r2, #1
 800444a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800445a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2220      	movs	r2, #32
 8004460:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0210 	bic.w	r2, r2, #16
 8004476:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447c:	4618      	mov	r0, r3
 800447e:	f7fd f853 	bl	8001528 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800448e:	b29b      	uxth	r3, r3
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	b29b      	uxth	r3, r3
 8004494:	4619      	mov	r1, r3
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f88e 	bl	80045b8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800449c:	e070      	b.n	8004580 <HAL_UART_IRQHandler+0x3f4>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d063      	beq.n	8004584 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 80044bc:	897b      	ldrh	r3, [r7, #10]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d060      	beq.n	8004584 <HAL_UART_IRQHandler+0x3f8>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80044d0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0201 	bic.w	r2, r2, #1
 80044e0:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2220      	movs	r2, #32
 80044e6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0210 	bic.w	r2, r2, #16
 8004502:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004504:	897b      	ldrh	r3, [r7, #10]
 8004506:	4619      	mov	r1, r3
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f855 	bl	80045b8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800450e:	e039      	b.n	8004584 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00d      	beq.n	8004536 <HAL_UART_IRQHandler+0x3aa>
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_UART_IRQHandler+0x3aa>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800452c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 fe11 	bl	8005156 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004534:	e029      	b.n	800458a <HAL_UART_IRQHandler+0x3fe>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00d      	beq.n	800455c <HAL_UART_IRQHandler+0x3d0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004546:	2b00      	cmp	r3, #0
 8004548:	d008      	beq.n	800455c <HAL_UART_IRQHandler+0x3d0>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800454e:	2b00      	cmp	r3, #0
 8004550:	d01a      	beq.n	8004588 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	4798      	blx	r3
    }
    return;
 800455a:	e015      	b.n	8004588 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004562:	2b00      	cmp	r3, #0
 8004564:	d011      	beq.n	800458a <HAL_UART_IRQHandler+0x3fe>
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00c      	beq.n	800458a <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 fdd7 	bl	8005124 <UART_EndTransmit_IT>
    return;
 8004576:	e008      	b.n	800458a <HAL_UART_IRQHandler+0x3fe>
      return;
 8004578:	bf00      	nop
 800457a:	e006      	b.n	800458a <HAL_UART_IRQHandler+0x3fe>
    return;
 800457c:	bf00      	nop
 800457e:	e004      	b.n	800458a <HAL_UART_IRQHandler+0x3fe>
      return;
 8004580:	bf00      	nop
 8004582:	e002      	b.n	800458a <HAL_UART_IRQHandler+0x3fe>
      return;
 8004584:	bf00      	nop
 8004586:	e000      	b.n	800458a <HAL_UART_IRQHandler+0x3fe>
    return;
 8004588:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800458a:	3720      	adds	r7, #32
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a09      	ldr	r2, [pc, #36]	; (8004604 <HAL_UART_ReceiverTimeout_Config+0x34>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d009      	beq.n	80045f8 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f003 417f 	and.w	r1, r3, #4278190080	; 0xff000000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	615a      	str	r2, [r3, #20]
  }
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	40008000 	.word	0x40008000

08004608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800460c:	b08a      	sub	sp, #40	; 0x28
 800460e:	af00      	add	r7, sp, #0
 8004610:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	431a      	orrs	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	431a      	orrs	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	4313      	orrs	r3, r2
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4ba4      	ldr	r3, [pc, #656]	; (80048c8 <UART_SetConfig+0x2c0>)
 8004638:	4013      	ands	r3, r2
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	6812      	ldr	r2, [r2, #0]
 800463e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004640:	430b      	orrs	r3, r1
 8004642:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a99      	ldr	r2, [pc, #612]	; (80048cc <UART_SetConfig+0x2c4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d004      	beq.n	8004674 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004670:	4313      	orrs	r3, r2
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004684:	430a      	orrs	r2, r1
 8004686:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a90      	ldr	r2, [pc, #576]	; (80048d0 <UART_SetConfig+0x2c8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d126      	bne.n	80046e0 <UART_SetConfig+0xd8>
 8004692:	4b90      	ldr	r3, [pc, #576]	; (80048d4 <UART_SetConfig+0x2cc>)
 8004694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	2b03      	cmp	r3, #3
 800469e:	d81b      	bhi.n	80046d8 <UART_SetConfig+0xd0>
 80046a0:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <UART_SetConfig+0xa0>)
 80046a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a6:	bf00      	nop
 80046a8:	080046b9 	.word	0x080046b9
 80046ac:	080046c9 	.word	0x080046c9
 80046b0:	080046c1 	.word	0x080046c1
 80046b4:	080046d1 	.word	0x080046d1
 80046b8:	2301      	movs	r3, #1
 80046ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046be:	e116      	b.n	80048ee <UART_SetConfig+0x2e6>
 80046c0:	2302      	movs	r3, #2
 80046c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c6:	e112      	b.n	80048ee <UART_SetConfig+0x2e6>
 80046c8:	2304      	movs	r3, #4
 80046ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ce:	e10e      	b.n	80048ee <UART_SetConfig+0x2e6>
 80046d0:	2308      	movs	r3, #8
 80046d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d6:	e10a      	b.n	80048ee <UART_SetConfig+0x2e6>
 80046d8:	2310      	movs	r3, #16
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046de:	e106      	b.n	80048ee <UART_SetConfig+0x2e6>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a7c      	ldr	r2, [pc, #496]	; (80048d8 <UART_SetConfig+0x2d0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d138      	bne.n	800475c <UART_SetConfig+0x154>
 80046ea:	4b7a      	ldr	r3, [pc, #488]	; (80048d4 <UART_SetConfig+0x2cc>)
 80046ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f0:	f003 030c 	and.w	r3, r3, #12
 80046f4:	2b0c      	cmp	r3, #12
 80046f6:	d82d      	bhi.n	8004754 <UART_SetConfig+0x14c>
 80046f8:	a201      	add	r2, pc, #4	; (adr r2, 8004700 <UART_SetConfig+0xf8>)
 80046fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fe:	bf00      	nop
 8004700:	08004735 	.word	0x08004735
 8004704:	08004755 	.word	0x08004755
 8004708:	08004755 	.word	0x08004755
 800470c:	08004755 	.word	0x08004755
 8004710:	08004745 	.word	0x08004745
 8004714:	08004755 	.word	0x08004755
 8004718:	08004755 	.word	0x08004755
 800471c:	08004755 	.word	0x08004755
 8004720:	0800473d 	.word	0x0800473d
 8004724:	08004755 	.word	0x08004755
 8004728:	08004755 	.word	0x08004755
 800472c:	08004755 	.word	0x08004755
 8004730:	0800474d 	.word	0x0800474d
 8004734:	2300      	movs	r3, #0
 8004736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800473a:	e0d8      	b.n	80048ee <UART_SetConfig+0x2e6>
 800473c:	2302      	movs	r3, #2
 800473e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004742:	e0d4      	b.n	80048ee <UART_SetConfig+0x2e6>
 8004744:	2304      	movs	r3, #4
 8004746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800474a:	e0d0      	b.n	80048ee <UART_SetConfig+0x2e6>
 800474c:	2308      	movs	r3, #8
 800474e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004752:	e0cc      	b.n	80048ee <UART_SetConfig+0x2e6>
 8004754:	2310      	movs	r3, #16
 8004756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800475a:	e0c8      	b.n	80048ee <UART_SetConfig+0x2e6>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a5e      	ldr	r2, [pc, #376]	; (80048dc <UART_SetConfig+0x2d4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d125      	bne.n	80047b2 <UART_SetConfig+0x1aa>
 8004766:	4b5b      	ldr	r3, [pc, #364]	; (80048d4 <UART_SetConfig+0x2cc>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004770:	2b30      	cmp	r3, #48	; 0x30
 8004772:	d016      	beq.n	80047a2 <UART_SetConfig+0x19a>
 8004774:	2b30      	cmp	r3, #48	; 0x30
 8004776:	d818      	bhi.n	80047aa <UART_SetConfig+0x1a2>
 8004778:	2b20      	cmp	r3, #32
 800477a:	d00a      	beq.n	8004792 <UART_SetConfig+0x18a>
 800477c:	2b20      	cmp	r3, #32
 800477e:	d814      	bhi.n	80047aa <UART_SetConfig+0x1a2>
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <UART_SetConfig+0x182>
 8004784:	2b10      	cmp	r3, #16
 8004786:	d008      	beq.n	800479a <UART_SetConfig+0x192>
 8004788:	e00f      	b.n	80047aa <UART_SetConfig+0x1a2>
 800478a:	2300      	movs	r3, #0
 800478c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004790:	e0ad      	b.n	80048ee <UART_SetConfig+0x2e6>
 8004792:	2302      	movs	r3, #2
 8004794:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004798:	e0a9      	b.n	80048ee <UART_SetConfig+0x2e6>
 800479a:	2304      	movs	r3, #4
 800479c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a0:	e0a5      	b.n	80048ee <UART_SetConfig+0x2e6>
 80047a2:	2308      	movs	r3, #8
 80047a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a8:	e0a1      	b.n	80048ee <UART_SetConfig+0x2e6>
 80047aa:	2310      	movs	r3, #16
 80047ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047b0:	e09d      	b.n	80048ee <UART_SetConfig+0x2e6>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a4a      	ldr	r2, [pc, #296]	; (80048e0 <UART_SetConfig+0x2d8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d125      	bne.n	8004808 <UART_SetConfig+0x200>
 80047bc:	4b45      	ldr	r3, [pc, #276]	; (80048d4 <UART_SetConfig+0x2cc>)
 80047be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047c6:	2bc0      	cmp	r3, #192	; 0xc0
 80047c8:	d016      	beq.n	80047f8 <UART_SetConfig+0x1f0>
 80047ca:	2bc0      	cmp	r3, #192	; 0xc0
 80047cc:	d818      	bhi.n	8004800 <UART_SetConfig+0x1f8>
 80047ce:	2b80      	cmp	r3, #128	; 0x80
 80047d0:	d00a      	beq.n	80047e8 <UART_SetConfig+0x1e0>
 80047d2:	2b80      	cmp	r3, #128	; 0x80
 80047d4:	d814      	bhi.n	8004800 <UART_SetConfig+0x1f8>
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <UART_SetConfig+0x1d8>
 80047da:	2b40      	cmp	r3, #64	; 0x40
 80047dc:	d008      	beq.n	80047f0 <UART_SetConfig+0x1e8>
 80047de:	e00f      	b.n	8004800 <UART_SetConfig+0x1f8>
 80047e0:	2300      	movs	r3, #0
 80047e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e6:	e082      	b.n	80048ee <UART_SetConfig+0x2e6>
 80047e8:	2302      	movs	r3, #2
 80047ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ee:	e07e      	b.n	80048ee <UART_SetConfig+0x2e6>
 80047f0:	2304      	movs	r3, #4
 80047f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f6:	e07a      	b.n	80048ee <UART_SetConfig+0x2e6>
 80047f8:	2308      	movs	r3, #8
 80047fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fe:	e076      	b.n	80048ee <UART_SetConfig+0x2e6>
 8004800:	2310      	movs	r3, #16
 8004802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004806:	e072      	b.n	80048ee <UART_SetConfig+0x2e6>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a35      	ldr	r2, [pc, #212]	; (80048e4 <UART_SetConfig+0x2dc>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d12a      	bne.n	8004868 <UART_SetConfig+0x260>
 8004812:	4b30      	ldr	r3, [pc, #192]	; (80048d4 <UART_SetConfig+0x2cc>)
 8004814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800481c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004820:	d01a      	beq.n	8004858 <UART_SetConfig+0x250>
 8004822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004826:	d81b      	bhi.n	8004860 <UART_SetConfig+0x258>
 8004828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800482c:	d00c      	beq.n	8004848 <UART_SetConfig+0x240>
 800482e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004832:	d815      	bhi.n	8004860 <UART_SetConfig+0x258>
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <UART_SetConfig+0x238>
 8004838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800483c:	d008      	beq.n	8004850 <UART_SetConfig+0x248>
 800483e:	e00f      	b.n	8004860 <UART_SetConfig+0x258>
 8004840:	2300      	movs	r3, #0
 8004842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004846:	e052      	b.n	80048ee <UART_SetConfig+0x2e6>
 8004848:	2302      	movs	r3, #2
 800484a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484e:	e04e      	b.n	80048ee <UART_SetConfig+0x2e6>
 8004850:	2304      	movs	r3, #4
 8004852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004856:	e04a      	b.n	80048ee <UART_SetConfig+0x2e6>
 8004858:	2308      	movs	r3, #8
 800485a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800485e:	e046      	b.n	80048ee <UART_SetConfig+0x2e6>
 8004860:	2310      	movs	r3, #16
 8004862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004866:	e042      	b.n	80048ee <UART_SetConfig+0x2e6>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a17      	ldr	r2, [pc, #92]	; (80048cc <UART_SetConfig+0x2c4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d13a      	bne.n	80048e8 <UART_SetConfig+0x2e0>
 8004872:	4b18      	ldr	r3, [pc, #96]	; (80048d4 <UART_SetConfig+0x2cc>)
 8004874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004878:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800487c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004880:	d01a      	beq.n	80048b8 <UART_SetConfig+0x2b0>
 8004882:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004886:	d81b      	bhi.n	80048c0 <UART_SetConfig+0x2b8>
 8004888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800488c:	d00c      	beq.n	80048a8 <UART_SetConfig+0x2a0>
 800488e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004892:	d815      	bhi.n	80048c0 <UART_SetConfig+0x2b8>
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <UART_SetConfig+0x298>
 8004898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800489c:	d008      	beq.n	80048b0 <UART_SetConfig+0x2a8>
 800489e:	e00f      	b.n	80048c0 <UART_SetConfig+0x2b8>
 80048a0:	2300      	movs	r3, #0
 80048a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a6:	e022      	b.n	80048ee <UART_SetConfig+0x2e6>
 80048a8:	2302      	movs	r3, #2
 80048aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ae:	e01e      	b.n	80048ee <UART_SetConfig+0x2e6>
 80048b0:	2304      	movs	r3, #4
 80048b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048b6:	e01a      	b.n	80048ee <UART_SetConfig+0x2e6>
 80048b8:	2308      	movs	r3, #8
 80048ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048be:	e016      	b.n	80048ee <UART_SetConfig+0x2e6>
 80048c0:	2310      	movs	r3, #16
 80048c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048c6:	e012      	b.n	80048ee <UART_SetConfig+0x2e6>
 80048c8:	efff69f3 	.word	0xefff69f3
 80048cc:	40008000 	.word	0x40008000
 80048d0:	40013800 	.word	0x40013800
 80048d4:	40021000 	.word	0x40021000
 80048d8:	40004400 	.word	0x40004400
 80048dc:	40004800 	.word	0x40004800
 80048e0:	40004c00 	.word	0x40004c00
 80048e4:	40005000 	.word	0x40005000
 80048e8:	2310      	movs	r3, #16
 80048ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4aa0      	ldr	r2, [pc, #640]	; (8004b74 <UART_SetConfig+0x56c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d17a      	bne.n	80049ee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d824      	bhi.n	800494a <UART_SetConfig+0x342>
 8004900:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <UART_SetConfig+0x300>)
 8004902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004906:	bf00      	nop
 8004908:	0800492d 	.word	0x0800492d
 800490c:	0800494b 	.word	0x0800494b
 8004910:	08004935 	.word	0x08004935
 8004914:	0800494b 	.word	0x0800494b
 8004918:	0800493b 	.word	0x0800493b
 800491c:	0800494b 	.word	0x0800494b
 8004920:	0800494b 	.word	0x0800494b
 8004924:	0800494b 	.word	0x0800494b
 8004928:	08004943 	.word	0x08004943
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800492c:	f7fd ff1e 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 8004930:	61f8      	str	r0, [r7, #28]
        break;
 8004932:	e010      	b.n	8004956 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004934:	4b90      	ldr	r3, [pc, #576]	; (8004b78 <UART_SetConfig+0x570>)
 8004936:	61fb      	str	r3, [r7, #28]
        break;
 8004938:	e00d      	b.n	8004956 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800493a:	f7fd fe7f 	bl	800263c <HAL_RCC_GetSysClockFreq>
 800493e:	61f8      	str	r0, [r7, #28]
        break;
 8004940:	e009      	b.n	8004956 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004946:	61fb      	str	r3, [r7, #28]
        break;
 8004948:	e005      	b.n	8004956 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800494a:	2300      	movs	r3, #0
 800494c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004954:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 80fd 	beq.w	8004b58 <UART_SetConfig+0x550>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	4613      	mov	r3, r2
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	4413      	add	r3, r2
 8004968:	69fa      	ldr	r2, [r7, #28]
 800496a:	429a      	cmp	r2, r3
 800496c:	d305      	bcc.n	800497a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004974:	69fa      	ldr	r2, [r7, #28]
 8004976:	429a      	cmp	r2, r3
 8004978:	d903      	bls.n	8004982 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004980:	e0ea      	b.n	8004b58 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	2200      	movs	r2, #0
 8004986:	461c      	mov	r4, r3
 8004988:	4615      	mov	r5, r2
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	022b      	lsls	r3, r5, #8
 8004994:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004998:	0222      	lsls	r2, r4, #8
 800499a:	68f9      	ldr	r1, [r7, #12]
 800499c:	6849      	ldr	r1, [r1, #4]
 800499e:	0849      	lsrs	r1, r1, #1
 80049a0:	2000      	movs	r0, #0
 80049a2:	4688      	mov	r8, r1
 80049a4:	4681      	mov	r9, r0
 80049a6:	eb12 0a08 	adds.w	sl, r2, r8
 80049aa:	eb43 0b09 	adc.w	fp, r3, r9
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	603b      	str	r3, [r7, #0]
 80049b6:	607a      	str	r2, [r7, #4]
 80049b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049bc:	4650      	mov	r0, sl
 80049be:	4659      	mov	r1, fp
 80049c0:	f7fc f96a 	bl	8000c98 <__aeabi_uldivmod>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4613      	mov	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049d2:	d308      	bcc.n	80049e6 <UART_SetConfig+0x3de>
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049da:	d204      	bcs.n	80049e6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	60da      	str	r2, [r3, #12]
 80049e4:	e0b8      	b.n	8004b58 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049ec:	e0b4      	b.n	8004b58 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f6:	d15f      	bne.n	8004ab8 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 80049f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d828      	bhi.n	8004a52 <UART_SetConfig+0x44a>
 8004a00:	a201      	add	r2, pc, #4	; (adr r2, 8004a08 <UART_SetConfig+0x400>)
 8004a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a06:	bf00      	nop
 8004a08:	08004a2d 	.word	0x08004a2d
 8004a0c:	08004a35 	.word	0x08004a35
 8004a10:	08004a3d 	.word	0x08004a3d
 8004a14:	08004a53 	.word	0x08004a53
 8004a18:	08004a43 	.word	0x08004a43
 8004a1c:	08004a53 	.word	0x08004a53
 8004a20:	08004a53 	.word	0x08004a53
 8004a24:	08004a53 	.word	0x08004a53
 8004a28:	08004a4b 	.word	0x08004a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a2c:	f7fd fe9e 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 8004a30:	61f8      	str	r0, [r7, #28]
        break;
 8004a32:	e014      	b.n	8004a5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a34:	f7fd feb0 	bl	8002798 <HAL_RCC_GetPCLK2Freq>
 8004a38:	61f8      	str	r0, [r7, #28]
        break;
 8004a3a:	e010      	b.n	8004a5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a3c:	4b4e      	ldr	r3, [pc, #312]	; (8004b78 <UART_SetConfig+0x570>)
 8004a3e:	61fb      	str	r3, [r7, #28]
        break;
 8004a40:	e00d      	b.n	8004a5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a42:	f7fd fdfb 	bl	800263c <HAL_RCC_GetSysClockFreq>
 8004a46:	61f8      	str	r0, [r7, #28]
        break;
 8004a48:	e009      	b.n	8004a5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a4e:	61fb      	str	r3, [r7, #28]
        break;
 8004a50:	e005      	b.n	8004a5e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d079      	beq.n	8004b58 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	005a      	lsls	r2, r3, #1
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	085b      	lsrs	r3, r3, #1
 8004a6e:	441a      	add	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	2b0f      	cmp	r3, #15
 8004a80:	d916      	bls.n	8004ab0 <UART_SetConfig+0x4a8>
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a88:	d212      	bcs.n	8004ab0 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	f023 030f 	bic.w	r3, r3, #15
 8004a92:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	085b      	lsrs	r3, r3, #1
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	8afb      	ldrh	r3, [r7, #22]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	8afa      	ldrh	r2, [r7, #22]
 8004aac:	60da      	str	r2, [r3, #12]
 8004aae:	e053      	b.n	8004b58 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ab6:	e04f      	b.n	8004b58 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ab8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d828      	bhi.n	8004b12 <UART_SetConfig+0x50a>
 8004ac0:	a201      	add	r2, pc, #4	; (adr r2, 8004ac8 <UART_SetConfig+0x4c0>)
 8004ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac6:	bf00      	nop
 8004ac8:	08004aed 	.word	0x08004aed
 8004acc:	08004af5 	.word	0x08004af5
 8004ad0:	08004afd 	.word	0x08004afd
 8004ad4:	08004b13 	.word	0x08004b13
 8004ad8:	08004b03 	.word	0x08004b03
 8004adc:	08004b13 	.word	0x08004b13
 8004ae0:	08004b13 	.word	0x08004b13
 8004ae4:	08004b13 	.word	0x08004b13
 8004ae8:	08004b0b 	.word	0x08004b0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aec:	f7fd fe3e 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 8004af0:	61f8      	str	r0, [r7, #28]
        break;
 8004af2:	e014      	b.n	8004b1e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004af4:	f7fd fe50 	bl	8002798 <HAL_RCC_GetPCLK2Freq>
 8004af8:	61f8      	str	r0, [r7, #28]
        break;
 8004afa:	e010      	b.n	8004b1e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004afc:	4b1e      	ldr	r3, [pc, #120]	; (8004b78 <UART_SetConfig+0x570>)
 8004afe:	61fb      	str	r3, [r7, #28]
        break;
 8004b00:	e00d      	b.n	8004b1e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b02:	f7fd fd9b 	bl	800263c <HAL_RCC_GetSysClockFreq>
 8004b06:	61f8      	str	r0, [r7, #28]
        break;
 8004b08:	e009      	b.n	8004b1e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b0e:	61fb      	str	r3, [r7, #28]
        break;
 8004b10:	e005      	b.n	8004b1e <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b1c:	bf00      	nop
    }

    if (pclk != 0U)
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d019      	beq.n	8004b58 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	085a      	lsrs	r2, r3, #1
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	441a      	add	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	2b0f      	cmp	r3, #15
 8004b3e:	d908      	bls.n	8004b52 <UART_SetConfig+0x54a>
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b46:	d204      	bcs.n	8004b52 <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	60da      	str	r2, [r3, #12]
 8004b50:	e002      	b.n	8004b58 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3728      	adds	r7, #40	; 0x28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b72:	bf00      	nop
 8004b74:	40008000 	.word	0x40008000
 8004b78:	00f42400 	.word	0x00f42400

08004b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00a      	beq.n	8004bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	f003 0310 	and.w	r3, r3, #16
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00a      	beq.n	8004c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01a      	beq.n	8004c92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c7a:	d10a      	bne.n	8004c92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	605a      	str	r2, [r3, #4]
  }
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af02      	add	r7, sp, #8
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cd0:	f7fc f9d0 	bl	8001074 <HAL_GetTick>
 8004cd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d10e      	bne.n	8004d02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f82d 	bl	8004d52 <UART_WaitOnFlagUntilTimeout>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e023      	b.n	8004d4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d10e      	bne.n	8004d2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f817 	bl	8004d52 <UART_WaitOnFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e00d      	b.n	8004d4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2220      	movs	r2, #32
 8004d32:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2220      	movs	r2, #32
 8004d38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b084      	sub	sp, #16
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	603b      	str	r3, [r7, #0]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d62:	e05e      	b.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6a:	d05a      	beq.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6c:	f7fc f982 	bl	8001074 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d302      	bcc.n	8004d82 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d11b      	bne.n	8004dba <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d90:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0201 	bic.w	r2, r2, #1
 8004da0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2220      	movs	r2, #32
 8004da6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2220      	movs	r2, #32
 8004dac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e043      	b.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d02c      	beq.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dd6:	d124      	bne.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004de0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004df0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0201 	bic.w	r2, r2, #1
 8004e00:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2220      	movs	r2, #32
 8004e06:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e00f      	b.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69da      	ldr	r2, [r3, #28]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	bf0c      	ite	eq
 8004e32:	2301      	moveq	r3, #1
 8004e34:	2300      	movne	r3, #0
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	461a      	mov	r2, r3
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d091      	beq.n	8004d64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	4613      	mov	r3, r2
 8004e58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	88fa      	ldrh	r2, [r7, #6]
 8004e64:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2222      	movs	r2, #34	; 0x22
 8004e74:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d02b      	beq.n	8004ed6 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e82:	4a25      	ldr	r2, [pc, #148]	; (8004f18 <UART_Start_Receive_DMA+0xcc>)
 8004e84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8a:	4a24      	ldr	r2, [pc, #144]	; (8004f1c <UART_Start_Receive_DMA+0xd0>)
 8004e8c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e92:	4a23      	ldr	r2, [pc, #140]	; (8004f20 <UART_Start_Receive_DMA+0xd4>)
 8004e94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3324      	adds	r3, #36	; 0x24
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eae:	461a      	mov	r2, r3
 8004eb0:	88fb      	ldrh	r3, [r7, #6]
 8004eb2:	f7fc fad9 	bl	8001468 <HAL_DMA_Start_IT>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00c      	beq.n	8004ed6 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2210      	movs	r2, #16
 8004ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e01c      	b.n	8004f10 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eec:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f042 0201 	orr.w	r2, r2, #1
 8004efc:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f0c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	08004fad 	.word	0x08004fad
 8004f1c:	08005045 	.word	0x08005045
 8004f20:	0800507d 	.word	0x0800507d

08004f24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004f3a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f64:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 0201 	bic.w	r2, r2, #1
 8004f74:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d107      	bne.n	8004f8e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0210 	bic.w	r2, r2, #16
 8004f8c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0320 	and.w	r3, r3, #32
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d12a      	bne.n	800501e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fde:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689a      	ldr	r2, [r3, #8]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0201 	bic.w	r2, r2, #1
 8004fee:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ffe:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2220      	movs	r2, #32
 8005004:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800500a:	2b01      	cmp	r3, #1
 800500c:	d107      	bne.n	800501e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0210 	bic.w	r2, r2, #16
 800501c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005022:	2b01      	cmp	r3, #1
 8005024:	d107      	bne.n	8005036 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800502c:	4619      	mov	r1, r3
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f7ff fac2 	bl	80045b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005034:	e002      	b.n	800503c <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f7ff faaa 	bl	8004590 <HAL_UART_RxCpltCallback>
}
 800503c:	bf00      	nop
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005050:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005056:	2b01      	cmp	r3, #1
 8005058:	d109      	bne.n	800506e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005060:	085b      	lsrs	r3, r3, #1
 8005062:	b29b      	uxth	r3, r3
 8005064:	4619      	mov	r1, r3
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f7ff faa6 	bl	80045b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800506c:	e002      	b.n	8005074 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f7ff fa98 	bl	80045a4 <HAL_UART_RxHalfCpltCallback>
}
 8005074:	bf00      	nop
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005088:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800508e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005094:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a0:	2b80      	cmp	r3, #128	; 0x80
 80050a2:	d109      	bne.n	80050b8 <UART_DMAError+0x3c>
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	2b21      	cmp	r3, #33	; 0x21
 80050a8:	d106      	bne.n	80050b8 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80050b2:	6978      	ldr	r0, [r7, #20]
 80050b4:	f7ff ff36 	bl	8004f24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c2:	2b40      	cmp	r3, #64	; 0x40
 80050c4:	d109      	bne.n	80050da <UART_DMAError+0x5e>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b22      	cmp	r3, #34	; 0x22
 80050ca:	d106      	bne.n	80050da <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80050d4:	6978      	ldr	r0, [r7, #20]
 80050d6:	f7ff ff3a 	bl	8004f4e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050e0:	f043 0210 	orr.w	r2, r3, #16
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050ea:	6978      	ldr	r0, [r7, #20]
 80050ec:	f000 f9fa 	bl	80054e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050f0:	bf00      	nop
 80050f2:	3718      	adds	r7, #24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005104:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 f9e4 	bl	80054e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800511c:	bf00      	nop
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800513a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2220      	movs	r2, #32
 8005140:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f9f5 	bl	8005538 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800514e:	bf00      	nop
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <disable_interrupts>:
 */
#define ACC_BOARD_REF_FREQ 26000000


static inline void disable_interrupts(void)
{
 800516a:	b480      	push	{r7}
 800516c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800516e:	b672      	cpsid	i
}
 8005170:	bf00      	nop
	__disable_irq();
}
 8005172:	bf00      	nop
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <enable_interrupts>:


static inline void enable_interrupts(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8005180:	b662      	cpsie	i
}
 8005182:	bf00      	nop
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005184:	f3bf 8f6f 	isb	sy
}
 8005188:	bf00      	nop
	__enable_irq();
	__ISB();
}
 800518a:	bf00      	nop
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_SPI_TxRxCpltCallback>:
#ifdef A111_USE_SPI_DMA
static volatile bool spi_transfer_complete;


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *h_spi)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
	(void)h_spi;
	spi_transfer_complete = true;
 800519c:	4b04      	ldr	r3, [pc, #16]	; (80051b0 <HAL_SPI_TxRxCpltCallback+0x1c>)
 800519e:	2201      	movs	r2, #1
 80051a0:	701a      	strb	r2, [r3, #0]
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	2000038c 	.word	0x2000038c

080051b4 <acc_hal_integration_sensor_transfer>:
// Implementation of RSS HAL handlers
//----------------------------------------


static void acc_hal_integration_sensor_transfer(acc_sensor_id_t sensor_id, uint8_t *buffer, size_t buffer_size)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	const uint32_t SPI_TRANSMIT_RECEIVE_TIMEOUT = 5000;
 80051c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80051c4:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 80051c6:	2200      	movs	r2, #0
 80051c8:	2140      	movs	r1, #64	; 0x40
 80051ca:	481e      	ldr	r0, [pc, #120]	; (8005244 <acc_hal_integration_sensor_transfer+0x90>)
 80051cc:	f7fc fcd8 	bl	8001b80 <HAL_GPIO_WritePin>

#ifdef A111_USE_SPI_DMA
	spi_transfer_complete = false;
 80051d0:	4b1d      	ldr	r3, [pc, #116]	; (8005248 <acc_hal_integration_sensor_transfer+0x94>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive_DMA(&A111_SPI_HANDLE, buffer, buffer, buffer_size);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	b29b      	uxth	r3, r3
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	68b9      	ldr	r1, [r7, #8]
 80051de:	481b      	ldr	r0, [pc, #108]	; (800524c <acc_hal_integration_sensor_transfer+0x98>)
 80051e0:	f7fe f8b0 	bl	8003344 <HAL_SPI_TransmitReceive_DMA>
 80051e4:	4603      	mov	r3, r0
 80051e6:	76fb      	strb	r3, [r7, #27]

	if (status != HAL_OK)
 80051e8:	7efb      	ldrb	r3, [r7, #27]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d126      	bne.n	800523c <acc_hal_integration_sensor_transfer+0x88>
	{
		return;
	}

	uint32_t start = HAL_GetTick();
 80051ee:	f7fb ff41 	bl	8001074 <HAL_GetTick>
 80051f2:	6178      	str	r0, [r7, #20]

	while (!spi_transfer_complete && (HAL_GetTick() - start) < SPI_TRANSMIT_RECEIVE_TIMEOUT)
 80051f4:	e00c      	b.n	8005210 <acc_hal_integration_sensor_transfer+0x5c>
	{
		// Turn off interrupts
		disable_interrupts();
 80051f6:	f7ff ffb8 	bl	800516a <disable_interrupts>
		// Check once more so that the interrupt have not occurred
		if (!spi_transfer_complete)
 80051fa:	4b13      	ldr	r3, [pc, #76]	; (8005248 <acc_hal_integration_sensor_transfer+0x94>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	f083 0301 	eor.w	r3, r3, #1
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d000      	beq.n	800520c <acc_hal_integration_sensor_transfer+0x58>
		{
			__WFI();
 800520a:	bf30      	wfi
		}

		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
 800520c:	f7ff ffb6 	bl	800517c <enable_interrupts>
	while (!spi_transfer_complete && (HAL_GetTick() - start) < SPI_TRANSMIT_RECEIVE_TIMEOUT)
 8005210:	4b0d      	ldr	r3, [pc, #52]	; (8005248 <acc_hal_integration_sensor_transfer+0x94>)
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	b2db      	uxtb	r3, r3
 8005216:	f083 0301 	eor.w	r3, r3, #1
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d007      	beq.n	8005230 <acc_hal_integration_sensor_transfer+0x7c>
 8005220:	f7fb ff28 	bl	8001074 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	69fa      	ldr	r2, [r7, #28]
 800522c:	429a      	cmp	r2, r3
 800522e:	d8e2      	bhi.n	80051f6 <acc_hal_integration_sensor_transfer+0x42>
	}
#else
	HAL_SPI_TransmitReceive(&A111_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
#endif

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 8005230:	2201      	movs	r2, #1
 8005232:	2140      	movs	r1, #64	; 0x40
 8005234:	4803      	ldr	r0, [pc, #12]	; (8005244 <acc_hal_integration_sensor_transfer+0x90>)
 8005236:	f7fc fca3 	bl	8001b80 <HAL_GPIO_WritePin>
 800523a:	e000      	b.n	800523e <acc_hal_integration_sensor_transfer+0x8a>
		return;
 800523c:	bf00      	nop
}
 800523e:	3720      	adds	r7, #32
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	48000400 	.word	0x48000400
 8005248:	2000038c 	.word	0x2000038c
 800524c:	20000394 	.word	0x20000394

08005250 <acc_hal_integration_sensor_power_on>:


static void acc_hal_integration_sensor_power_on(acc_sensor_id_t sensor_id)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_SET);
 8005258:	2201      	movs	r2, #1
 800525a:	2120      	movs	r1, #32
 800525c:	4807      	ldr	r0, [pc, #28]	; (800527c <acc_hal_integration_sensor_power_on+0x2c>)
 800525e:	f7fc fc8f 	bl	8001b80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 8005262:	2201      	movs	r2, #1
 8005264:	2140      	movs	r1, #64	; 0x40
 8005266:	4805      	ldr	r0, [pc, #20]	; (800527c <acc_hal_integration_sensor_power_on+0x2c>)
 8005268:	f7fc fc8a 	bl	8001b80 <HAL_GPIO_WritePin>

	// Wait 2 ms to make sure that the sensor crystal have time to stabilize
	HAL_Delay(2);
 800526c:	2002      	movs	r0, #2
 800526e:	f7fb ff0d 	bl	800108c <HAL_Delay>
}
 8005272:	bf00      	nop
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	48000400 	.word	0x48000400

08005280 <acc_hal_integration_sensor_power_off>:


static void acc_hal_integration_sensor_power_off(acc_sensor_id_t sensor_id)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 8005288:	2200      	movs	r2, #0
 800528a:	2140      	movs	r1, #64	; 0x40
 800528c:	4807      	ldr	r0, [pc, #28]	; (80052ac <acc_hal_integration_sensor_power_off+0x2c>)
 800528e:	f7fc fc77 	bl	8001b80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_RESET);
 8005292:	2200      	movs	r2, #0
 8005294:	2120      	movs	r1, #32
 8005296:	4805      	ldr	r0, [pc, #20]	; (80052ac <acc_hal_integration_sensor_power_off+0x2c>)
 8005298:	f7fc fc72 	bl	8001b80 <HAL_GPIO_WritePin>

	// Wait after power off to leave the sensor in a known state
	// in case the application intends to enable the sensor directly
	HAL_Delay(2);
 800529c:	2002      	movs	r0, #2
 800529e:	f7fb fef5 	bl	800108c <HAL_Delay>
}
 80052a2:	bf00      	nop
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	48000400 	.word	0x48000400

080052b0 <acc_hal_integration_wait_for_sensor_interrupt>:


static bool acc_hal_integration_wait_for_sensor_interrupt(acc_sensor_id_t sensor_id, uint32_t timeout_ms)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
	(void)sensor_id; // Ignore parameter sensor_id

	const uint32_t wait_begin_ms = HAL_GetTick();
 80052ba:	f7fb fedb 	bl	8001074 <HAL_GetTick>
 80052be:	60f8      	str	r0, [r7, #12]
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 80052c0:	e00d      	b.n	80052de <acc_hal_integration_wait_for_sensor_interrupt+0x2e>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
	{
		// Wait for the GPIO interrupt
		disable_interrupts();
 80052c2:	f7ff ff52 	bl	800516a <disable_interrupts>
		// Check again so that IRQ did not occur
		if (HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET)
 80052c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052ce:	f7fc fc3f 	bl	8001b50 <HAL_GPIO_ReadPin>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d000      	beq.n	80052da <acc_hal_integration_wait_for_sensor_interrupt+0x2a>
		{
			__WFI();
 80052d8:	bf30      	wfi
		}

		// Enable interrupts again to allow pending interrupt to be handled
		enable_interrupts();
 80052da:	f7ff ff4f 	bl	800517c <enable_interrupts>
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 80052de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052e6:	f7fc fc33 	bl	8001b50 <HAL_GPIO_ReadPin>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d007      	beq.n	8005300 <acc_hal_integration_wait_for_sensor_interrupt+0x50>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 80052f0:	f7fb fec0 	bl	8001074 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	1ad3      	subs	r3, r2, r3
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d8e0      	bhi.n	80052c2 <acc_hal_integration_wait_for_sensor_interrupt+0x12>
	}

	return HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) == GPIO_PIN_SET;
 8005300:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005308:	f7fc fc22 	bl	8001b50 <HAL_GPIO_ReadPin>
 800530c:	4603      	mov	r3, r0
 800530e:	2b01      	cmp	r3, #1
 8005310:	bf0c      	ite	eq
 8005312:	2301      	moveq	r3, #1
 8005314:	2300      	movne	r3, #0
 8005316:	b2db      	uxtb	r3, r3
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <acc_hal_integration_get_reference_frequency>:


static float acc_hal_integration_get_reference_frequency(void)
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
	return ACC_BOARD_REF_FREQ;
 8005324:	4b04      	ldr	r3, [pc, #16]	; (8005338 <acc_hal_integration_get_reference_frequency+0x18>)
 8005326:	ee07 3a90 	vmov	s15, r3
}
 800532a:	eeb0 0a67 	vmov.f32	s0, s15
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	4bc65d40 	.word	0x4bc65d40

0800533c <acc_hal_integration_get_implementation>:
	.optimization.transfer16 = NULL,
};


const acc_hal_t *acc_hal_integration_get_implementation(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
	return &hal;
 8005340:	4b02      	ldr	r3, [pc, #8]	; (800534c <acc_hal_integration_get_implementation+0x10>)
}
 8005342:	4618      	mov	r0, r3
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	08011bd0 	.word	0x08011bd0

08005350 <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 8005350:	b40c      	push	{r2, r3}
 8005352:	b580      	push	{r7, lr}
 8005354:	b0b4      	sub	sp, #208	; 0xd0
 8005356:	af04      	add	r7, sp, #16
 8005358:	4603      	mov	r3, r0
 800535a:	6039      	str	r1, [r7, #0]
 800535c:	71fb      	strb	r3, [r7, #7]
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);
 800535e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005362:	60bb      	str	r3, [r7, #8]

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 8005364:	f107 000c 	add.w	r0, r7, #12
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800536e:	2196      	movs	r1, #150	; 0x96
 8005370:	f00a fa1c 	bl	800f7ac <vsniprintf>
 8005374:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc

	if (ret >= LOG_BUFFER_MAX_SIZE)
 8005378:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800537c:	2b95      	cmp	r3, #149	; 0x95
 800537e:	dd0b      	ble.n	8005398 <acc_integration_log+0x48>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 8005380:	232e      	movs	r3, #46	; 0x2e
 8005382:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 8005386:	232e      	movs	r3, #46	; 0x2e
 8005388:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		log_buffer[LOG_BUFFER_MAX_SIZE - 2] = '.';
 800538c:	232e      	movs	r3, #46	; 0x2e
 800538e:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
		log_buffer[LOG_BUFFER_MAX_SIZE - 1] = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
	}

	uint32_t time_ms = acc_integration_get_time();
 8005398:	f000 f8de 	bl	8005558 <acc_integration_get_time>
 800539c:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	char     level_ch;

	unsigned int timestamp    = time_ms;
 80053a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80053a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 80053a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80053ac:	4a2f      	ldr	r2, [pc, #188]	; (800546c <acc_integration_log+0x11c>)
 80053ae:	fba2 2303 	umull	r2, r3, r2, r3
 80053b2:	0d5b      	lsrs	r3, r3, #21
 80053b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 80053b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80053bc:	4a2c      	ldr	r2, [pc, #176]	; (8005470 <acc_integration_log+0x120>)
 80053be:	fba2 2303 	umull	r2, r3, r2, r3
 80053c2:	0b9a      	lsrs	r2, r3, #14
 80053c4:	4b2b      	ldr	r3, [pc, #172]	; (8005474 <acc_integration_log+0x124>)
 80053c6:	fba3 1302 	umull	r1, r3, r3, r2
 80053ca:	0959      	lsrs	r1, r3, #5
 80053cc:	460b      	mov	r3, r1
 80053ce:	011b      	lsls	r3, r3, #4
 80053d0:	1a5b      	subs	r3, r3, r1
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	unsigned int seconds      = timestamp / 1000 % 60;
 80053da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80053de:	4a26      	ldr	r2, [pc, #152]	; (8005478 <acc_integration_log+0x128>)
 80053e0:	fba2 2303 	umull	r2, r3, r2, r3
 80053e4:	099a      	lsrs	r2, r3, #6
 80053e6:	4b23      	ldr	r3, [pc, #140]	; (8005474 <acc_integration_log+0x124>)
 80053e8:	fba3 1302 	umull	r1, r3, r3, r2
 80053ec:	0959      	lsrs	r1, r3, #5
 80053ee:	460b      	mov	r3, r1
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	1a5b      	subs	r3, r3, r1
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	unsigned int milliseconds = timestamp % 1000;
 80053fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005400:	4a1d      	ldr	r2, [pc, #116]	; (8005478 <acc_integration_log+0x128>)
 8005402:	fba2 1203 	umull	r1, r2, r2, r3
 8005406:	0992      	lsrs	r2, r2, #6
 8005408:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800540c:	fb01 f202 	mul.w	r2, r1, r2
 8005410:	1a9b      	subs	r3, r3, r2
 8005412:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	2b04      	cmp	r3, #4
 800541a:	d803      	bhi.n	8005424 <acc_integration_log+0xd4>
 800541c:	79fb      	ldrb	r3, [r7, #7]
 800541e:	4a17      	ldr	r2, [pc, #92]	; (800547c <acc_integration_log+0x12c>)
 8005420:	5cd3      	ldrb	r3, [r2, r3]
 8005422:	e000      	b.n	8005426 <acc_integration_log+0xd6>
 8005424:	233f      	movs	r3, #63	; 0x3f
 8005426:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 800542a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800542e:	f107 020c 	add.w	r2, r7, #12
 8005432:	9203      	str	r2, [sp, #12]
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	9202      	str	r2, [sp, #8]
 8005438:	9301      	str	r3, [sp, #4]
 800543a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005444:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005448:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800544c:	480c      	ldr	r0, [pc, #48]	; (8005480 <acc_integration_log+0x130>)
 800544e:	f00a f8b1 	bl	800f5b4 <iprintf>

	fflush(stdout);
 8005452:	4b0c      	ldr	r3, [pc, #48]	; (8005484 <acc_integration_log+0x134>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	4618      	mov	r0, r3
 800545a:	f009 ffe7 	bl	800f42c <fflush>

	va_end(ap);
}
 800545e:	bf00      	nop
 8005460:	37c0      	adds	r7, #192	; 0xc0
 8005462:	46bd      	mov	sp, r7
 8005464:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005468:	b002      	add	sp, #8
 800546a:	4770      	bx	lr
 800546c:	95217cb1 	.word	0x95217cb1
 8005470:	45e7b273 	.word	0x45e7b273
 8005474:	88888889 	.word	0x88888889
 8005478:	10624dd3 	.word	0x10624dd3
 800547c:	08011abc 	.word	0x08011abc
 8005480:	08011a98 	.word	0x08011a98
 8005484:	200001fc 	.word	0x200001fc

08005488 <USART_Handle_RTO>:
	HAL_UART_Receive_DMA(uart_handle.inst, uart_handle.rx_buffer, sizeof(uart_handle.rx_buffer));
}


static void USART_Handle_RTO(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
	if (uart_handle.uart_callback == NULL)
 800548e:	4b14      	ldr	r3, [pc, #80]	; (80054e0 <USART_Handle_RTO+0x58>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d01f      	beq.n	80054d6 <USART_Handle_RTO+0x4e>
	{
		return;
	}

	/* Do we have pending RX bytes? */
	size_t packet_length = sizeof(uart_handle.rx_buffer) - __HAL_DMA_GET_COUNTER(uart_handle.inst->hdmarx);
 8005496:	4b12      	ldr	r3, [pc, #72]	; (80054e0 <USART_Handle_RTO+0x58>)
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f1c3 030a 	rsb	r3, r3, #10
 80054a4:	603b      	str	r3, [r7, #0]

	if (packet_length > 0)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d015      	beq.n	80054d8 <USART_Handle_RTO+0x50>
	{
		/* Process the pending bytes of data */
		for (size_t idx = 0; idx < packet_length; idx++)
 80054ac:	2300      	movs	r3, #0
 80054ae:	607b      	str	r3, [r7, #4]
 80054b0:	e00c      	b.n	80054cc <USART_Handle_RTO+0x44>
		{
			uart_handle.uart_callback(uart_handle.rx_buffer[idx], 0);
 80054b2:	4b0b      	ldr	r3, [pc, #44]	; (80054e0 <USART_Handle_RTO+0x58>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	490a      	ldr	r1, [pc, #40]	; (80054e0 <USART_Handle_RTO+0x58>)
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	440a      	add	r2, r1
 80054bc:	3204      	adds	r2, #4
 80054be:	7812      	ldrb	r2, [r2, #0]
 80054c0:	2100      	movs	r1, #0
 80054c2:	4610      	mov	r0, r2
 80054c4:	4798      	blx	r3
		for (size_t idx = 0; idx < packet_length; idx++)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3301      	adds	r3, #1
 80054ca:	607b      	str	r3, [r7, #4]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d3ee      	bcc.n	80054b2 <USART_Handle_RTO+0x2a>
 80054d4:	e000      	b.n	80054d8 <USART_Handle_RTO+0x50>
		return;
 80054d6:	bf00      	nop
		}
	}
}
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20000008 	.word	0x20000008

080054e4 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *h_uart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
	if (h_uart->ErrorCode == HAL_UART_ERROR_RTO)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f2:	2b20      	cmp	r3, #32
 80054f4:	d102      	bne.n	80054fc <HAL_UART_ErrorCallback+0x18>
	{
		USART_Handle_RTO();
 80054f6:	f7ff ffc7 	bl	8005488 <USART_Handle_RTO>
 80054fa:	e00e      	b.n	800551a <HAL_UART_ErrorCallback+0x36>
	}
	else
	{
		uart_handle.error_count++;
 80054fc:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <HAL_UART_ErrorCallback+0x4c>)
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	3301      	adds	r3, #1
 8005502:	4a0b      	ldr	r2, [pc, #44]	; (8005530 <HAL_UART_ErrorCallback+0x4c>)
 8005504:	6113      	str	r3, [r2, #16]

		/* Error occured, abort and prepare for another packet */
		HAL_UART_AbortReceive(uart_handle.inst);
 8005506:	4b0a      	ldr	r3, [pc, #40]	; (8005530 <HAL_UART_ErrorCallback+0x4c>)
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	4618      	mov	r0, r3
 800550c:	f7fe fdd3 	bl	80040b6 <HAL_UART_AbortReceive>
		HAL_UART_AbortTransmit(uart_handle.inst);
 8005510:	4b07      	ldr	r3, [pc, #28]	; (8005530 <HAL_UART_ErrorCallback+0x4c>)
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	4618      	mov	r0, r3
 8005516:	f7fe fd89 	bl	800402c <HAL_UART_AbortTransmit>
	}

	/* Prepare for another packet, no need to setup receive timeout again */
	HAL_UART_Receive_DMA(uart_handle.inst, uart_handle.rx_buffer, sizeof(uart_handle.rx_buffer));
 800551a:	4b05      	ldr	r3, [pc, #20]	; (8005530 <HAL_UART_ErrorCallback+0x4c>)
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	220a      	movs	r2, #10
 8005520:	4904      	ldr	r1, [pc, #16]	; (8005534 <HAL_UART_ErrorCallback+0x50>)
 8005522:	4618      	mov	r0, r3
 8005524:	f7fe fd3e 	bl	8003fa4 <HAL_UART_Receive_DMA>
}
 8005528:	bf00      	nop
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	20000008 	.word	0x20000008
 8005534:	2000000c 	.word	0x2000000c

08005538 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *h_uart)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
	(void)h_uart;

	uart_tx_complete = true;
 8005540:	4b04      	ldr	r3, [pc, #16]	; (8005554 <HAL_UART_TxCpltCallback+0x1c>)
 8005542:	2201      	movs	r2, #1
 8005544:	701a      	strb	r2, [r3, #0]
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	2000038d 	.word	0x2000038d

08005558 <acc_integration_get_time>:
	signal_active = false;
}


uint32_t acc_integration_get_time(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800555c:	f7fb fd8a 	bl	8001074 <HAL_GetTick>
 8005560:	4603      	mov	r3, r0
}
 8005562:	4618      	mov	r0, r3
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <HAL_GPIO_EXTI_Callback>:
	return acc_integration_is_sensor_interrupt_active();
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	4603      	mov	r3, r0
 8005570:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == A111_SENSOR_INTERRUPT_Pin)
 8005572:	88fb      	ldrh	r3, [r7, #6]
 8005574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005578:	d106      	bne.n	8005588 <HAL_GPIO_EXTI_Callback+0x20>
	{
		if (isr_callback != NULL)
 800557a:	4b05      	ldr	r3, [pc, #20]	; (8005590 <HAL_GPIO_EXTI_Callback+0x28>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <HAL_GPIO_EXTI_Callback+0x20>
		{
			isr_callback();
 8005582:	4b03      	ldr	r3, [pc, #12]	; (8005590 <HAL_GPIO_EXTI_Callback+0x28>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4798      	blx	r3
		}
	}
}
 8005588:	bf00      	nop
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	20000390 	.word	0x20000390

08005594 <update_configuration>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void update_configuration(acc_service_configuration_t envelope_configuration)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
	float start_m  = 0.05f;
 800559c:	4b08      	ldr	r3, [pc, #32]	; (80055c0 <update_configuration+0x2c>)
 800559e:	60fb      	str	r3, [r7, #12]
	float length_m = 0.2f;
 80055a0:	4b08      	ldr	r3, [pc, #32]	; (80055c4 <update_configuration+0x30>)
 80055a2:	60bb      	str	r3, [r7, #8]

	acc_service_requested_start_set(envelope_configuration, start_m);
 80055a4:	ed97 0a03 	vldr	s0, [r7, #12]
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 ff35 	bl	8006418 <acc_service_requested_start_set>
	acc_service_requested_length_set(envelope_configuration, length_m);
 80055ae:	ed97 0a02 	vldr	s0, [r7, #8]
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 ff3e 	bl	8006434 <acc_service_requested_length_set>
}
 80055b8:	bf00      	nop
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	3d4ccccd 	.word	0x3d4ccccd
 80055c4:	3e4ccccd 	.word	0x3e4ccccd

080055c8 <print_data>:


void print_data(uint16_t *data, uint16_t data_length)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	460b      	mov	r3, r1
 80055d2:	807b      	strh	r3, [r7, #2]
	for (uint16_t i = 0; i < data_length; i++)
 80055d4:	2300      	movs	r3, #0
 80055d6:	81fb      	strh	r3, [r7, #14]
 80055d8:	e02c      	b.n	8005634 <print_data+0x6c>
	{

		if (i == data_length - 1)
 80055da:	89fa      	ldrh	r2, [r7, #14]
 80055dc:	887b      	ldrh	r3, [r7, #2]
 80055de:	3b01      	subs	r3, #1
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d10f      	bne.n	8005604 <print_data+0x3c>
		{
			sprintf((char*)txbuf, ".");
 80055e4:	4918      	ldr	r1, [pc, #96]	; (8005648 <print_data+0x80>)
 80055e6:	4819      	ldr	r0, [pc, #100]	; (800564c <print_data+0x84>)
 80055e8:	f00a f852 	bl	800f690 <siprintf>
			HAL_UART_Transmit(&huart2, txbuf, strlen((char*)txbuf), HAL_MAX_DELAY);
 80055ec:	4817      	ldr	r0, [pc, #92]	; (800564c <print_data+0x84>)
 80055ee:	f7fa feb7 	bl	8000360 <strlen>
 80055f2:	4603      	mov	r3, r0
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	f04f 33ff 	mov.w	r3, #4294967295
 80055fa:	4914      	ldr	r1, [pc, #80]	; (800564c <print_data+0x84>)
 80055fc:	4814      	ldr	r0, [pc, #80]	; (8005650 <print_data+0x88>)
 80055fe:	f7fe fc3d 	bl	8003e7c <HAL_UART_Transmit>

			break;
 8005602:	e01c      	b.n	800563e <print_data+0x76>
		}

			sprintf((char*)txbuf, "%d,", (unsigned int)(data[i]));
 8005604:	89fb      	ldrh	r3, [r7, #14]
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	4413      	add	r3, r2
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	4910      	ldr	r1, [pc, #64]	; (8005654 <print_data+0x8c>)
 8005612:	480e      	ldr	r0, [pc, #56]	; (800564c <print_data+0x84>)
 8005614:	f00a f83c 	bl	800f690 <siprintf>
			HAL_UART_Transmit(&huart2, txbuf, strlen((char*)txbuf), HAL_MAX_DELAY);
 8005618:	480c      	ldr	r0, [pc, #48]	; (800564c <print_data+0x84>)
 800561a:	f7fa fea1 	bl	8000360 <strlen>
 800561e:	4603      	mov	r3, r0
 8005620:	b29a      	uxth	r2, r3
 8005622:	f04f 33ff 	mov.w	r3, #4294967295
 8005626:	4909      	ldr	r1, [pc, #36]	; (800564c <print_data+0x84>)
 8005628:	4809      	ldr	r0, [pc, #36]	; (8005650 <print_data+0x88>)
 800562a:	f7fe fc27 	bl	8003e7c <HAL_UART_Transmit>
	for (uint16_t i = 0; i < data_length; i++)
 800562e:	89fb      	ldrh	r3, [r7, #14]
 8005630:	3301      	adds	r3, #1
 8005632:	81fb      	strh	r3, [r7, #14]
 8005634:	89fa      	ldrh	r2, [r7, #14]
 8005636:	887b      	ldrh	r3, [r7, #2]
 8005638:	429a      	cmp	r2, r3
 800563a:	d3ce      	bcc.n	80055da <print_data+0x12>
	}
}
 800563c:	bf00      	nop
 800563e:	bf00      	nop
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	08011ac4 	.word	0x08011ac4
 800564c:	20000620 	.word	0x20000620
 8005650:	20000488 	.word	0x20000488
 8005654:	08011ac8 	.word	0x08011ac8

08005658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800565c:	b08d      	sub	sp, #52	; 0x34
 800565e:	af00      	add	r7, sp, #0
 8005660:	466b      	mov	r3, sp
 8005662:	461e      	mov	r6, r3
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005664:	f7fb fc96 	bl	8000f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005668:	f000 f93a 	bl	80058e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800566c:	f000 fa62 	bl	8005b34 <MX_GPIO_Init>
  MX_DMA_Init();
 8005670:	f000 fa2a 	bl	8005ac8 <MX_DMA_Init>
  MX_SPI1_Init();
 8005674:	f000 f986 	bl	8005984 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8005678:	f000 f9c2 	bl	8005a00 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800567c:	f000 f9f4 	bl	8005a68 <MX_USART3_UART_Init>
  ms_main(0xEB00);
*/



  	const acc_hal_t *hal = acc_hal_integration_get_implementation();
 8005680:	f7ff fe5c 	bl	800533c <acc_hal_integration_get_implementation>
 8005684:	62f8      	str	r0, [r7, #44]	; 0x2c

  	if (!acc_rss_activate(hal))
 8005686:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005688:	f000 fe32 	bl	80062f0 <acc_rss_activate>
 800568c:	4603      	mov	r3, r0
 800568e:	f083 0301 	eor.w	r3, r3, #1
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d010      	beq.n	80056ba <main+0x62>
  	{
  		sprintf((char*)txbuf, "acc_rss_activate() failed\n");
 8005698:	4985      	ldr	r1, [pc, #532]	; (80058b0 <main+0x258>)
 800569a:	4886      	ldr	r0, [pc, #536]	; (80058b4 <main+0x25c>)
 800569c:	f009 fff8 	bl	800f690 <siprintf>
  		HAL_UART_Transmit(&huart2, txbuf, strlen((char*)txbuf), HAL_MAX_DELAY);
 80056a0:	4884      	ldr	r0, [pc, #528]	; (80058b4 <main+0x25c>)
 80056a2:	f7fa fe5d 	bl	8000360 <strlen>
 80056a6:	4603      	mov	r3, r0
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	f04f 33ff 	mov.w	r3, #4294967295
 80056ae:	4981      	ldr	r1, [pc, #516]	; (80058b4 <main+0x25c>)
 80056b0:	4881      	ldr	r0, [pc, #516]	; (80058b8 <main+0x260>)
 80056b2:	f7fe fbe3 	bl	8003e7c <HAL_UART_Transmit>
  		return EXIT_FAILURE;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e0f4      	b.n	80058a4 <main+0x24c>
  	}

  	acc_service_configuration_t envelope_configuration = acc_service_envelope_configuration_create();
 80056ba:	f001 f973 	bl	80069a4 <acc_service_envelope_configuration_create>
 80056be:	4603      	mov	r3, r0
 80056c0:	61bb      	str	r3, [r7, #24]

  	if (envelope_configuration == NULL)
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d112      	bne.n	80056ee <main+0x96>
  	{
  		sprintf((char*)txbuf, "acc_service_envelope_configuration_create() failed\n");
 80056c8:	497c      	ldr	r1, [pc, #496]	; (80058bc <main+0x264>)
 80056ca:	487a      	ldr	r0, [pc, #488]	; (80058b4 <main+0x25c>)
 80056cc:	f009 ffe0 	bl	800f690 <siprintf>
  		HAL_UART_Transmit(&huart2, txbuf, strlen((char*)txbuf), HAL_MAX_DELAY);
 80056d0:	4878      	ldr	r0, [pc, #480]	; (80058b4 <main+0x25c>)
 80056d2:	f7fa fe45 	bl	8000360 <strlen>
 80056d6:	4603      	mov	r3, r0
 80056d8:	b29a      	uxth	r2, r3
 80056da:	f04f 33ff 	mov.w	r3, #4294967295
 80056de:	4975      	ldr	r1, [pc, #468]	; (80058b4 <main+0x25c>)
 80056e0:	4875      	ldr	r0, [pc, #468]	; (80058b8 <main+0x260>)
 80056e2:	f7fe fbcb 	bl	8003e7c <HAL_UART_Transmit>
  		acc_rss_deactivate();
 80056e6:	f000 fe41 	bl	800636c <acc_rss_deactivate>
  		return EXIT_FAILURE;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e0da      	b.n	80058a4 <main+0x24c>
  	}

  	update_configuration(envelope_configuration);
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff ff4f 	bl	8005594 <update_configuration>

  	acc_service_handle_t handle = acc_service_create(envelope_configuration);
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f001 fa73 	bl	8006be4 <acc_service_create>
 80056fe:	4603      	mov	r3, r0
 8005700:	617b      	str	r3, [r7, #20]

  	if (handle == NULL)
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d117      	bne.n	8005738 <main+0xe0>
  	{
  		sprintf((char*)txbuf, "acc_service_create() failed\n");
 8005708:	496d      	ldr	r1, [pc, #436]	; (80058c0 <main+0x268>)
 800570a:	486a      	ldr	r0, [pc, #424]	; (80058b4 <main+0x25c>)
 800570c:	f009 ffc0 	bl	800f690 <siprintf>
  		HAL_UART_Transmit(&huart2, txbuf, strlen((char*)txbuf), HAL_MAX_DELAY);
 8005710:	4868      	ldr	r0, [pc, #416]	; (80058b4 <main+0x25c>)
 8005712:	f7fa fe25 	bl	8000360 <strlen>
 8005716:	4603      	mov	r3, r0
 8005718:	b29a      	uxth	r2, r3
 800571a:	f04f 33ff 	mov.w	r3, #4294967295
 800571e:	4965      	ldr	r1, [pc, #404]	; (80058b4 <main+0x25c>)
 8005720:	4865      	ldr	r0, [pc, #404]	; (80058b8 <main+0x260>)
 8005722:	f7fe fbab 	bl	8003e7c <HAL_UART_Transmit>
  		acc_service_envelope_configuration_destroy(&envelope_configuration);
 8005726:	f107 0318 	add.w	r3, r7, #24
 800572a:	4618      	mov	r0, r3
 800572c:	f001 f9c8 	bl	8006ac0 <acc_service_envelope_configuration_destroy>
  		acc_rss_deactivate();
 8005730:	f000 fe1c 	bl	800636c <acc_rss_deactivate>
  		return EXIT_FAILURE;
 8005734:	2301      	movs	r3, #1
 8005736:	e0b5      	b.n	80058a4 <main+0x24c>
  	}

  	acc_service_envelope_configuration_destroy(&envelope_configuration);
 8005738:	f107 0318 	add.w	r3, r7, #24
 800573c:	4618      	mov	r0, r3
 800573e:	f001 f9bf 	bl	8006ac0 <acc_service_envelope_configuration_destroy>

  	acc_service_envelope_metadata_t envelope_metadata = { 0 };
 8005742:	1d3b      	adds	r3, r7, #4
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	605a      	str	r2, [r3, #4]
 800574a:	609a      	str	r2, [r3, #8]
 800574c:	60da      	str	r2, [r3, #12]
  	acc_service_envelope_get_metadata(handle, &envelope_metadata);
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	1d3a      	adds	r2, r7, #4
 8005752:	4611      	mov	r1, r2
 8005754:	4618      	mov	r0, r3
 8005756:	f001 f9c5 	bl	8006ae4 <acc_service_envelope_get_metadata>

  	printf("Start: %d mm\n", (int)(envelope_metadata.start_m * 1000.0f));
 800575a:	edd7 7a01 	vldr	s15, [r7, #4]
 800575e:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80058c4 <main+0x26c>
 8005762:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005766:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800576a:	ee17 1a90 	vmov	r1, s15
 800576e:	4856      	ldr	r0, [pc, #344]	; (80058c8 <main+0x270>)
 8005770:	f009 ff20 	bl	800f5b4 <iprintf>
  	printf("Length: %u mm\n", (unsigned int)(envelope_metadata.length_m * 1000.0f));
 8005774:	edd7 7a02 	vldr	s15, [r7, #8]
 8005778:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80058c4 <main+0x26c>
 800577c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005784:	ee17 1a90 	vmov	r1, s15
 8005788:	4850      	ldr	r0, [pc, #320]	; (80058cc <main+0x274>)
 800578a:	f009 ff13 	bl	800f5b4 <iprintf>
  	printf("Data length: %u\n", (unsigned int)(envelope_metadata.data_length));
 800578e:	89bb      	ldrh	r3, [r7, #12]
 8005790:	4619      	mov	r1, r3
 8005792:	484f      	ldr	r0, [pc, #316]	; (80058d0 <main+0x278>)
 8005794:	f009 ff0e 	bl	800f5b4 <iprintf>

  	if (!acc_service_activate(handle))
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	4618      	mov	r0, r3
 800579c:	f000 fe9e 	bl	80064dc <acc_service_activate>
 80057a0:	4603      	mov	r3, r0
 80057a2:	f083 0301 	eor.w	r3, r3, #1
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d017      	beq.n	80057dc <main+0x184>
  	{
  		sprintf((char*)txbuf, "acc_service_activate() failed\n");
 80057ac:	4949      	ldr	r1, [pc, #292]	; (80058d4 <main+0x27c>)
 80057ae:	4841      	ldr	r0, [pc, #260]	; (80058b4 <main+0x25c>)
 80057b0:	f009 ff6e 	bl	800f690 <siprintf>
  		HAL_UART_Transmit(&huart2, txbuf, strlen((char*)txbuf), HAL_MAX_DELAY);
 80057b4:	483f      	ldr	r0, [pc, #252]	; (80058b4 <main+0x25c>)
 80057b6:	f7fa fdd3 	bl	8000360 <strlen>
 80057ba:	4603      	mov	r3, r0
 80057bc:	b29a      	uxth	r2, r3
 80057be:	f04f 33ff 	mov.w	r3, #4294967295
 80057c2:	493c      	ldr	r1, [pc, #240]	; (80058b4 <main+0x25c>)
 80057c4:	483c      	ldr	r0, [pc, #240]	; (80058b8 <main+0x260>)
 80057c6:	f7fe fb59 	bl	8003e7c <HAL_UART_Transmit>
  		acc_service_destroy(&handle);
 80057ca:	f107 0314 	add.w	r3, r7, #20
 80057ce:	4618      	mov	r0, r3
 80057d0:	f001 fa7c 	bl	8006ccc <acc_service_destroy>
  		acc_rss_deactivate();
 80057d4:	f000 fdca 	bl	800636c <acc_rss_deactivate>
  		return EXIT_FAILURE;
 80057d8:	2301      	movs	r3, #1
 80057da:	e063      	b.n	80058a4 <main+0x24c>
  	}

  	bool                               success    = true;
 80057dc:	2301      	movs	r3, #1
 80057de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  	uint16_t                           data[envelope_metadata.data_length];
 80057e2:	89b9      	ldrh	r1, [r7, #12]
 80057e4:	460b      	mov	r3, r1
 80057e6:	3b01      	subs	r3, #1
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ea:	b28b      	uxth	r3, r1
 80057ec:	2200      	movs	r2, #0
 80057ee:	4698      	mov	r8, r3
 80057f0:	4691      	mov	r9, r2
 80057f2:	f04f 0200 	mov.w	r2, #0
 80057f6:	f04f 0300 	mov.w	r3, #0
 80057fa:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80057fe:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8005802:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8005806:	b28b      	uxth	r3, r1
 8005808:	2200      	movs	r2, #0
 800580a:	461c      	mov	r4, r3
 800580c:	4615      	mov	r5, r2
 800580e:	f04f 0200 	mov.w	r2, #0
 8005812:	f04f 0300 	mov.w	r3, #0
 8005816:	012b      	lsls	r3, r5, #4
 8005818:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800581c:	0122      	lsls	r2, r4, #4
 800581e:	460b      	mov	r3, r1
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	3307      	adds	r3, #7
 8005824:	08db      	lsrs	r3, r3, #3
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	ebad 0d03 	sub.w	sp, sp, r3
 800582c:	466b      	mov	r3, sp
 800582e:	3301      	adds	r3, #1
 8005830:	085b      	lsrs	r3, r3, #1
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	623b      	str	r3, [r7, #32]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	success = acc_service_envelope_get_next(handle, data, envelope_metadata.data_length, &result_info);
 8005836:	6978      	ldr	r0, [r7, #20]
 8005838:	89ba      	ldrh	r2, [r7, #12]
 800583a:	463b      	mov	r3, r7
 800583c:	6a39      	ldr	r1, [r7, #32]
 800583e:	f001 f973 	bl	8006b28 <acc_service_envelope_get_next>
 8005842:	4603      	mov	r3, r0
 8005844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (!success)
 8005848:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800584c:	f083 0301 	eor.w	r3, r3, #1
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d014      	beq.n	8005880 <main+0x228>
	{
		printf("acc_service_envelope_get_next() failed\n");
 8005856:	4820      	ldr	r0, [pc, #128]	; (80058d8 <main+0x280>)
 8005858:	f009 ff12 	bl	800f680 <puts>
		break;
 800585c:	bf00      	nop
    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */
  }
	bool deactivated = acc_service_deactivate(handle);
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	4618      	mov	r0, r3
 8005862:	f000 fe7d 	bl	8006560 <acc_service_deactivate>
 8005866:	4603      	mov	r3, r0
 8005868:	77fb      	strb	r3, [r7, #31]

	acc_service_destroy(&handle);
 800586a:	f107 0314 	add.w	r3, r7, #20
 800586e:	4618      	mov	r0, r3
 8005870:	f001 fa2c 	bl	8006ccc <acc_service_destroy>

	acc_rss_deactivate();
 8005874:	f000 fd7a 	bl	800636c <acc_rss_deactivate>

	if (deactivated && success)
 8005878:	7ffb      	ldrb	r3, [r7, #31]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00f      	beq.n	800589e <main+0x246>
 800587e:	e005      	b.n	800588c <main+0x234>
	print_data(data, envelope_metadata.data_length);
 8005880:	89bb      	ldrh	r3, [r7, #12]
 8005882:	4619      	mov	r1, r3
 8005884:	6a38      	ldr	r0, [r7, #32]
 8005886:	f7ff fe9f 	bl	80055c8 <print_data>
	success = acc_service_envelope_get_next(handle, data, envelope_metadata.data_length, &result_info);
 800588a:	e7d4      	b.n	8005836 <main+0x1de>
	if (deactivated && success)
 800588c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005890:	2b00      	cmp	r3, #0
 8005892:	d004      	beq.n	800589e <main+0x246>
	{
		printf("Application finished OK\n");
 8005894:	4811      	ldr	r0, [pc, #68]	; (80058dc <main+0x284>)
 8005896:	f009 fef3 	bl	800f680 <puts>
		return EXIT_SUCCESS;
 800589a:	2300      	movs	r3, #0
 800589c:	e002      	b.n	80058a4 <main+0x24c>
 800589e:	46b5      	mov	sp, r6
 80058a0:	2300      	movs	r3, #0
 80058a2:	e000      	b.n	80058a6 <main+0x24e>
  		return EXIT_FAILURE;
 80058a4:	46b5      	mov	sp, r6
	}
  /* USER CODE END 3 */
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3734      	adds	r7, #52	; 0x34
 80058aa:	46bd      	mov	sp, r7
 80058ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058b0:	08011acc 	.word	0x08011acc
 80058b4:	20000620 	.word	0x20000620
 80058b8:	20000488 	.word	0x20000488
 80058bc:	08011ae8 	.word	0x08011ae8
 80058c0:	08011b1c 	.word	0x08011b1c
 80058c4:	447a0000 	.word	0x447a0000
 80058c8:	08011b3c 	.word	0x08011b3c
 80058cc:	08011b4c 	.word	0x08011b4c
 80058d0:	08011b5c 	.word	0x08011b5c
 80058d4:	08011b70 	.word	0x08011b70
 80058d8:	08011b90 	.word	0x08011b90
 80058dc:	08011bb8 	.word	0x08011bb8

080058e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b096      	sub	sp, #88	; 0x58
 80058e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80058e6:	f107 0314 	add.w	r3, r7, #20
 80058ea:	2244      	movs	r2, #68	; 0x44
 80058ec:	2100      	movs	r1, #0
 80058ee:	4618      	mov	r0, r3
 80058f0:	f00a f81a 	bl	800f928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80058f4:	463b      	mov	r3, r7
 80058f6:	2200      	movs	r2, #0
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	605a      	str	r2, [r3, #4]
 80058fc:	609a      	str	r2, [r3, #8]
 80058fe:	60da      	str	r2, [r3, #12]
 8005900:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005902:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005906:	f7fc f979 	bl	8001bfc <HAL_PWREx_ControlVoltageScaling>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8005910:	f000 f9a2 	bl	8005c58 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005914:	2302      	movs	r3, #2
 8005916:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800591c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800591e:	2310      	movs	r3, #16
 8005920:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005922:	2302      	movs	r3, #2
 8005924:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005926:	2302      	movs	r3, #2
 8005928:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800592a:	2301      	movs	r3, #1
 800592c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800592e:	230a      	movs	r3, #10
 8005930:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005932:	2307      	movs	r3, #7
 8005934:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005936:	2302      	movs	r3, #2
 8005938:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800593a:	2302      	movs	r3, #2
 800593c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800593e:	f107 0314 	add.w	r3, r7, #20
 8005942:	4618      	mov	r0, r3
 8005944:	f7fc f9b0 	bl	8001ca8 <HAL_RCC_OscConfig>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800594e:	f000 f983 	bl	8005c58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005952:	230f      	movs	r3, #15
 8005954:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005956:	2303      	movs	r3, #3
 8005958:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800595a:	2300      	movs	r3, #0
 800595c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800595e:	2300      	movs	r3, #0
 8005960:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005962:	2300      	movs	r3, #0
 8005964:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005966:	463b      	mov	r3, r7
 8005968:	2104      	movs	r1, #4
 800596a:	4618      	mov	r0, r3
 800596c:	f7fc fd84 	bl	8002478 <HAL_RCC_ClockConfig>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005976:	f000 f96f 	bl	8005c58 <Error_Handler>
  }
}
 800597a:	bf00      	nop
 800597c:	3758      	adds	r7, #88	; 0x58
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005988:	4b1b      	ldr	r3, [pc, #108]	; (80059f8 <MX_SPI1_Init+0x74>)
 800598a:	4a1c      	ldr	r2, [pc, #112]	; (80059fc <MX_SPI1_Init+0x78>)
 800598c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800598e:	4b1a      	ldr	r3, [pc, #104]	; (80059f8 <MX_SPI1_Init+0x74>)
 8005990:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005994:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005996:	4b18      	ldr	r3, [pc, #96]	; (80059f8 <MX_SPI1_Init+0x74>)
 8005998:	2200      	movs	r2, #0
 800599a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800599c:	4b16      	ldr	r3, [pc, #88]	; (80059f8 <MX_SPI1_Init+0x74>)
 800599e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80059a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80059a4:	4b14      	ldr	r3, [pc, #80]	; (80059f8 <MX_SPI1_Init+0x74>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80059aa:	4b13      	ldr	r3, [pc, #76]	; (80059f8 <MX_SPI1_Init+0x74>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80059b0:	4b11      	ldr	r3, [pc, #68]	; (80059f8 <MX_SPI1_Init+0x74>)
 80059b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80059b8:	4b0f      	ldr	r3, [pc, #60]	; (80059f8 <MX_SPI1_Init+0x74>)
 80059ba:	2208      	movs	r2, #8
 80059bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80059be:	4b0e      	ldr	r3, [pc, #56]	; (80059f8 <MX_SPI1_Init+0x74>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80059c4:	4b0c      	ldr	r3, [pc, #48]	; (80059f8 <MX_SPI1_Init+0x74>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059ca:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <MX_SPI1_Init+0x74>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80059d0:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <MX_SPI1_Init+0x74>)
 80059d2:	2207      	movs	r2, #7
 80059d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80059d6:	4b08      	ldr	r3, [pc, #32]	; (80059f8 <MX_SPI1_Init+0x74>)
 80059d8:	2200      	movs	r2, #0
 80059da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80059dc:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <MX_SPI1_Init+0x74>)
 80059de:	2208      	movs	r2, #8
 80059e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80059e2:	4805      	ldr	r0, [pc, #20]	; (80059f8 <MX_SPI1_Init+0x74>)
 80059e4:	f7fd fc0a 	bl	80031fc <HAL_SPI_Init>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80059ee:	f000 f933 	bl	8005c58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80059f2:	bf00      	nop
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	20000394 	.word	0x20000394
 80059fc:	40013000 	.word	0x40013000

08005a00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005a04:	4b15      	ldr	r3, [pc, #84]	; (8005a5c <MX_USART2_UART_Init+0x5c>)
 8005a06:	4a16      	ldr	r2, [pc, #88]	; (8005a60 <MX_USART2_UART_Init+0x60>)
 8005a08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 8005a0a:	4b14      	ldr	r3, [pc, #80]	; (8005a5c <MX_USART2_UART_Init+0x5c>)
 8005a0c:	4a15      	ldr	r2, [pc, #84]	; (8005a64 <MX_USART2_UART_Init+0x64>)
 8005a0e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005a10:	4b12      	ldr	r3, [pc, #72]	; (8005a5c <MX_USART2_UART_Init+0x5c>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005a16:	4b11      	ldr	r3, [pc, #68]	; (8005a5c <MX_USART2_UART_Init+0x5c>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005a1c:	4b0f      	ldr	r3, [pc, #60]	; (8005a5c <MX_USART2_UART_Init+0x5c>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005a22:	4b0e      	ldr	r3, [pc, #56]	; (8005a5c <MX_USART2_UART_Init+0x5c>)
 8005a24:	220c      	movs	r2, #12
 8005a26:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a28:	4b0c      	ldr	r3, [pc, #48]	; (8005a5c <MX_USART2_UART_Init+0x5c>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a2e:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <MX_USART2_UART_Init+0x5c>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005a34:	4b09      	ldr	r3, [pc, #36]	; (8005a5c <MX_USART2_UART_Init+0x5c>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005a3a:	4b08      	ldr	r3, [pc, #32]	; (8005a5c <MX_USART2_UART_Init+0x5c>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005a40:	4806      	ldr	r0, [pc, #24]	; (8005a5c <MX_USART2_UART_Init+0x5c>)
 8005a42:	f7fe f9cd 	bl	8003de0 <HAL_UART_Init>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8005a4c:	f000 f904 	bl	8005c58 <Error_Handler>
  /**
   * Set receiver timeout to 100 bits.
   * Receiver timeout is used to be able to receive packages of
   * different length with the UART DMA RX function.
   */
  HAL_UART_ReceiverTimeout_Config(&huart2, 100);
 8005a50:	2164      	movs	r1, #100	; 0x64
 8005a52:	4802      	ldr	r0, [pc, #8]	; (8005a5c <MX_USART2_UART_Init+0x5c>)
 8005a54:	f7fe fdbc 	bl	80045d0 <HAL_UART_ReceiverTimeout_Config>

  /* USER CODE END USART2_Init 2 */

}
 8005a58:	bf00      	nop
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	20000488 	.word	0x20000488
 8005a60:	40004400 	.word	0x40004400
 8005a64:	001e8480 	.word	0x001e8480

08005a68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005a6c:	4b14      	ldr	r3, [pc, #80]	; (8005ac0 <MX_USART3_UART_Init+0x58>)
 8005a6e:	4a15      	ldr	r2, [pc, #84]	; (8005ac4 <MX_USART3_UART_Init+0x5c>)
 8005a70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8005a72:	4b13      	ldr	r3, [pc, #76]	; (8005ac0 <MX_USART3_UART_Init+0x58>)
 8005a74:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005a78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005a7a:	4b11      	ldr	r3, [pc, #68]	; (8005ac0 <MX_USART3_UART_Init+0x58>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005a80:	4b0f      	ldr	r3, [pc, #60]	; (8005ac0 <MX_USART3_UART_Init+0x58>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005a86:	4b0e      	ldr	r3, [pc, #56]	; (8005ac0 <MX_USART3_UART_Init+0x58>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005a8c:	4b0c      	ldr	r3, [pc, #48]	; (8005ac0 <MX_USART3_UART_Init+0x58>)
 8005a8e:	220c      	movs	r2, #12
 8005a90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a92:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <MX_USART3_UART_Init+0x58>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a98:	4b09      	ldr	r3, [pc, #36]	; (8005ac0 <MX_USART3_UART_Init+0x58>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005a9e:	4b08      	ldr	r3, [pc, #32]	; (8005ac0 <MX_USART3_UART_Init+0x58>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005aa4:	4b06      	ldr	r3, [pc, #24]	; (8005ac0 <MX_USART3_UART_Init+0x58>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005aaa:	4805      	ldr	r0, [pc, #20]	; (8005ac0 <MX_USART3_UART_Init+0x58>)
 8005aac:	f7fe f998 	bl	8003de0 <HAL_UART_Init>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005ab6:	f000 f8cf 	bl	8005c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005aba:	bf00      	nop
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	2000050c 	.word	0x2000050c
 8005ac4:	40004800 	.word	0x40004800

08005ac8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005ace:	4b18      	ldr	r3, [pc, #96]	; (8005b30 <MX_DMA_Init+0x68>)
 8005ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ad2:	4a17      	ldr	r2, [pc, #92]	; (8005b30 <MX_DMA_Init+0x68>)
 8005ad4:	f043 0301 	orr.w	r3, r3, #1
 8005ad8:	6493      	str	r3, [r2, #72]	; 0x48
 8005ada:	4b15      	ldr	r3, [pc, #84]	; (8005b30 <MX_DMA_Init+0x68>)
 8005adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	607b      	str	r3, [r7, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	2100      	movs	r1, #0
 8005aea:	200c      	movs	r0, #12
 8005aec:	f7fb fbcd 	bl	800128a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8005af0:	200c      	movs	r0, #12
 8005af2:	f7fb fbe6 	bl	80012c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8005af6:	2200      	movs	r2, #0
 8005af8:	2100      	movs	r1, #0
 8005afa:	200d      	movs	r0, #13
 8005afc:	f7fb fbc5 	bl	800128a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8005b00:	200d      	movs	r0, #13
 8005b02:	f7fb fbde 	bl	80012c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8005b06:	2200      	movs	r2, #0
 8005b08:	2100      	movs	r1, #0
 8005b0a:	2010      	movs	r0, #16
 8005b0c:	f7fb fbbd 	bl	800128a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8005b10:	2010      	movs	r0, #16
 8005b12:	f7fb fbd6 	bl	80012c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8005b16:	2200      	movs	r2, #0
 8005b18:	2100      	movs	r1, #0
 8005b1a:	2011      	movs	r0, #17
 8005b1c:	f7fb fbb5 	bl	800128a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8005b20:	2011      	movs	r0, #17
 8005b22:	f7fb fbce 	bl	80012c2 <HAL_NVIC_EnableIRQ>

}
 8005b26:	bf00      	nop
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	40021000 	.word	0x40021000

08005b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b3a:	f107 030c 	add.w	r3, r7, #12
 8005b3e:	2200      	movs	r2, #0
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	605a      	str	r2, [r3, #4]
 8005b44:	609a      	str	r2, [r3, #8]
 8005b46:	60da      	str	r2, [r3, #12]
 8005b48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b4a:	4b3f      	ldr	r3, [pc, #252]	; (8005c48 <MX_GPIO_Init+0x114>)
 8005b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b4e:	4a3e      	ldr	r2, [pc, #248]	; (8005c48 <MX_GPIO_Init+0x114>)
 8005b50:	f043 0304 	orr.w	r3, r3, #4
 8005b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b56:	4b3c      	ldr	r3, [pc, #240]	; (8005c48 <MX_GPIO_Init+0x114>)
 8005b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b5a:	f003 0304 	and.w	r3, r3, #4
 8005b5e:	60bb      	str	r3, [r7, #8]
 8005b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b62:	4b39      	ldr	r3, [pc, #228]	; (8005c48 <MX_GPIO_Init+0x114>)
 8005b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b66:	4a38      	ldr	r2, [pc, #224]	; (8005c48 <MX_GPIO_Init+0x114>)
 8005b68:	f043 0301 	orr.w	r3, r3, #1
 8005b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b6e:	4b36      	ldr	r3, [pc, #216]	; (8005c48 <MX_GPIO_Init+0x114>)
 8005b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	607b      	str	r3, [r7, #4]
 8005b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b7a:	4b33      	ldr	r3, [pc, #204]	; (8005c48 <MX_GPIO_Init+0x114>)
 8005b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b7e:	4a32      	ldr	r2, [pc, #200]	; (8005c48 <MX_GPIO_Init+0x114>)
 8005b80:	f043 0302 	orr.w	r3, r3, #2
 8005b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b86:	4b30      	ldr	r3, [pc, #192]	; (8005c48 <MX_GPIO_Init+0x114>)
 8005b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, GPIO_PIN_RESET);
 8005b92:	2200      	movs	r2, #0
 8005b94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b98:	482c      	ldr	r0, [pc, #176]	; (8005c4c <MX_GPIO_Init+0x118>)
 8005b9a:	f7fb fff1 	bl	8001b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, XC111_SPI_SS1_Pin|XC111_SPI_SS0_Pin|A111_ENABLE_Pin|A111_CS_N_Pin, GPIO_PIN_RESET);
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8005ba4:	482a      	ldr	r0, [pc, #168]	; (8005c50 <MX_GPIO_Init+0x11c>)
 8005ba6:	f7fb ffeb 	bl	8001b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A111_RESET_N_Pin|XC111_PMU_ENABLE_Pin, GPIO_PIN_RESET);
 8005baa:	2200      	movs	r2, #0
 8005bac:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005bb4:	f7fb ffe4 	bl	8001b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005bca:	f107 030c 	add.w	r3, r7, #12
 8005bce:	4619      	mov	r1, r3
 8005bd0:	481e      	ldr	r0, [pc, #120]	; (8005c4c <MX_GPIO_Init+0x118>)
 8005bd2:	f7fb fe13 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pins : XC111_SPI_SS1_Pin XC111_SPI_SS0_Pin A111_ENABLE_Pin A111_CS_N_Pin */
  GPIO_InitStruct.Pin = XC111_SPI_SS1_Pin|XC111_SPI_SS0_Pin|A111_ENABLE_Pin|A111_CS_N_Pin;
 8005bd6:	f44f 638e 	mov.w	r3, #1136	; 0x470
 8005bda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005be0:	2300      	movs	r3, #0
 8005be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005be4:	2300      	movs	r3, #0
 8005be6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005be8:	f107 030c 	add.w	r3, r7, #12
 8005bec:	4619      	mov	r1, r3
 8005bee:	4818      	ldr	r0, [pc, #96]	; (8005c50 <MX_GPIO_Init+0x11c>)
 8005bf0:	f7fb fe04 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_SENSOR_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = A111_SENSOR_INTERRUPT_Pin;
 8005bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005bfa:	4b16      	ldr	r3, [pc, #88]	; (8005c54 <MX_GPIO_Init+0x120>)
 8005bfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8005c02:	f107 030c 	add.w	r3, r7, #12
 8005c06:	4619      	mov	r1, r3
 8005c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c0c:	f7fb fdf6 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pins : A111_RESET_N_Pin XC111_PMU_ENABLE_Pin */
  GPIO_InitStruct.Pin = A111_RESET_N_Pin|XC111_PMU_ENABLE_Pin;
 8005c10:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005c14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c16:	2301      	movs	r3, #1
 8005c18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c22:	f107 030c 	add.w	r3, r7, #12
 8005c26:	4619      	mov	r1, r3
 8005c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c2c:	f7fb fde6 	bl	80017fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005c30:	2200      	movs	r2, #0
 8005c32:	2100      	movs	r1, #0
 8005c34:	2017      	movs	r0, #23
 8005c36:	f7fb fb28 	bl	800128a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005c3a:	2017      	movs	r0, #23
 8005c3c:	f7fb fb41 	bl	80012c2 <HAL_NVIC_EnableIRQ>

}
 8005c40:	bf00      	nop
 8005c42:	3720      	adds	r7, #32
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	48000800 	.word	0x48000800
 8005c50:	48000400 	.word	0x48000400
 8005c54:	10110000 	.word	0x10110000

08005c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005c5c:	bf00      	nop
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
	...

08005c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c6e:	4b0f      	ldr	r3, [pc, #60]	; (8005cac <HAL_MspInit+0x44>)
 8005c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c72:	4a0e      	ldr	r2, [pc, #56]	; (8005cac <HAL_MspInit+0x44>)
 8005c74:	f043 0301 	orr.w	r3, r3, #1
 8005c78:	6613      	str	r3, [r2, #96]	; 0x60
 8005c7a:	4b0c      	ldr	r3, [pc, #48]	; (8005cac <HAL_MspInit+0x44>)
 8005c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	607b      	str	r3, [r7, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c86:	4b09      	ldr	r3, [pc, #36]	; (8005cac <HAL_MspInit+0x44>)
 8005c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c8a:	4a08      	ldr	r2, [pc, #32]	; (8005cac <HAL_MspInit+0x44>)
 8005c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c90:	6593      	str	r3, [r2, #88]	; 0x58
 8005c92:	4b06      	ldr	r3, [pc, #24]	; (8005cac <HAL_MspInit+0x44>)
 8005c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c9a:	603b      	str	r3, [r7, #0]
 8005c9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	40021000 	.word	0x40021000

08005cb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08a      	sub	sp, #40	; 0x28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cb8:	f107 0314 	add.w	r3, r7, #20
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	605a      	str	r2, [r3, #4]
 8005cc2:	609a      	str	r2, [r3, #8]
 8005cc4:	60da      	str	r2, [r3, #12]
 8005cc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a45      	ldr	r2, [pc, #276]	; (8005de4 <HAL_SPI_MspInit+0x134>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	f040 8083 	bne.w	8005dda <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005cd4:	4b44      	ldr	r3, [pc, #272]	; (8005de8 <HAL_SPI_MspInit+0x138>)
 8005cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd8:	4a43      	ldr	r2, [pc, #268]	; (8005de8 <HAL_SPI_MspInit+0x138>)
 8005cda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cde:	6613      	str	r3, [r2, #96]	; 0x60
 8005ce0:	4b41      	ldr	r3, [pc, #260]	; (8005de8 <HAL_SPI_MspInit+0x138>)
 8005ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ce8:	613b      	str	r3, [r7, #16]
 8005cea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cec:	4b3e      	ldr	r3, [pc, #248]	; (8005de8 <HAL_SPI_MspInit+0x138>)
 8005cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cf0:	4a3d      	ldr	r2, [pc, #244]	; (8005de8 <HAL_SPI_MspInit+0x138>)
 8005cf2:	f043 0301 	orr.w	r3, r3, #1
 8005cf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cf8:	4b3b      	ldr	r3, [pc, #236]	; (8005de8 <HAL_SPI_MspInit+0x138>)
 8005cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = A111_SPI_SCK_Pin|A111_SPI_MISO_Pin|A111_SPI_MOSI_Pin;
 8005d04:	23e0      	movs	r3, #224	; 0xe0
 8005d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d08:	2302      	movs	r3, #2
 8005d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d10:	2303      	movs	r3, #3
 8005d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005d14:	2305      	movs	r3, #5
 8005d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d18:	f107 0314 	add.w	r3, r7, #20
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d22:	f7fb fd6b 	bl	80017fc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8005d26:	4b31      	ldr	r3, [pc, #196]	; (8005dec <HAL_SPI_MspInit+0x13c>)
 8005d28:	4a31      	ldr	r2, [pc, #196]	; (8005df0 <HAL_SPI_MspInit+0x140>)
 8005d2a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8005d2c:	4b2f      	ldr	r3, [pc, #188]	; (8005dec <HAL_SPI_MspInit+0x13c>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d32:	4b2e      	ldr	r3, [pc, #184]	; (8005dec <HAL_SPI_MspInit+0x13c>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d38:	4b2c      	ldr	r3, [pc, #176]	; (8005dec <HAL_SPI_MspInit+0x13c>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d3e:	4b2b      	ldr	r3, [pc, #172]	; (8005dec <HAL_SPI_MspInit+0x13c>)
 8005d40:	2280      	movs	r2, #128	; 0x80
 8005d42:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d44:	4b29      	ldr	r3, [pc, #164]	; (8005dec <HAL_SPI_MspInit+0x13c>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d4a:	4b28      	ldr	r3, [pc, #160]	; (8005dec <HAL_SPI_MspInit+0x13c>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8005d50:	4b26      	ldr	r3, [pc, #152]	; (8005dec <HAL_SPI_MspInit+0x13c>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005d56:	4b25      	ldr	r3, [pc, #148]	; (8005dec <HAL_SPI_MspInit+0x13c>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8005d5c:	4823      	ldr	r0, [pc, #140]	; (8005dec <HAL_SPI_MspInit+0x13c>)
 8005d5e:	f7fb facb 	bl	80012f8 <HAL_DMA_Init>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8005d68:	f7ff ff76 	bl	8005c58 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a1f      	ldr	r2, [pc, #124]	; (8005dec <HAL_SPI_MspInit+0x13c>)
 8005d70:	659a      	str	r2, [r3, #88]	; 0x58
 8005d72:	4a1e      	ldr	r2, [pc, #120]	; (8005dec <HAL_SPI_MspInit+0x13c>)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8005d78:	4b1e      	ldr	r3, [pc, #120]	; (8005df4 <HAL_SPI_MspInit+0x144>)
 8005d7a:	4a1f      	ldr	r2, [pc, #124]	; (8005df8 <HAL_SPI_MspInit+0x148>)
 8005d7c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8005d7e:	4b1d      	ldr	r3, [pc, #116]	; (8005df4 <HAL_SPI_MspInit+0x144>)
 8005d80:	2201      	movs	r2, #1
 8005d82:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d84:	4b1b      	ldr	r3, [pc, #108]	; (8005df4 <HAL_SPI_MspInit+0x144>)
 8005d86:	2210      	movs	r2, #16
 8005d88:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d8a:	4b1a      	ldr	r3, [pc, #104]	; (8005df4 <HAL_SPI_MspInit+0x144>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005d90:	4b18      	ldr	r3, [pc, #96]	; (8005df4 <HAL_SPI_MspInit+0x144>)
 8005d92:	2280      	movs	r2, #128	; 0x80
 8005d94:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d96:	4b17      	ldr	r3, [pc, #92]	; (8005df4 <HAL_SPI_MspInit+0x144>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d9c:	4b15      	ldr	r3, [pc, #84]	; (8005df4 <HAL_SPI_MspInit+0x144>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8005da2:	4b14      	ldr	r3, [pc, #80]	; (8005df4 <HAL_SPI_MspInit+0x144>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005da8:	4b12      	ldr	r3, [pc, #72]	; (8005df4 <HAL_SPI_MspInit+0x144>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005dae:	4811      	ldr	r0, [pc, #68]	; (8005df4 <HAL_SPI_MspInit+0x144>)
 8005db0:	f7fb faa2 	bl	80012f8 <HAL_DMA_Init>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8005dba:	f7ff ff4d 	bl	8005c58 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a0c      	ldr	r2, [pc, #48]	; (8005df4 <HAL_SPI_MspInit+0x144>)
 8005dc2:	655a      	str	r2, [r3, #84]	; 0x54
 8005dc4:	4a0b      	ldr	r2, [pc, #44]	; (8005df4 <HAL_SPI_MspInit+0x144>)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8005dca:	2200      	movs	r2, #0
 8005dcc:	2100      	movs	r1, #0
 8005dce:	2023      	movs	r0, #35	; 0x23
 8005dd0:	f7fb fa5b 	bl	800128a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005dd4:	2023      	movs	r0, #35	; 0x23
 8005dd6:	f7fb fa74 	bl	80012c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005dda:	bf00      	nop
 8005ddc:	3728      	adds	r7, #40	; 0x28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	40013000 	.word	0x40013000
 8005de8:	40021000 	.word	0x40021000
 8005dec:	200003f8 	.word	0x200003f8
 8005df0:	4002001c 	.word	0x4002001c
 8005df4:	20000440 	.word	0x20000440
 8005df8:	40020030 	.word	0x40020030

08005dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b0ae      	sub	sp, #184	; 0xb8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005e08:	2200      	movs	r2, #0
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	605a      	str	r2, [r3, #4]
 8005e0e:	609a      	str	r2, [r3, #8]
 8005e10:	60da      	str	r2, [r3, #12]
 8005e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005e14:	f107 031c 	add.w	r3, r7, #28
 8005e18:	2288      	movs	r2, #136	; 0x88
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f009 fd83 	bl	800f928 <memset>
  if(huart->Instance==USART2)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a70      	ldr	r2, [pc, #448]	; (8005fe8 <HAL_UART_MspInit+0x1ec>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	f040 8097 	bne.w	8005f5c <HAL_UART_MspInit+0x160>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005e2e:	2302      	movs	r3, #2
 8005e30:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005e32:	2300      	movs	r3, #0
 8005e34:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e36:	f107 031c 	add.w	r3, r7, #28
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fc fd22 	bl	8002884 <HAL_RCCEx_PeriphCLKConfig>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005e46:	f7ff ff07 	bl	8005c58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005e4a:	4b68      	ldr	r3, [pc, #416]	; (8005fec <HAL_UART_MspInit+0x1f0>)
 8005e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4e:	4a67      	ldr	r2, [pc, #412]	; (8005fec <HAL_UART_MspInit+0x1f0>)
 8005e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e54:	6593      	str	r3, [r2, #88]	; 0x58
 8005e56:	4b65      	ldr	r3, [pc, #404]	; (8005fec <HAL_UART_MspInit+0x1f0>)
 8005e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e5e:	61bb      	str	r3, [r7, #24]
 8005e60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e62:	4b62      	ldr	r3, [pc, #392]	; (8005fec <HAL_UART_MspInit+0x1f0>)
 8005e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e66:	4a61      	ldr	r2, [pc, #388]	; (8005fec <HAL_UART_MspInit+0x1f0>)
 8005e68:	f043 0301 	orr.w	r3, r3, #1
 8005e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e6e:	4b5f      	ldr	r3, [pc, #380]	; (8005fec <HAL_UART_MspInit+0x1f0>)
 8005e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	617b      	str	r3, [r7, #20]
 8005e78:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005e7a:	230c      	movs	r3, #12
 8005e7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e80:	2302      	movs	r3, #2
 8005e82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e86:	2300      	movs	r3, #0
 8005e88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005e92:	2307      	movs	r3, #7
 8005e94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ea2:	f7fb fcab 	bl	80017fc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005ea6:	4b52      	ldr	r3, [pc, #328]	; (8005ff0 <HAL_UART_MspInit+0x1f4>)
 8005ea8:	4a52      	ldr	r2, [pc, #328]	; (8005ff4 <HAL_UART_MspInit+0x1f8>)
 8005eaa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8005eac:	4b50      	ldr	r3, [pc, #320]	; (8005ff0 <HAL_UART_MspInit+0x1f4>)
 8005eae:	2202      	movs	r2, #2
 8005eb0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005eb2:	4b4f      	ldr	r3, [pc, #316]	; (8005ff0 <HAL_UART_MspInit+0x1f4>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005eb8:	4b4d      	ldr	r3, [pc, #308]	; (8005ff0 <HAL_UART_MspInit+0x1f4>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005ebe:	4b4c      	ldr	r3, [pc, #304]	; (8005ff0 <HAL_UART_MspInit+0x1f4>)
 8005ec0:	2280      	movs	r2, #128	; 0x80
 8005ec2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ec4:	4b4a      	ldr	r3, [pc, #296]	; (8005ff0 <HAL_UART_MspInit+0x1f4>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005eca:	4b49      	ldr	r3, [pc, #292]	; (8005ff0 <HAL_UART_MspInit+0x1f4>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005ed0:	4b47      	ldr	r3, [pc, #284]	; (8005ff0 <HAL_UART_MspInit+0x1f4>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005ed6:	4b46      	ldr	r3, [pc, #280]	; (8005ff0 <HAL_UART_MspInit+0x1f4>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005edc:	4844      	ldr	r0, [pc, #272]	; (8005ff0 <HAL_UART_MspInit+0x1f4>)
 8005ede:	f7fb fa0b 	bl	80012f8 <HAL_DMA_Init>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8005ee8:	f7ff feb6 	bl	8005c58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a40      	ldr	r2, [pc, #256]	; (8005ff0 <HAL_UART_MspInit+0x1f4>)
 8005ef0:	671a      	str	r2, [r3, #112]	; 0x70
 8005ef2:	4a3f      	ldr	r2, [pc, #252]	; (8005ff0 <HAL_UART_MspInit+0x1f4>)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8005ef8:	4b3f      	ldr	r3, [pc, #252]	; (8005ff8 <HAL_UART_MspInit+0x1fc>)
 8005efa:	4a40      	ldr	r2, [pc, #256]	; (8005ffc <HAL_UART_MspInit+0x200>)
 8005efc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8005efe:	4b3e      	ldr	r3, [pc, #248]	; (8005ff8 <HAL_UART_MspInit+0x1fc>)
 8005f00:	2202      	movs	r2, #2
 8005f02:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005f04:	4b3c      	ldr	r3, [pc, #240]	; (8005ff8 <HAL_UART_MspInit+0x1fc>)
 8005f06:	2210      	movs	r2, #16
 8005f08:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f0a:	4b3b      	ldr	r3, [pc, #236]	; (8005ff8 <HAL_UART_MspInit+0x1fc>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005f10:	4b39      	ldr	r3, [pc, #228]	; (8005ff8 <HAL_UART_MspInit+0x1fc>)
 8005f12:	2280      	movs	r2, #128	; 0x80
 8005f14:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005f16:	4b38      	ldr	r3, [pc, #224]	; (8005ff8 <HAL_UART_MspInit+0x1fc>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005f1c:	4b36      	ldr	r3, [pc, #216]	; (8005ff8 <HAL_UART_MspInit+0x1fc>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005f22:	4b35      	ldr	r3, [pc, #212]	; (8005ff8 <HAL_UART_MspInit+0x1fc>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005f28:	4b33      	ldr	r3, [pc, #204]	; (8005ff8 <HAL_UART_MspInit+0x1fc>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005f2e:	4832      	ldr	r0, [pc, #200]	; (8005ff8 <HAL_UART_MspInit+0x1fc>)
 8005f30:	f7fb f9e2 	bl	80012f8 <HAL_DMA_Init>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8005f3a:	f7ff fe8d 	bl	8005c58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a2d      	ldr	r2, [pc, #180]	; (8005ff8 <HAL_UART_MspInit+0x1fc>)
 8005f42:	66da      	str	r2, [r3, #108]	; 0x6c
 8005f44:	4a2c      	ldr	r2, [pc, #176]	; (8005ff8 <HAL_UART_MspInit+0x1fc>)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	2026      	movs	r0, #38	; 0x26
 8005f50:	f7fb f99b 	bl	800128a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005f54:	2026      	movs	r0, #38	; 0x26
 8005f56:	f7fb f9b4 	bl	80012c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005f5a:	e040      	b.n	8005fde <HAL_UART_MspInit+0x1e2>
  else if(huart->Instance==USART3)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a27      	ldr	r2, [pc, #156]	; (8006000 <HAL_UART_MspInit+0x204>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d13b      	bne.n	8005fde <HAL_UART_MspInit+0x1e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005f66:	2304      	movs	r3, #4
 8005f68:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f6e:	f107 031c 	add.w	r3, r7, #28
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fc fc86 	bl	8002884 <HAL_RCCEx_PeriphCLKConfig>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <HAL_UART_MspInit+0x186>
      Error_Handler();
 8005f7e:	f7ff fe6b 	bl	8005c58 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005f82:	4b1a      	ldr	r3, [pc, #104]	; (8005fec <HAL_UART_MspInit+0x1f0>)
 8005f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f86:	4a19      	ldr	r2, [pc, #100]	; (8005fec <HAL_UART_MspInit+0x1f0>)
 8005f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f8c:	6593      	str	r3, [r2, #88]	; 0x58
 8005f8e:	4b17      	ldr	r3, [pc, #92]	; (8005fec <HAL_UART_MspInit+0x1f0>)
 8005f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f96:	613b      	str	r3, [r7, #16]
 8005f98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f9a:	4b14      	ldr	r3, [pc, #80]	; (8005fec <HAL_UART_MspInit+0x1f0>)
 8005f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f9e:	4a13      	ldr	r2, [pc, #76]	; (8005fec <HAL_UART_MspInit+0x1f0>)
 8005fa0:	f043 0304 	orr.w	r3, r3, #4
 8005fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fa6:	4b11      	ldr	r3, [pc, #68]	; (8005fec <HAL_UART_MspInit+0x1f0>)
 8005fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005faa:	f003 0304 	and.w	r3, r3, #4
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEBUG_USART_TX_Pin|DEBUG_USART_RX_Pin;
 8005fb2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fba:	2302      	movs	r3, #2
 8005fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005fcc:	2307      	movs	r3, #7
 8005fce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fd2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	480a      	ldr	r0, [pc, #40]	; (8006004 <HAL_UART_MspInit+0x208>)
 8005fda:	f7fb fc0f 	bl	80017fc <HAL_GPIO_Init>
}
 8005fde:	bf00      	nop
 8005fe0:	37b8      	adds	r7, #184	; 0xb8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	40004400 	.word	0x40004400
 8005fec:	40021000 	.word	0x40021000
 8005ff0:	20000590 	.word	0x20000590
 8005ff4:	4002006c 	.word	0x4002006c
 8005ff8:	200005d8 	.word	0x200005d8
 8005ffc:	40020080 	.word	0x40020080
 8006000:	40004800 	.word	0x40004800
 8006004:	48000800 	.word	0x48000800

08006008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006008:	b480      	push	{r7}
 800600a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800600c:	bf00      	nop
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006016:	b480      	push	{r7}
 8006018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800601a:	e7fe      	b.n	800601a <HardFault_Handler+0x4>

0800601c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800601c:	b480      	push	{r7}
 800601e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006020:	e7fe      	b.n	8006020 <MemManage_Handler+0x4>

08006022 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006022:	b480      	push	{r7}
 8006024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006026:	e7fe      	b.n	8006026 <BusFault_Handler+0x4>

08006028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006028:	b480      	push	{r7}
 800602a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800602c:	e7fe      	b.n	800602c <UsageFault_Handler+0x4>

0800602e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800602e:	b480      	push	{r7}
 8006030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006032:	bf00      	nop
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800603c:	b480      	push	{r7}
 800603e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006040:	bf00      	nop
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800604a:	b480      	push	{r7}
 800604c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800604e:	bf00      	nop
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800605c:	f7fa fff6 	bl	800104c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006060:	bf00      	nop
 8006062:	bd80      	pop	{r7, pc}

08006064 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8006068:	4802      	ldr	r0, [pc, #8]	; (8006074 <DMA1_Channel2_IRQHandler+0x10>)
 800606a:	f7fb fadc 	bl	8001626 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800606e:	bf00      	nop
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	200003f8 	.word	0x200003f8

08006078 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800607c:	4802      	ldr	r0, [pc, #8]	; (8006088 <DMA1_Channel3_IRQHandler+0x10>)
 800607e:	f7fb fad2 	bl	8001626 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8006082:	bf00      	nop
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20000440 	.word	0x20000440

0800608c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006090:	4802      	ldr	r0, [pc, #8]	; (800609c <DMA1_Channel6_IRQHandler+0x10>)
 8006092:	f7fb fac8 	bl	8001626 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8006096:	bf00      	nop
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20000590 	.word	0x20000590

080060a0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80060a4:	4802      	ldr	r0, [pc, #8]	; (80060b0 <DMA1_Channel7_IRQHandler+0x10>)
 80060a6:	f7fb fabe 	bl	8001626 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80060aa:	bf00      	nop
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	200005d8 	.word	0x200005d8

080060b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80060b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80060bc:	f7fb fd78 	bl	8001bb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80060c0:	bf00      	nop
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80060c8:	4802      	ldr	r0, [pc, #8]	; (80060d4 <SPI1_IRQHandler+0x10>)
 80060ca:	f7fd fac7 	bl	800365c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80060ce:	bf00      	nop
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20000394 	.word	0x20000394

080060d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80060dc:	4802      	ldr	r0, [pc, #8]	; (80060e8 <USART2_IRQHandler+0x10>)
 80060de:	f7fe f855 	bl	800418c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80060e2:	bf00      	nop
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20000488 	.word	0x20000488

080060ec <_fstat>:

extern UART_HandleTypeDef DEBUG_UART_HANDLE;


int _fstat(int file, struct stat *st)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
	(void)file;

	st->st_mode = S_IFCHR;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80060fc:	605a      	str	r2, [r3, #4]
	return 0;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <_close>:


int _close(int file)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
	(void)file;

	return -1;
 8006114:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006118:	4618      	mov	r0, r3
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <_getpid>:


int _getpid(void)
{
 8006124:	b480      	push	{r7}
 8006126:	af00      	add	r7, sp, #0
	return 1;
 8006128:	2301      	movs	r3, #1
}
 800612a:	4618      	mov	r0, r3
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <_isatty>:


int _isatty(int file)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
	(void)file;

	return 1;
 800613c:	2301      	movs	r3, #1
}
 800613e:	4618      	mov	r0, r3
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <_lseek>:


int _lseek(int file, int ptr, int dir)
{
 800614a:	b480      	push	{r7}
 800614c:	b085      	sub	sp, #20
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	607a      	str	r2, [r7, #4]
	(void)file;
	(void)ptr;
	(void)dir;

	return 0;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <_kill>:


int _kill(int pid, int sig)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
	(void)pid;
	(void)sig;

	errno = EINVAL;
 800616e:	f009 fc3d 	bl	800f9ec <__errno>
 8006172:	4603      	mov	r3, r0
 8006174:	2216      	movs	r2, #22
 8006176:	601a      	str	r2, [r3, #0]
	return -1;
 8006178:	f04f 33ff 	mov.w	r3, #4294967295
}
 800617c:	4618      	mov	r0, r3
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <_read>:


int _read(int file, char *ptr, int len)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
	(void)file;
	(void)ptr;
	(void)len;

	return -1;
 8006190:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006194:	4618      	mov	r0, r3
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <_write>:


int _write(int file, char *ptr, int len)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
	(void)file;
	HAL_UART_Transmit(&DEBUG_UART_HANDLE, (uint8_t *)ptr, len, 0xFFFF);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061b4:	68b9      	ldr	r1, [r7, #8]
 80061b6:	4804      	ldr	r0, [pc, #16]	; (80061c8 <_write+0x28>)
 80061b8:	f7fd fe60 	bl	8003e7c <HAL_UART_Transmit>
	return len;
 80061bc:	687b      	ldr	r3, [r7, #4]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	2000050c 	.word	0x2000050c

080061cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80061d4:	4a14      	ldr	r2, [pc, #80]	; (8006228 <_sbrk+0x5c>)
 80061d6:	4b15      	ldr	r3, [pc, #84]	; (800622c <_sbrk+0x60>)
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80061e0:	4b13      	ldr	r3, [pc, #76]	; (8006230 <_sbrk+0x64>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d102      	bne.n	80061ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80061e8:	4b11      	ldr	r3, [pc, #68]	; (8006230 <_sbrk+0x64>)
 80061ea:	4a12      	ldr	r2, [pc, #72]	; (8006234 <_sbrk+0x68>)
 80061ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80061ee:	4b10      	ldr	r3, [pc, #64]	; (8006230 <_sbrk+0x64>)
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4413      	add	r3, r2
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d207      	bcs.n	800620c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80061fc:	f009 fbf6 	bl	800f9ec <__errno>
 8006200:	4603      	mov	r3, r0
 8006202:	220c      	movs	r2, #12
 8006204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006206:	f04f 33ff 	mov.w	r3, #4294967295
 800620a:	e009      	b.n	8006220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800620c:	4b08      	ldr	r3, [pc, #32]	; (8006230 <_sbrk+0x64>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006212:	4b07      	ldr	r3, [pc, #28]	; (8006230 <_sbrk+0x64>)
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4413      	add	r3, r2
 800621a:	4a05      	ldr	r2, [pc, #20]	; (8006230 <_sbrk+0x64>)
 800621c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800621e:	68fb      	ldr	r3, [r7, #12]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	20018000 	.word	0x20018000
 800622c:	00002000 	.word	0x00002000
 8006230:	20000660 	.word	0x20000660
 8006234:	20000868 	.word	0x20000868

08006238 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8006238:	b480      	push	{r7}
 800623a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800623c:	4b15      	ldr	r3, [pc, #84]	; (8006294 <SystemInit+0x5c>)
 800623e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006242:	4a14      	ldr	r2, [pc, #80]	; (8006294 <SystemInit+0x5c>)
 8006244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800624c:	4b12      	ldr	r3, [pc, #72]	; (8006298 <SystemInit+0x60>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a11      	ldr	r2, [pc, #68]	; (8006298 <SystemInit+0x60>)
 8006252:	f043 0301 	orr.w	r3, r3, #1
 8006256:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006258:	4b0f      	ldr	r3, [pc, #60]	; (8006298 <SystemInit+0x60>)
 800625a:	2200      	movs	r2, #0
 800625c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800625e:	4b0e      	ldr	r3, [pc, #56]	; (8006298 <SystemInit+0x60>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a0d      	ldr	r2, [pc, #52]	; (8006298 <SystemInit+0x60>)
 8006264:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006268:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800626c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800626e:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <SystemInit+0x60>)
 8006270:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006274:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006276:	4b08      	ldr	r3, [pc, #32]	; (8006298 <SystemInit+0x60>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a07      	ldr	r2, [pc, #28]	; (8006298 <SystemInit+0x60>)
 800627c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006280:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006282:	4b05      	ldr	r3, [pc, #20]	; (8006298 <SystemInit+0x60>)
 8006284:	2200      	movs	r2, #0
 8006286:	619a      	str	r2, [r3, #24]
}
 8006288:	bf00      	nop
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	e000ed00 	.word	0xe000ed00
 8006298:	40021000 	.word	0x40021000

0800629c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800629c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80062d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80062a0:	f7ff ffca 	bl	8006238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80062a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80062a6:	e003      	b.n	80062b0 <LoopCopyDataInit>

080062a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80062a8:	4b0b      	ldr	r3, [pc, #44]	; (80062d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80062aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80062ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80062ae:	3104      	adds	r1, #4

080062b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80062b0:	480a      	ldr	r0, [pc, #40]	; (80062dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80062b2:	4b0b      	ldr	r3, [pc, #44]	; (80062e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80062b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80062b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80062b8:	d3f6      	bcc.n	80062a8 <CopyDataInit>
	ldr	r2, =_sbss
 80062ba:	4a0a      	ldr	r2, [pc, #40]	; (80062e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80062bc:	e002      	b.n	80062c4 <LoopFillZerobss>

080062be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80062be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80062c0:	f842 3b04 	str.w	r3, [r2], #4

080062c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80062c4:	4b08      	ldr	r3, [pc, #32]	; (80062e8 <LoopForever+0x16>)
	cmp	r2, r3
 80062c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80062c8:	d3f9      	bcc.n	80062be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80062ca:	f009 fb95 	bl	800f9f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80062ce:	f7ff f9c3 	bl	8005658 <main>

080062d2 <LoopForever>:

LoopForever:
    b LoopForever
 80062d2:	e7fe      	b.n	80062d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80062d4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80062d8:	080175bc 	.word	0x080175bc
	ldr	r0, =_sdata
 80062dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80062e0:	2000036c 	.word	0x2000036c
	ldr	r2, =_sbss
 80062e4:	2000036c 	.word	0x2000036c
	ldr	r3, = _ebss
 80062e8:	20000868 	.word	0x20000868

080062ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80062ec:	e7fe      	b.n	80062ec <ADC1_2_IRQHandler>
	...

080062f0 <acc_rss_activate>:
 80062f0:	b510      	push	{r4, lr}
 80062f2:	4c18      	ldr	r4, [pc, #96]	; (8006354 <acc_rss_activate+0x64>)
 80062f4:	7823      	ldrb	r3, [r4, #0]
 80062f6:	b9c3      	cbnz	r3, 800632a <acc_rss_activate+0x3a>
 80062f8:	b1a8      	cbz	r0, 8006326 <acc_rss_activate+0x36>
 80062fa:	f001 f8bd 	bl	8007478 <acc_rss_integration_register>
 80062fe:	b188      	cbz	r0, 8006324 <acc_rss_activate+0x34>
 8006300:	f000 fc62 	bl	8006bc8 <acc_service_manager_activate>
 8006304:	b1e8      	cbz	r0, 8006342 <acc_rss_activate+0x52>
 8006306:	f002 fda3 	bl	8008e50 <acc_sensor_manager_activate>
 800630a:	b1d0      	cbz	r0, 8006342 <acc_rss_activate+0x52>
 800630c:	2301      	movs	r3, #1
 800630e:	7023      	strb	r3, [r4, #0]
 8006310:	f001 f9b0 	bl	8007674 <acc_rss_integration_log_level>
 8006314:	2801      	cmp	r0, #1
 8006316:	d905      	bls.n	8006324 <acc_rss_activate+0x34>
 8006318:	4b0f      	ldr	r3, [pc, #60]	; (8006358 <acc_rss_activate+0x68>)
 800631a:	4a10      	ldr	r2, [pc, #64]	; (800635c <acc_rss_activate+0x6c>)
 800631c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800631e:	4910      	ldr	r1, [pc, #64]	; (8006360 <acc_rss_activate+0x70>)
 8006320:	2002      	movs	r0, #2
 8006322:	4798      	blx	r3
 8006324:	7823      	ldrb	r3, [r4, #0]
 8006326:	4618      	mov	r0, r3
 8006328:	bd10      	pop	{r4, pc}
 800632a:	f001 f9a3 	bl	8007674 <acc_rss_integration_log_level>
 800632e:	2801      	cmp	r0, #1
 8006330:	d9f8      	bls.n	8006324 <acc_rss_activate+0x34>
 8006332:	4b09      	ldr	r3, [pc, #36]	; (8006358 <acc_rss_activate+0x68>)
 8006334:	4a0b      	ldr	r2, [pc, #44]	; (8006364 <acc_rss_activate+0x74>)
 8006336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006338:	4909      	ldr	r1, [pc, #36]	; (8006360 <acc_rss_activate+0x70>)
 800633a:	2002      	movs	r0, #2
 800633c:	4798      	blx	r3
 800633e:	7823      	ldrb	r3, [r4, #0]
 8006340:	e7f1      	b.n	8006326 <acc_rss_activate+0x36>
 8006342:	4b05      	ldr	r3, [pc, #20]	; (8006358 <acc_rss_activate+0x68>)
 8006344:	4a08      	ldr	r2, [pc, #32]	; (8006368 <acc_rss_activate+0x78>)
 8006346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006348:	4905      	ldr	r1, [pc, #20]	; (8006360 <acc_rss_activate+0x70>)
 800634a:	2000      	movs	r0, #0
 800634c:	4798      	blx	r3
 800634e:	7823      	ldrb	r3, [r4, #0]
 8006350:	4618      	mov	r0, r3
 8006352:	bd10      	pop	{r4, pc}
 8006354:	20000664 	.word	0x20000664
 8006358:	2000082c 	.word	0x2000082c
 800635c:	08011c54 	.word	0x08011c54
 8006360:	08011c74 	.word	0x08011c74
 8006364:	08011c90 	.word	0x08011c90
 8006368:	08011c78 	.word	0x08011c78

0800636c <acc_rss_deactivate>:
 800636c:	b510      	push	{r4, lr}
 800636e:	4c0b      	ldr	r4, [pc, #44]	; (800639c <acc_rss_deactivate+0x30>)
 8006370:	7823      	ldrb	r3, [r4, #0]
 8006372:	b903      	cbnz	r3, 8006376 <acc_rss_deactivate+0xa>
 8006374:	bd10      	pop	{r4, pc}
 8006376:	f000 fcd5 	bl	8006d24 <acc_service_manager_deactivate>
 800637a:	f002 fda5 	bl	8008ec8 <acc_sensor_manager_deactivate>
 800637e:	f001 f979 	bl	8007674 <acc_rss_integration_log_level>
 8006382:	2801      	cmp	r0, #1
 8006384:	d905      	bls.n	8006392 <acc_rss_deactivate+0x26>
 8006386:	4b06      	ldr	r3, [pc, #24]	; (80063a0 <acc_rss_deactivate+0x34>)
 8006388:	4a06      	ldr	r2, [pc, #24]	; (80063a4 <acc_rss_deactivate+0x38>)
 800638a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638c:	4906      	ldr	r1, [pc, #24]	; (80063a8 <acc_rss_deactivate+0x3c>)
 800638e:	2002      	movs	r0, #2
 8006390:	4798      	blx	r3
 8006392:	f001 f8b1 	bl	80074f8 <acc_rss_integration_unregister>
 8006396:	2300      	movs	r3, #0
 8006398:	7023      	strb	r3, [r4, #0]
 800639a:	bd10      	pop	{r4, pc}
 800639c:	20000664 	.word	0x20000664
 80063a0:	2000082c 	.word	0x2000082c
 80063a4:	08011cb8 	.word	0x08011cb8
 80063a8:	08011c74 	.word	0x08011c74

080063ac <acc_service_get_base_configuration>:
 80063ac:	b510      	push	{r4, lr}
 80063ae:	4604      	mov	r4, r0
 80063b0:	b108      	cbz	r0, 80063b6 <acc_service_get_base_configuration+0xa>
 80063b2:	6900      	ldr	r0, [r0, #16]
 80063b4:	bd10      	pop	{r4, pc}
 80063b6:	f001 f95d 	bl	8007674 <acc_rss_integration_log_level>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	d0fa      	beq.n	80063b4 <acc_service_get_base_configuration+0x8>
 80063be:	4b04      	ldr	r3, [pc, #16]	; (80063d0 <acc_service_get_base_configuration+0x24>)
 80063c0:	4a04      	ldr	r2, [pc, #16]	; (80063d4 <acc_service_get_base_configuration+0x28>)
 80063c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c4:	4904      	ldr	r1, [pc, #16]	; (80063d8 <acc_service_get_base_configuration+0x2c>)
 80063c6:	2001      	movs	r0, #1
 80063c8:	4798      	blx	r3
 80063ca:	4620      	mov	r0, r4
 80063cc:	bd10      	pop	{r4, pc}
 80063ce:	bf00      	nop
 80063d0:	2000082c 	.word	0x2000082c
 80063d4:	08011cdc 	.word	0x08011cdc
 80063d8:	08011cf4 	.word	0x08011cf4

080063dc <set_maximize_signal_attenuation>:
 80063dc:	b570      	push	{r4, r5, r6, lr}
 80063de:	460d      	mov	r5, r1
 80063e0:	4606      	mov	r6, r0
 80063e2:	f7ff ffe3 	bl	80063ac <acc_service_get_base_configuration>
 80063e6:	b158      	cbz	r0, 8006400 <set_maximize_signal_attenuation+0x24>
 80063e8:	4629      	mov	r1, r5
 80063ea:	4604      	mov	r4, r0
 80063ec:	f000 ff38 	bl	8007260 <acc_base_configuration_maximize_signal_attenuation_set>
 80063f0:	b93d      	cbnz	r5, 8006402 <set_maximize_signal_attenuation+0x26>
 80063f2:	68b3      	ldr	r3, [r6, #8]
 80063f4:	b123      	cbz	r3, 8006400 <set_maximize_signal_attenuation+0x24>
 80063f6:	7971      	ldrb	r1, [r6, #5]
 80063f8:	4630      	mov	r0, r6
 80063fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80063fe:	4718      	bx	r3
 8006400:	bd70      	pop	{r4, r5, r6, pc}
 8006402:	4620      	mov	r0, r4
 8006404:	210f      	movs	r1, #15
 8006406:	f000 fe1d 	bl	8007044 <acc_base_configuration_integrator_set>
 800640a:	4620      	mov	r0, r4
 800640c:	2101      	movs	r1, #1
 800640e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006412:	f000 be3f 	b.w	8007094 <acc_base_configuration_integrator_ramp_up_set>
 8006416:	bf00      	nop

08006418 <acc_service_requested_start_set>:
 8006418:	b500      	push	{lr}
 800641a:	b083      	sub	sp, #12
 800641c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006420:	f7ff ffc4 	bl	80063ac <acc_service_get_base_configuration>
 8006424:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006428:	b003      	add	sp, #12
 800642a:	f85d eb04 	ldr.w	lr, [sp], #4
 800642e:	f000 bcd3 	b.w	8006dd8 <acc_base_configuration_requested_start_set>
 8006432:	bf00      	nop

08006434 <acc_service_requested_length_set>:
 8006434:	b500      	push	{lr}
 8006436:	b083      	sub	sp, #12
 8006438:	ed8d 0a01 	vstr	s0, [sp, #4]
 800643c:	f7ff ffb6 	bl	80063ac <acc_service_get_base_configuration>
 8006440:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006444:	b003      	add	sp, #12
 8006446:	f85d eb04 	ldr.w	lr, [sp], #4
 800644a:	f000 bce1 	b.w	8006e10 <acc_base_configuration_requested_length_set>
 800644e:	bf00      	nop

08006450 <acc_service_pipeline_destroy>:
 8006450:	b510      	push	{r4, lr}
 8006452:	4604      	mov	r4, r0
 8006454:	6900      	ldr	r0, [r0, #16]
 8006456:	b118      	cbz	r0, 8006460 <acc_service_pipeline_destroy+0x10>
 8006458:	68c3      	ldr	r3, [r0, #12]
 800645a:	4798      	blx	r3
 800645c:	2300      	movs	r3, #0
 800645e:	6123      	str	r3, [r4, #16]
 8006460:	bd10      	pop	{r4, pc}
 8006462:	bf00      	nop

08006464 <acc_service_send_data>:
 8006464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006466:	9e06      	ldr	r6, [sp, #24]
 8006468:	6944      	ldr	r4, [r0, #20]
 800646a:	7835      	ldrb	r5, [r6, #0]
 800646c:	461f      	mov	r7, r3
 800646e:	b91d      	cbnz	r5, 8006478 <acc_service_send_data+0x14>
 8006470:	7ea5      	ldrb	r5, [r4, #26]
 8006472:	b95d      	cbnz	r5, 800648c <acc_service_send_data+0x28>
 8006474:	68a3      	ldr	r3, [r4, #8]
 8006476:	6019      	str	r1, [r3, #0]
 8006478:	6920      	ldr	r0, [r4, #16]
 800647a:	7665      	strb	r5, [r4, #25]
 800647c:	b128      	cbz	r0, 800648a <acc_service_send_data+0x26>
 800647e:	6962      	ldr	r2, [r4, #20]
 8006480:	4639      	mov	r1, r7
 8006482:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006486:	f009 badd 	b.w	800fa44 <memcpy>
 800648a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800648c:	68e3      	ldr	r3, [r4, #12]
 800648e:	6860      	ldr	r0, [r4, #4]
 8006490:	429a      	cmp	r2, r3
 8006492:	bf28      	it	cs
 8006494:	461a      	movcs	r2, r3
 8006496:	f009 fad5 	bl	800fa44 <memcpy>
 800649a:	7835      	ldrb	r5, [r6, #0]
 800649c:	e7ec      	b.n	8006478 <acc_service_send_data+0x14>
 800649e:	bf00      	nop

080064a0 <acc_service_set_module_active>:
 80064a0:	4b01      	ldr	r3, [pc, #4]	; (80064a8 <acc_service_set_module_active+0x8>)
 80064a2:	7018      	strb	r0, [r3, #0]
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	20000665 	.word	0x20000665

080064ac <acc_service_handle_valid>:
 80064ac:	b508      	push	{r3, lr}
 80064ae:	b118      	cbz	r0, 80064b8 <acc_service_handle_valid+0xc>
 80064b0:	6802      	ldr	r2, [r0, #0]
 80064b2:	4b06      	ldr	r3, [pc, #24]	; (80064cc <acc_service_handle_valid+0x20>)
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d007      	beq.n	80064c8 <acc_service_handle_valid+0x1c>
 80064b8:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <acc_service_handle_valid+0x24>)
 80064ba:	4a06      	ldr	r2, [pc, #24]	; (80064d4 <acc_service_handle_valid+0x28>)
 80064bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064be:	4906      	ldr	r1, [pc, #24]	; (80064d8 <acc_service_handle_valid+0x2c>)
 80064c0:	2000      	movs	r0, #0
 80064c2:	4798      	blx	r3
 80064c4:	2000      	movs	r0, #0
 80064c6:	bd08      	pop	{r3, pc}
 80064c8:	2001      	movs	r0, #1
 80064ca:	bd08      	pop	{r3, pc}
 80064cc:	acc09ee8 	.word	0xacc09ee8
 80064d0:	2000082c 	.word	0x2000082c
 80064d4:	08011cfc 	.word	0x08011cfc
 80064d8:	08011cf4 	.word	0x08011cf4

080064dc <acc_service_activate>:
 80064dc:	b570      	push	{r4, r5, r6, lr}
 80064de:	4604      	mov	r4, r0
 80064e0:	f7ff ffe4 	bl	80064ac <acc_service_handle_valid>
 80064e4:	b1b0      	cbz	r0, 8006514 <acc_service_activate+0x38>
 80064e6:	4b19      	ldr	r3, [pc, #100]	; (800654c <acc_service_activate+0x70>)
 80064e8:	7818      	ldrb	r0, [r3, #0]
 80064ea:	b198      	cbz	r0, 8006514 <acc_service_activate+0x38>
 80064ec:	7a63      	ldrb	r3, [r4, #9]
 80064ee:	b903      	cbnz	r3, 80064f2 <acc_service_activate+0x16>
 80064f0:	bd70      	pop	{r4, r5, r6, pc}
 80064f2:	6863      	ldr	r3, [r4, #4]
 80064f4:	2b2a      	cmp	r3, #42	; 0x2a
 80064f6:	d80d      	bhi.n	8006514 <acc_service_activate+0x38>
 80064f8:	4d15      	ldr	r5, [pc, #84]	; (8006550 <acc_service_activate+0x74>)
 80064fa:	f815 2013 	ldrb.w	r2, [r5, r3, lsl #1]
 80064fe:	b94a      	cbnz	r2, 8006514 <acc_service_activate+0x38>
 8006500:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 8006504:	2101      	movs	r1, #1
 8006506:	7856      	ldrb	r6, [r2, #1]
 8006508:	f805 1013 	strb.w	r1, [r5, r3, lsl #1]
 800650c:	b156      	cbz	r6, 8006524 <acc_service_activate+0x48>
 800650e:	2200      	movs	r2, #0
 8006510:	f805 2013 	strb.w	r2, [r5, r3, lsl #1]
 8006514:	4b0f      	ldr	r3, [pc, #60]	; (8006554 <acc_service_activate+0x78>)
 8006516:	4a10      	ldr	r2, [pc, #64]	; (8006558 <acc_service_activate+0x7c>)
 8006518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651a:	4910      	ldr	r1, [pc, #64]	; (800655c <acc_service_activate+0x80>)
 800651c:	2000      	movs	r0, #0
 800651e:	4798      	blx	r3
 8006520:	2000      	movs	r0, #0
 8006522:	bd70      	pop	{r4, r5, r6, pc}
 8006524:	f104 0018 	add.w	r0, r4, #24
 8006528:	f002 fe38 	bl	800919c <acc_sensor_manager_start_measurement>
 800652c:	6863      	ldr	r3, [r4, #4]
 800652e:	b910      	cbnz	r0, 8006536 <acc_service_activate+0x5a>
 8006530:	2b2a      	cmp	r3, #42	; 0x2a
 8006532:	d8ef      	bhi.n	8006514 <acc_service_activate+0x38>
 8006534:	e7eb      	b.n	800650e <acc_service_activate+0x32>
 8006536:	2b2a      	cmp	r3, #42	; 0x2a
 8006538:	d805      	bhi.n	8006546 <acc_service_activate+0x6a>
 800653a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800653e:	7266      	strb	r6, [r4, #9]
 8006540:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
 8006544:	bd70      	pop	{r4, r5, r6, pc}
 8006546:	7266      	strb	r6, [r4, #9]
 8006548:	bd70      	pop	{r4, r5, r6, pc}
 800654a:	bf00      	nop
 800654c:	20000665 	.word	0x20000665
 8006550:	20000668 	.word	0x20000668
 8006554:	2000082c 	.word	0x2000082c
 8006558:	08011d0c 	.word	0x08011d0c
 800655c:	08011cf4 	.word	0x08011cf4

08006560 <acc_service_deactivate>:
 8006560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006564:	4605      	mov	r5, r0
 8006566:	f7ff ffa1 	bl	80064ac <acc_service_handle_valid>
 800656a:	b110      	cbz	r0, 8006572 <acc_service_deactivate+0x12>
 800656c:	4b16      	ldr	r3, [pc, #88]	; (80065c8 <acc_service_deactivate+0x68>)
 800656e:	781c      	ldrb	r4, [r3, #0]
 8006570:	b94c      	cbnz	r4, 8006586 <acc_service_deactivate+0x26>
 8006572:	4b16      	ldr	r3, [pc, #88]	; (80065cc <acc_service_deactivate+0x6c>)
 8006574:	4a16      	ldr	r2, [pc, #88]	; (80065d0 <acc_service_deactivate+0x70>)
 8006576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006578:	4916      	ldr	r1, [pc, #88]	; (80065d4 <acc_service_deactivate+0x74>)
 800657a:	2000      	movs	r0, #0
 800657c:	4798      	blx	r3
 800657e:	2400      	movs	r4, #0
 8006580:	4620      	mov	r0, r4
 8006582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006586:	7a6b      	ldrb	r3, [r5, #9]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1f9      	bne.n	8006580 <acc_service_deactivate+0x20>
 800658c:	686b      	ldr	r3, [r5, #4]
 800658e:	2b2a      	cmp	r3, #42	; 0x2a
 8006590:	d8ef      	bhi.n	8006572 <acc_service_deactivate+0x12>
 8006592:	4e11      	ldr	r6, [pc, #68]	; (80065d8 <acc_service_deactivate+0x78>)
 8006594:	f816 7013 	ldrb.w	r7, [r6, r3, lsl #1]
 8006598:	2f00      	cmp	r7, #0
 800659a:	d1ea      	bne.n	8006572 <acc_service_deactivate+0x12>
 800659c:	f04f 0801 	mov.w	r8, #1
 80065a0:	f105 0018 	add.w	r0, r5, #24
 80065a4:	f806 8013 	strb.w	r8, [r6, r3, lsl #1]
 80065a8:	f002 fe32 	bl	8009210 <acc_sensor_manager_stop_measurement>
 80065ac:	686b      	ldr	r3, [r5, #4]
 80065ae:	2b2a      	cmp	r3, #42	; 0x2a
 80065b0:	d807      	bhi.n	80065c2 <acc_service_deactivate+0x62>
 80065b2:	eb06 0243 	add.w	r2, r6, r3, lsl #1
 80065b6:	7057      	strb	r7, [r2, #1]
 80065b8:	f885 8009 	strb.w	r8, [r5, #9]
 80065bc:	f806 7013 	strb.w	r7, [r6, r3, lsl #1]
 80065c0:	e7de      	b.n	8006580 <acc_service_deactivate+0x20>
 80065c2:	f885 8009 	strb.w	r8, [r5, #9]
 80065c6:	e7db      	b.n	8006580 <acc_service_deactivate+0x20>
 80065c8:	20000665 	.word	0x20000665
 80065cc:	2000082c 	.word	0x2000082c
 80065d0:	08011d28 	.word	0x08011d28
 80065d4:	08011cf4 	.word	0x08011cf4
 80065d8:	20000668 	.word	0x20000668

080065dc <acc_service_get_next>:
 80065dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e0:	460c      	mov	r4, r1
 80065e2:	b082      	sub	sp, #8
 80065e4:	4606      	mov	r6, r0
 80065e6:	f7ff ff61 	bl	80064ac <acc_service_handle_valid>
 80065ea:	7ea5      	ldrb	r5, [r4, #26]
 80065ec:	b175      	cbz	r5, 800660c <acc_service_get_next+0x30>
 80065ee:	6863      	ldr	r3, [r4, #4]
 80065f0:	b10b      	cbz	r3, 80065f6 <acc_service_get_next+0x1a>
 80065f2:	68e3      	ldr	r3, [r4, #12]
 80065f4:	b96b      	cbnz	r3, 8006612 <acc_service_get_next+0x36>
 80065f6:	4b29      	ldr	r3, [pc, #164]	; (800669c <acc_service_get_next+0xc0>)
 80065f8:	4a29      	ldr	r2, [pc, #164]	; (80066a0 <acc_service_get_next+0xc4>)
 80065fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065fc:	4929      	ldr	r1, [pc, #164]	; (80066a4 <acc_service_get_next+0xc8>)
 80065fe:	2000      	movs	r0, #0
 8006600:	4798      	blx	r3
 8006602:	2500      	movs	r5, #0
 8006604:	4628      	mov	r0, r5
 8006606:	b002      	add	sp, #8
 8006608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800660c:	68a3      	ldr	r3, [r4, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d033      	beq.n	800667a <acc_service_get_next+0x9e>
 8006612:	b920      	cbnz	r0, 800661e <acc_service_get_next+0x42>
 8006614:	2500      	movs	r5, #0
 8006616:	4628      	mov	r0, r5
 8006618:	b002      	add	sp, #8
 800661a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800661e:	7a33      	ldrb	r3, [r6, #8]
 8006620:	7822      	ldrb	r2, [r4, #0]
 8006622:	4293      	cmp	r3, r2
 8006624:	d007      	beq.n	8006636 <acc_service_get_next+0x5a>
 8006626:	491d      	ldr	r1, [pc, #116]	; (800669c <acc_service_get_next+0xc0>)
 8006628:	9200      	str	r2, [sp, #0]
 800662a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800662c:	4a1e      	ldr	r2, [pc, #120]	; (80066a8 <acc_service_get_next+0xcc>)
 800662e:	491d      	ldr	r1, [pc, #116]	; (80066a4 <acc_service_get_next+0xc8>)
 8006630:	2000      	movs	r0, #0
 8006632:	47a0      	blx	r4
 8006634:	e7ee      	b.n	8006614 <acc_service_get_next+0x38>
 8006636:	7e27      	ldrb	r7, [r4, #24]
 8006638:	bb4f      	cbnz	r7, 800668e <acc_service_get_next+0xb2>
 800663a:	f896 8009 	ldrb.w	r8, [r6, #9]
 800663e:	f1b8 0f00 	cmp.w	r8, #0
 8006642:	d00f      	beq.n	8006664 <acc_service_get_next+0x88>
 8006644:	4b15      	ldr	r3, [pc, #84]	; (800669c <acc_service_get_next+0xc0>)
 8006646:	4a19      	ldr	r2, [pc, #100]	; (80066ac <acc_service_get_next+0xd0>)
 8006648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664a:	4916      	ldr	r1, [pc, #88]	; (80066a4 <acc_service_get_next+0xc8>)
 800664c:	2000      	movs	r0, #0
 800664e:	4798      	blx	r3
 8006650:	2500      	movs	r5, #0
 8006652:	2f00      	cmp	r7, #0
 8006654:	d0df      	beq.n	8006616 <acc_service_get_next+0x3a>
 8006656:	4630      	mov	r0, r6
 8006658:	f7ff ff82 	bl	8006560 <acc_service_deactivate>
 800665c:	4628      	mov	r0, r5
 800665e:	b002      	add	sp, #8
 8006660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006664:	6933      	ldr	r3, [r6, #16]
 8006666:	6174      	str	r4, [r6, #20]
 8006668:	e9d3 0200 	ldrd	r0, r2, [r3]
 800666c:	4790      	blx	r2
 800666e:	7e65      	ldrb	r5, [r4, #25]
 8006670:	f8c6 8014 	str.w	r8, [r6, #20]
 8006674:	f085 0501 	eor.w	r5, r5, #1
 8006678:	e7eb      	b.n	8006652 <acc_service_get_next+0x76>
 800667a:	4b08      	ldr	r3, [pc, #32]	; (800669c <acc_service_get_next+0xc0>)
 800667c:	4a0c      	ldr	r2, [pc, #48]	; (80066b0 <acc_service_get_next+0xd4>)
 800667e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006680:	4908      	ldr	r1, [pc, #32]	; (80066a4 <acc_service_get_next+0xc8>)
 8006682:	4628      	mov	r0, r5
 8006684:	4798      	blx	r3
 8006686:	4628      	mov	r0, r5
 8006688:	b002      	add	sp, #8
 800668a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800668e:	4630      	mov	r0, r6
 8006690:	f7ff ff24 	bl	80064dc <acc_service_activate>
 8006694:	4607      	mov	r7, r0
 8006696:	2800      	cmp	r0, #0
 8006698:	d1cf      	bne.n	800663a <acc_service_get_next+0x5e>
 800669a:	e7bb      	b.n	8006614 <acc_service_get_next+0x38>
 800669c:	2000082c 	.word	0x2000082c
 80066a0:	08011d44 	.word	0x08011d44
 80066a4:	08011cf4 	.word	0x08011cf4
 80066a8:	08011d7c 	.word	0x08011d7c
 80066ac:	08011d98 	.word	0x08011d98
 80066b0:	08011d64 	.word	0x08011d64

080066b4 <acc_service_configuration_valid>:
 80066b4:	b508      	push	{r3, lr}
 80066b6:	b118      	cbz	r0, 80066c0 <acc_service_configuration_valid+0xc>
 80066b8:	4b09      	ldr	r3, [pc, #36]	; (80066e0 <acc_service_configuration_valid+0x2c>)
 80066ba:	6802      	ldr	r2, [r0, #0]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d007      	beq.n	80066d0 <acc_service_configuration_valid+0x1c>
 80066c0:	4b08      	ldr	r3, [pc, #32]	; (80066e4 <acc_service_configuration_valid+0x30>)
 80066c2:	4a09      	ldr	r2, [pc, #36]	; (80066e8 <acc_service_configuration_valid+0x34>)
 80066c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c6:	4909      	ldr	r1, [pc, #36]	; (80066ec <acc_service_configuration_valid+0x38>)
 80066c8:	2000      	movs	r0, #0
 80066ca:	4798      	blx	r3
 80066cc:	2000      	movs	r0, #0
 80066ce:	bd08      	pop	{r3, pc}
 80066d0:	8b03      	ldrh	r3, [r0, #24]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d0f4      	beq.n	80066c0 <acc_service_configuration_valid+0xc>
 80066d6:	6943      	ldr	r3, [r0, #20]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d0f1      	beq.n	80066c0 <acc_service_configuration_valid+0xc>
 80066dc:	2001      	movs	r0, #1
 80066de:	bd08      	pop	{r3, pc}
 80066e0:	acc09dd7 	.word	0xacc09dd7
 80066e4:	2000082c 	.word	0x2000082c
 80066e8:	08011cdc 	.word	0x08011cdc
 80066ec:	08011cf4 	.word	0x08011cf4

080066f0 <acc_service_configuration_check>:
 80066f0:	b510      	push	{r4, lr}
 80066f2:	4604      	mov	r4, r0
 80066f4:	f7ff ffde 	bl	80066b4 <acc_service_configuration_valid>
 80066f8:	b118      	cbz	r0, 8006702 <acc_service_configuration_check+0x12>
 80066fa:	7963      	ldrb	r3, [r4, #5]
 80066fc:	3b01      	subs	r3, #1
 80066fe:	2b04      	cmp	r3, #4
 8006700:	d800      	bhi.n	8006704 <acc_service_configuration_check+0x14>
 8006702:	bd10      	pop	{r4, pc}
 8006704:	4b03      	ldr	r3, [pc, #12]	; (8006714 <acc_service_configuration_check+0x24>)
 8006706:	4a04      	ldr	r2, [pc, #16]	; (8006718 <acc_service_configuration_check+0x28>)
 8006708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800670a:	4904      	ldr	r1, [pc, #16]	; (800671c <acc_service_configuration_check+0x2c>)
 800670c:	2000      	movs	r0, #0
 800670e:	4798      	blx	r3
 8006710:	2000      	movs	r0, #0
 8006712:	bd10      	pop	{r4, pc}
 8006714:	2000082c 	.word	0x2000082c
 8006718:	08011db0 	.word	0x08011db0
 800671c:	08011cf4 	.word	0x08011cf4

08006720 <acc_service_profile_set>:
 8006720:	b510      	push	{r4, lr}
 8006722:	b138      	cbz	r0, 8006734 <acc_service_profile_set+0x14>
 8006724:	6882      	ldr	r2, [r0, #8]
 8006726:	4604      	mov	r4, r0
 8006728:	b122      	cbz	r2, 8006734 <acc_service_profile_set+0x14>
 800672a:	7141      	strb	r1, [r0, #5]
 800672c:	4790      	blx	r2
 800672e:	7b23      	ldrb	r3, [r4, #12]
 8006730:	b963      	cbnz	r3, 800674c <acc_service_profile_set+0x2c>
 8006732:	bd10      	pop	{r4, pc}
 8006734:	f000 ff9e 	bl	8007674 <acc_rss_integration_log_level>
 8006738:	2800      	cmp	r0, #0
 800673a:	d0fa      	beq.n	8006732 <acc_service_profile_set+0x12>
 800673c:	4b06      	ldr	r3, [pc, #24]	; (8006758 <acc_service_profile_set+0x38>)
 800673e:	4a07      	ldr	r2, [pc, #28]	; (800675c <acc_service_profile_set+0x3c>)
 8006740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006742:	4907      	ldr	r1, [pc, #28]	; (8006760 <acc_service_profile_set+0x40>)
 8006744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006748:	2001      	movs	r0, #1
 800674a:	4718      	bx	r3
 800674c:	4620      	mov	r0, r4
 800674e:	2101      	movs	r1, #1
 8006750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006754:	f7ff be42 	b.w	80063dc <set_maximize_signal_attenuation>
 8006758:	2000082c 	.word	0x2000082c
 800675c:	08011cdc 	.word	0x08011cdc
 8006760:	08011cf4 	.word	0x08011cf4

08006764 <acc_service_maximize_signal_attenuation_set>:
 8006764:	b110      	cbz	r0, 800676c <acc_service_maximize_signal_attenuation_set+0x8>
 8006766:	7301      	strb	r1, [r0, #12]
 8006768:	f7ff be38 	b.w	80063dc <set_maximize_signal_attenuation>
 800676c:	b510      	push	{r4, lr}
 800676e:	f000 ff81 	bl	8007674 <acc_rss_integration_log_level>
 8006772:	b138      	cbz	r0, 8006784 <acc_service_maximize_signal_attenuation_set+0x20>
 8006774:	4b04      	ldr	r3, [pc, #16]	; (8006788 <acc_service_maximize_signal_attenuation_set+0x24>)
 8006776:	4a05      	ldr	r2, [pc, #20]	; (800678c <acc_service_maximize_signal_attenuation_set+0x28>)
 8006778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800677a:	4905      	ldr	r1, [pc, #20]	; (8006790 <acc_service_maximize_signal_attenuation_set+0x2c>)
 800677c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006780:	2001      	movs	r0, #1
 8006782:	4718      	bx	r3
 8006784:	bd10      	pop	{r4, pc}
 8006786:	bf00      	nop
 8006788:	2000082c 	.word	0x2000082c
 800678c:	08011cdc 	.word	0x08011cdc
 8006790:	08011cf4 	.word	0x08011cf4

08006794 <acc_service_initialize_service_configuration>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	7101      	strb	r1, [r0, #4]
 8006798:	6102      	str	r2, [r0, #16]
 800679a:	9905      	ldr	r1, [sp, #20]
 800679c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80067a0:	4d07      	ldr	r5, [pc, #28]	; (80067c0 <acc_service_initialize_service_configuration+0x2c>)
 80067a2:	6143      	str	r3, [r0, #20]
 80067a4:	4604      	mov	r4, r0
 80067a6:	6005      	str	r5, [r0, #0]
 80067a8:	6081      	str	r1, [r0, #8]
 80067aa:	8302      	strh	r2, [r0, #24]
 80067ac:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80067b0:	f7ff ffb6 	bl	8006720 <acc_service_profile_set>
 80067b4:	4620      	mov	r0, r4
 80067b6:	2100      	movs	r1, #0
 80067b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067bc:	f7ff bfd2 	b.w	8006764 <acc_service_maximize_signal_attenuation_set>
 80067c0:	acc09dd7 	.word	0xacc09dd7

080067c4 <envelope_send_data>:
 80067c4:	b570      	push	{r4, r5, r6, lr}
 80067c6:	460b      	mov	r3, r1
 80067c8:	b084      	sub	sp, #16
 80067ca:	ac02      	add	r4, sp, #8
 80067cc:	4601      	mov	r1, r0
 80067ce:	4610      	mov	r0, r2
 80067d0:	795a      	ldrb	r2, [r3, #5]
 80067d2:	9400      	str	r4, [sp, #0]
 80067d4:	791e      	ldrb	r6, [r3, #4]
 80067d6:	79dd      	ldrb	r5, [r3, #7]
 80067d8:	799c      	ldrb	r4, [r3, #6]
 80067da:	f88d 200d 	strb.w	r2, [sp, #13]
 80067de:	f88d 2008 	strb.w	r2, [sp, #8]
 80067e2:	691a      	ldr	r2, [r3, #16]
 80067e4:	f88d 600e 	strb.w	r6, [sp, #14]
 80067e8:	ab03      	add	r3, sp, #12
 80067ea:	f88d 500f 	strb.w	r5, [sp, #15]
 80067ee:	f88d 400c 	strb.w	r4, [sp, #12]
 80067f2:	f7ff fe37 	bl	8006464 <acc_service_send_data>
 80067f6:	b004      	add	sp, #16
 80067f8:	bd70      	pop	{r4, r5, r6, pc}
 80067fa:	bf00      	nop

080067fc <envelope_create_service>:
 80067fc:	b570      	push	{r4, r5, r6, lr}
 80067fe:	b0a4      	sub	sp, #144	; 0x90
 8006800:	2288      	movs	r2, #136	; 0x88
 8006802:	4604      	mov	r4, r0
 8006804:	a802      	add	r0, sp, #8
 8006806:	460d      	mov	r5, r1
 8006808:	f009 f91c 	bl	800fa44 <memcpy>
 800680c:	a809      	add	r0, sp, #36	; 0x24
 800680e:	f000 fcc3 	bl	8007198 <acc_base_configuration_downsampling_factor_get>
 8006812:	ee07 0a90 	vmov	s15, r0
 8006816:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800681a:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 800681e:	a809      	add	r0, sp, #36	; 0x24
 8006820:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006824:	f000 fbb2 	bl	8006f8c <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set>
 8006828:	a802      	add	r0, sp, #8
 800682a:	f7ff ff61 	bl	80066f0 <acc_service_configuration_check>
 800682e:	b1c0      	cbz	r0, 8006862 <envelope_create_service+0x66>
 8006830:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006832:	2b04      	cmp	r3, #4
 8006834:	d00f      	beq.n	8006856 <envelope_create_service+0x5a>
 8006836:	a809      	add	r0, sp, #36	; 0x24
 8006838:	f000 fdb8 	bl	80073ac <acc_base_configuration_check>
 800683c:	b188      	cbz	r0, 8006862 <envelope_create_service+0x66>
 800683e:	a809      	add	r0, sp, #36	; 0x24
 8006840:	f000 fcaa 	bl	8007198 <acc_base_configuration_downsampling_factor_get>
 8006844:	1e43      	subs	r3, r0, #1
 8006846:	b29b      	uxth	r3, r3
 8006848:	2b01      	cmp	r3, #1
 800684a:	d90d      	bls.n	8006868 <envelope_create_service+0x6c>
 800684c:	2804      	cmp	r0, #4
 800684e:	d00b      	beq.n	8006868 <envelope_create_service+0x6c>
 8006850:	4b1a      	ldr	r3, [pc, #104]	; (80068bc <envelope_create_service+0xc0>)
 8006852:	4a1b      	ldr	r2, [pc, #108]	; (80068c0 <envelope_create_service+0xc4>)
 8006854:	e001      	b.n	800685a <envelope_create_service+0x5e>
 8006856:	4b19      	ldr	r3, [pc, #100]	; (80068bc <envelope_create_service+0xc0>)
 8006858:	4a1a      	ldr	r2, [pc, #104]	; (80068c4 <envelope_create_service+0xc8>)
 800685a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685c:	491a      	ldr	r1, [pc, #104]	; (80068c8 <envelope_create_service+0xcc>)
 800685e:	2000      	movs	r0, #0
 8006860:	4798      	blx	r3
 8006862:	2000      	movs	r0, #0
 8006864:	b024      	add	sp, #144	; 0x90
 8006866:	bd70      	pop	{r4, r5, r6, pc}
 8006868:	2200      	movs	r2, #0
 800686a:	4611      	mov	r1, r2
 800686c:	a809      	add	r0, sp, #36	; 0x24
 800686e:	f000 fd01 	bl	8007274 <acc_base_configuration_cca_get>
 8006872:	2100      	movs	r1, #0
 8006874:	4606      	mov	r6, r0
 8006876:	a809      	add	r0, sp, #36	; 0x24
 8006878:	f000 fb4e 	bl	8006f18 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 800687c:	b106      	cbz	r6, 8006880 <envelope_create_service+0x84>
 800687e:	b990      	cbnz	r0, 80068a6 <envelope_create_service+0xaa>
 8006880:	792b      	ldrb	r3, [r5, #4]
 8006882:	7223      	strb	r3, [r4, #8]
 8006884:	4b11      	ldr	r3, [pc, #68]	; (80068cc <envelope_create_service+0xd0>)
 8006886:	9301      	str	r3, [sp, #4]
 8006888:	aa09      	add	r2, sp, #36	; 0x24
 800688a:	4623      	mov	r3, r4
 800688c:	a901      	add	r1, sp, #4
 800688e:	f104 0018 	add.w	r0, r4, #24
 8006892:	f000 ff21 	bl	80076d8 <acc_pipeline_envelope_assemble>
 8006896:	4b0e      	ldr	r3, [pc, #56]	; (80068d0 <envelope_create_service+0xd4>)
 8006898:	6120      	str	r0, [r4, #16]
 800689a:	3800      	subs	r0, #0
 800689c:	bf18      	it	ne
 800689e:	2001      	movne	r0, #1
 80068a0:	60e3      	str	r3, [r4, #12]
 80068a2:	b024      	add	sp, #144	; 0x90
 80068a4:	bd70      	pop	{r4, r5, r6, pc}
 80068a6:	f000 fee5 	bl	8007674 <acc_rss_integration_log_level>
 80068aa:	2800      	cmp	r0, #0
 80068ac:	d0e8      	beq.n	8006880 <envelope_create_service+0x84>
 80068ae:	4b03      	ldr	r3, [pc, #12]	; (80068bc <envelope_create_service+0xc0>)
 80068b0:	4a08      	ldr	r2, [pc, #32]	; (80068d4 <envelope_create_service+0xd8>)
 80068b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b4:	4904      	ldr	r1, [pc, #16]	; (80068c8 <envelope_create_service+0xcc>)
 80068b6:	2001      	movs	r0, #1
 80068b8:	4798      	blx	r3
 80068ba:	e7e1      	b.n	8006880 <envelope_create_service+0x84>
 80068bc:	2000082c 	.word	0x2000082c
 80068c0:	08011e18 	.word	0x08011e18
 80068c4:	08011dc8 	.word	0x08011dc8
 80068c8:	08011e04 	.word	0x08011e04
 80068cc:	080067c5 	.word	0x080067c5
 80068d0:	08006451 	.word	0x08006451
 80068d4:	08011e38 	.word	0x08011e38

080068d8 <get_and_validate_envelope_configuration>:
 80068d8:	b510      	push	{r4, lr}
 80068da:	4604      	mov	r4, r0
 80068dc:	f7ff feea 	bl	80066b4 <acc_service_configuration_valid>
 80068e0:	b108      	cbz	r0, 80068e6 <get_and_validate_envelope_configuration+0xe>
 80068e2:	7923      	ldrb	r3, [r4, #4]
 80068e4:	b153      	cbz	r3, 80068fc <get_and_validate_envelope_configuration+0x24>
 80068e6:	f000 fec5 	bl	8007674 <acc_rss_integration_log_level>
 80068ea:	b130      	cbz	r0, 80068fa <get_and_validate_envelope_configuration+0x22>
 80068ec:	4b04      	ldr	r3, [pc, #16]	; (8006900 <get_and_validate_envelope_configuration+0x28>)
 80068ee:	4a05      	ldr	r2, [pc, #20]	; (8006904 <get_and_validate_envelope_configuration+0x2c>)
 80068f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f2:	4905      	ldr	r1, [pc, #20]	; (8006908 <get_and_validate_envelope_configuration+0x30>)
 80068f4:	2001      	movs	r0, #1
 80068f6:	4798      	blx	r3
 80068f8:	2000      	movs	r0, #0
 80068fa:	bd10      	pop	{r4, pc}
 80068fc:	4620      	mov	r0, r4
 80068fe:	bd10      	pop	{r4, pc}
 8006900:	2000082c 	.word	0x2000082c
 8006904:	08011cdc 	.word	0x08011cdc
 8006908:	08011e04 	.word	0x08011e04

0800690c <set_configuration_for_profile>:
 800690c:	b530      	push	{r4, r5, lr}
 800690e:	b083      	sub	sp, #12
 8006910:	460c      	mov	r4, r1
 8006912:	f7ff ffe1 	bl	80068d8 <get_and_validate_envelope_configuration>
 8006916:	b1c0      	cbz	r0, 800694a <set_configuration_for_profile+0x3e>
 8006918:	1e61      	subs	r1, r4, #1
 800691a:	4605      	mov	r5, r0
 800691c:	301c      	adds	r0, #28
 800691e:	2904      	cmp	r1, #4
 8006920:	d813      	bhi.n	800694a <set_configuration_for_profile+0x3e>
 8006922:	e8df f001 	tbb	[pc, r1]
 8006926:	2514      	.short	0x2514
 8006928:	3836      	.short	0x3836
 800692a:	03          	.byte	0x03
 800692b:	00          	.byte	0x00
 800692c:	2110      	movs	r1, #16
 800692e:	9001      	str	r0, [sp, #4]
 8006930:	f000 fb9c 	bl	800706c <acc_base_configuration_wg_duration_set>
 8006934:	9801      	ldr	r0, [sp, #4]
 8006936:	2106      	movs	r1, #6
 8006938:	f000 fb84 	bl	8007044 <acc_base_configuration_integrator_set>
 800693c:	9801      	ldr	r0, [sp, #4]
 800693e:	2101      	movs	r1, #1
 8006940:	f000 fba8 	bl	8007094 <acc_base_configuration_integrator_ramp_up_set>
 8006944:	4b15      	ldr	r3, [pc, #84]	; (800699c <set_configuration_for_profile+0x90>)
 8006946:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 800694a:	b003      	add	sp, #12
 800694c:	bd30      	pop	{r4, r5, pc}
 800694e:	2100      	movs	r1, #0
 8006950:	9001      	str	r0, [sp, #4]
 8006952:	f000 fb8b 	bl	800706c <acc_base_configuration_wg_duration_set>
 8006956:	9801      	ldr	r0, [sp, #4]
 8006958:	2100      	movs	r1, #0
 800695a:	f000 fb73 	bl	8007044 <acc_base_configuration_integrator_set>
 800695e:	9801      	ldr	r0, [sp, #4]
 8006960:	2103      	movs	r1, #3
 8006962:	f000 fb97 	bl	8007094 <acc_base_configuration_integrator_ramp_up_set>
 8006966:	4b0e      	ldr	r3, [pc, #56]	; (80069a0 <set_configuration_for_profile+0x94>)
 8006968:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 800696c:	b003      	add	sp, #12
 800696e:	bd30      	pop	{r4, r5, pc}
 8006970:	2107      	movs	r1, #7
 8006972:	9001      	str	r0, [sp, #4]
 8006974:	f000 fb7a 	bl	800706c <acc_base_configuration_wg_duration_set>
 8006978:	9801      	ldr	r0, [sp, #4]
 800697a:	2106      	movs	r1, #6
 800697c:	f000 fb62 	bl	8007044 <acc_base_configuration_integrator_set>
 8006980:	9801      	ldr	r0, [sp, #4]
 8006982:	2109      	movs	r1, #9
 8006984:	f000 fb86 	bl	8007094 <acc_base_configuration_integrator_ramp_up_set>
 8006988:	4b04      	ldr	r3, [pc, #16]	; (800699c <set_configuration_for_profile+0x90>)
 800698a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 800698e:	b003      	add	sp, #12
 8006990:	bd30      	pop	{r4, r5, pc}
 8006992:	2109      	movs	r1, #9
 8006994:	e7ed      	b.n	8006972 <set_configuration_for_profile+0x66>
 8006996:	210c      	movs	r1, #12
 8006998:	e7c9      	b.n	800692e <set_configuration_for_profile+0x22>
 800699a:	bf00      	nop
 800699c:	3b843809 	.word	0x3b843809
 80069a0:	3c8461fa 	.word	0x3c8461fa

080069a4 <acc_service_envelope_configuration_create>:
 80069a4:	b570      	push	{r4, r5, r6, lr}
 80069a6:	4a3e      	ldr	r2, [pc, #248]	; (8006aa0 <acc_service_envelope_configuration_create+0xfc>)
 80069a8:	b084      	sub	sp, #16
 80069aa:	236d      	movs	r3, #109	; 0x6d
 80069ac:	2188      	movs	r1, #136	; 0x88
 80069ae:	2001      	movs	r0, #1
 80069b0:	f000 fe30 	bl	8007614 <acc_rss_integration_mem_calloc_debug>
 80069b4:	4605      	mov	r5, r0
 80069b6:	2800      	cmp	r0, #0
 80069b8:	d06f      	beq.n	8006a9a <acc_service_envelope_configuration_create+0xf6>
 80069ba:	493a      	ldr	r1, [pc, #232]	; (8006aa4 <acc_service_envelope_configuration_create+0x100>)
 80069bc:	f100 041c 	add.w	r4, r0, #28
 80069c0:	2602      	movs	r6, #2
 80069c2:	2358      	movs	r3, #88	; 0x58
 80069c4:	4622      	mov	r2, r4
 80069c6:	e9cd 3100 	strd	r3, r1, [sp]
 80069ca:	9602      	str	r6, [sp, #8]
 80069cc:	4b36      	ldr	r3, [pc, #216]	; (8006aa8 <acc_service_envelope_configuration_create+0x104>)
 80069ce:	2100      	movs	r1, #0
 80069d0:	f7ff fee0 	bl	8006794 <acc_service_initialize_service_configuration>
 80069d4:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8006aac <acc_service_envelope_configuration_create+0x108>
 80069d8:	4620      	mov	r0, r4
 80069da:	f000 f9fd 	bl	8006dd8 <acc_base_configuration_requested_start_set>
 80069de:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8006ab0 <acc_service_envelope_configuration_create+0x10c>
 80069e2:	4620      	mov	r0, r4
 80069e4:	f000 fa14 	bl	8006e10 <acc_base_configuration_requested_length_set>
 80069e8:	4620      	mov	r0, r4
 80069ea:	2106      	movs	r1, #6
 80069ec:	f000 fc64 	bl	80072b8 <acc_base_configuration_mur_set>
 80069f0:	4620      	mov	r0, r4
 80069f2:	210a      	movs	r1, #10
 80069f4:	f000 fa64 	bl	8006ec0 <acc_base_configuration_hw_accelerated_average_samples_set>
 80069f8:	2101      	movs	r1, #1
 80069fa:	4620      	mov	r0, r4
 80069fc:	f000 f9d6 	bl	8006dac <acc_base_configuration_sensor_set>
 8006a00:	4620      	mov	r0, r4
 8006a02:	f000 fa13 	bl	8006e2c <acc_base_configuration_repetition_mode_on_demand_set>
 8006a06:	4631      	mov	r1, r6
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f000 fa1f 	bl	8006e4c <acc_base_configuration_power_save_mode_set>
 8006a0e:	4620      	mov	r0, r4
 8006a10:	2100      	movs	r1, #0
 8006a12:	f000 fb67 	bl	80070e4 <acc_base_configuration_use_point_range_set>
 8006a16:	4620      	mov	r0, r4
 8006a18:	2100      	movs	r1, #0
 8006a1a:	f000 fb4f 	bl	80070bc <acc_base_configuration_sweep_type_debug_set>
 8006a1e:	4620      	mov	r0, r4
 8006a20:	2100      	movs	r1, #0
 8006a22:	f000 fa25 	bl	8006e70 <acc_base_configuration_tx_disable_set>
 8006a26:	4620      	mov	r0, r4
 8006a28:	2100      	movs	r1, #0
 8006a2a:	f000 fa35 	bl	8006e98 <acc_base_configuration_decrease_tx_emission_set>
 8006a2e:	2200      	movs	r2, #0
 8006a30:	4611      	mov	r1, r2
 8006a32:	2340      	movs	r3, #64	; 0x40
 8006a34:	4620      	mov	r0, r4
 8006a36:	f000 fc2f 	bl	8007298 <acc_base_configuration_cca_set>
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	21ff      	movs	r1, #255	; 0xff
 8006a3e:	f000 fb6f 	bl	8007120 <acc_base_configuration_staggered_vga_stabilization_time_set>
 8006a42:	4620      	mov	r0, r4
 8006a44:	2100      	movs	r1, #0
 8006a46:	f000 fb61 	bl	800710c <acc_base_configuration_use_fast_dll_refresh_routine_set>
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	f000 fbad 	bl	80071ac <acc_base_configuration_downsampling_factor_set>
 8006a52:	4620      	mov	r0, r4
 8006a54:	210b      	movs	r1, #11
 8006a56:	f000 fae3 	bl	8007020 <acc_base_configuration_gain_set>
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f000 fbb9 	bl	80071d4 <acc_base_configuration_noise_level_normalization_set>
 8006a62:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8006ab4 <acc_service_envelope_configuration_create+0x110>
 8006a66:	4620      	mov	r0, r4
 8006a68:	f000 fa48 	bl	8006efc <acc_base_configuration_phase_compensation_alpha_set>
 8006a6c:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8006ab8 <acc_service_envelope_configuration_create+0x114>
 8006a70:	4620      	mov	r0, r4
 8006a72:	2101      	movs	r1, #1
 8006a74:	f000 fa5c 	bl	8006f30 <acc_base_configuration_time_domain_low_pass_filter_alpha_set>
 8006a78:	4620      	mov	r0, r4
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	f000 fa70 	bl	8006f60 <acc_base_configuration_filter_demodulated_data_set>
 8006a80:	4620      	mov	r0, r4
 8006a82:	2101      	movs	r1, #1
 8006a84:	f000 fbc4 	bl	8007210 <acc_base_configuration_asynchronous_measurement_set>
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f44f 5196 	mov.w	r1, #4800	; 0x12c0
 8006a8e:	f000 fbd3 	bl	8007238 <acc_base_configuration_min_pipeline_memory_size_set>
 8006a92:	490a      	ldr	r1, [pc, #40]	; (8006abc <acc_service_envelope_configuration_create+0x118>)
 8006a94:	4620      	mov	r0, r4
 8006a96:	f000 fa1b 	bl	8006ed0 <acc_base_configuration_radar_engine_creation_set>
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	b004      	add	sp, #16
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}
 8006aa0:	08011e04 	.word	0x08011e04
 8006aa4:	0800690d 	.word	0x0800690d
 8006aa8:	080067fd 	.word	0x080067fd
 8006aac:	3e4ccccd 	.word	0x3e4ccccd
 8006ab0:	3ecccccd 	.word	0x3ecccccd
 8006ab4:	3dcccccd 	.word	0x3dcccccd
 8006ab8:	3e99999a 	.word	0x3e99999a
 8006abc:	080084b1 	.word	0x080084b1

08006ac0 <acc_service_envelope_configuration_destroy>:
 8006ac0:	b130      	cbz	r0, 8006ad0 <acc_service_envelope_configuration_destroy+0x10>
 8006ac2:	b510      	push	{r4, lr}
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	6800      	ldr	r0, [r0, #0]
 8006ac8:	f7ff fdf4 	bl	80066b4 <acc_service_configuration_valid>
 8006acc:	b908      	cbnz	r0, 8006ad2 <acc_service_envelope_configuration_destroy+0x12>
 8006ace:	bd10      	pop	{r4, pc}
 8006ad0:	4770      	bx	lr
 8006ad2:	6820      	ldr	r0, [r4, #0]
 8006ad4:	f7ff ff00 	bl	80068d8 <get_and_validate_envelope_configuration>
 8006ad8:	f000 fdba 	bl	8007650 <acc_rss_integration_mem_free>
 8006adc:	2300      	movs	r3, #0
 8006ade:	6023      	str	r3, [r4, #0]
 8006ae0:	bd10      	pop	{r4, pc}
 8006ae2:	bf00      	nop

08006ae4 <acc_service_envelope_get_metadata>:
 8006ae4:	b1e0      	cbz	r0, 8006b20 <acc_service_envelope_get_metadata+0x3c>
 8006ae6:	7a03      	ldrb	r3, [r0, #8]
 8006ae8:	b9d3      	cbnz	r3, 8006b20 <acc_service_envelope_get_metadata+0x3c>
 8006aea:	b1c9      	cbz	r1, 8006b20 <acc_service_envelope_get_metadata+0x3c>
 8006aec:	6903      	ldr	r3, [r0, #16]
 8006aee:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8006b24 <acc_service_envelope_get_metadata+0x40>
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	edd3 7a08 	vldr	s15, [r3, #32]
 8006af8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006afa:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
 8006afc:	b430      	push	{r4, r5}
 8006afe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b02:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006b06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b0a:	695d      	ldr	r5, [r3, #20]
 8006b0c:	699c      	ldr	r4, [r3, #24]
 8006b0e:	604c      	str	r4, [r1, #4]
 8006b10:	1e53      	subs	r3, r2, #1
 8006b12:	600d      	str	r5, [r1, #0]
 8006b14:	edc1 7a03 	vstr	s15, [r1, #12]
 8006b18:	bc30      	pop	{r4, r5}
 8006b1a:	814b      	strh	r3, [r1, #10]
 8006b1c:	8108      	strh	r0, [r1, #8]
 8006b1e:	4770      	bx	lr
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	4d8ef3c2 	.word	0x4d8ef3c2

08006b28 <acc_service_envelope_get_next>:
 8006b28:	b530      	push	{r4, r5, lr}
 8006b2a:	b08b      	sub	sp, #44	; 0x2c
 8006b2c:	0052      	lsls	r2, r2, #1
 8006b2e:	9101      	str	r1, [sp, #4]
 8006b30:	2400      	movs	r4, #0
 8006b32:	9206      	str	r2, [sp, #24]
 8006b34:	9307      	str	r3, [sp, #28]
 8006b36:	2204      	movs	r2, #4
 8006b38:	2301      	movs	r3, #1
 8006b3a:	9104      	str	r1, [sp, #16]
 8006b3c:	ad01      	add	r5, sp, #4
 8006b3e:	a903      	add	r1, sp, #12
 8006b40:	f88d 400c 	strb.w	r4, [sp, #12]
 8006b44:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
 8006b48:	9505      	str	r5, [sp, #20]
 8006b4a:	9208      	str	r2, [sp, #32]
 8006b4c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 8006b50:	f7ff fd44 	bl	80065dc <acc_service_get_next>
 8006b54:	b00b      	add	sp, #44	; 0x2c
 8006b56:	bd30      	pop	{r4, r5, pc}

08006b58 <destroy_handle>:
 8006b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b5c:	4e15      	ldr	r6, [pc, #84]	; (8006bb4 <destroy_handle+0x5c>)
 8006b5e:	4605      	mov	r5, r0
 8006b60:	6874      	ldr	r4, [r6, #4]
 8006b62:	f000 fd87 	bl	8007674 <acc_rss_integration_log_level>
 8006b66:	2803      	cmp	r0, #3
 8006b68:	d906      	bls.n	8006b78 <destroy_handle+0x20>
 8006b6a:	4a13      	ldr	r2, [pc, #76]	; (8006bb8 <destroy_handle+0x60>)
 8006b6c:	686b      	ldr	r3, [r5, #4]
 8006b6e:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8006b70:	4912      	ldr	r1, [pc, #72]	; (8006bbc <destroy_handle+0x64>)
 8006b72:	4a13      	ldr	r2, [pc, #76]	; (8006bc0 <destroy_handle+0x68>)
 8006b74:	2004      	movs	r0, #4
 8006b76:	47b8      	blx	r7
 8006b78:	b144      	cbz	r4, 8006b8c <destroy_handle+0x34>
 8006b7a:	42ac      	cmp	r4, r5
 8006b7c:	d102      	bne.n	8006b84 <destroy_handle+0x2c>
 8006b7e:	e016      	b.n	8006bae <destroy_handle+0x56>
 8006b80:	42a5      	cmp	r5, r4
 8006b82:	d00d      	beq.n	8006ba0 <destroy_handle+0x48>
 8006b84:	4623      	mov	r3, r4
 8006b86:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8006b88:	2c00      	cmp	r4, #0
 8006b8a:	d1f9      	bne.n	8006b80 <destroy_handle+0x28>
 8006b8c:	4a0a      	ldr	r2, [pc, #40]	; (8006bb8 <destroy_handle+0x60>)
 8006b8e:	686b      	ldr	r3, [r5, #4]
 8006b90:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8006b92:	490a      	ldr	r1, [pc, #40]	; (8006bbc <destroy_handle+0x64>)
 8006b94:	4a0b      	ldr	r2, [pc, #44]	; (8006bc4 <destroy_handle+0x6c>)
 8006b96:	46a4      	mov	ip, r4
 8006b98:	2000      	movs	r0, #0
 8006b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b9e:	4760      	bx	ip
 8006ba0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8006ba2:	655a      	str	r2, [r3, #84]	; 0x54
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006baa:	f000 bd51 	b.w	8007650 <acc_rss_integration_mem_free>
 8006bae:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8006bb0:	6073      	str	r3, [r6, #4]
 8006bb2:	e7f7      	b.n	8006ba4 <destroy_handle+0x4c>
 8006bb4:	200006c0 	.word	0x200006c0
 8006bb8:	2000082c 	.word	0x2000082c
 8006bbc:	08011ea4 	.word	0x08011ea4
 8006bc0:	08011e80 	.word	0x08011e80
 8006bc4:	08011eb4 	.word	0x08011eb4

08006bc8 <acc_service_manager_activate>:
 8006bc8:	b510      	push	{r4, lr}
 8006bca:	4c05      	ldr	r4, [pc, #20]	; (8006be0 <acc_service_manager_activate+0x18>)
 8006bcc:	7820      	ldrb	r0, [r4, #0]
 8006bce:	b100      	cbz	r0, 8006bd2 <acc_service_manager_activate+0xa>
 8006bd0:	bd10      	pop	{r4, pc}
 8006bd2:	2001      	movs	r0, #1
 8006bd4:	7020      	strb	r0, [r4, #0]
 8006bd6:	f7ff fc63 	bl	80064a0 <acc_service_set_module_active>
 8006bda:	7820      	ldrb	r0, [r4, #0]
 8006bdc:	bd10      	pop	{r4, pc}
 8006bde:	bf00      	nop
 8006be0:	200006c0 	.word	0x200006c0

08006be4 <acc_service_create>:
 8006be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be8:	4e30      	ldr	r6, [pc, #192]	; (8006cac <acc_service_create+0xc8>)
 8006bea:	7834      	ldrb	r4, [r6, #0]
 8006bec:	2c00      	cmp	r4, #0
 8006bee:	d041      	beq.n	8006c74 <acc_service_create+0x90>
 8006bf0:	4605      	mov	r5, r0
 8006bf2:	f7ff fd5f 	bl	80066b4 <acc_service_configuration_valid>
 8006bf6:	b1a0      	cbz	r0, 8006c22 <acc_service_create+0x3e>
 8006bf8:	692b      	ldr	r3, [r5, #16]
 8006bfa:	68df      	ldr	r7, [r3, #12]
 8006bfc:	1e7b      	subs	r3, r7, #1
 8006bfe:	2b29      	cmp	r3, #41	; 0x29
 8006c00:	d84a      	bhi.n	8006c98 <acc_service_create+0xb4>
 8006c02:	7873      	ldrb	r3, [r6, #1]
 8006c04:	b98b      	cbnz	r3, 8006c2a <acc_service_create+0x46>
 8006c06:	6873      	ldr	r3, [r6, #4]
 8006c08:	b913      	cbnz	r3, 8006c10 <acc_service_create+0x2c>
 8006c0a:	e00e      	b.n	8006c2a <acc_service_create+0x46>
 8006c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c0e:	b163      	cbz	r3, 8006c2a <acc_service_create+0x46>
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	4297      	cmp	r7, r2
 8006c14:	d1fa      	bne.n	8006c0c <acc_service_create+0x28>
 8006c16:	4b26      	ldr	r3, [pc, #152]	; (8006cb0 <acc_service_create+0xcc>)
 8006c18:	4a26      	ldr	r2, [pc, #152]	; (8006cb4 <acc_service_create+0xd0>)
 8006c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c1c:	4926      	ldr	r1, [pc, #152]	; (8006cb8 <acc_service_create+0xd4>)
 8006c1e:	2000      	movs	r0, #0
 8006c20:	4798      	blx	r3
 8006c22:	2400      	movs	r4, #0
 8006c24:	4620      	mov	r0, r4
 8006c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c2a:	8b2c      	ldrh	r4, [r5, #24]
 8006c2c:	f000 fd22 	bl	8007674 <acc_rss_integration_log_level>
 8006c30:	2803      	cmp	r0, #3
 8006c32:	d907      	bls.n	8006c44 <acc_service_create+0x60>
 8006c34:	4b1e      	ldr	r3, [pc, #120]	; (8006cb0 <acc_service_create+0xcc>)
 8006c36:	4a21      	ldr	r2, [pc, #132]	; (8006cbc <acc_service_create+0xd8>)
 8006c38:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8006c3c:	491e      	ldr	r1, [pc, #120]	; (8006cb8 <acc_service_create+0xd4>)
 8006c3e:	463b      	mov	r3, r7
 8006c40:	2004      	movs	r0, #4
 8006c42:	47c0      	blx	r8
 8006c44:	4621      	mov	r1, r4
 8006c46:	4a1c      	ldr	r2, [pc, #112]	; (8006cb8 <acc_service_create+0xd4>)
 8006c48:	23bd      	movs	r3, #189	; 0xbd
 8006c4a:	2001      	movs	r0, #1
 8006c4c:	f000 fce2 	bl	8007614 <acc_rss_integration_mem_calloc_debug>
 8006c50:	4604      	mov	r4, r0
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d0e5      	beq.n	8006c22 <acc_service_create+0x3e>
 8006c56:	6873      	ldr	r3, [r6, #4]
 8006c58:	4a19      	ldr	r2, [pc, #100]	; (8006cc0 <acc_service_create+0xdc>)
 8006c5a:	6047      	str	r7, [r0, #4]
 8006c5c:	6002      	str	r2, [r0, #0]
 8006c5e:	6543      	str	r3, [r0, #84]	; 0x54
 8006c60:	6070      	str	r0, [r6, #4]
 8006c62:	696b      	ldr	r3, [r5, #20]
 8006c64:	4629      	mov	r1, r5
 8006c66:	4798      	blx	r3
 8006c68:	b168      	cbz	r0, 8006c86 <acc_service_create+0xa2>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	7263      	strb	r3, [r4, #9]
 8006c6e:	4620      	mov	r0, r4
 8006c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c74:	4b0e      	ldr	r3, [pc, #56]	; (8006cb0 <acc_service_create+0xcc>)
 8006c76:	4a13      	ldr	r2, [pc, #76]	; (8006cc4 <acc_service_create+0xe0>)
 8006c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7a:	490f      	ldr	r1, [pc, #60]	; (8006cb8 <acc_service_create+0xd4>)
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	4798      	blx	r3
 8006c80:	4620      	mov	r0, r4
 8006c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c86:	68e3      	ldr	r3, [r4, #12]
 8006c88:	b10b      	cbz	r3, 8006c8e <acc_service_create+0xaa>
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	4798      	blx	r3
 8006c8e:	4620      	mov	r0, r4
 8006c90:	f7ff ff62 	bl	8006b58 <destroy_handle>
 8006c94:	2400      	movs	r4, #0
 8006c96:	e7c5      	b.n	8006c24 <acc_service_create+0x40>
 8006c98:	4b05      	ldr	r3, [pc, #20]	; (8006cb0 <acc_service_create+0xcc>)
 8006c9a:	4a0b      	ldr	r2, [pc, #44]	; (8006cc8 <acc_service_create+0xe4>)
 8006c9c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8006c9e:	4906      	ldr	r1, [pc, #24]	; (8006cb8 <acc_service_create+0xd4>)
 8006ca0:	232a      	movs	r3, #42	; 0x2a
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	47a0      	blx	r4
 8006ca6:	2400      	movs	r4, #0
 8006ca8:	e7bc      	b.n	8006c24 <acc_service_create+0x40>
 8006caa:	bf00      	nop
 8006cac:	200006c0 	.word	0x200006c0
 8006cb0:	2000082c 	.word	0x2000082c
 8006cb4:	08011f48 	.word	0x08011f48
 8006cb8:	08011ea4 	.word	0x08011ea4
 8006cbc:	08011f14 	.word	0x08011f14
 8006cc0:	acc09ee8 	.word	0xacc09ee8
 8006cc4:	08011f34 	.word	0x08011f34
 8006cc8:	08011ee8 	.word	0x08011ee8

08006ccc <acc_service_destroy>:
 8006ccc:	4b11      	ldr	r3, [pc, #68]	; (8006d14 <acc_service_destroy+0x48>)
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	b510      	push	{r4, lr}
 8006cd2:	b133      	cbz	r3, 8006ce2 <acc_service_destroy+0x16>
 8006cd4:	4604      	mov	r4, r0
 8006cd6:	b118      	cbz	r0, 8006ce0 <acc_service_destroy+0x14>
 8006cd8:	6800      	ldr	r0, [r0, #0]
 8006cda:	f7ff fbe7 	bl	80064ac <acc_service_handle_valid>
 8006cde:	b960      	cbnz	r0, 8006cfa <acc_service_destroy+0x2e>
 8006ce0:	bd10      	pop	{r4, pc}
 8006ce2:	f000 fcc7 	bl	8007674 <acc_rss_integration_log_level>
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	d0fa      	beq.n	8006ce0 <acc_service_destroy+0x14>
 8006cea:	4b0b      	ldr	r3, [pc, #44]	; (8006d18 <acc_service_destroy+0x4c>)
 8006cec:	4a0b      	ldr	r2, [pc, #44]	; (8006d1c <acc_service_destroy+0x50>)
 8006cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cf0:	490b      	ldr	r1, [pc, #44]	; (8006d20 <acc_service_destroy+0x54>)
 8006cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cf6:	2001      	movs	r0, #1
 8006cf8:	4718      	bx	r3
 8006cfa:	6820      	ldr	r0, [r4, #0]
 8006cfc:	f7ff fc30 	bl	8006560 <acc_service_deactivate>
 8006d00:	6820      	ldr	r0, [r4, #0]
 8006d02:	68c3      	ldr	r3, [r0, #12]
 8006d04:	b10b      	cbz	r3, 8006d0a <acc_service_destroy+0x3e>
 8006d06:	4798      	blx	r3
 8006d08:	6820      	ldr	r0, [r4, #0]
 8006d0a:	f7ff ff25 	bl	8006b58 <destroy_handle>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	bd10      	pop	{r4, pc}
 8006d14:	200006c0 	.word	0x200006c0
 8006d18:	2000082c 	.word	0x2000082c
 8006d1c:	08011f34 	.word	0x08011f34
 8006d20:	08011ea4 	.word	0x08011ea4

08006d24 <acc_service_manager_deactivate>:
 8006d24:	b538      	push	{r3, r4, r5, lr}
 8006d26:	4c0e      	ldr	r4, [pc, #56]	; (8006d60 <acc_service_manager_deactivate+0x3c>)
 8006d28:	7823      	ldrb	r3, [r4, #0]
 8006d2a:	b1bb      	cbz	r3, 8006d5c <acc_service_manager_deactivate+0x38>
 8006d2c:	6863      	ldr	r3, [r4, #4]
 8006d2e:	b17b      	cbz	r3, 8006d50 <acc_service_manager_deactivate+0x2c>
 8006d30:	1d25      	adds	r5, r4, #4
 8006d32:	4628      	mov	r0, r5
 8006d34:	f7ff ffca 	bl	8006ccc <acc_service_destroy>
 8006d38:	6863      	ldr	r3, [r4, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1f9      	bne.n	8006d32 <acc_service_manager_deactivate+0xe>
 8006d3e:	f000 fc99 	bl	8007674 <acc_rss_integration_log_level>
 8006d42:	b128      	cbz	r0, 8006d50 <acc_service_manager_deactivate+0x2c>
 8006d44:	4b07      	ldr	r3, [pc, #28]	; (8006d64 <acc_service_manager_deactivate+0x40>)
 8006d46:	4a08      	ldr	r2, [pc, #32]	; (8006d68 <acc_service_manager_deactivate+0x44>)
 8006d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d4a:	4908      	ldr	r1, [pc, #32]	; (8006d6c <acc_service_manager_deactivate+0x48>)
 8006d4c:	2001      	movs	r0, #1
 8006d4e:	4798      	blx	r3
 8006d50:	2000      	movs	r0, #0
 8006d52:	7020      	strb	r0, [r4, #0]
 8006d54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d58:	f7ff bba2 	b.w	80064a0 <acc_service_set_module_active>
 8006d5c:	bd38      	pop	{r3, r4, r5, pc}
 8006d5e:	bf00      	nop
 8006d60:	200006c0 	.word	0x200006c0
 8006d64:	2000082c 	.word	0x2000082c
 8006d68:	08011f70 	.word	0x08011f70
 8006d6c:	08011ea4 	.word	0x08011ea4

08006d70 <configuration_is_valid>:
 8006d70:	b108      	cbz	r0, 8006d76 <configuration_is_valid+0x6>
 8006d72:	2001      	movs	r0, #1
 8006d74:	4770      	bx	lr
 8006d76:	b510      	push	{r4, lr}
 8006d78:	4604      	mov	r4, r0
 8006d7a:	f000 fc7b 	bl	8007674 <acc_rss_integration_log_level>
 8006d7e:	b130      	cbz	r0, 8006d8e <configuration_is_valid+0x1e>
 8006d80:	4b03      	ldr	r3, [pc, #12]	; (8006d90 <configuration_is_valid+0x20>)
 8006d82:	4a04      	ldr	r2, [pc, #16]	; (8006d94 <configuration_is_valid+0x24>)
 8006d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d86:	4904      	ldr	r1, [pc, #16]	; (8006d98 <configuration_is_valid+0x28>)
 8006d88:	2001      	movs	r0, #1
 8006d8a:	4798      	blx	r3
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	bd10      	pop	{r4, pc}
 8006d90:	2000082c 	.word	0x2000082c
 8006d94:	08011fbc 	.word	0x08011fbc
 8006d98:	08011fd8 	.word	0x08011fd8

08006d9c <acc_base_configuration_sensor_get>:
 8006d9c:	b510      	push	{r4, lr}
 8006d9e:	4604      	mov	r4, r0
 8006da0:	f7ff ffe6 	bl	8006d70 <configuration_is_valid>
 8006da4:	b900      	cbnz	r0, 8006da8 <acc_base_configuration_sensor_get+0xc>
 8006da6:	bd10      	pop	{r4, pc}
 8006da8:	68e0      	ldr	r0, [r4, #12]
 8006daa:	bd10      	pop	{r4, pc}

08006dac <acc_base_configuration_sensor_set>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	460d      	mov	r5, r1
 8006db0:	4604      	mov	r4, r0
 8006db2:	f7ff ffdd 	bl	8006d70 <configuration_is_valid>
 8006db6:	b100      	cbz	r0, 8006dba <acc_base_configuration_sensor_set+0xe>
 8006db8:	60e5      	str	r5, [r4, #12]
 8006dba:	bd38      	pop	{r3, r4, r5, pc}

08006dbc <acc_base_configuration_requested_start_get>:
 8006dbc:	b510      	push	{r4, lr}
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	f7ff ffd6 	bl	8006d70 <configuration_is_valid>
 8006dc4:	b910      	cbnz	r0, 8006dcc <acc_base_configuration_requested_start_get+0x10>
 8006dc6:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8006dd4 <acc_base_configuration_requested_start_get+0x18>
 8006dca:	bd10      	pop	{r4, pc}
 8006dcc:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8006dd0:	bd10      	pop	{r4, pc}
 8006dd2:	bf00      	nop
 8006dd4:	00000000 	.word	0x00000000

08006dd8 <acc_base_configuration_requested_start_set>:
 8006dd8:	b510      	push	{r4, lr}
 8006dda:	ed2d 8b02 	vpush	{d8}
 8006dde:	4604      	mov	r4, r0
 8006de0:	eeb0 8a40 	vmov.f32	s16, s0
 8006de4:	f7ff ffc4 	bl	8006d70 <configuration_is_valid>
 8006de8:	b108      	cbz	r0, 8006dee <acc_base_configuration_requested_start_set+0x16>
 8006dea:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
 8006dee:	ecbd 8b02 	vpop	{d8}
 8006df2:	bd10      	pop	{r4, pc}

08006df4 <acc_base_configuration_requested_length_get>:
 8006df4:	b510      	push	{r4, lr}
 8006df6:	4604      	mov	r4, r0
 8006df8:	f7ff ffba 	bl	8006d70 <configuration_is_valid>
 8006dfc:	b910      	cbnz	r0, 8006e04 <acc_base_configuration_requested_length_get+0x10>
 8006dfe:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8006e0c <acc_base_configuration_requested_length_get+0x18>
 8006e02:	bd10      	pop	{r4, pc}
 8006e04:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8006e08:	bd10      	pop	{r4, pc}
 8006e0a:	bf00      	nop
 8006e0c:	00000000 	.word	0x00000000

08006e10 <acc_base_configuration_requested_length_set>:
 8006e10:	b510      	push	{r4, lr}
 8006e12:	ed2d 8b02 	vpush	{d8}
 8006e16:	4604      	mov	r4, r0
 8006e18:	eeb0 8a40 	vmov.f32	s16, s0
 8006e1c:	f7ff ffa8 	bl	8006d70 <configuration_is_valid>
 8006e20:	b108      	cbz	r0, 8006e26 <acc_base_configuration_requested_length_set+0x16>
 8006e22:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
 8006e26:	ecbd 8b02 	vpop	{d8}
 8006e2a:	bd10      	pop	{r4, pc}

08006e2c <acc_base_configuration_repetition_mode_on_demand_set>:
 8006e2c:	b510      	push	{r4, lr}
 8006e2e:	4604      	mov	r4, r0
 8006e30:	f7ff ff9e 	bl	8006d70 <configuration_is_valid>
 8006e34:	b108      	cbz	r0, 8006e3a <acc_base_configuration_repetition_mode_on_demand_set+0xe>
 8006e36:	2301      	movs	r3, #1
 8006e38:	7123      	strb	r3, [r4, #4]
 8006e3a:	bd10      	pop	{r4, pc}

08006e3c <acc_base_configuration_power_save_mode_get>:
 8006e3c:	b510      	push	{r4, lr}
 8006e3e:	4604      	mov	r4, r0
 8006e40:	f7ff ff96 	bl	8006d70 <configuration_is_valid>
 8006e44:	b900      	cbnz	r0, 8006e48 <acc_base_configuration_power_save_mode_get+0xc>
 8006e46:	bd10      	pop	{r4, pc}
 8006e48:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006e4a:	bd10      	pop	{r4, pc}

08006e4c <acc_base_configuration_power_save_mode_set>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	460d      	mov	r5, r1
 8006e50:	4604      	mov	r4, r0
 8006e52:	f7ff ff8d 	bl	8006d70 <configuration_is_valid>
 8006e56:	b100      	cbz	r0, 8006e5a <acc_base_configuration_power_save_mode_set+0xe>
 8006e58:	63a5      	str	r5, [r4, #56]	; 0x38
 8006e5a:	bd38      	pop	{r3, r4, r5, pc}

08006e5c <acc_base_configuration_tx_disable_get>:
 8006e5c:	b510      	push	{r4, lr}
 8006e5e:	4604      	mov	r4, r0
 8006e60:	f7ff ff86 	bl	8006d70 <configuration_is_valid>
 8006e64:	b900      	cbnz	r0, 8006e68 <acc_base_configuration_tx_disable_get+0xc>
 8006e66:	bd10      	pop	{r4, pc}
 8006e68:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
 8006e6c:	bd10      	pop	{r4, pc}
 8006e6e:	bf00      	nop

08006e70 <acc_base_configuration_tx_disable_set>:
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	460d      	mov	r5, r1
 8006e74:	4604      	mov	r4, r0
 8006e76:	f7ff ff7b 	bl	8006d70 <configuration_is_valid>
 8006e7a:	b108      	cbz	r0, 8006e80 <acc_base_configuration_tx_disable_set+0x10>
 8006e7c:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
 8006e80:	bd38      	pop	{r3, r4, r5, pc}
 8006e82:	bf00      	nop

08006e84 <acc_base_configuration_decrease_tx_emission_get>:
 8006e84:	b510      	push	{r4, lr}
 8006e86:	4604      	mov	r4, r0
 8006e88:	f7ff ff72 	bl	8006d70 <configuration_is_valid>
 8006e8c:	b900      	cbnz	r0, 8006e90 <acc_base_configuration_decrease_tx_emission_get+0xc>
 8006e8e:	bd10      	pop	{r4, pc}
 8006e90:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8006e94:	bd10      	pop	{r4, pc}
 8006e96:	bf00      	nop

08006e98 <acc_base_configuration_decrease_tx_emission_set>:
 8006e98:	b538      	push	{r3, r4, r5, lr}
 8006e9a:	460d      	mov	r5, r1
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	f7ff ff67 	bl	8006d70 <configuration_is_valid>
 8006ea2:	b108      	cbz	r0, 8006ea8 <acc_base_configuration_decrease_tx_emission_set+0x10>
 8006ea4:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
 8006ea8:	bd38      	pop	{r3, r4, r5, pc}
 8006eaa:	bf00      	nop

08006eac <acc_base_configuration_hw_accelerated_average_samples_get>:
 8006eac:	b510      	push	{r4, lr}
 8006eae:	4604      	mov	r4, r0
 8006eb0:	f7ff ff5e 	bl	8006d70 <configuration_is_valid>
 8006eb4:	b900      	cbnz	r0, 8006eb8 <acc_base_configuration_hw_accelerated_average_samples_get+0xc>
 8006eb6:	bd10      	pop	{r4, pc}
 8006eb8:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8006ebc:	bd10      	pop	{r4, pc}
 8006ebe:	bf00      	nop

08006ec0 <acc_base_configuration_hw_accelerated_average_samples_set>:
 8006ec0:	b538      	push	{r3, r4, r5, lr}
 8006ec2:	460d      	mov	r5, r1
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	f7ff ff53 	bl	8006d70 <configuration_is_valid>
 8006eca:	b100      	cbz	r0, 8006ece <acc_base_configuration_hw_accelerated_average_samples_set+0xe>
 8006ecc:	87a5      	strh	r5, [r4, #60]	; 0x3c
 8006ece:	bd38      	pop	{r3, r4, r5, pc}

08006ed0 <acc_base_configuration_radar_engine_creation_set>:
 8006ed0:	b538      	push	{r3, r4, r5, lr}
 8006ed2:	460d      	mov	r5, r1
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	f7ff ff4b 	bl	8006d70 <configuration_is_valid>
 8006eda:	b100      	cbz	r0, 8006ede <acc_base_configuration_radar_engine_creation_set+0xe>
 8006edc:	6025      	str	r5, [r4, #0]
 8006ede:	bd38      	pop	{r3, r4, r5, pc}

08006ee0 <acc_base_configuration_phase_compensation_alpha_get>:
 8006ee0:	b510      	push	{r4, lr}
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	f7ff ff44 	bl	8006d70 <configuration_is_valid>
 8006ee8:	b910      	cbnz	r0, 8006ef0 <acc_base_configuration_phase_compensation_alpha_get+0x10>
 8006eea:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8006ef8 <acc_base_configuration_phase_compensation_alpha_get+0x18>
 8006eee:	bd10      	pop	{r4, pc}
 8006ef0:	ed94 0a04 	vldr	s0, [r4, #16]
 8006ef4:	bd10      	pop	{r4, pc}
 8006ef6:	bf00      	nop
 8006ef8:	00000000 	.word	0x00000000

08006efc <acc_base_configuration_phase_compensation_alpha_set>:
 8006efc:	b510      	push	{r4, lr}
 8006efe:	ed2d 8b02 	vpush	{d8}
 8006f02:	4604      	mov	r4, r0
 8006f04:	eeb0 8a40 	vmov.f32	s16, s0
 8006f08:	f7ff ff32 	bl	8006d70 <configuration_is_valid>
 8006f0c:	b108      	cbz	r0, 8006f12 <acc_base_configuration_phase_compensation_alpha_set+0x16>
 8006f0e:	ed84 8a04 	vstr	s16, [r4, #16]
 8006f12:	ecbd 8b02 	vpop	{d8}
 8006f16:	bd10      	pop	{r4, pc}

08006f18 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>:
 8006f18:	b538      	push	{r3, r4, r5, lr}
 8006f1a:	460d      	mov	r5, r1
 8006f1c:	4604      	mov	r4, r0
 8006f1e:	f7ff ff27 	bl	8006d70 <configuration_is_valid>
 8006f22:	b900      	cbnz	r0, 8006f26 <acc_base_configuration_time_domain_low_pass_filter_alpha_get+0xe>
 8006f24:	bd38      	pop	{r3, r4, r5, pc}
 8006f26:	b10d      	cbz	r5, 8006f2c <acc_base_configuration_time_domain_low_pass_filter_alpha_get+0x14>
 8006f28:	6963      	ldr	r3, [r4, #20]
 8006f2a:	602b      	str	r3, [r5, #0]
 8006f2c:	7e20      	ldrb	r0, [r4, #24]
 8006f2e:	bd38      	pop	{r3, r4, r5, pc}

08006f30 <acc_base_configuration_time_domain_low_pass_filter_alpha_set>:
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	ed2d 8b02 	vpush	{d8}
 8006f36:	460d      	mov	r5, r1
 8006f38:	eeb0 8a40 	vmov.f32	s16, s0
 8006f3c:	4604      	mov	r4, r0
 8006f3e:	f7ff ff17 	bl	8006d70 <configuration_is_valid>
 8006f42:	b110      	cbz	r0, 8006f4a <acc_base_configuration_time_domain_low_pass_filter_alpha_set+0x1a>
 8006f44:	ed84 8a05 	vstr	s16, [r4, #20]
 8006f48:	7625      	strb	r5, [r4, #24]
 8006f4a:	ecbd 8b02 	vpop	{d8}
 8006f4e:	bd38      	pop	{r3, r4, r5, pc}

08006f50 <acc_base_configuration_filter_demodulated_data_get>:
 8006f50:	b510      	push	{r4, lr}
 8006f52:	4604      	mov	r4, r0
 8006f54:	f7ff ff0c 	bl	8006d70 <configuration_is_valid>
 8006f58:	b900      	cbnz	r0, 8006f5c <acc_base_configuration_filter_demodulated_data_get+0xc>
 8006f5a:	bd10      	pop	{r4, pc}
 8006f5c:	7f20      	ldrb	r0, [r4, #28]
 8006f5e:	bd10      	pop	{r4, pc}

08006f60 <acc_base_configuration_filter_demodulated_data_set>:
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	460d      	mov	r5, r1
 8006f64:	4604      	mov	r4, r0
 8006f66:	f7ff ff03 	bl	8006d70 <configuration_is_valid>
 8006f6a:	b100      	cbz	r0, 8006f6e <acc_base_configuration_filter_demodulated_data_set+0xe>
 8006f6c:	7725      	strb	r5, [r4, #28]
 8006f6e:	bd38      	pop	{r3, r4, r5, pc}

08006f70 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get>:
 8006f70:	b510      	push	{r4, lr}
 8006f72:	4604      	mov	r4, r0
 8006f74:	f7ff fefc 	bl	8006d70 <configuration_is_valid>
 8006f78:	b910      	cbnz	r0, 8006f80 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get+0x10>
 8006f7a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8006f88 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get+0x18>
 8006f7e:	bd10      	pop	{r4, pc}
 8006f80:	ed94 0a08 	vldr	s0, [r4, #32]
 8006f84:	bd10      	pop	{r4, pc}
 8006f86:	bf00      	nop
 8006f88:	00000000 	.word	0x00000000

08006f8c <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set>:
 8006f8c:	b510      	push	{r4, lr}
 8006f8e:	ed2d 8b02 	vpush	{d8}
 8006f92:	4604      	mov	r4, r0
 8006f94:	eeb0 8a40 	vmov.f32	s16, s0
 8006f98:	f7ff feea 	bl	8006d70 <configuration_is_valid>
 8006f9c:	b108      	cbz	r0, 8006fa2 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set+0x16>
 8006f9e:	ed84 8a08 	vstr	s16, [r4, #32]
 8006fa2:	ecbd 8b02 	vpop	{d8}
 8006fa6:	bd10      	pop	{r4, pc}

08006fa8 <acc_base_configuration_point_start_get>:
 8006fa8:	b510      	push	{r4, lr}
 8006faa:	4604      	mov	r4, r0
 8006fac:	f7ff fee0 	bl	8006d70 <configuration_is_valid>
 8006fb0:	b900      	cbnz	r0, 8006fb4 <acc_base_configuration_point_start_get+0xc>
 8006fb2:	bd10      	pop	{r4, pc}
 8006fb4:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
 8006fb8:	bd10      	pop	{r4, pc}
 8006fba:	bf00      	nop

08006fbc <acc_base_configuration_point_length_get>:
 8006fbc:	b510      	push	{r4, lr}
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	f7ff fed6 	bl	8006d70 <configuration_is_valid>
 8006fc4:	b900      	cbnz	r0, 8006fc8 <acc_base_configuration_point_length_get+0xc>
 8006fc6:	bd10      	pop	{r4, pc}
 8006fc8:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
 8006fcc:	bd10      	pop	{r4, pc}
 8006fce:	bf00      	nop

08006fd0 <acc_base_configuration_repetition_mode_get>:
 8006fd0:	b510      	push	{r4, lr}
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	f7ff fecc 	bl	8006d70 <configuration_is_valid>
 8006fd8:	b900      	cbnz	r0, 8006fdc <acc_base_configuration_repetition_mode_get+0xc>
 8006fda:	bd10      	pop	{r4, pc}
 8006fdc:	7920      	ldrb	r0, [r4, #4]
 8006fde:	bd10      	pop	{r4, pc}

08006fe0 <acc_base_configuration_update_rate_get>:
 8006fe0:	b510      	push	{r4, lr}
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	f7ff fec4 	bl	8006d70 <configuration_is_valid>
 8006fe8:	b158      	cbz	r0, 8007002 <acc_base_configuration_update_rate_get+0x22>
 8006fea:	7923      	ldrb	r3, [r4, #4]
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d005      	beq.n	8006ffc <acc_base_configuration_update_rate_get+0x1c>
 8006ff0:	d802      	bhi.n	8006ff8 <acc_base_configuration_update_rate_get+0x18>
 8006ff2:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8007008 <acc_base_configuration_update_rate_get+0x28>
 8006ff6:	bd10      	pop	{r4, pc}
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d102      	bne.n	8007002 <acc_base_configuration_update_rate_get+0x22>
 8006ffc:	ed94 0a02 	vldr	s0, [r4, #8]
 8007000:	bd10      	pop	{r4, pc}
 8007002:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800700c <acc_base_configuration_update_rate_get+0x2c>
 8007006:	bd10      	pop	{r4, pc}
 8007008:	7f800000 	.word	0x7f800000
 800700c:	7fc00000 	.word	0x7fc00000

08007010 <acc_base_configuration_gain_get>:
 8007010:	b510      	push	{r4, lr}
 8007012:	4604      	mov	r4, r0
 8007014:	f7ff feac 	bl	8006d70 <configuration_is_valid>
 8007018:	b900      	cbnz	r0, 800701c <acc_base_configuration_gain_get+0xc>
 800701a:	bd10      	pop	{r4, pc}
 800701c:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 800701e:	bd10      	pop	{r4, pc}

08007020 <acc_base_configuration_gain_set>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	460d      	mov	r5, r1
 8007024:	4604      	mov	r4, r0
 8007026:	f7ff fea3 	bl	8006d70 <configuration_is_valid>
 800702a:	b100      	cbz	r0, 800702e <acc_base_configuration_gain_set+0xe>
 800702c:	87e5      	strh	r5, [r4, #62]	; 0x3e
 800702e:	bd38      	pop	{r3, r4, r5, pc}

08007030 <acc_base_configuration_integrator_get>:
 8007030:	b510      	push	{r4, lr}
 8007032:	4604      	mov	r4, r0
 8007034:	f7ff fe9c 	bl	8006d70 <configuration_is_valid>
 8007038:	b900      	cbnz	r0, 800703c <acc_base_configuration_integrator_get+0xc>
 800703a:	bd10      	pop	{r4, pc}
 800703c:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 8007040:	bd10      	pop	{r4, pc}
 8007042:	bf00      	nop

08007044 <acc_base_configuration_integrator_set>:
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	460d      	mov	r5, r1
 8007048:	4604      	mov	r4, r0
 800704a:	f7ff fe91 	bl	8006d70 <configuration_is_valid>
 800704e:	b108      	cbz	r0, 8007054 <acc_base_configuration_integrator_set+0x10>
 8007050:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
 8007054:	bd38      	pop	{r3, r4, r5, pc}
 8007056:	bf00      	nop

08007058 <acc_base_configuration_wg_duration_get>:
 8007058:	b510      	push	{r4, lr}
 800705a:	4604      	mov	r4, r0
 800705c:	f7ff fe88 	bl	8006d70 <configuration_is_valid>
 8007060:	b900      	cbnz	r0, 8007064 <acc_base_configuration_wg_duration_get+0xc>
 8007062:	bd10      	pop	{r4, pc}
 8007064:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 8007068:	bd10      	pop	{r4, pc}
 800706a:	bf00      	nop

0800706c <acc_base_configuration_wg_duration_set>:
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	460d      	mov	r5, r1
 8007070:	4604      	mov	r4, r0
 8007072:	f7ff fe7d 	bl	8006d70 <configuration_is_valid>
 8007076:	b108      	cbz	r0, 800707c <acc_base_configuration_wg_duration_set+0x10>
 8007078:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
 800707c:	bd38      	pop	{r3, r4, r5, pc}
 800707e:	bf00      	nop

08007080 <acc_base_configuration_integrator_ramp_up_get>:
 8007080:	b510      	push	{r4, lr}
 8007082:	4604      	mov	r4, r0
 8007084:	f7ff fe74 	bl	8006d70 <configuration_is_valid>
 8007088:	b900      	cbnz	r0, 800708c <acc_base_configuration_integrator_ramp_up_get+0xc>
 800708a:	bd10      	pop	{r4, pc}
 800708c:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 8007090:	bd10      	pop	{r4, pc}
 8007092:	bf00      	nop

08007094 <acc_base_configuration_integrator_ramp_up_set>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	460d      	mov	r5, r1
 8007098:	4604      	mov	r4, r0
 800709a:	f7ff fe69 	bl	8006d70 <configuration_is_valid>
 800709e:	b108      	cbz	r0, 80070a4 <acc_base_configuration_integrator_ramp_up_set+0x10>
 80070a0:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
 80070a4:	bd38      	pop	{r3, r4, r5, pc}
 80070a6:	bf00      	nop

080070a8 <acc_base_configuration_sampling_mode_get>:
 80070a8:	b510      	push	{r4, lr}
 80070aa:	4604      	mov	r4, r0
 80070ac:	f7ff fe60 	bl	8006d70 <configuration_is_valid>
 80070b0:	b900      	cbnz	r0, 80070b4 <acc_base_configuration_sampling_mode_get+0xc>
 80070b2:	bd10      	pop	{r4, pc}
 80070b4:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
 80070b8:	bd10      	pop	{r4, pc}
 80070ba:	bf00      	nop

080070bc <acc_base_configuration_sweep_type_debug_set>:
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	460d      	mov	r5, r1
 80070c0:	4604      	mov	r4, r0
 80070c2:	f7ff fe55 	bl	8006d70 <configuration_is_valid>
 80070c6:	b108      	cbz	r0, 80070cc <acc_base_configuration_sweep_type_debug_set+0x10>
 80070c8:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
 80070cc:	bd38      	pop	{r3, r4, r5, pc}
 80070ce:	bf00      	nop

080070d0 <acc_base_configuration_sweep_type_debug_get>:
 80070d0:	b510      	push	{r4, lr}
 80070d2:	4604      	mov	r4, r0
 80070d4:	f7ff fe4c 	bl	8006d70 <configuration_is_valid>
 80070d8:	b900      	cbnz	r0, 80070dc <acc_base_configuration_sweep_type_debug_get+0xc>
 80070da:	bd10      	pop	{r4, pc}
 80070dc:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
 80070e0:	bd10      	pop	{r4, pc}
 80070e2:	bf00      	nop

080070e4 <acc_base_configuration_use_point_range_set>:
 80070e4:	b538      	push	{r3, r4, r5, lr}
 80070e6:	460d      	mov	r5, r1
 80070e8:	4604      	mov	r4, r0
 80070ea:	f7ff fe41 	bl	8006d70 <configuration_is_valid>
 80070ee:	b108      	cbz	r0, 80070f4 <acc_base_configuration_use_point_range_set+0x10>
 80070f0:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 80070f4:	bd38      	pop	{r3, r4, r5, pc}
 80070f6:	bf00      	nop

080070f8 <acc_base_configuration_use_point_range_get>:
 80070f8:	b510      	push	{r4, lr}
 80070fa:	4604      	mov	r4, r0
 80070fc:	f7ff fe38 	bl	8006d70 <configuration_is_valid>
 8007100:	b900      	cbnz	r0, 8007104 <acc_base_configuration_use_point_range_get+0xc>
 8007102:	bd10      	pop	{r4, pc}
 8007104:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8007108:	bd10      	pop	{r4, pc}
 800710a:	bf00      	nop

0800710c <acc_base_configuration_use_fast_dll_refresh_routine_set>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	460d      	mov	r5, r1
 8007110:	4604      	mov	r4, r0
 8007112:	f7ff fe2d 	bl	8006d70 <configuration_is_valid>
 8007116:	b108      	cbz	r0, 800711c <acc_base_configuration_use_fast_dll_refresh_routine_set+0x10>
 8007118:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 800711c:	bd38      	pop	{r3, r4, r5, pc}
 800711e:	bf00      	nop

08007120 <acc_base_configuration_staggered_vga_stabilization_time_set>:
 8007120:	b538      	push	{r3, r4, r5, lr}
 8007122:	460d      	mov	r5, r1
 8007124:	4604      	mov	r4, r0
 8007126:	f7ff fe23 	bl	8006d70 <configuration_is_valid>
 800712a:	b108      	cbz	r0, 8007130 <acc_base_configuration_staggered_vga_stabilization_time_set+0x10>
 800712c:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 8007130:	bd38      	pop	{r3, r4, r5, pc}
 8007132:	bf00      	nop

08007134 <acc_base_configuration_bba_reset_clocksync_perturbation_get>:
 8007134:	b510      	push	{r4, lr}
 8007136:	4604      	mov	r4, r0
 8007138:	f7ff fe1a 	bl	8006d70 <configuration_is_valid>
 800713c:	b900      	cbnz	r0, 8007140 <acc_base_configuration_bba_reset_clocksync_perturbation_get+0xc>
 800713e:	bd10      	pop	{r4, pc}
 8007140:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
 8007144:	bd10      	pop	{r4, pc}
 8007146:	bf00      	nop

08007148 <acc_base_configuration_bba_linear_resync_perturbation_get>:
 8007148:	b510      	push	{r4, lr}
 800714a:	4604      	mov	r4, r0
 800714c:	f7ff fe10 	bl	8006d70 <configuration_is_valid>
 8007150:	b900      	cbnz	r0, 8007154 <acc_base_configuration_bba_linear_resync_perturbation_get+0xc>
 8007152:	bd10      	pop	{r4, pc}
 8007154:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 8007158:	bd10      	pop	{r4, pc}
 800715a:	bf00      	nop

0800715c <acc_base_configuration_bba_fast_refresh_disable_get>:
 800715c:	b510      	push	{r4, lr}
 800715e:	4604      	mov	r4, r0
 8007160:	f7ff fe06 	bl	8006d70 <configuration_is_valid>
 8007164:	b900      	cbnz	r0, 8007168 <acc_base_configuration_bba_fast_refresh_disable_get+0xc>
 8007166:	bd10      	pop	{r4, pc}
 8007168:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
 800716c:	bd10      	pop	{r4, pc}
 800716e:	bf00      	nop

08007170 <acc_base_configuration_ignore_range_limits_get>:
 8007170:	b510      	push	{r4, lr}
 8007172:	4604      	mov	r4, r0
 8007174:	f7ff fdfc 	bl	8006d70 <configuration_is_valid>
 8007178:	b900      	cbnz	r0, 800717c <acc_base_configuration_ignore_range_limits_get+0xc>
 800717a:	bd10      	pop	{r4, pc}
 800717c:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
 8007180:	bd10      	pop	{r4, pc}
 8007182:	bf00      	nop

08007184 <acc_base_configuration_sparse_sweeps_per_frame_get>:
 8007184:	b510      	push	{r4, lr}
 8007186:	4604      	mov	r4, r0
 8007188:	f7ff fdf2 	bl	8006d70 <configuration_is_valid>
 800718c:	b900      	cbnz	r0, 8007190 <acc_base_configuration_sparse_sweeps_per_frame_get+0xc>
 800718e:	bd10      	pop	{r4, pc}
 8007190:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8007194:	bd10      	pop	{r4, pc}
 8007196:	bf00      	nop

08007198 <acc_base_configuration_downsampling_factor_get>:
 8007198:	b510      	push	{r4, lr}
 800719a:	4604      	mov	r4, r0
 800719c:	f7ff fde8 	bl	8006d70 <configuration_is_valid>
 80071a0:	b900      	cbnz	r0, 80071a4 <acc_base_configuration_downsampling_factor_get+0xc>
 80071a2:	bd10      	pop	{r4, pc}
 80071a4:	f8b4 0060 	ldrh.w	r0, [r4, #96]	; 0x60
 80071a8:	bd10      	pop	{r4, pc}
 80071aa:	bf00      	nop

080071ac <acc_base_configuration_downsampling_factor_set>:
 80071ac:	b538      	push	{r3, r4, r5, lr}
 80071ae:	460d      	mov	r5, r1
 80071b0:	4604      	mov	r4, r0
 80071b2:	f7ff fddd 	bl	8006d70 <configuration_is_valid>
 80071b6:	b108      	cbz	r0, 80071bc <acc_base_configuration_downsampling_factor_set+0x10>
 80071b8:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
 80071bc:	bd38      	pop	{r3, r4, r5, pc}
 80071be:	bf00      	nop

080071c0 <acc_base_configuration_noise_level_normalization_get>:
 80071c0:	b510      	push	{r4, lr}
 80071c2:	4604      	mov	r4, r0
 80071c4:	f7ff fdd4 	bl	8006d70 <configuration_is_valid>
 80071c8:	b900      	cbnz	r0, 80071cc <acc_base_configuration_noise_level_normalization_get+0xc>
 80071ca:	bd10      	pop	{r4, pc}
 80071cc:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 80071d0:	bd10      	pop	{r4, pc}
 80071d2:	bf00      	nop

080071d4 <acc_base_configuration_noise_level_normalization_set>:
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	460d      	mov	r5, r1
 80071d8:	4604      	mov	r4, r0
 80071da:	f7ff fdc9 	bl	8006d70 <configuration_is_valid>
 80071de:	b108      	cbz	r0, 80071e4 <acc_base_configuration_noise_level_normalization_set+0x10>
 80071e0:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
 80071e4:	bd38      	pop	{r3, r4, r5, pc}
 80071e6:	bf00      	nop

080071e8 <acc_base_configuration_noise_deviation_override_get>:
 80071e8:	b510      	push	{r4, lr}
 80071ea:	4604      	mov	r4, r0
 80071ec:	f7ff fdc0 	bl	8006d70 <configuration_is_valid>
 80071f0:	b900      	cbnz	r0, 80071f4 <acc_base_configuration_noise_deviation_override_get+0xc>
 80071f2:	bd10      	pop	{r4, pc}
 80071f4:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
 80071f8:	bd10      	pop	{r4, pc}
 80071fa:	bf00      	nop

080071fc <acc_base_configuration_asynchronous_measurement_get>:
 80071fc:	b510      	push	{r4, lr}
 80071fe:	4604      	mov	r4, r0
 8007200:	f7ff fdb6 	bl	8006d70 <configuration_is_valid>
 8007204:	b900      	cbnz	r0, 8007208 <acc_base_configuration_asynchronous_measurement_get+0xc>
 8007206:	bd10      	pop	{r4, pc}
 8007208:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
 800720c:	bd10      	pop	{r4, pc}
 800720e:	bf00      	nop

08007210 <acc_base_configuration_asynchronous_measurement_set>:
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	460d      	mov	r5, r1
 8007214:	4604      	mov	r4, r0
 8007216:	f7ff fdab 	bl	8006d70 <configuration_is_valid>
 800721a:	b108      	cbz	r0, 8007220 <acc_base_configuration_asynchronous_measurement_set+0x10>
 800721c:	f884 504e 	strb.w	r5, [r4, #78]	; 0x4e
 8007220:	bd38      	pop	{r3, r4, r5, pc}
 8007222:	bf00      	nop

08007224 <acc_base_configuration_min_pipeline_memory_size_get>:
 8007224:	b510      	push	{r4, lr}
 8007226:	4604      	mov	r4, r0
 8007228:	f7ff fda2 	bl	8006d70 <configuration_is_valid>
 800722c:	b900      	cbnz	r0, 8007230 <acc_base_configuration_min_pipeline_memory_size_get+0xc>
 800722e:	bd10      	pop	{r4, pc}
 8007230:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 8007234:	bd10      	pop	{r4, pc}
 8007236:	bf00      	nop

08007238 <acc_base_configuration_min_pipeline_memory_size_set>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	460d      	mov	r5, r1
 800723c:	4604      	mov	r4, r0
 800723e:	f7ff fd97 	bl	8006d70 <configuration_is_valid>
 8007242:	b108      	cbz	r0, 8007248 <acc_base_configuration_min_pipeline_memory_size_set+0x10>
 8007244:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8007248:	bd38      	pop	{r3, r4, r5, pc}
 800724a:	bf00      	nop

0800724c <acc_base_configuration_maximize_signal_attenuation_get>:
 800724c:	b510      	push	{r4, lr}
 800724e:	4604      	mov	r4, r0
 8007250:	f7ff fd8e 	bl	8006d70 <configuration_is_valid>
 8007254:	b900      	cbnz	r0, 8007258 <acc_base_configuration_maximize_signal_attenuation_get+0xc>
 8007256:	bd10      	pop	{r4, pc}
 8007258:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
 800725c:	bd10      	pop	{r4, pc}
 800725e:	bf00      	nop

08007260 <acc_base_configuration_maximize_signal_attenuation_set>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	460d      	mov	r5, r1
 8007264:	4604      	mov	r4, r0
 8007266:	f7ff fd83 	bl	8006d70 <configuration_is_valid>
 800726a:	b108      	cbz	r0, 8007270 <acc_base_configuration_maximize_signal_attenuation_set+0x10>
 800726c:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
 8007270:	bd38      	pop	{r3, r4, r5, pc}
 8007272:	bf00      	nop

08007274 <acc_base_configuration_cca_get>:
 8007274:	b570      	push	{r4, r5, r6, lr}
 8007276:	460e      	mov	r6, r1
 8007278:	4615      	mov	r5, r2
 800727a:	4604      	mov	r4, r0
 800727c:	f7ff fd78 	bl	8006d70 <configuration_is_valid>
 8007280:	b148      	cbz	r0, 8007296 <acc_base_configuration_cca_get+0x22>
 8007282:	b116      	cbz	r6, 800728a <acc_base_configuration_cca_get+0x16>
 8007284:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8007288:	7033      	strb	r3, [r6, #0]
 800728a:	b115      	cbz	r5, 8007292 <acc_base_configuration_cca_get+0x1e>
 800728c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8007290:	802b      	strh	r3, [r5, #0]
 8007292:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
 8007296:	bd70      	pop	{r4, r5, r6, pc}

08007298 <acc_base_configuration_cca_set>:
 8007298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729a:	460f      	mov	r7, r1
 800729c:	4616      	mov	r6, r2
 800729e:	461d      	mov	r5, r3
 80072a0:	4604      	mov	r4, r0
 80072a2:	f7ff fd65 	bl	8006d70 <configuration_is_valid>
 80072a6:	b128      	cbz	r0, 80072b4 <acc_base_configuration_cca_set+0x1c>
 80072a8:	f884 704f 	strb.w	r7, [r4, #79]	; 0x4f
 80072ac:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 80072b0:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 80072b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072b6:	bf00      	nop

080072b8 <acc_base_configuration_mur_set>:
 80072b8:	b538      	push	{r3, r4, r5, lr}
 80072ba:	460d      	mov	r5, r1
 80072bc:	4604      	mov	r4, r0
 80072be:	f7ff fd57 	bl	8006d70 <configuration_is_valid>
 80072c2:	b108      	cbz	r0, 80072c8 <acc_base_configuration_mur_set+0x10>
 80072c4:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
 80072c8:	bd38      	pop	{r3, r4, r5, pc}
 80072ca:	bf00      	nop

080072cc <acc_base_configuration_sampling_mode_to_string>:
 80072cc:	b130      	cbz	r0, 80072dc <acc_base_configuration_sampling_mode_to_string+0x10>
 80072ce:	4b04      	ldr	r3, [pc, #16]	; (80072e0 <acc_base_configuration_sampling_mode_to_string+0x14>)
 80072d0:	4a04      	ldr	r2, [pc, #16]	; (80072e4 <acc_base_configuration_sampling_mode_to_string+0x18>)
 80072d2:	2801      	cmp	r0, #1
 80072d4:	bf14      	ite	ne
 80072d6:	4618      	movne	r0, r3
 80072d8:	4610      	moveq	r0, r2
 80072da:	4770      	bx	lr
 80072dc:	4802      	ldr	r0, [pc, #8]	; (80072e8 <acc_base_configuration_sampling_mode_to_string+0x1c>)
 80072de:	4770      	bx	lr
 80072e0:	080134b4 	.word	0x080134b4
 80072e4:	08011ff0 	.word	0x08011ff0
 80072e8:	08011fec 	.word	0x08011fec

080072ec <acc_base_configuration_print>:
 80072ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f0:	b08f      	sub	sp, #60	; 0x3c
 80072f2:	4604      	mov	r4, r0
 80072f4:	f000 f9be 	bl	8007674 <acc_rss_integration_log_level>
 80072f8:	2801      	cmp	r0, #1
 80072fa:	d94a      	bls.n	8007392 <acc_base_configuration_print+0xa6>
 80072fc:	4b26      	ldr	r3, [pc, #152]	; (8007398 <acc_base_configuration_print+0xac>)
 80072fe:	4620      	mov	r0, r4
 8007300:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8007304:	f7ff fd4a 	bl	8006d9c <acc_base_configuration_sensor_get>
 8007308:	4683      	mov	fp, r0
 800730a:	4620      	mov	r0, r4
 800730c:	f7ff fdce 	bl	8006eac <acc_base_configuration_hw_accelerated_average_samples_get>
 8007310:	4605      	mov	r5, r0
 8007312:	4620      	mov	r0, r4
 8007314:	f7ff fe7c 	bl	8007010 <acc_base_configuration_gain_get>
 8007318:	4606      	mov	r6, r0
 800731a:	4620      	mov	r0, r4
 800731c:	f7ff fe88 	bl	8007030 <acc_base_configuration_integrator_get>
 8007320:	4607      	mov	r7, r0
 8007322:	4620      	mov	r0, r4
 8007324:	f7ff fe98 	bl	8007058 <acc_base_configuration_wg_duration_get>
 8007328:	4680      	mov	r8, r0
 800732a:	4620      	mov	r0, r4
 800732c:	f7ff fea8 	bl	8007080 <acc_base_configuration_integrator_ramp_up_get>
 8007330:	4681      	mov	r9, r0
 8007332:	4620      	mov	r0, r4
 8007334:	f7ff fd82 	bl	8006e3c <acc_base_configuration_power_save_mode_get>
 8007338:	2804      	cmp	r0, #4
 800733a:	bf96      	itet	ls
 800733c:	4b17      	ldrls	r3, [pc, #92]	; (800739c <acc_base_configuration_print+0xb0>)
 800733e:	4918      	ldrhi	r1, [pc, #96]	; (80073a0 <acc_base_configuration_print+0xb4>)
 8007340:	f853 1020 	ldrls.w	r1, [r3, r0, lsl #2]
 8007344:	910d      	str	r1, [sp, #52]	; 0x34
 8007346:	4620      	mov	r0, r4
 8007348:	f7ff feae 	bl	80070a8 <acc_base_configuration_sampling_mode_get>
 800734c:	f7ff ffbe 	bl	80072cc <acc_base_configuration_sampling_mode_to_string>
 8007350:	4602      	mov	r2, r0
 8007352:	4620      	mov	r0, r4
 8007354:	920c      	str	r2, [sp, #48]	; 0x30
 8007356:	f7ff fd81 	bl	8006e5c <acc_base_configuration_tx_disable_get>
 800735a:	4603      	mov	r3, r0
 800735c:	4620      	mov	r0, r4
 800735e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007360:	f7ff ff10 	bl	8007184 <acc_base_configuration_sparse_sweeps_per_frame_get>
 8007364:	4684      	mov	ip, r0
 8007366:	4620      	mov	r0, r4
 8007368:	4664      	mov	r4, ip
 800736a:	f7ff fd8b 	bl	8006e84 <acc_base_configuration_decrease_tx_emission_get>
 800736e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007370:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007374:	9206      	str	r2, [sp, #24]
 8007376:	e9cd 9104 	strd	r9, r1, [sp, #16]
 800737a:	9307      	str	r3, [sp, #28]
 800737c:	9009      	str	r0, [sp, #36]	; 0x24
 800737e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8007382:	e9cd 5600 	strd	r5, r6, [sp]
 8007386:	4a07      	ldr	r2, [pc, #28]	; (80073a4 <acc_base_configuration_print+0xb8>)
 8007388:	4907      	ldr	r1, [pc, #28]	; (80073a8 <acc_base_configuration_print+0xbc>)
 800738a:	9408      	str	r4, [sp, #32]
 800738c:	465b      	mov	r3, fp
 800738e:	2002      	movs	r0, #2
 8007390:	47d0      	blx	sl
 8007392:	b00f      	add	sp, #60	; 0x3c
 8007394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007398:	2000082c 	.word	0x2000082c
 800739c:	08012208 	.word	0x08012208
 80073a0:	080134b4 	.word	0x080134b4
 80073a4:	08011ff4 	.word	0x08011ff4
 80073a8:	08011fd8 	.word	0x08011fd8

080073ac <acc_base_configuration_check>:
 80073ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ae:	4605      	mov	r5, r0
 80073b0:	f7ff fcde 	bl	8006d70 <configuration_is_valid>
 80073b4:	4604      	mov	r4, r0
 80073b6:	b318      	cbz	r0, 8007400 <acc_base_configuration_check+0x54>
 80073b8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80073ba:	2b04      	cmp	r3, #4
 80073bc:	d819      	bhi.n	80073f2 <acc_base_configuration_check+0x46>
 80073be:	d02d      	beq.n	800741c <acc_base_configuration_check+0x70>
 80073c0:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
 80073c2:	2b16      	cmp	r3, #22
 80073c4:	d821      	bhi.n	800740a <acc_base_configuration_check+0x5e>
 80073c6:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 80073c8:	3b01      	subs	r3, #1
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	2b3e      	cmp	r3, #62	; 0x3e
 80073ce:	d819      	bhi.n	8007404 <acc_base_configuration_check+0x58>
 80073d0:	6bae      	ldr	r6, [r5, #56]	; 0x38
 80073d2:	792b      	ldrb	r3, [r5, #4]
 80073d4:	b9e6      	cbnz	r6, 8007410 <acc_base_configuration_check+0x64>
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d037      	beq.n	800744a <acc_base_configuration_check+0x9e>
 80073da:	2301      	movs	r3, #1
 80073dc:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
 80073e0:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 80073e4:	2b06      	cmp	r3, #6
 80073e6:	d00b      	beq.n	8007400 <acc_base_configuration_check+0x54>
 80073e8:	2b09      	cmp	r3, #9
 80073ea:	d009      	beq.n	8007400 <acc_base_configuration_check+0x54>
 80073ec:	4b18      	ldr	r3, [pc, #96]	; (8007450 <acc_base_configuration_check+0xa4>)
 80073ee:	4a19      	ldr	r2, [pc, #100]	; (8007454 <acc_base_configuration_check+0xa8>)
 80073f0:	e001      	b.n	80073f6 <acc_base_configuration_check+0x4a>
 80073f2:	4b17      	ldr	r3, [pc, #92]	; (8007450 <acc_base_configuration_check+0xa4>)
 80073f4:	4a18      	ldr	r2, [pc, #96]	; (8007458 <acc_base_configuration_check+0xac>)
 80073f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f8:	4918      	ldr	r1, [pc, #96]	; (800745c <acc_base_configuration_check+0xb0>)
 80073fa:	2000      	movs	r0, #0
 80073fc:	4798      	blx	r3
 80073fe:	2400      	movs	r4, #0
 8007400:	4620      	mov	r0, r4
 8007402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007404:	4b12      	ldr	r3, [pc, #72]	; (8007450 <acc_base_configuration_check+0xa4>)
 8007406:	4a16      	ldr	r2, [pc, #88]	; (8007460 <acc_base_configuration_check+0xb4>)
 8007408:	e7f5      	b.n	80073f6 <acc_base_configuration_check+0x4a>
 800740a:	4b11      	ldr	r3, [pc, #68]	; (8007450 <acc_base_configuration_check+0xa4>)
 800740c:	4a15      	ldr	r2, [pc, #84]	; (8007464 <acc_base_configuration_check+0xb8>)
 800740e:	e7f2      	b.n	80073f6 <acc_base_configuration_check+0x4a>
 8007410:	2b03      	cmp	r3, #3
 8007412:	d00c      	beq.n	800742e <acc_base_configuration_check+0x82>
 8007414:	f036 0304 	bics.w	r3, r6, #4
 8007418:	d1e2      	bne.n	80073e0 <acc_base_configuration_check+0x34>
 800741a:	e7de      	b.n	80073da <acc_base_configuration_check+0x2e>
 800741c:	f000 f8a2 	bl	8007564 <acc_rss_integration_is_hibernate_capable>
 8007420:	b160      	cbz	r0, 800743c <acc_base_configuration_check+0x90>
 8007422:	792b      	ldrb	r3, [r5, #4]
 8007424:	2b03      	cmp	r3, #3
 8007426:	d1cb      	bne.n	80073c0 <acc_base_configuration_check+0x14>
 8007428:	4b09      	ldr	r3, [pc, #36]	; (8007450 <acc_base_configuration_check+0xa4>)
 800742a:	4a0f      	ldr	r2, [pc, #60]	; (8007468 <acc_base_configuration_check+0xbc>)
 800742c:	e7e3      	b.n	80073f6 <acc_base_configuration_check+0x4a>
 800742e:	f895 704e 	ldrb.w	r7, [r5, #78]	; 0x4e
 8007432:	2f00      	cmp	r7, #0
 8007434:	d1ee      	bne.n	8007414 <acc_base_configuration_check+0x68>
 8007436:	4b06      	ldr	r3, [pc, #24]	; (8007450 <acc_base_configuration_check+0xa4>)
 8007438:	4a0c      	ldr	r2, [pc, #48]	; (800746c <acc_base_configuration_check+0xc0>)
 800743a:	e7dc      	b.n	80073f6 <acc_base_configuration_check+0x4a>
 800743c:	4904      	ldr	r1, [pc, #16]	; (8007450 <acc_base_configuration_check+0xa4>)
 800743e:	4a0c      	ldr	r2, [pc, #48]	; (8007470 <acc_base_configuration_check+0xc4>)
 8007440:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8007442:	4906      	ldr	r1, [pc, #24]	; (800745c <acc_base_configuration_check+0xb0>)
 8007444:	4604      	mov	r4, r0
 8007446:	47a8      	blx	r5
 8007448:	e7da      	b.n	8007400 <acc_base_configuration_check+0x54>
 800744a:	4b01      	ldr	r3, [pc, #4]	; (8007450 <acc_base_configuration_check+0xa4>)
 800744c:	4a09      	ldr	r2, [pc, #36]	; (8007474 <acc_base_configuration_check+0xc8>)
 800744e:	e7d2      	b.n	80073f6 <acc_base_configuration_check+0x4a>
 8007450:	2000082c 	.word	0x2000082c
 8007454:	080121cc 	.word	0x080121cc
 8007458:	0801202c 	.word	0x0801202c
 800745c:	08011fd8 	.word	0x08011fd8
 8007460:	080120fc 	.word	0x080120fc
 8007464:	080120c8 	.word	0x080120c8
 8007468:	08012084 	.word	0x08012084
 800746c:	0801218c 	.word	0x0801218c
 8007470:	08012044 	.word	0x08012044
 8007474:	08012150 	.word	0x08012150

08007478 <acc_rss_integration_register>:
 8007478:	b538      	push	{r3, r4, r5, lr}
 800747a:	6943      	ldr	r3, [r0, #20]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d02b      	beq.n	80074d8 <acc_rss_integration_register+0x60>
 8007480:	6983      	ldr	r3, [r0, #24]
 8007482:	b34b      	cbz	r3, 80074d8 <acc_rss_integration_register+0x60>
 8007484:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007486:	b323      	cbz	r3, 80074d2 <acc_rss_integration_register+0x5a>
 8007488:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800748a:	b32b      	cbz	r3, 80074d8 <acc_rss_integration_register+0x60>
 800748c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800748e:	b31b      	cbz	r3, 80074d8 <acc_rss_integration_register+0x60>
 8007490:	6883      	ldr	r3, [r0, #8]
 8007492:	b30b      	cbz	r3, 80074d8 <acc_rss_integration_register+0x60>
 8007494:	68c3      	ldr	r3, [r0, #12]
 8007496:	b1fb      	cbz	r3, 80074d8 <acc_rss_integration_register+0x60>
 8007498:	6903      	ldr	r3, [r0, #16]
 800749a:	b1eb      	cbz	r3, 80074d8 <acc_rss_integration_register+0x60>
 800749c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800749e:	b313      	cbz	r3, 80074e6 <acc_rss_integration_register+0x6e>
 80074a0:	6802      	ldr	r2, [r0, #0]
 80074a2:	2a2a      	cmp	r2, #42	; 0x2a
 80074a4:	d81a      	bhi.n	80074dc <acc_rss_integration_register+0x64>
 80074a6:	6842      	ldr	r2, [r0, #4]
 80074a8:	2a0f      	cmp	r2, #15
 80074aa:	d917      	bls.n	80074dc <acc_rss_integration_register+0x64>
 80074ac:	69c2      	ldr	r2, [r0, #28]
 80074ae:	b10a      	cbz	r2, 80074b4 <acc_rss_integration_register+0x3c>
 80074b0:	6a02      	ldr	r2, [r0, #32]
 80074b2:	b19a      	cbz	r2, 80074dc <acc_rss_integration_register+0x64>
 80074b4:	4605      	mov	r5, r0
 80074b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074b8:	4c0c      	ldr	r4, [pc, #48]	; (80074ec <acc_rss_integration_register+0x74>)
 80074ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80074c8:	2301      	movs	r3, #1
 80074ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80074ce:	4618      	mov	r0, r3
 80074d0:	bd38      	pop	{r3, r4, r5, pc}
 80074d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1d7      	bne.n	8007488 <acc_rss_integration_register+0x10>
 80074d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80074da:	b123      	cbz	r3, 80074e6 <acc_rss_integration_register+0x6e>
 80074dc:	4a04      	ldr	r2, [pc, #16]	; (80074f0 <acc_rss_integration_register+0x78>)
 80074de:	4905      	ldr	r1, [pc, #20]	; (80074f4 <acc_rss_integration_register+0x7c>)
 80074e0:	2000      	movs	r0, #0
 80074e2:	4798      	blx	r3
 80074e4:	2300      	movs	r3, #0
 80074e6:	4618      	mov	r0, r3
 80074e8:	bd38      	pop	{r3, r4, r5, pc}
 80074ea:	bf00      	nop
 80074ec:	2000082c 	.word	0x2000082c
 80074f0:	0801221c 	.word	0x0801221c
 80074f4:	08012230 	.word	0x08012230

080074f8 <acc_rss_integration_unregister>:
 80074f8:	4802      	ldr	r0, [pc, #8]	; (8007504 <acc_rss_integration_unregister+0xc>)
 80074fa:	223c      	movs	r2, #60	; 0x3c
 80074fc:	2100      	movs	r1, #0
 80074fe:	f008 ba13 	b.w	800f928 <memset>
 8007502:	bf00      	nop
 8007504:	2000082c 	.word	0x2000082c

08007508 <acc_rss_integration_get_sensor_count>:
 8007508:	4b01      	ldr	r3, [pc, #4]	; (8007510 <acc_rss_integration_get_sensor_count+0x8>)
 800750a:	6818      	ldr	r0, [r3, #0]
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	2000082c 	.word	0x2000082c

08007514 <acc_rss_integration_get_sensor_reference_frequency>:
 8007514:	4b01      	ldr	r3, [pc, #4]	; (800751c <acc_rss_integration_get_sensor_reference_frequency+0x8>)
 8007516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007518:	4718      	bx	r3
 800751a:	bf00      	nop
 800751c:	2000082c 	.word	0x2000082c

08007520 <acc_rss_integration_get_max_spi_transfer_size>:
 8007520:	4b01      	ldr	r3, [pc, #4]	; (8007528 <acc_rss_integration_get_max_spi_transfer_size+0x8>)
 8007522:	6858      	ldr	r0, [r3, #4]
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	2000082c 	.word	0x2000082c

0800752c <acc_rss_integration_sensor_device_power_on>:
 800752c:	4b01      	ldr	r3, [pc, #4]	; (8007534 <acc_rss_integration_sensor_device_power_on+0x8>)
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	4718      	bx	r3
 8007532:	bf00      	nop
 8007534:	2000082c 	.word	0x2000082c

08007538 <acc_rss_integration_sensor_device_power_off>:
 8007538:	4b01      	ldr	r3, [pc, #4]	; (8007540 <acc_rss_integration_sensor_device_power_off+0x8>)
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	4718      	bx	r3
 800753e:	bf00      	nop
 8007540:	2000082c 	.word	0x2000082c

08007544 <acc_rss_integration_sensor_device_hibernate_enter>:
 8007544:	4b02      	ldr	r3, [pc, #8]	; (8007550 <acc_rss_integration_sensor_device_hibernate_enter+0xc>)
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	b103      	cbz	r3, 800754c <acc_rss_integration_sensor_device_hibernate_enter+0x8>
 800754a:	4718      	bx	r3
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	2000082c 	.word	0x2000082c

08007554 <acc_rss_integration_sensor_device_hibernate_exit>:
 8007554:	4b02      	ldr	r3, [pc, #8]	; (8007560 <acc_rss_integration_sensor_device_hibernate_exit+0xc>)
 8007556:	6a1b      	ldr	r3, [r3, #32]
 8007558:	b103      	cbz	r3, 800755c <acc_rss_integration_sensor_device_hibernate_exit+0x8>
 800755a:	4718      	bx	r3
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	2000082c 	.word	0x2000082c

08007564 <acc_rss_integration_is_hibernate_capable>:
 8007564:	4b02      	ldr	r3, [pc, #8]	; (8007570 <acc_rss_integration_is_hibernate_capable+0xc>)
 8007566:	69d8      	ldr	r0, [r3, #28]
 8007568:	3800      	subs	r0, #0
 800756a:	bf18      	it	ne
 800756c:	2001      	movne	r0, #1
 800756e:	4770      	bx	lr
 8007570:	2000082c 	.word	0x2000082c

08007574 <acc_rss_integration_wait_for_sensor_interrupt>:
 8007574:	4b01      	ldr	r3, [pc, #4]	; (800757c <acc_rss_integration_wait_for_sensor_interrupt+0x8>)
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	4718      	bx	r3
 800757a:	bf00      	nop
 800757c:	2000082c 	.word	0x2000082c

08007580 <acc_rss_integration_sensor_device_transfer>:
 8007580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007584:	4f10      	ldr	r7, [pc, #64]	; (80075c8 <acc_rss_integration_sensor_device_transfer+0x48>)
 8007586:	f8d7 e038 	ldr.w	lr, [r7, #56]	; 0x38
 800758a:	f1be 0f00 	cmp.w	lr, #0
 800758e:	d003      	beq.n	8007598 <acc_rss_integration_sensor_device_transfer+0x18>
 8007590:	4673      	mov	r3, lr
 8007592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007596:	4718      	bx	r3
 8007598:	460c      	mov	r4, r1
 800759a:	4606      	mov	r6, r0
 800759c:	4611      	mov	r1, r2
 800759e:	4615      	mov	r5, r2
 80075a0:	4620      	mov	r0, r4
 80075a2:	4698      	mov	r8, r3
 80075a4:	f002 fd7a 	bl	800a09c <acc_utils_swap16_array>
 80075a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075aa:	4630      	mov	r0, r6
 80075ac:	006a      	lsls	r2, r5, #1
 80075ae:	4621      	mov	r1, r4
 80075b0:	4798      	blx	r3
 80075b2:	f1b8 0f00 	cmp.w	r8, #0
 80075b6:	d101      	bne.n	80075bc <acc_rss_integration_sensor_device_transfer+0x3c>
 80075b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075bc:	4629      	mov	r1, r5
 80075be:	4620      	mov	r0, r4
 80075c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075c4:	f002 bd6a 	b.w	800a09c <acc_utils_swap16_array>
 80075c8:	2000082c 	.word	0x2000082c

080075cc <acc_rss_integration_mem_alloc_debug>:
 80075cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d0:	4f0c      	ldr	r7, [pc, #48]	; (8007604 <acc_rss_integration_mem_alloc_debug+0x38>)
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	4688      	mov	r8, r1
 80075d6:	4616      	mov	r6, r2
 80075d8:	4605      	mov	r5, r0
 80075da:	4798      	blx	r3
 80075dc:	4604      	mov	r4, r0
 80075de:	b150      	cbz	r0, 80075f6 <acc_rss_integration_mem_alloc_debug+0x2a>
 80075e0:	4b09      	ldr	r3, [pc, #36]	; (8007608 <acc_rss_integration_mem_alloc_debug+0x3c>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	b123      	cbz	r3, 80075f0 <acc_rss_integration_mem_alloc_debug+0x24>
 80075e6:	689f      	ldr	r7, [r3, #8]
 80075e8:	4642      	mov	r2, r8
 80075ea:	4633      	mov	r3, r6
 80075ec:	4629      	mov	r1, r5
 80075ee:	47b8      	blx	r7
 80075f0:	4620      	mov	r0, r4
 80075f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f8:	4a04      	ldr	r2, [pc, #16]	; (800760c <acc_rss_integration_mem_alloc_debug+0x40>)
 80075fa:	4905      	ldr	r1, [pc, #20]	; (8007610 <acc_rss_integration_mem_alloc_debug+0x44>)
 80075fc:	4798      	blx	r3
 80075fe:	4620      	mov	r0, r4
 8007600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007604:	2000082c 	.word	0x2000082c
 8007608:	200006c8 	.word	0x200006c8
 800760c:	08012240 	.word	0x08012240
 8007610:	08012230 	.word	0x08012230

08007614 <acc_rss_integration_mem_calloc_debug>:
 8007614:	b570      	push	{r4, r5, r6, lr}
 8007616:	b190      	cbz	r0, 800763e <acc_rss_integration_mem_calloc_debug+0x2a>
 8007618:	460c      	mov	r4, r1
 800761a:	4611      	mov	r1, r2
 800761c:	461a      	mov	r2, r3
 800761e:	fba0 3604 	umull	r3, r6, r0, r4
 8007622:	b97e      	cbnz	r6, 8007644 <acc_rss_integration_mem_calloc_debug+0x30>
 8007624:	fb04 f500 	mul.w	r5, r4, r0
 8007628:	4628      	mov	r0, r5
 800762a:	f7ff ffcf 	bl	80075cc <acc_rss_integration_mem_alloc_debug>
 800762e:	4604      	mov	r4, r0
 8007630:	b118      	cbz	r0, 800763a <acc_rss_integration_mem_calloc_debug+0x26>
 8007632:	462a      	mov	r2, r5
 8007634:	4631      	mov	r1, r6
 8007636:	f008 f977 	bl	800f928 <memset>
 800763a:	4620      	mov	r0, r4
 800763c:	bd70      	pop	{r4, r5, r6, pc}
 800763e:	4604      	mov	r4, r0
 8007640:	4620      	mov	r0, r4
 8007642:	bd70      	pop	{r4, r5, r6, pc}
 8007644:	4801      	ldr	r0, [pc, #4]	; (800764c <acc_rss_integration_mem_calloc_debug+0x38>)
 8007646:	21dd      	movs	r1, #221	; 0xdd
 8007648:	f002 fa38 	bl	8009abc <acc_assert_fail>
 800764c:	08012230 	.word	0x08012230

08007650 <acc_rss_integration_mem_free>:
 8007650:	4b06      	ldr	r3, [pc, #24]	; (800766c <acc_rss_integration_mem_free+0x1c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	b510      	push	{r4, lr}
 8007656:	4604      	mov	r4, r0
 8007658:	b10b      	cbz	r3, 800765e <acc_rss_integration_mem_free+0xe>
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	4798      	blx	r3
 800765e:	4b04      	ldr	r3, [pc, #16]	; (8007670 <acc_rss_integration_mem_free+0x20>)
 8007660:	4620      	mov	r0, r4
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007668:	4718      	bx	r3
 800766a:	bf00      	nop
 800766c:	200006c8 	.word	0x200006c8
 8007670:	2000082c 	.word	0x2000082c

08007674 <acc_rss_integration_log_level>:
 8007674:	4b01      	ldr	r3, [pc, #4]	; (800767c <acc_rss_integration_log_level+0x8>)
 8007676:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
 800767a:	4770      	bx	lr
 800767c:	2000082c 	.word	0x2000082c

08007680 <inject_data>:
 8007680:	3034      	adds	r0, #52	; 0x34
 8007682:	f003 bb0f 	b.w	800aca4 <acc_element_source_adc_inject_data>
 8007686:	bf00      	nop

08007688 <disassemble>:
 8007688:	b538      	push	{r3, r4, r5, lr}
 800768a:	6805      	ldr	r5, [r0, #0]
 800768c:	4604      	mov	r4, r0
 800768e:	b155      	cbz	r5, 80076a6 <disassemble+0x1e>
 8007690:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8007694:	f003 fab6 	bl	800ac04 <acc_element_source_adc_release>
 8007698:	f8d5 03a4 	ldr.w	r0, [r5, #932]	; 0x3a4
 800769c:	f7ff ffd8 	bl	8007650 <acc_rss_integration_mem_free>
 80076a0:	4628      	mov	r0, r5
 80076a2:	f7ff ffd5 	bl	8007650 <acc_rss_integration_mem_free>
 80076a6:	4620      	mov	r0, r4
 80076a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076ac:	f7ff bfd0 	b.w	8007650 <acc_rss_integration_mem_free>

080076b0 <produce>:
 80076b0:	b510      	push	{r4, lr}
 80076b2:	4604      	mov	r4, r0
 80076b4:	3034      	adds	r0, #52	; 0x34
 80076b6:	f003 fab3 	bl	800ac20 <acc_element_source_adc_produce>
 80076ba:	b960      	cbnz	r0, 80076d6 <produce+0x26>
 80076bc:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80076c0:	f8d4 2348 	ldr.w	r2, [r4, #840]	; 0x348
 80076c4:	6118      	str	r0, [r3, #16]
 80076c6:	2101      	movs	r1, #1
 80076c8:	7198      	strb	r0, [r3, #6]
 80076ca:	7159      	strb	r1, [r3, #5]
 80076cc:	f504 7051 	add.w	r0, r4, #836	; 0x344
 80076d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076d4:	4710      	bx	r2
 80076d6:	bd10      	pop	{r4, pc}

080076d8 <acc_pipeline_envelope_assemble>:
 80076d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076dc:	ed2d 8b08 	vpush	{d8-d11}
 80076e0:	460e      	mov	r6, r1
 80076e2:	b08b      	sub	sp, #44	; 0x2c
 80076e4:	461c      	mov	r4, r3
 80076e6:	2110      	movs	r1, #16
 80076e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076ec:	4681      	mov	r9, r0
 80076ee:	4615      	mov	r5, r2
 80076f0:	2001      	movs	r0, #1
 80076f2:	4ae4      	ldr	r2, [pc, #912]	; (8007a84 <acc_pipeline_envelope_assemble+0x3ac>)
 80076f4:	e9cd 6403 	strd	r6, r4, [sp, #12]
 80076f8:	f7ff ff8c 	bl	8007614 <acc_rss_integration_mem_calloc_debug>
 80076fc:	4ae1      	ldr	r2, [pc, #900]	; (8007a84 <acc_pipeline_envelope_assemble+0x3ac>)
 80076fe:	4606      	mov	r6, r0
 8007700:	f240 1301 	movw	r3, #257	; 0x101
 8007704:	f44f 716b 	mov.w	r1, #940	; 0x3ac
 8007708:	2001      	movs	r0, #1
 800770a:	f7ff ff83 	bl	8007614 <acc_rss_integration_mem_calloc_debug>
 800770e:	4604      	mov	r4, r0
 8007710:	2e00      	cmp	r6, #0
 8007712:	f000 8208 	beq.w	8007b26 <acc_pipeline_envelope_assemble+0x44e>
 8007716:	2800      	cmp	r0, #0
 8007718:	f000 8205 	beq.w	8007b26 <acc_pipeline_envelope_assemble+0x44e>
 800771c:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8007720:	f500 7262 	add.w	r2, r0, #904	; 0x388
 8007724:	f100 0814 	add.w	r8, r0, #20
 8007728:	6030      	str	r0, [r6, #0]
 800772a:	4649      	mov	r1, r9
 800772c:	4618      	mov	r0, r3
 800772e:	9200      	str	r2, [sp, #0]
 8007730:	ee08 3a10 	vmov	s16, r3
 8007734:	462a      	mov	r2, r5
 8007736:	4643      	mov	r3, r8
 8007738:	f003 fa44 	bl	800abc4 <acc_element_source_adc_init_radar_engine>
 800773c:	4681      	mov	r9, r0
 800773e:	2800      	cmp	r0, #0
 8007740:	f000 81aa 	beq.w	8007a98 <acc_pipeline_envelope_assemble+0x3c0>
 8007744:	2100      	movs	r1, #0
 8007746:	4628      	mov	r0, r5
 8007748:	f7ff fbe6 	bl	8006f18 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 800774c:	4683      	mov	fp, r0
 800774e:	2007      	movs	r0, #7
 8007750:	f8b4 9388 	ldrh.w	r9, [r4, #904]	; 0x388
 8007754:	f002 fa0a 	bl	8009b6c <acc_element_sizeof>
 8007758:	f8b4 a396 	ldrh.w	sl, [r4, #918]	; 0x396
 800775c:	f8b4 3392 	ldrh.w	r3, [r4, #914]	; 0x392
 8007760:	f8b4 2394 	ldrh.w	r2, [r4, #916]	; 0x394
 8007764:	4453      	add	r3, sl
 8007766:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 800776a:	0053      	lsls	r3, r2, #1
 800776c:	459a      	cmp	sl, r3
 800776e:	bf38      	it	cc
 8007770:	469a      	movcc	sl, r3
 8007772:	fb00 f909 	mul.w	r9, r0, r9
 8007776:	45ca      	cmp	sl, r9
 8007778:	4628      	mov	r0, r5
 800777a:	bf38      	it	cc
 800777c:	46ca      	movcc	sl, r9
 800777e:	f7ff fd51 	bl	8007224 <acc_base_configuration_min_pipeline_memory_size_get>
 8007782:	4582      	cmp	sl, r0
 8007784:	bf38      	it	cc
 8007786:	4682      	movcc	sl, r0
 8007788:	f8c4 a3a8 	str.w	sl, [r4, #936]	; 0x3a8
 800778c:	f1bb 0f00 	cmp.w	fp, #0
 8007790:	d115      	bne.n	80077be <acc_pipeline_envelope_assemble+0xe6>
 8007792:	49bc      	ldr	r1, [pc, #752]	; (8007a84 <acc_pipeline_envelope_assemble+0x3ac>)
 8007794:	f240 1285 	movw	r2, #389	; 0x185
 8007798:	4650      	mov	r0, sl
 800779a:	f7ff ff17 	bl	80075cc <acc_rss_integration_mem_alloc_debug>
 800779e:	4681      	mov	r9, r0
 80077a0:	f8c4 03a4 	str.w	r0, [r4, #932]	; 0x3a4
 80077a4:	2800      	cmp	r0, #0
 80077a6:	f040 8181 	bne.w	8007aac <acc_pipeline_envelope_assemble+0x3d4>
 80077aa:	4630      	mov	r0, r6
 80077ac:	f7ff ff6c 	bl	8007688 <disassemble>
 80077b0:	2600      	movs	r6, #0
 80077b2:	4630      	mov	r0, r6
 80077b4:	b00b      	add	sp, #44	; 0x2c
 80077b6:	ecbd 8b08 	vpop	{d8-d11}
 80077ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077be:	2007      	movs	r0, #7
 80077c0:	f8b4 9388 	ldrh.w	r9, [r4, #904]	; 0x388
 80077c4:	f002 f9d2 	bl	8009b6c <acc_element_sizeof>
 80077c8:	f10a 030a 	add.w	r3, sl, #10
 80077cc:	fb00 3009 	mla	r0, r0, r9, r3
 80077d0:	49ac      	ldr	r1, [pc, #688]	; (8007a84 <acc_pipeline_envelope_assemble+0x3ac>)
 80077d2:	f240 1285 	movw	r2, #389	; 0x185
 80077d6:	f7ff fef9 	bl	80075cc <acc_rss_integration_mem_alloc_debug>
 80077da:	4681      	mov	r9, r0
 80077dc:	f8c4 03a4 	str.w	r0, [r4, #932]	; 0x3a4
 80077e0:	2800      	cmp	r0, #0
 80077e2:	d0e2      	beq.n	80077aa <acc_pipeline_envelope_assemble+0xd2>
 80077e4:	f8b4 138a 	ldrh.w	r1, [r4, #906]	; 0x38a
 80077e8:	9105      	str	r1, [sp, #20]
 80077ea:	2007      	movs	r0, #7
 80077ec:	f002 f9be 	bl	8009b6c <acc_element_sizeof>
 80077f0:	9905      	ldr	r1, [sp, #20]
 80077f2:	f10a 0204 	add.w	r2, sl, #4
 80077f6:	fb00 9101 	mla	r1, r0, r1, r9
 80077fa:	444a      	add	r2, r9
 80077fc:	f104 0c06 	add.w	ip, r4, #6
 8007800:	1de0      	adds	r0, r4, #7
 8007802:	f104 0310 	add.w	r3, r4, #16
 8007806:	e9cd 2106 	strd	r2, r1, [sp, #24]
 800780a:	f8c4 c05c 	str.w	ip, [r4, #92]	; 0x5c
 800780e:	f104 020c 	add.w	r2, r4, #12
 8007812:	f104 0c08 	add.w	ip, r4, #8
 8007816:	6620      	str	r0, [r4, #96]	; 0x60
 8007818:	1d20      	adds	r0, r4, #4
 800781a:	e9c4 2c19 	strd	r2, ip, [r4, #100]	; 0x64
 800781e:	65a3      	str	r3, [r4, #88]	; 0x58
 8007820:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8007824:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8007828:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800782c:	e9c4 9931 	strd	r9, r9, [r4, #196]	; 0xc4
 8007830:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
 8007834:	6564      	str	r4, [r4, #84]	; 0x54
 8007836:	f8c4 9084 	str.w	r9, [r4, #132]	; 0x84
 800783a:	4628      	mov	r0, r5
 800783c:	4617      	mov	r7, r2
 800783e:	9305      	str	r3, [sp, #20]
 8007840:	f7ff fcbe 	bl	80071c0 <acc_base_configuration_noise_level_normalization_get>
 8007844:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8007848:	9907      	ldr	r1, [sp, #28]
 800784a:	b118      	cbz	r0, 8007854 <acc_pipeline_envelope_assemble+0x17c>
 800784c:	e9c4 9941 	strd	r9, r9, [r4, #260]	; 0x104
 8007850:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8007854:	e9c4 9951 	strd	r9, r9, [r4, #324]	; 0x144
 8007858:	e9c4 9960 	strd	r9, r9, [r4, #384]	; 0x180
 800785c:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
 8007860:	e9c4 9183 	strd	r9, r1, [r4, #524]	; 0x20c
 8007864:	e9c4 1192 	strd	r1, r1, [r4, #584]	; 0x248
 8007868:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
 800786c:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
 8007870:	f8c4 71a0 	str.w	r7, [r4, #416]	; 0x1a0
 8007874:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
 8007878:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 800787c:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
 8007880:	f1bb 0f00 	cmp.w	fp, #0
 8007884:	d007      	beq.n	8007896 <acc_pipeline_envelope_assemble+0x1be>
 8007886:	e9c4 12a7 	strd	r1, r2, [r4, #668]	; 0x29c
 800788a:	eb09 000a 	add.w	r0, r9, sl
 800788e:	f8c4 02a8 	str.w	r0, [r4, #680]	; 0x2a8
 8007892:	f8c4 32b0 	str.w	r3, [r4, #688]	; 0x2b0
 8007896:	e9c4 29b7 	strd	r2, r9, [r4, #732]	; 0x2dc
 800789a:	e9c4 99c6 	strd	r9, r9, [r4, #792]	; 0x318
 800789e:	f8c4 32f0 	str.w	r3, [r4, #752]	; 0x2f0
 80078a2:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
 80078a6:	f8c4 9354 	str.w	r9, [r4, #852]	; 0x354
 80078aa:	ee18 0a10 	vmov	r0, s16
 80078ae:	f8c4 437c 	str.w	r4, [r4, #892]	; 0x37c
 80078b2:	f504 7369 	add.w	r3, r4, #932	; 0x3a4
 80078b6:	4642      	mov	r2, r8
 80078b8:	4629      	mov	r1, r5
 80078ba:	f003 f991 	bl	800abe0 <acc_element_source_adc_init>
 80078be:	4681      	mov	r9, r0
 80078c0:	2800      	cmp	r0, #0
 80078c2:	f000 80e9 	beq.w	8007a98 <acc_pipeline_envelope_assemble+0x3c0>
 80078c6:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
 80078ca:	f104 0a74 	add.w	sl, r4, #116	; 0x74
 80078ce:	461f      	mov	r7, r3
 80078d0:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8007a88 <acc_pipeline_envelope_assemble+0x3b0>
 80078d4:	2105      	movs	r1, #5
 80078d6:	4650      	mov	r0, sl
 80078d8:	ee09 3a90 	vmov	s19, r3
 80078dc:	f002 f994 	bl	8009c08 <acc_element_saturation_check_init>
 80078e0:	4638      	mov	r0, r7
 80078e2:	2200      	movs	r2, #0
 80078e4:	2105      	movs	r1, #5
 80078e6:	f002 fcb7 	bl	800a258 <acc_element_centering_init>
 80078ea:	4628      	mov	r0, r5
 80078ec:	f7ff fc68 	bl	80071c0 <acc_base_configuration_noise_level_normalization_get>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	f040 80fa 	bne.w	8007aea <acc_pipeline_envelope_assemble+0x412>
 80078f6:	f504 739a 	add.w	r3, r4, #308	; 0x134
 80078fa:	4618      	mov	r0, r3
 80078fc:	ee08 3a90 	vmov	s17, r3
 8007900:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 8007904:	461f      	mov	r7, r3
 8007906:	2207      	movs	r2, #7
 8007908:	2105      	movs	r1, #5
 800790a:	ee0a 3a90 	vmov	s21, r3
 800790e:	f002 fd6f 	bl	800a3f0 <acc_element_converter_init>
 8007912:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8007a88 <acc_pipeline_envelope_assemble+0x3b0>
 8007916:	ed94 0a08 	vldr	s0, [r4, #32]
 800791a:	2107      	movs	r1, #7
 800791c:	4638      	mov	r0, r7
 800791e:	f002 ff29 	bl	800a774 <acc_element_iq_mixer_init>
 8007922:	f504 73da 	add.w	r3, r4, #436	; 0x1b4
 8007926:	f8b4 2390 	ldrh.w	r2, [r4, #912]	; 0x390
 800792a:	9206      	str	r2, [sp, #24]
 800792c:	461f      	mov	r7, r3
 800792e:	4628      	mov	r0, r5
 8007930:	ee0b 3a10 	vmov	s22, r3
 8007934:	f8b4 338e 	ldrh.w	r3, [r4, #910]	; 0x38e
 8007938:	9305      	str	r3, [sp, #20]
 800793a:	f7ff fad1 	bl	8006ee0 <acc_base_configuration_phase_compensation_alpha_get>
 800793e:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8007942:	4638      	mov	r0, r7
 8007944:	2107      	movs	r1, #7
 8007946:	f504 77fe 	add.w	r7, r4, #508	; 0x1fc
 800794a:	f003 f849 	bl	800a9e0 <acc_element_phase_compensation_init>
 800794e:	f8b4 238c 	ldrh.w	r2, [r4, #908]	; 0x38c
 8007952:	2107      	movs	r1, #7
 8007954:	4638      	mov	r0, r7
 8007956:	f002 fdbd 	bl	800a4d4 <acc_element_crop_init>
 800795a:	4628      	mov	r0, r5
 800795c:	f7ff faf8 	bl	8006f50 <acc_base_configuration_filter_demodulated_data_get>
 8007960:	f504 7b0e 	add.w	fp, r4, #568	; 0x238
 8007964:	9005      	str	r0, [sp, #20]
 8007966:	4628      	mov	r0, r5
 8007968:	f7ff fb02 	bl	8006f70 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get>
 800796c:	2107      	movs	r1, #7
 800796e:	9a05      	ldr	r2, [sp, #20]
 8007970:	4643      	mov	r3, r8
 8007972:	4658      	mov	r0, fp
 8007974:	f002 fe10 	bl	800a598 <acc_element_depth_domain_low_pass_filter_init>
 8007978:	a909      	add	r1, sp, #36	; 0x24
 800797a:	4628      	mov	r0, r5
 800797c:	ee09 7a10 	vmov	s18, r7
 8007980:	f7ff faca 	bl	8006f18 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 8007984:	2800      	cmp	r0, #0
 8007986:	f040 80a8 	bne.w	8007ada <acc_pipeline_envelope_assemble+0x402>
 800798a:	f504 7933 	add.w	r9, r4, #716	; 0x2cc
 800798e:	2107      	movs	r1, #7
 8007990:	4648      	mov	r0, r9
 8007992:	f504 7842 	add.w	r8, r4, #776	; 0x308
 8007996:	f002 fbf9 	bl	800a18c <acc_element_abs_init>
 800799a:	f504 7351 	add.w	r3, r4, #836	; 0x344
 800799e:	2202      	movs	r2, #2
 80079a0:	2104      	movs	r1, #4
 80079a2:	4640      	mov	r0, r8
 80079a4:	461f      	mov	r7, r3
 80079a6:	ee0a 3a10 	vmov	s20, r3
 80079aa:	f002 fd21 	bl	800a3f0 <acc_element_converter_init>
 80079ae:	9a03      	ldr	r2, [sp, #12]
 80079b0:	4638      	mov	r0, r7
 80079b2:	6811      	ldr	r1, [r2, #0]
 80079b4:	f002 f998 	bl	8009ce8 <acc_element_sink_callback_init>
 80079b8:	ee18 0a10 	vmov	r0, s16
 80079bc:	4651      	mov	r1, sl
 80079be:	f002 f8e1 	bl	8009b84 <acc_element_connect>
 80079c2:	4650      	mov	r0, sl
 80079c4:	ee19 1a90 	vmov	r1, s19
 80079c8:	f002 f8dc 	bl	8009b84 <acc_element_connect>
 80079cc:	4628      	mov	r0, r5
 80079ce:	f7ff fbf7 	bl	80071c0 <acc_base_configuration_noise_level_normalization_get>
 80079d2:	2800      	cmp	r0, #0
 80079d4:	d07a      	beq.n	8007acc <acc_pipeline_envelope_assemble+0x3f4>
 80079d6:	f104 0af4 	add.w	sl, r4, #244	; 0xf4
 80079da:	ee19 0a90 	vmov	r0, s19
 80079de:	4651      	mov	r1, sl
 80079e0:	f002 f8d0 	bl	8009b84 <acc_element_connect>
 80079e4:	ee18 1a90 	vmov	r1, s17
 80079e8:	4650      	mov	r0, sl
 80079ea:	f002 f8cb 	bl	8009b84 <acc_element_connect>
 80079ee:	ee18 0a90 	vmov	r0, s17
 80079f2:	ee1a 1a90 	vmov	r1, s21
 80079f6:	f002 f8c5 	bl	8009b84 <acc_element_connect>
 80079fa:	ee1b 1a10 	vmov	r1, s22
 80079fe:	ee1a 0a90 	vmov	r0, s21
 8007a02:	f002 f8bf 	bl	8009b84 <acc_element_connect>
 8007a06:	ee19 1a10 	vmov	r1, s18
 8007a0a:	ee1b 0a10 	vmov	r0, s22
 8007a0e:	f002 f8b9 	bl	8009b84 <acc_element_connect>
 8007a12:	ee19 0a10 	vmov	r0, s18
 8007a16:	4659      	mov	r1, fp
 8007a18:	f002 f8b4 	bl	8009b84 <acc_element_connect>
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	2100      	movs	r1, #0
 8007a20:	f7ff fa7a 	bl	8006f18 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	d04c      	beq.n	8007ac2 <acc_pipeline_envelope_assemble+0x3ea>
 8007a28:	f504 7523 	add.w	r5, r4, #652	; 0x28c
 8007a2c:	4658      	mov	r0, fp
 8007a2e:	4629      	mov	r1, r5
 8007a30:	f002 f8a8 	bl	8009b84 <acc_element_connect>
 8007a34:	4649      	mov	r1, r9
 8007a36:	4628      	mov	r0, r5
 8007a38:	f002 f8a4 	bl	8009b84 <acc_element_connect>
 8007a3c:	4648      	mov	r0, r9
 8007a3e:	4641      	mov	r1, r8
 8007a40:	f002 f8a0 	bl	8009b84 <acc_element_connect>
 8007a44:	ee1a 1a10 	vmov	r1, s20
 8007a48:	4640      	mov	r0, r8
 8007a4a:	f002 f89b 	bl	8009b84 <acc_element_connect>
 8007a4e:	ee18 0a10 	vmov	r0, s16
 8007a52:	f003 f8e1 	bl	800ac18 <acc_element_source_adc_validate>
 8007a56:	4605      	mov	r5, r0
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d055      	beq.n	8007b08 <acc_pipeline_envelope_assemble+0x430>
 8007a5c:	ee18 0a10 	vmov	r0, s16
 8007a60:	f003 f8d6 	bl	800ac10 <acc_element_source_adc_reset>
 8007a64:	9804      	ldr	r0, [sp, #16]
 8007a66:	4909      	ldr	r1, [pc, #36]	; (8007a8c <acc_pipeline_envelope_assemble+0x3b4>)
 8007a68:	4a09      	ldr	r2, [pc, #36]	; (8007a90 <acc_pipeline_envelope_assemble+0x3b8>)
 8007a6a:	4b0a      	ldr	r3, [pc, #40]	; (8007a94 <acc_pipeline_envelope_assemble+0x3bc>)
 8007a6c:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8007a70:	4630      	mov	r0, r6
 8007a72:	e9c6 1201 	strd	r1, r2, [r6, #4]
 8007a76:	60f3      	str	r3, [r6, #12]
 8007a78:	b00b      	add	sp, #44	; 0x2c
 8007a7a:	ecbd 8b08 	vpop	{d8-d11}
 8007a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a82:	bf00      	nop
 8007a84:	08012250 	.word	0x08012250
 8007a88:	00000000 	.word	0x00000000
 8007a8c:	080076b1 	.word	0x080076b1
 8007a90:	08007681 	.word	0x08007681
 8007a94:	08007689 	.word	0x08007689
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f7ff fdf5 	bl	8007688 <disassemble>
 8007a9e:	464e      	mov	r6, r9
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	b00b      	add	sp, #44	; 0x2c
 8007aa4:	ecbd 8b08 	vpop	{d8-d11}
 8007aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aac:	f8b4 238a 	ldrh.w	r2, [r4, #906]	; 0x38a
 8007ab0:	9205      	str	r2, [sp, #20]
 8007ab2:	2007      	movs	r0, #7
 8007ab4:	f002 f85a 	bl	8009b6c <acc_element_sizeof>
 8007ab8:	9a05      	ldr	r2, [sp, #20]
 8007aba:	fb00 9202 	mla	r2, r0, r2, r9
 8007abe:	4611      	mov	r1, r2
 8007ac0:	e69c      	b.n	80077fc <acc_pipeline_envelope_assemble+0x124>
 8007ac2:	4658      	mov	r0, fp
 8007ac4:	4649      	mov	r1, r9
 8007ac6:	f002 f85d 	bl	8009b84 <acc_element_connect>
 8007aca:	e7b7      	b.n	8007a3c <acc_pipeline_envelope_assemble+0x364>
 8007acc:	ee19 0a90 	vmov	r0, s19
 8007ad0:	ee18 1a90 	vmov	r1, s17
 8007ad4:	f002 f856 	bl	8009b84 <acc_element_connect>
 8007ad8:	e789      	b.n	80079ee <acc_pipeline_envelope_assemble+0x316>
 8007ada:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 8007ade:	2107      	movs	r1, #7
 8007ae0:	f504 7023 	add.w	r0, r4, #652	; 0x28c
 8007ae4:	f003 f846 	bl	800ab74 <acc_element_time_domain_low_pass_filter_init>
 8007ae8:	e74f      	b.n	800798a <acc_pipeline_envelope_assemble+0x2b2>
 8007aea:	4628      	mov	r0, r5
 8007aec:	f7ff fbae 	bl	800724c <acc_base_configuration_maximize_signal_attenuation_get>
 8007af0:	2800      	cmp	r0, #0
 8007af2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007af4:	bf14      	ite	ne
 8007af6:	231e      	movne	r3, #30
 8007af8:	f44f 7396 	moveq.w	r3, #300	; 0x12c
 8007afc:	2105      	movs	r1, #5
 8007afe:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
 8007b02:	f002 fec3 	bl	800a88c <acc_element_noise_level_normalization_init>
 8007b06:	e6f6      	b.n	80078f6 <acc_pipeline_envelope_assemble+0x21e>
 8007b08:	4b0d      	ldr	r3, [pc, #52]	; (8007b40 <acc_pipeline_envelope_assemble+0x468>)
 8007b0a:	4a0e      	ldr	r2, [pc, #56]	; (8007b44 <acc_pipeline_envelope_assemble+0x46c>)
 8007b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b0e:	490e      	ldr	r1, [pc, #56]	; (8007b48 <acc_pipeline_envelope_assemble+0x470>)
 8007b10:	4798      	blx	r3
 8007b12:	4630      	mov	r0, r6
 8007b14:	f7ff fdb8 	bl	8007688 <disassemble>
 8007b18:	462e      	mov	r6, r5
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	b00b      	add	sp, #44	; 0x2c
 8007b1e:	ecbd 8b08 	vpop	{d8-d11}
 8007b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b26:	4630      	mov	r0, r6
 8007b28:	f7ff fd92 	bl	8007650 <acc_rss_integration_mem_free>
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	f7ff fd8f 	bl	8007650 <acc_rss_integration_mem_free>
 8007b32:	2600      	movs	r6, #0
 8007b34:	4630      	mov	r0, r6
 8007b36:	b00b      	add	sp, #44	; 0x2c
 8007b38:	ecbd 8b08 	vpop	{d8-d11}
 8007b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b40:	2000082c 	.word	0x2000082c
 8007b44:	08012264 	.word	0x08012264
 8007b48:	08012250 	.word	0x08012250

08007b4c <destroy>:
 8007b4c:	b510      	push	{r4, lr}
 8007b4e:	4604      	mov	r4, r0
 8007b50:	6940      	ldr	r0, [r0, #20]
 8007b52:	b118      	cbz	r0, 8007b5c <destroy+0x10>
 8007b54:	f7ff fd7c 	bl	8007650 <acc_rss_integration_mem_free>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	6163      	str	r3, [r4, #20]
 8007b5c:	bd10      	pop	{r4, pc}
 8007b5e:	bf00      	nop

08007b60 <process_data>:
 8007b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b64:	6944      	ldr	r4, [r0, #20]
 8007b66:	f8b4 70ce 	ldrh.w	r7, [r4, #206]	; 0xce
 8007b6a:	b917      	cbnz	r7, 8007b72 <process_data+0x12>
 8007b6c:	2001      	movs	r0, #1
 8007b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b72:	f8b4 c0c8 	ldrh.w	ip, [r4, #200]	; 0xc8
 8007b76:	f8b4 80c4 	ldrh.w	r8, [r4, #196]	; 0xc4
 8007b7a:	f8b4 e0cc 	ldrh.w	lr, [r4, #204]	; 0xcc
 8007b7e:	461d      	mov	r5, r3
 8007b80:	4616      	mov	r6, r2
 8007b82:	237c      	movs	r3, #124	; 0x7c
 8007b84:	680a      	ldr	r2, [r1, #0]
 8007b86:	fbb3 f3fe 	udiv	r3, r3, lr
 8007b8a:	fb03 f30c 	mul.w	r3, r3, ip
 8007b8e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8007b92:	eb02 0803 	add.w	r8, r2, r3
 8007b96:	4642      	mov	r2, r8
 8007b98:	6801      	ldr	r1, [r0, #0]
 8007b9a:	463b      	mov	r3, r7
 8007b9c:	2001      	movs	r0, #1
 8007b9e:	f002 f8b5 	bl	8009d0c <acc_probes_execute_uint16>
 8007ba2:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
 8007ba6:	4640      	mov	r0, r8
 8007ba8:	f001 ff5a 	bl	8009a60 <acc_alg_cca_u16_calculate>
 8007bac:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8007be8 <process_data+0x88>
 8007bb0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007bb2:	ed85 0a01 	vstr	s0, [r5, #4]
 8007bb6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bbe:	bfcc      	ite	gt
 8007bc0:	2201      	movgt	r2, #1
 8007bc2:	2200      	movle	r2, #0
 8007bc4:	702a      	strb	r2, [r5, #0]
 8007bc6:	b14b      	cbz	r3, 8007bdc <process_data+0x7c>
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
 8007bce:	6833      	ldr	r3, [r6, #0]
 8007bd0:	722a      	strb	r2, [r5, #8]
 8007bd2:	1a5b      	subs	r3, r3, r1
 8007bd4:	6033      	str	r3, [r6, #0]
 8007bd6:	2001      	movs	r0, #1
 8007bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bdc:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 8007be0:	f082 0201 	eor.w	r2, r2, #1
 8007be4:	e7f1      	b.n	8007bca <process_data+0x6a>
 8007be6:	bf00      	nop
 8007be8:	42640000 	.word	0x42640000

08007bec <transfer_data>:
 8007bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007bf0:	6944      	ldr	r4, [r0, #20]
 8007bf2:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
 8007bf6:	b089      	sub	sp, #36	; 0x24
 8007bf8:	4680      	mov	r8, r0
 8007bfa:	460f      	mov	r7, r1
 8007bfc:	4691      	mov	r9, r2
 8007bfe:	b90b      	cbnz	r3, 8007c04 <transfer_data+0x18>
 8007c00:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8007c04:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
 8007c08:	f8b4 50c8 	ldrh.w	r5, [r4, #200]	; 0xc8
 8007c0c:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
 8007c10:	a902      	add	r1, sp, #8
 8007c12:	4620      	mov	r0, r4
 8007c14:	267c      	movs	r6, #124	; 0x7c
 8007c16:	fbb6 f3f3 	udiv	r3, r6, r3
 8007c1a:	fb03 2505 	mla	r5, r3, r5, r2
 8007c1e:	f005 f965 	bl	800ceec <acc_cpd_linear_sweep_get_info>
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	9a02      	ldr	r2, [sp, #8]
 8007c26:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
 8007c2a:	f8d8 0000 	ldr.w	r0, [r8]
 8007c2e:	442a      	add	r2, r5
 8007c30:	4419      	add	r1, r3
 8007c32:	f001 fdd7 	bl	80097e4 <acc_sensor_protocol_r2_transfer_data>
 8007c36:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 8007c3a:	ab01      	add	r3, sp, #4
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	4680      	mov	r8, r0
 8007c40:	f005 f96c 	bl	800cf1c <acc_cpd_linear_sweep_check>
 8007c44:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007c48:	3b00      	subs	r3, #0
 8007c4a:	bf18      	it	ne
 8007c4c:	2301      	movne	r3, #1
 8007c4e:	a902      	add	r1, sp, #8
 8007c50:	f889 3000 	strb.w	r3, [r9]
 8007c54:	4620      	mov	r0, r4
 8007c56:	f005 f949 	bl	800ceec <acc_cpd_linear_sweep_get_info>
 8007c5a:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
 8007c5e:	6838      	ldr	r0, [r7, #0]
 8007c60:	9902      	ldr	r1, [sp, #8]
 8007c62:	006a      	lsls	r2, r5, #1
 8007c64:	eb08 0141 	add.w	r1, r8, r1, lsl #1
 8007c68:	4418      	add	r0, r3
 8007c6a:	f007 fe43 	bl	800f8f4 <memmove>
 8007c6e:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
 8007c72:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
 8007c76:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
 8007c7a:	fbb6 f6f1 	udiv	r6, r6, r1
 8007c7e:	fb03 f306 	mul.w	r3, r3, r6
 8007c82:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8007c86:	4628      	mov	r0, r5
 8007c88:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8007c8c:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
 8007c90:	b009      	add	sp, #36	; 0x24
 8007c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c96:	bf00      	nop

08007c98 <measure_noise>:
 8007c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9c:	b0b7      	sub	sp, #220	; 0xdc
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	4688      	mov	r8, r1
 8007ca2:	4616      	mov	r6, r2
 8007ca4:	f7ff fce6 	bl	8007674 <acc_rss_integration_log_level>
 8007ca8:	2803      	cmp	r0, #3
 8007caa:	d905      	bls.n	8007cb8 <measure_noise+0x20>
 8007cac:	4b41      	ldr	r3, [pc, #260]	; (8007db4 <measure_noise+0x11c>)
 8007cae:	4a42      	ldr	r2, [pc, #264]	; (8007db8 <measure_noise+0x120>)
 8007cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb2:	4942      	ldr	r1, [pc, #264]	; (8007dbc <measure_noise+0x124>)
 8007cb4:	2004      	movs	r0, #4
 8007cb6:	4798      	blx	r3
 8007cb8:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8007cbc:	f8d4 a000 	ldr.w	sl, [r4]
 8007cc0:	4649      	mov	r1, r9
 8007cc2:	22bc      	movs	r2, #188	; 0xbc
 8007cc4:	a807      	add	r0, sp, #28
 8007cc6:	f007 febd 	bl	800fa44 <memcpy>
 8007cca:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8007ccc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007cd0:	f8d8 1000 	ldr.w	r1, [r8]
 8007cd4:	f8b9 b0cc 	ldrh.w	fp, [r9, #204]	; 0xcc
 8007cd8:	00ad      	lsls	r5, r5, #2
 8007cda:	1e6f      	subs	r7, r5, #1
 8007cdc:	972c      	str	r7, [sp, #176]	; 0xb0
 8007cde:	2702      	movs	r7, #2
 8007ce0:	2400      	movs	r4, #0
 8007ce2:	ab07      	add	r3, sp, #28
 8007ce4:	972d      	str	r7, [sp, #180]	; 0xb4
 8007ce6:	4650      	mov	r0, sl
 8007ce8:	2701      	movs	r7, #1
 8007cea:	971d      	str	r7, [sp, #116]	; 0x74
 8007cec:	9422      	str	r4, [sp, #136]	; 0x88
 8007cee:	941c      	str	r4, [sp, #112]	; 0x70
 8007cf0:	f88d 40c8 	strb.w	r4, [sp, #200]	; 0xc8
 8007cf4:	9434      	str	r4, [sp, #208]	; 0xd0
 8007cf6:	f004 fb6b 	bl	800c3d0 <acc_cpd_linear_sweep_load_program>
 8007cfa:	4650      	mov	r0, sl
 8007cfc:	f005 f8a0 	bl	800ce40 <acc_cpd_linear_sweep_run_program>
 8007d00:	4650      	mov	r0, sl
 8007d02:	466b      	mov	r3, sp
 8007d04:	2264      	movs	r2, #100	; 0x64
 8007d06:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007d0a:	f001 fc21 	bl	8009550 <acc_sensor_protocol_r2_wait_for_event>
 8007d0e:	4607      	mov	r7, r0
 8007d10:	b918      	cbnz	r0, 8007d1a <measure_noise+0x82>
 8007d12:	4638      	mov	r0, r7
 8007d14:	b037      	add	sp, #220	; 0xdc
 8007d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1a:	a901      	add	r1, sp, #4
 8007d1c:	4648      	mov	r0, r9
 8007d1e:	237c      	movs	r3, #124	; 0x7c
 8007d20:	f8d8 8000 	ldr.w	r8, [r8]
 8007d24:	fbb3 fbfb 	udiv	fp, r3, fp
 8007d28:	b2ad      	uxth	r5, r5
 8007d2a:	f005 f8df 	bl	800ceec <acc_cpd_linear_sweep_get_info>
 8007d2e:	9a01      	ldr	r2, [sp, #4]
 8007d30:	fb0b f505 	mul.w	r5, fp, r5
 8007d34:	4641      	mov	r1, r8
 8007d36:	442a      	add	r2, r5
 8007d38:	4650      	mov	r0, sl
 8007d3a:	f001 fd53 	bl	80097e4 <acc_sensor_protocol_r2_transfer_data>
 8007d3e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007d42:	4680      	mov	r8, r0
 8007d44:	4650      	mov	r0, sl
 8007d46:	f001 fc9b 	bl	8009680 <acc_sensor_protocol_r2_stop>
 8007d4a:	4648      	mov	r0, r9
 8007d4c:	a901      	add	r1, sp, #4
 8007d4e:	f005 f8cd 	bl	800ceec <acc_cpd_linear_sweep_get_info>
 8007d52:	9801      	ldr	r0, [sp, #4]
 8007d54:	2d0e      	cmp	r5, #14
 8007d56:	eb08 0040 	add.w	r0, r8, r0, lsl #1
 8007d5a:	d91c      	bls.n	8007d96 <measure_noise+0xfe>
 8007d5c:	006a      	lsls	r2, r5, #1
 8007d5e:	3a02      	subs	r2, #2
 8007d60:	f100 011a 	add.w	r1, r0, #26
 8007d64:	eb00 0e02 	add.w	lr, r0, r2
 8007d68:	460b      	mov	r3, r1
 8007d6a:	f833 cf02 	ldrh.w	ip, [r3, #2]!
 8007d6e:	459e      	cmp	lr, r3
 8007d70:	4464      	add	r4, ip
 8007d72:	d1fa      	bne.n	8007d6a <measure_noise+0xd2>
 8007d74:	4410      	add	r0, r2
 8007d76:	2200      	movs	r2, #0
 8007d78:	3d0e      	subs	r5, #14
 8007d7a:	fbb4 f4f5 	udiv	r4, r4, r5
 8007d7e:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8007d82:	1b1b      	subs	r3, r3, r4
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	bfb8      	it	lt
 8007d88:	425b      	neglt	r3, r3
 8007d8a:	4288      	cmp	r0, r1
 8007d8c:	441a      	add	r2, r3
 8007d8e:	d1f6      	bne.n	8007d7e <measure_noise+0xe6>
 8007d90:	fbb2 f4f5 	udiv	r4, r2, r5
 8007d94:	b2a4      	uxth	r4, r4
 8007d96:	8034      	strh	r4, [r6, #0]
 8007d98:	f7ff fc6c 	bl	8007674 <acc_rss_integration_log_level>
 8007d9c:	2803      	cmp	r0, #3
 8007d9e:	d9b8      	bls.n	8007d12 <measure_noise+0x7a>
 8007da0:	4b04      	ldr	r3, [pc, #16]	; (8007db4 <measure_noise+0x11c>)
 8007da2:	4a07      	ldr	r2, [pc, #28]	; (8007dc0 <measure_noise+0x128>)
 8007da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da6:	4905      	ldr	r1, [pc, #20]	; (8007dbc <measure_noise+0x124>)
 8007da8:	2004      	movs	r0, #4
 8007daa:	4798      	blx	r3
 8007dac:	4638      	mov	r0, r7
 8007dae:	b037      	add	sp, #220	; 0xdc
 8007db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db4:	2000082c 	.word	0x2000082c
 8007db8:	08012284 	.word	0x08012284
 8007dbc:	080122a8 	.word	0x080122a8
 8007dc0:	080122bc 	.word	0x080122bc

08007dc4 <calibrate>:
 8007dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007dc8:	b09b      	sub	sp, #108	; 0x6c
 8007dca:	4604      	mov	r4, r0
 8007dcc:	460d      	mov	r5, r1
 8007dce:	4616      	mov	r6, r2
 8007dd0:	461f      	mov	r7, r3
 8007dd2:	f7ff fc4f 	bl	8007674 <acc_rss_integration_log_level>
 8007dd6:	2803      	cmp	r0, #3
 8007dd8:	d905      	bls.n	8007de6 <calibrate+0x22>
 8007dda:	4b46      	ldr	r3, [pc, #280]	; (8007ef4 <calibrate+0x130>)
 8007ddc:	4a46      	ldr	r2, [pc, #280]	; (8007ef8 <calibrate+0x134>)
 8007dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de0:	4946      	ldr	r1, [pc, #280]	; (8007efc <calibrate+0x138>)
 8007de2:	2004      	movs	r0, #4
 8007de4:	4798      	blx	r3
 8007de6:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8007dea:	6824      	ldr	r4, [r4, #0]
 8007dec:	2300      	movs	r3, #0
 8007dee:	f8c8 30bc 	str.w	r3, [r8, #188]	; 0xbc
 8007df2:	f7ff fb8f 	bl	8007514 <acc_rss_integration_get_sensor_reference_frequency>
 8007df6:	a812      	add	r0, sp, #72	; 0x48
 8007df8:	a902      	add	r1, sp, #8
 8007dfa:	ed8d 0a12 	vstr	s0, [sp, #72]	; 0x48
 8007dfe:	f002 f83b 	bl	8009e78 <acc_cpd_pll_divisors_calculate>
 8007e02:	b920      	cbnz	r0, 8007e0e <calibrate+0x4a>
 8007e04:	2400      	movs	r4, #0
 8007e06:	4620      	mov	r0, r4
 8007e08:	b01b      	add	sp, #108	; 0x6c
 8007e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e0e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8007e12:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8007e16:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8007e1a:	f8bd c010 	ldrh.w	ip, [sp, #16]
 8007e1e:	9207      	str	r2, [sp, #28]
 8007e20:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8007e24:	9008      	str	r0, [sp, #32]
 8007e26:	6869      	ldr	r1, [r5, #4]
 8007e28:	6828      	ldr	r0, [r5, #0]
 8007e2a:	f8ad c024 	strh.w	ip, [sp, #36]	; 0x24
 8007e2e:	466b      	mov	r3, sp
 8007e30:	aa05      	add	r2, sp, #20
 8007e32:	f002 ff4d 	bl	800acd0 <acc_cpd_cbank_and_vana_calibration>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	d0e4      	beq.n	8007e04 <calibrate+0x40>
 8007e3a:	f8b8 90ce 	ldrh.w	r9, [r8, #206]	; 0xce
 8007e3e:	f898 10d0 	ldrb.w	r1, [r8, #208]	; 0xd0
 8007e42:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8007e46:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
 8007e4a:	f1b9 0000 	subs.w	r0, r9, #0
 8007e4e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8007e52:	920b      	str	r2, [sp, #44]	; 0x2c
 8007e54:	bf18      	it	ne
 8007e56:	2001      	movne	r0, #1
 8007e58:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8007e5c:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
 8007e60:	910c      	str	r1, [sp, #48]	; 0x30
 8007e62:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8007e66:	9900      	ldr	r1, [sp, #0]
 8007e68:	940a      	str	r4, [sp, #40]	; 0x28
 8007e6a:	900d      	str	r0, [sp, #52]	; 0x34
 8007e6c:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8007e70:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8007e74:	910f      	str	r1, [sp, #60]	; 0x3c
 8007e76:	ab12      	add	r3, sp, #72	; 0x48
 8007e78:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007e7c:	aa0a      	add	r2, sp, #40	; 0x28
 8007e7e:	9410      	str	r4, [sp, #64]	; 0x40
 8007e80:	f8ad 9046 	strh.w	r9, [sp, #70]	; 0x46
 8007e84:	f003 f976 	bl	800b174 <acc_cpd_dll_calibration>
 8007e88:	4604      	mov	r4, r0
 8007e8a:	f1b9 0f00 	cmp.w	r9, #0
 8007e8e:	d004      	beq.n	8007e9a <calibrate+0xd6>
 8007e90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007e92:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
 8007e96:	607a      	str	r2, [r7, #4]
 8007e98:	703b      	strb	r3, [r7, #0]
 8007e9a:	2c00      	cmp	r4, #0
 8007e9c:	d0b2      	beq.n	8007e04 <calibrate+0x40>
 8007e9e:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 8007ea2:	9b00      	ldr	r3, [sp, #0]
 8007ea4:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8007ea8:	80b3      	strh	r3, [r6, #4]
 8007eaa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007eac:	80f0      	strh	r0, [r6, #6]
 8007eae:	8131      	strh	r1, [r6, #8]
 8007eb0:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 8007eb4:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
 8007eb8:	8172      	strh	r2, [r6, #10]
 8007eba:	81b3      	strh	r3, [r6, #12]
 8007ebc:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
 8007ec0:	81f0      	strh	r0, [r6, #14]
 8007ec2:	2306      	movs	r3, #6
 8007ec4:	8231      	strh	r1, [r6, #16]
 8007ec6:	8272      	strh	r2, [r6, #18]
 8007ec8:	6033      	str	r3, [r6, #0]
 8007eca:	f7ff fbd3 	bl	8007674 <acc_rss_integration_log_level>
 8007ece:	2803      	cmp	r0, #3
 8007ed0:	d905      	bls.n	8007ede <calibrate+0x11a>
 8007ed2:	4b08      	ldr	r3, [pc, #32]	; (8007ef4 <calibrate+0x130>)
 8007ed4:	4a0a      	ldr	r2, [pc, #40]	; (8007f00 <calibrate+0x13c>)
 8007ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed8:	4908      	ldr	r1, [pc, #32]	; (8007efc <calibrate+0x138>)
 8007eda:	2004      	movs	r0, #4
 8007edc:	4798      	blx	r3
 8007ede:	f7ff fbc9 	bl	8007674 <acc_rss_integration_log_level>
 8007ee2:	2801      	cmp	r0, #1
 8007ee4:	d98f      	bls.n	8007e06 <calibrate+0x42>
 8007ee6:	4b03      	ldr	r3, [pc, #12]	; (8007ef4 <calibrate+0x130>)
 8007ee8:	4a06      	ldr	r2, [pc, #24]	; (8007f04 <calibrate+0x140>)
 8007eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eec:	4903      	ldr	r1, [pc, #12]	; (8007efc <calibrate+0x138>)
 8007eee:	2002      	movs	r0, #2
 8007ef0:	4798      	blx	r3
 8007ef2:	e788      	b.n	8007e06 <calibrate+0x42>
 8007ef4:	2000082c 	.word	0x2000082c
 8007ef8:	080122dc 	.word	0x080122dc
 8007efc:	080122a8 	.word	0x080122a8
 8007f00:	080122fc 	.word	0x080122fc
 8007f04:	08012318 	.word	0x08012318

08007f08 <set_calibration_context>:
 8007f08:	b570      	push	{r4, r5, r6, lr}
 8007f0a:	680b      	ldr	r3, [r1, #0]
 8007f0c:	2b06      	cmp	r3, #6
 8007f0e:	b08c      	sub	sp, #48	; 0x30
 8007f10:	d00b      	beq.n	8007f2a <set_calibration_context+0x22>
 8007f12:	4929      	ldr	r1, [pc, #164]	; (8007fb8 <set_calibration_context+0xb0>)
 8007f14:	4a29      	ldr	r2, [pc, #164]	; (8007fbc <set_calibration_context+0xb4>)
 8007f16:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8007f18:	4929      	ldr	r1, [pc, #164]	; (8007fc0 <set_calibration_context+0xb8>)
 8007f1a:	2006      	movs	r0, #6
 8007f1c:	9000      	str	r0, [sp, #0]
 8007f1e:	2000      	movs	r0, #0
 8007f20:	47a0      	blx	r4
 8007f22:	2600      	movs	r6, #0
 8007f24:	4630      	mov	r0, r6
 8007f26:	b00c      	add	sp, #48	; 0x30
 8007f28:	bd70      	pop	{r4, r5, r6, pc}
 8007f2a:	460d      	mov	r5, r1
 8007f2c:	4604      	mov	r4, r0
 8007f2e:	f7ff faf1 	bl	8007514 <acc_rss_integration_get_sensor_reference_frequency>
 8007f32:	a806      	add	r0, sp, #24
 8007f34:	a903      	add	r1, sp, #12
 8007f36:	ed8d 0a06 	vstr	s0, [sp, #24]
 8007f3a:	f001 ff9d 	bl	8009e78 <acc_cpd_pll_divisors_calculate>
 8007f3e:	4606      	mov	r6, r0
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d0ef      	beq.n	8007f24 <set_calibration_context+0x1c>
 8007f44:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8007f48:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8007f4c:	6063      	str	r3, [r4, #4]
 8007f4e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8007f52:	60a2      	str	r2, [r4, #8]
 8007f54:	6023      	str	r3, [r4, #0]
 8007f56:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8007f5a:	88ab      	ldrh	r3, [r5, #4]
 8007f5c:	81a2      	strh	r2, [r4, #12]
 8007f5e:	88ea      	ldrh	r2, [r5, #6]
 8007f60:	6123      	str	r3, [r4, #16]
 8007f62:	892b      	ldrh	r3, [r5, #8]
 8007f64:	6162      	str	r2, [r4, #20]
 8007f66:	896a      	ldrh	r2, [r5, #10]
 8007f68:	61a3      	str	r3, [r4, #24]
 8007f6a:	89ab      	ldrh	r3, [r5, #12]
 8007f6c:	61e2      	str	r2, [r4, #28]
 8007f6e:	8a2a      	ldrh	r2, [r5, #16]
 8007f70:	6223      	str	r3, [r4, #32]
 8007f72:	8a6b      	ldrh	r3, [r5, #18]
 8007f74:	89e8      	ldrh	r0, [r5, #14]
 8007f76:	84a2      	strh	r2, [r4, #36]	; 0x24
 8007f78:	84e3      	strh	r3, [r4, #38]	; 0x26
 8007f7a:	aa06      	add	r2, sp, #24
 8007f7c:	217c      	movs	r1, #124	; 0x7c
 8007f7e:	f002 f861 	bl	800a044 <acc_dll_calculate_area_settings>
 8007f82:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8007f86:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8007f8a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8007f8e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8007f92:	62a0      	str	r0, [r4, #40]	; 0x28
 8007f94:	62e1      	str	r1, [r4, #44]	; 0x2c
 8007f96:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 8007f9a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8007f9e:	6322      	str	r2, [r4, #48]	; 0x30
 8007fa0:	6363      	str	r3, [r4, #52]	; 0x34
 8007fa2:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8007fa6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8007faa:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
 8007fae:	4630      	mov	r0, r6
 8007fb0:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8007fb4:	b00c      	add	sp, #48	; 0x30
 8007fb6:	bd70      	pop	{r4, r5, r6, pc}
 8007fb8:	2000082c 	.word	0x2000082c
 8007fbc:	08012338 	.word	0x08012338
 8007fc0:	080122a8 	.word	0x080122a8

08007fc4 <get_package_range_coarse_max>:
 8007fc4:	b530      	push	{r4, r5, lr}
 8007fc6:	f8b0 50cc 	ldrh.w	r5, [r0, #204]	; 0xcc
 8007fca:	b087      	sub	sp, #28
 8007fcc:	b185      	cbz	r5, 8007ff0 <get_package_range_coarse_max+0x2c>
 8007fce:	4604      	mov	r4, r0
 8007fd0:	4669      	mov	r1, sp
 8007fd2:	f004 ff8b 	bl	800ceec <acc_cpd_linear_sweep_get_info>
 8007fd6:	9b00      	ldr	r3, [sp, #0]
 8007fd8:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
 8007fdc:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8007fe0:	1a1b      	subs	r3, r3, r0
 8007fe2:	207c      	movs	r0, #124	; 0x7c
 8007fe4:	fbb0 f0f5 	udiv	r0, r0, r5
 8007fe8:	fbb3 f0f0 	udiv	r0, r3, r0
 8007fec:	b007      	add	sp, #28
 8007fee:	bd30      	pop	{r4, r5, pc}
 8007ff0:	4802      	ldr	r0, [pc, #8]	; (8007ffc <get_package_range_coarse_max+0x38>)
 8007ff2:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8007ff6:	f001 fd61 	bl	8009abc <acc_assert_fail>
 8007ffa:	bf00      	nop
 8007ffc:	080122a8 	.word	0x080122a8

08008000 <initialize>:
 8008000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008004:	460d      	mov	r5, r1
 8008006:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
 800800a:	2906      	cmp	r1, #6
 800800c:	b08f      	sub	sp, #60	; 0x3c
 800800e:	4606      	mov	r6, r0
 8008010:	4690      	mov	r8, r2
 8008012:	461f      	mov	r7, r3
 8008014:	d00d      	beq.n	8008032 <initialize+0x32>
 8008016:	2909      	cmp	r1, #9
 8008018:	d00b      	beq.n	8008032 <initialize+0x32>
 800801a:	4ba8      	ldr	r3, [pc, #672]	; (80082bc <initialize+0x2bc>)
 800801c:	4aa8      	ldr	r2, [pc, #672]	; (80082c0 <initialize+0x2c0>)
 800801e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008020:	49a8      	ldr	r1, [pc, #672]	; (80082c4 <initialize+0x2c4>)
 8008022:	2000      	movs	r0, #0
 8008024:	4798      	blx	r3
 8008026:	f04f 0900 	mov.w	r9, #0
 800802a:	4648      	mov	r0, r9
 800802c:	b00f      	add	sp, #60	; 0x3c
 800802e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008032:	aa06      	add	r2, sp, #24
 8008034:	f10d 0116 	add.w	r1, sp, #22
 8008038:	4628      	mov	r0, r5
 800803a:	6974      	ldr	r4, [r6, #20]
 800803c:	f7ff f91a 	bl	8007274 <acc_base_configuration_cca_get>
 8008040:	2800      	cmp	r0, #0
 8008042:	d03f      	beq.n	80080c4 <initialize+0xc4>
 8008044:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8008048:	f89d 0016 	ldrb.w	r0, [sp, #22]
 800804c:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
 8008050:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
 8008054:	4628      	mov	r0, r5
 8008056:	f7ff f89f 	bl	8007198 <acc_base_configuration_downsampling_factor_get>
 800805a:	2300      	movs	r3, #0
 800805c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8008060:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
 8008064:	4628      	mov	r0, r5
 8008066:	f7fe fef9 	bl	8006e5c <acc_base_configuration_tx_disable_get>
 800806a:	f04f 0b01 	mov.w	fp, #1
 800806e:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
 8008072:	f884 b0ad 	strb.w	fp, [r4, #173]	; 0xad
 8008076:	4620      	mov	r0, r4
 8008078:	f7ff ffa4 	bl	8007fc4 <get_package_range_coarse_max>
 800807c:	4b92      	ldr	r3, [pc, #584]	; (80082c8 <initialize+0x2c8>)
 800807e:	b280      	uxth	r0, r0
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	9002      	str	r0, [sp, #8]
 8008084:	237c      	movs	r3, #124	; 0x7c
 8008086:	f106 0a04 	add.w	sl, r6, #4
 800808a:	9201      	str	r2, [sp, #4]
 800808c:	9300      	str	r3, [sp, #0]
 800808e:	4652      	mov	r2, sl
 8008090:	463b      	mov	r3, r7
 8008092:	4641      	mov	r1, r8
 8008094:	4628      	mov	r0, r5
 8008096:	f000 fa95 	bl	80085c4 <acc_radar_engine_common_sweep_w_dly_initialize_range>
 800809a:	4681      	mov	r9, r0
 800809c:	2800      	cmp	r0, #0
 800809e:	d0c4      	beq.n	800802a <initialize+0x2a>
 80080a0:	4628      	mov	r0, r5
 80080a2:	f7ff f815 	bl	80070d0 <acc_base_configuration_sweep_type_debug_get>
 80080a6:	b980      	cbnz	r0, 80080ca <initialize+0xca>
 80080a8:	e9c4 0b12 	strd	r0, fp, [r4, #72]	; 0x48
 80080ac:	2300      	movs	r3, #0
 80080ae:	6523      	str	r3, [r4, #80]	; 0x50
 80080b0:	4628      	mov	r0, r5
 80080b2:	f7fe ff8d 	bl	8006fd0 <acc_base_configuration_repetition_mode_get>
 80080b6:	2803      	cmp	r0, #3
 80080b8:	f200 80d8 	bhi.w	800826c <initialize+0x26c>
 80080bc:	e8df f000 	tbb	[pc, r0]
 80080c0:	0abfd9d1 	.word	0x0abfd9d1
 80080c4:	f8a4 00ce 	strh.w	r0, [r4, #206]	; 0xce
 80080c8:	e7c2      	b.n	8008050 <initialize+0x50>
 80080ca:	2300      	movs	r3, #0
 80080cc:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 80080d0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80080d2:	e7eb      	b.n	80080ac <initialize+0xac>
 80080d4:	4628      	mov	r0, r5
 80080d6:	f10d 0b20 	add.w	fp, sp, #32
 80080da:	f7fe ff81 	bl	8006fe0 <acc_base_configuration_update_rate_get>
 80080de:	a907      	add	r1, sp, #28
 80080e0:	4658      	mov	r0, fp
 80080e2:	f000 fa27 	bl	8008534 <acc_radar_engine_common_frequency_to_main_clk>
 80080e6:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80080ea:	2301      	movs	r3, #1
 80080ec:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 80080f0:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 80080f4:	4628      	mov	r0, r5
 80080f6:	f7fe fea1 	bl	8006e3c <acc_base_configuration_power_save_mode_get>
 80080fa:	2804      	cmp	r0, #4
 80080fc:	d807      	bhi.n	800810e <initialize+0x10e>
 80080fe:	e8df f000 	tbb	[pc, r0]
 8008102:	0303      	.short	0x0303
 8008104:	c1c5      	.short	0xc1c5
 8008106:	03          	.byte	0x03
 8008107:	00          	.byte	0x00
 8008108:	2301      	movs	r3, #1
 800810a:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 800810e:	f10d 021a 	add.w	r2, sp, #26
 8008112:	f10d 0117 	add.w	r1, sp, #23
 8008116:	4628      	mov	r0, r5
 8008118:	f7ff f8ac 	bl	8007274 <acc_base_configuration_cca_get>
 800811c:	2800      	cmp	r0, #0
 800811e:	f000 80ba 	beq.w	8008296 <initialize+0x296>
 8008122:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8008126:	2201      	movs	r2, #1
 8008128:	3b01      	subs	r3, #1
 800812a:	e9c4 232d 	strd	r2, r3, [r4, #180]	; 0xb4
 800812e:	4628      	mov	r0, r5
 8008130:	f7fe fe94 	bl	8006e5c <acc_base_configuration_tx_disable_get>
 8008134:	2800      	cmp	r0, #0
 8008136:	f000 80bb 	beq.w	80082b0 <initialize+0x2b0>
 800813a:	2000      	movs	r0, #0
 800813c:	66e0      	str	r0, [r4, #108]	; 0x6c
 800813e:	4628      	mov	r0, r5
 8008140:	f7fe fea0 	bl	8006e84 <acc_base_configuration_decrease_tx_emission_get>
 8008144:	f080 0001 	eor.w	r0, r0, #1
 8008148:	2301      	movs	r3, #1
 800814a:	b2c0      	uxtb	r0, r0
 800814c:	e9c4 031c 	strd	r0, r3, [r4, #112]	; 0x70
 8008150:	4628      	mov	r0, r5
 8008152:	f7fe feab 	bl	8006eac <acc_base_configuration_hw_accelerated_average_samples_get>
 8008156:	3801      	subs	r0, #1
 8008158:	67a0      	str	r0, [r4, #120]	; 0x78
 800815a:	4628      	mov	r0, r5
 800815c:	f7fe ff58 	bl	8007010 <acc_base_configuration_gain_get>
 8008160:	67e0      	str	r0, [r4, #124]	; 0x7c
 8008162:	4628      	mov	r0, r5
 8008164:	f7fe ff64 	bl	8007030 <acc_base_configuration_integrator_get>
 8008168:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 800816c:	4628      	mov	r0, r5
 800816e:	f7fe ff87 	bl	8007080 <acc_base_configuration_integrator_ramp_up_get>
 8008172:	3801      	subs	r0, #1
 8008174:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8008178:	4628      	mov	r0, r5
 800817a:	f7fe ff6d 	bl	8007058 <acc_base_configuration_wg_duration_get>
 800817e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8008182:	4628      	mov	r0, r5
 8008184:	f7fe ffea 	bl	800715c <acc_base_configuration_bba_fast_refresh_disable_get>
 8008188:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
 800818c:	4628      	mov	r0, r5
 800818e:	f7ff f803 	bl	8007198 <acc_base_configuration_downsampling_factor_get>
 8008192:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
 8008196:	4628      	mov	r0, r5
 8008198:	f7fe ffcc 	bl	8007134 <acc_base_configuration_bba_reset_clocksync_perturbation_get>
 800819c:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
 80081a0:	4628      	mov	r0, r5
 80081a2:	f7fe ffd1 	bl	8007148 <acc_base_configuration_bba_linear_resync_perturbation_get>
 80081a6:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
 80081aa:	4628      	mov	r0, r5
 80081ac:	f7ff f826 	bl	80071fc <acc_base_configuration_asynchronous_measurement_get>
 80081b0:	88b2      	ldrh	r2, [r6, #4]
 80081b2:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80081b6:	f080 0001 	eor.w	r0, r0, #1
 80081ba:	2301      	movs	r3, #1
 80081bc:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
 80081c0:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 80081c4:	4650      	mov	r0, sl
 80081c6:	f000 fcc9 	bl	8008b5c <acc_radar_engine_common_sweep_w_dly_stitching_required>
 80081ca:	2800      	cmp	r0, #0
 80081cc:	d16c      	bne.n	80082a8 <initialize+0x2a8>
 80081ce:	8970      	ldrh	r0, [r6, #10]
 80081d0:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 80081d4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 80081d8:	3801      	subs	r0, #1
 80081da:	88f3      	ldrh	r3, [r6, #6]
 80081dc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 80081e0:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
 80081e4:	f7ff f996 	bl	8007514 <acc_rss_integration_get_sensor_reference_frequency>
 80081e8:	893b      	ldrh	r3, [r7, #8]
 80081ea:	ed84 0a2c 	vstr	s0, [r4, #176]	; 0xb0
 80081ee:	f44f 7261 	mov.w	r2, #900	; 0x384
 80081f2:	f8a8 2014 	strh.w	r2, [r8, #20]
 80081f6:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
 80081fa:	227c      	movs	r2, #124	; 0x7c
 80081fc:	fbb2 f2f1 	udiv	r2, r2, r1
 8008200:	fb03 f302 	mul.w	r3, r3, r2
 8008204:	2200      	movs	r2, #0
 8008206:	817b      	strh	r3, [r7, #10]
 8008208:	833a      	strh	r2, [r7, #24]
 800820a:	4659      	mov	r1, fp
 800820c:	4620      	mov	r0, r4
 800820e:	f004 fe6d 	bl	800ceec <acc_cpd_linear_sweep_get_info>
 8008212:	465a      	mov	r2, fp
 8008214:	6831      	ldr	r1, [r6, #0]
 8008216:	2301      	movs	r3, #1
 8008218:	2013      	movs	r0, #19
 800821a:	f001 fd77 	bl	8009d0c <acc_probes_execute_uint16>
 800821e:	f000 fcf9 	bl	8008c14 <acc_sensor_r2_get_max_header_length>
 8008222:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
 8008226:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800822a:	4413      	add	r3, r2
 800822c:	4418      	add	r0, r3
 800822e:	81f8      	strh	r0, [r7, #14]
 8008230:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8008234:	4648      	mov	r0, r9
 8008236:	81bb      	strh	r3, [r7, #12]
 8008238:	b00f      	add	sp, #60	; 0x3c
 800823a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823e:	4628      	mov	r0, r5
 8008240:	f10d 0b20 	add.w	fp, sp, #32
 8008244:	f7fe fecc 	bl	8006fe0 <acc_base_configuration_update_rate_get>
 8008248:	a907      	add	r1, sp, #28
 800824a:	4658      	mov	r0, fp
 800824c:	f000 f972 	bl	8008534 <acc_radar_engine_common_frequency_to_main_clk>
 8008250:	2301      	movs	r3, #1
 8008252:	9a07      	ldr	r2, [sp, #28]
 8008254:	6563      	str	r3, [r4, #84]	; 0x54
 8008256:	2100      	movs	r1, #0
 8008258:	9b08      	ldr	r3, [sp, #32]
 800825a:	6623      	str	r3, [r4, #96]	; 0x60
 800825c:	e9c4 1216 	strd	r1, r2, [r4, #88]	; 0x58
 8008260:	e748      	b.n	80080f4 <initialize+0xf4>
 8008262:	2300      	movs	r3, #0
 8008264:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 8008268:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 800826c:	f10d 0b20 	add.w	fp, sp, #32
 8008270:	e740      	b.n	80080f4 <initialize+0xf4>
 8008272:	2300      	movs	r3, #0
 8008274:	2201      	movs	r2, #1
 8008276:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 800827a:	6563      	str	r3, [r4, #84]	; 0x54
 800827c:	65a2      	str	r2, [r4, #88]	; 0x58
 800827e:	f10d 0b20 	add.w	fp, sp, #32
 8008282:	e737      	b.n	80080f4 <initialize+0xf4>
 8008284:	2300      	movs	r3, #0
 8008286:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 800828a:	e740      	b.n	800810e <initialize+0x10e>
 800828c:	2201      	movs	r2, #1
 800828e:	2300      	movs	r3, #0
 8008290:	e9c4 2319 	strd	r2, r3, [r4, #100]	; 0x64
 8008294:	e73b      	b.n	800810e <initialize+0x10e>
 8008296:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 800829a:	4628      	mov	r0, r5
 800829c:	f7fe fdde 	bl	8006e5c <acc_base_configuration_tx_disable_get>
 80082a0:	f080 0001 	eor.w	r0, r0, #1
 80082a4:	b2c0      	uxtb	r0, r0
 80082a6:	e749      	b.n	800813c <initialize+0x13c>
 80082a8:	6970      	ldr	r0, [r6, #20]
 80082aa:	f7ff fe8b 	bl	8007fc4 <get_package_range_coarse_max>
 80082ae:	e78f      	b.n	80081d0 <initialize+0x1d0>
 80082b0:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80082b4:	f080 0001 	eor.w	r0, r0, #1
 80082b8:	e740      	b.n	800813c <initialize+0x13c>
 80082ba:	bf00      	nop
 80082bc:	2000082c 	.word	0x2000082c
 80082c0:	080121cc 	.word	0x080121cc
 80082c4:	080122a8 	.word	0x080122a8
 80082c8:	08012428 	.word	0x08012428

080082cc <coarse_count_for_next_package>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	8983      	ldrh	r3, [r0, #12]
 80082d0:	4604      	mov	r4, r0
 80082d2:	6940      	ldr	r0, [r0, #20]
 80082d4:	3b01      	subs	r3, #1
 80082d6:	f8b0 20c2 	ldrh.w	r2, [r0, #194]	; 0xc2
 80082da:	b29b      	uxth	r3, r3
 80082dc:	429a      	cmp	r2, r3
 80082de:	d109      	bne.n	80082f4 <coarse_count_for_next_package+0x28>
 80082e0:	8965      	ldrh	r5, [r4, #10]
 80082e2:	f7ff fe6f 	bl	8007fc4 <get_package_range_coarse_max>
 80082e6:	fbb5 f3f0 	udiv	r3, r5, r0
 80082ea:	fb03 5010 	mls	r0, r3, r0, r5
 80082ee:	b100      	cbz	r0, 80082f2 <coarse_count_for_next_package+0x26>
 80082f0:	bd38      	pop	{r3, r4, r5, pc}
 80082f2:	6960      	ldr	r0, [r4, #20]
 80082f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082f8:	f7ff be64 	b.w	8007fc4 <get_package_range_coarse_max>

080082fc <update_program>:
 80082fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008300:	6946      	ldr	r6, [r0, #20]
 8008302:	8987      	ldrh	r7, [r0, #12]
 8008304:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 8008306:	f896 20c0 	ldrb.w	r2, [r6, #192]	; 0xc0
 800830a:	460d      	mov	r5, r1
 800830c:	fab3 f383 	clz	r3, r3
 8008310:	2a00      	cmp	r2, #0
 8008312:	bf18      	it	ne
 8008314:	4611      	movne	r1, r2
 8008316:	2f01      	cmp	r7, #1
 8008318:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800831c:	bf94      	ite	ls
 800831e:	f04f 0900 	movls.w	r9, #0
 8008322:	f04f 0901 	movhi.w	r9, #1
 8008326:	2f01      	cmp	r7, #1
 8008328:	b085      	sub	sp, #20
 800832a:	4604      	mov	r4, r0
 800832c:	ea83 0a01 	eor.w	sl, r3, r1
 8008330:	d933      	bls.n	800839a <update_program+0x9e>
 8008332:	f8b6 30c2 	ldrh.w	r3, [r6, #194]	; 0xc2
 8008336:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 800833a:	3301      	adds	r3, #1
 800833c:	b29b      	uxth	r3, r3
 800833e:	fbb3 f8f7 	udiv	r8, r3, r7
 8008342:	fb07 3718 	mls	r7, r7, r8, r3
 8008346:	fa1f f887 	uxth.w	r8, r7
 800834a:	f8a6 80c2 	strh.w	r8, [r6, #194]	; 0xc2
 800834e:	4630      	mov	r0, r6
 8008350:	f7ff fe38 	bl	8007fc4 <get_package_range_coarse_max>
 8008354:	4607      	mov	r7, r0
 8008356:	4620      	mov	r0, r4
 8008358:	f7ff ffb8 	bl	80082cc <coarse_count_for_next_package>
 800835c:	f896 20c0 	ldrb.w	r2, [r6, #192]	; 0xc0
 8008360:	f8c6 00c8 	str.w	r0, [r6, #200]	; 0xc8
 8008364:	fb07 b708 	mla	r7, r7, r8, fp
 8008368:	3801      	subs	r0, #1
 800836a:	e9cd 0701 	strd	r0, r7, [sp, #4]
 800836e:	f88d 9000 	strb.w	r9, [sp]
 8008372:	f88d 9001 	strb.w	r9, [sp, #1]
 8008376:	f88d a002 	strb.w	sl, [sp, #2]
 800837a:	b15a      	cbz	r2, 8008394 <update_program+0x98>
 800837c:	2500      	movs	r5, #0
 800837e:	6820      	ldr	r0, [r4, #0]
 8008380:	9503      	str	r5, [sp, #12]
 8008382:	4669      	mov	r1, sp
 8008384:	f004 fd60 	bl	800ce48 <acc_cpd_linear_sweep_update_program>
 8008388:	b108      	cbz	r0, 800838e <update_program+0x92>
 800838a:	9b03      	ldr	r3, [sp, #12]
 800838c:	66f3      	str	r3, [r6, #108]	; 0x6c
 800838e:	b005      	add	sp, #20
 8008390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008394:	f085 0501 	eor.w	r5, r5, #1
 8008398:	e7f1      	b.n	800837e <update_program+0x82>
 800839a:	428b      	cmp	r3, r1
 800839c:	d003      	beq.n	80083a6 <update_program+0xaa>
 800839e:	f04f 30ff 	mov.w	r0, #4294967295
 80083a2:	2700      	movs	r7, #0
 80083a4:	e7e1      	b.n	800836a <update_program+0x6e>
 80083a6:	2001      	movs	r0, #1
 80083a8:	e7f1      	b.n	800838e <update_program+0x92>
 80083aa:	bf00      	nop

080083ac <start>:
 80083ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80083b0:	6944      	ldr	r4, [r0, #20]
 80083b2:	f8d4 70b4 	ldr.w	r7, [r4, #180]	; 0xb4
 80083b6:	f894 80ac 	ldrb.w	r8, [r4, #172]	; 0xac
 80083ba:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 80083be:	2300      	movs	r3, #0
 80083c0:	b085      	sub	sp, #20
 80083c2:	4606      	mov	r6, r0
 80083c4:	460d      	mov	r5, r1
 80083c6:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 80083ca:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 80083ce:	b117      	cbz	r7, 80083d6 <start+0x2a>
 80083d0:	f1b8 0f00 	cmp.w	r8, #0
 80083d4:	d11f      	bne.n	8008416 <start+0x6a>
 80083d6:	4630      	mov	r0, r6
 80083d8:	f7ff ff78 	bl	80082cc <coarse_count_for_next_package>
 80083dc:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
 80083e0:	f7ff f948 	bl	8007674 <acc_rss_integration_log_level>
 80083e4:	2803      	cmp	r0, #3
 80083e6:	d905      	bls.n	80083f4 <start+0x48>
 80083e8:	4b2b      	ldr	r3, [pc, #172]	; (8008498 <start+0xec>)
 80083ea:	4a2c      	ldr	r2, [pc, #176]	; (800849c <start+0xf0>)
 80083ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ee:	492c      	ldr	r1, [pc, #176]	; (80084a0 <start+0xf4>)
 80083f0:	2004      	movs	r0, #4
 80083f2:	4798      	blx	r3
 80083f4:	e9d5 1200 	ldrd	r1, r2, [r5]
 80083f8:	6830      	ldr	r0, [r6, #0]
 80083fa:	4623      	mov	r3, r4
 80083fc:	f003 ffe8 	bl	800c3d0 <acc_cpd_linear_sweep_load_program>
 8008400:	4605      	mov	r5, r0
 8008402:	b950      	cbnz	r0, 800841a <start+0x6e>
 8008404:	4b24      	ldr	r3, [pc, #144]	; (8008498 <start+0xec>)
 8008406:	4a27      	ldr	r2, [pc, #156]	; (80084a4 <start+0xf8>)
 8008408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800840a:	4925      	ldr	r1, [pc, #148]	; (80084a0 <start+0xf4>)
 800840c:	4798      	blx	r3
 800840e:	4628      	mov	r0, r5
 8008410:	b005      	add	sp, #20
 8008412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008416:	66e3      	str	r3, [r4, #108]	; 0x6c
 8008418:	e7dd      	b.n	80083d6 <start+0x2a>
 800841a:	6830      	ldr	r0, [r6, #0]
 800841c:	f004 fd10 	bl	800ce40 <acc_cpd_linear_sweep_run_program>
 8008420:	4605      	mov	r5, r0
 8008422:	2800      	cmp	r0, #0
 8008424:	d032      	beq.n	800848c <start+0xe0>
 8008426:	f1b8 0f00 	cmp.w	r8, #0
 800842a:	d00f      	beq.n	800844c <start+0xa0>
 800842c:	6931      	ldr	r1, [r6, #16]
 800842e:	6830      	ldr	r0, [r6, #0]
 8008430:	f001 f9ae 	bl	8009790 <acc_sensor_protocol_r2_wait_for_sync_start>
 8008434:	b350      	cbz	r0, 800848c <start+0xe0>
 8008436:	f7ff f91d 	bl	8007674 <acc_rss_integration_log_level>
 800843a:	2801      	cmp	r0, #1
 800843c:	d905      	bls.n	800844a <start+0x9e>
 800843e:	4b16      	ldr	r3, [pc, #88]	; (8008498 <start+0xec>)
 8008440:	4a19      	ldr	r2, [pc, #100]	; (80084a8 <start+0xfc>)
 8008442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008444:	4916      	ldr	r1, [pc, #88]	; (80084a0 <start+0xf4>)
 8008446:	2002      	movs	r0, #2
 8008448:	4798      	blx	r3
 800844a:	b96f      	cbnz	r7, 8008468 <start+0xbc>
 800844c:	f7ff f912 	bl	8007674 <acc_rss_integration_log_level>
 8008450:	2803      	cmp	r0, #3
 8008452:	d9dc      	bls.n	800840e <start+0x62>
 8008454:	4b10      	ldr	r3, [pc, #64]	; (8008498 <start+0xec>)
 8008456:	4a15      	ldr	r2, [pc, #84]	; (80084ac <start+0x100>)
 8008458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845a:	4911      	ldr	r1, [pc, #68]	; (80084a0 <start+0xf4>)
 800845c:	2004      	movs	r0, #4
 800845e:	4798      	blx	r3
 8008460:	4628      	mov	r0, r5
 8008462:	b005      	add	sp, #20
 8008464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008468:	2300      	movs	r3, #0
 800846a:	2201      	movs	r2, #1
 800846c:	6830      	ldr	r0, [r6, #0]
 800846e:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
 8008472:	4669      	mov	r1, sp
 8008474:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8008478:	f8cd 900c 	str.w	r9, [sp, #12]
 800847c:	f8ad 3000 	strh.w	r3, [sp]
 8008480:	f88d 2002 	strb.w	r2, [sp, #2]
 8008484:	f004 fce0 	bl	800ce48 <acc_cpd_linear_sweep_update_program>
 8008488:	2800      	cmp	r0, #0
 800848a:	d1df      	bne.n	800844c <start+0xa0>
 800848c:	2500      	movs	r5, #0
 800848e:	4628      	mov	r0, r5
 8008490:	b005      	add	sp, #20
 8008492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008496:	bf00      	nop
 8008498:	2000082c 	.word	0x2000082c
 800849c:	08012378 	.word	0x08012378
 80084a0:	080122a8 	.word	0x080122a8
 80084a4:	080123a0 	.word	0x080123a0
 80084a8:	080123bc 	.word	0x080123bc
 80084ac:	080123e0 	.word	0x080123e0

080084b0 <acc_radar_engine_linear_create>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4a11      	ldr	r2, [pc, #68]	; (80084f8 <acc_radar_engine_linear_create+0x48>)
 80084b4:	4604      	mov	r4, r0
 80084b6:	460d      	mov	r5, r1
 80084b8:	f44f 7393 	mov.w	r3, #294	; 0x126
 80084bc:	21d4      	movs	r1, #212	; 0xd4
 80084be:	2001      	movs	r0, #1
 80084c0:	f7ff f8a8 	bl	8007614 <acc_rss_integration_mem_calloc_debug>
 80084c4:	6160      	str	r0, [r4, #20]
 80084c6:	b1a8      	cbz	r0, 80084f4 <acc_radar_engine_linear_create+0x44>
 80084c8:	4628      	mov	r0, r5
 80084ca:	f7fe fc67 	bl	8006d9c <acc_base_configuration_sensor_get>
 80084ce:	6020      	str	r0, [r4, #0]
 80084d0:	4628      	mov	r0, r5
 80084d2:	f7fe fe93 	bl	80071fc <acc_base_configuration_asynchronous_measurement_get>
 80084d6:	73a0      	strb	r0, [r4, #14]
 80084d8:	4628      	mov	r0, r5
 80084da:	f7fe fcaf 	bl	8006e3c <acc_base_configuration_power_save_mode_get>
 80084de:	fab0 f080 	clz	r0, r0
 80084e2:	0940      	lsrs	r0, r0, #5
 80084e4:	73e0      	strb	r0, [r4, #15]
 80084e6:	4628      	mov	r0, r5
 80084e8:	f000 f80a 	bl	8008500 <acc_radar_engine_common_get_timeout_ms>
 80084ec:	4b03      	ldr	r3, [pc, #12]	; (80084fc <acc_radar_engine_linear_create+0x4c>)
 80084ee:	6120      	str	r0, [r4, #16]
 80084f0:	61a3      	str	r3, [r4, #24]
 80084f2:	2001      	movs	r0, #1
 80084f4:	bd38      	pop	{r3, r4, r5, pc}
 80084f6:	bf00      	nop
 80084f8:	080122a8 	.word	0x080122a8
 80084fc:	08012404 	.word	0x08012404

08008500 <acc_radar_engine_common_get_timeout_ms>:
 8008500:	b510      	push	{r4, lr}
 8008502:	4604      	mov	r4, r0
 8008504:	f7fe fd64 	bl	8006fd0 <acc_base_configuration_repetition_mode_get>
 8008508:	2801      	cmp	r0, #1
 800850a:	d00d      	beq.n	8008528 <acc_radar_engine_common_get_timeout_ms+0x28>
 800850c:	4620      	mov	r0, r4
 800850e:	f7fe fd67 	bl	8006fe0 <acc_base_configuration_update_rate_get>
 8008512:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8008530 <acc_radar_engine_common_get_timeout_ms+0x30>
 8008516:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800851a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800851e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008522:	ee17 0a90 	vmov	r0, s15
 8008526:	bd10      	pop	{r4, pc}
 8008528:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800852c:	bd10      	pop	{r4, pc}
 800852e:	bf00      	nop
 8008530:	44fa0000 	.word	0x44fa0000

08008534 <acc_radar_engine_common_frequency_to_main_clk>:
 8008534:	b538      	push	{r3, r4, r5, lr}
 8008536:	ed2d 8b02 	vpush	{d8}
 800853a:	4604      	mov	r4, r0
 800853c:	eeb0 8a40 	vmov.f32	s16, s0
 8008540:	460d      	mov	r5, r1
 8008542:	f7fe ffe7 	bl	8007514 <acc_rss_integration_get_sensor_reference_frequency>
 8008546:	eec0 7a08 	vdiv.f32	s15, s0, s16
 800854a:	ecbd 8b02 	vpop	{d8}
 800854e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008552:	ee17 3a90 	vmov	r3, s15
 8008556:	0c1a      	lsrs	r2, r3, #16
 8008558:	b29b      	uxth	r3, r3
 800855a:	602a      	str	r2, [r5, #0]
 800855c:	6023      	str	r3, [r4, #0]
 800855e:	bd38      	pop	{r3, r4, r5, pc}

08008560 <get_dt>:
 8008560:	b508      	push	{r3, lr}
 8008562:	ed2d 8b02 	vpush	{d8}
 8008566:	ee08 0a10 	vmov	s16, r0
 800856a:	f7fe ffd3 	bl	8007514 <acc_rss_integration_get_sensor_reference_frequency>
 800856e:	eef0 8a40 	vmov.f32	s17, s0
 8008572:	f001 fd5f 	bl	800a034 <acc_cpd_pll_divisors_ref_divisor>
 8008576:	ee28 0a80 	vmul.f32	s0, s17, s0
 800857a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800857e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008582:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8008586:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800858a:	ecbd 8b02 	vpop	{d8}
 800858e:	bd08      	pop	{r3, pc}

08008590 <points_to_meter>:
 8008590:	b508      	push	{r3, lr}
 8008592:	4603      	mov	r3, r0
 8008594:	ed2d 8b02 	vpush	{d8}
 8008598:	4608      	mov	r0, r1
 800859a:	ee08 3a10 	vmov	s16, r3
 800859e:	f7ff ffdf 	bl	8008560 <get_dt>
 80085a2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80085a6:	eddf 7a06 	vldr	s15, [pc, #24]	; 80085c0 <points_to_meter+0x30>
 80085aa:	ee28 8a00 	vmul.f32	s16, s16, s0
 80085ae:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80085b2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80085b6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80085ba:	ecbd 8b02 	vpop	{d8}
 80085be:	bd08      	pop	{r3, pc}
 80085c0:	4d8ef3c2 	.word	0x4d8ef3c2

080085c4 <acc_radar_engine_common_sweep_w_dly_initialize_range>:
 80085c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c8:	ed2d 8b04 	vpush	{d8-d9}
 80085cc:	b089      	sub	sp, #36	; 0x24
 80085ce:	4689      	mov	r9, r1
 80085d0:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80085d2:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
 80085d6:	f9bd b05e 	ldrsh.w	fp, [sp, #94]	; 0x5e
 80085da:	9306      	str	r3, [sp, #24]
 80085dc:	4617      	mov	r7, r2
 80085de:	4680      	mov	r8, r0
 80085e0:	f7fe fd8a 	bl	80070f8 <acc_base_configuration_use_point_range_get>
 80085e4:	2800      	cmp	r0, #0
 80085e6:	d03d      	beq.n	8008664 <acc_radar_engine_common_sweep_w_dly_initialize_range+0xa0>
 80085e8:	4640      	mov	r0, r8
 80085ea:	f7fe fcdd 	bl	8006fa8 <acc_base_configuration_point_start_get>
 80085ee:	4605      	mov	r5, r0
 80085f0:	4640      	mov	r0, r8
 80085f2:	f7fe fce3 	bl	8006fbc <acc_base_configuration_point_length_get>
 80085f6:	182c      	adds	r4, r5, r0
 80085f8:	f1ba 0f00 	cmp.w	sl, #0
 80085fc:	d02f      	beq.n	800865e <acc_radar_engine_common_sweep_w_dly_initialize_range+0x9a>
 80085fe:	f06f 020b 	mvn.w	r2, #11
 8008602:	4593      	cmp	fp, r2
 8008604:	bfb8      	it	lt
 8008606:	4693      	movlt	fp, r2
 8008608:	f898 202e 	ldrb.w	r2, [r8, #46]	; 0x2e
 800860c:	b31a      	cbz	r2, 8008656 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x92>
 800860e:	f8b8 3030 	ldrh.w	r3, [r8, #48]	; 0x30
 8008612:	9307      	str	r3, [sp, #28]
 8008614:	4640      	mov	r0, r8
 8008616:	f7fe fdbf 	bl	8007198 <acc_base_configuration_downsampling_factor_get>
 800861a:	2801      	cmp	r0, #1
 800861c:	4682      	mov	sl, r0
 800861e:	d90a      	bls.n	8008636 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x72>
 8008620:	2802      	cmp	r0, #2
 8008622:	f000 8121 	beq.w	8008868 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2a4>
 8008626:	1b60      	subs	r0, r4, r5
 8008628:	fb90 f2fa 	sdiv	r2, r0, sl
 800862c:	fb0a 0a12 	mls	sl, sl, r2, r0
 8008630:	f1ba 0f00 	cmp.w	sl, #0
 8008634:	dc55      	bgt.n	80086e2 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x11e>
 8008636:	42ac      	cmp	r4, r5
 8008638:	da61      	bge.n	80086fe <acc_radar_engine_common_sweep_w_dly_initialize_range+0x13a>
 800863a:	4b9b      	ldr	r3, [pc, #620]	; (80088a8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e4>)
 800863c:	4a9b      	ldr	r2, [pc, #620]	; (80088ac <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e8>)
 800863e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008640:	499b      	ldr	r1, [pc, #620]	; (80088b0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2ec>)
 8008642:	2000      	movs	r0, #0
 8008644:	4798      	blx	r3
 8008646:	f04f 0a00 	mov.w	sl, #0
 800864a:	4650      	mov	r0, sl
 800864c:	b009      	add	sp, #36	; 0x24
 800864e:	ecbd 8b04 	vpop	{d8-d9}
 8008652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008656:	f898 3032 	ldrb.w	r3, [r8, #50]	; 0x32
 800865a:	9307      	str	r3, [sp, #28]
 800865c:	e7da      	b.n	8008614 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x50>
 800865e:	f06f 0b0b 	mvn.w	fp, #11
 8008662:	e7d1      	b.n	8008608 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x44>
 8008664:	4640      	mov	r0, r8
 8008666:	f7fe fba9 	bl	8006dbc <acc_base_configuration_requested_start_get>
 800866a:	4640      	mov	r0, r8
 800866c:	eeb0 8a40 	vmov.f32	s16, s0
 8008670:	f7fe fbc0 	bl	8006df4 <acc_base_configuration_requested_length_get>
 8008674:	4630      	mov	r0, r6
 8008676:	ee78 8a00 	vadd.f32	s17, s16, s0
 800867a:	f7ff ff71 	bl	8008560 <get_dt>
 800867e:	eddf 9a8d 	vldr	s19, [pc, #564]	; 80088b4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2f0>
 8008682:	ee38 7a08 	vadd.f32	s14, s16, s16
 8008686:	ee20 0a29 	vmul.f32	s0, s0, s19
 800868a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800868e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008692:	4630      	mov	r0, r6
 8008694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008698:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 800869c:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 80086a0:	bf54      	ite	pl
 80086a2:	eeb0 7a49 	vmovpl.f32	s14, s18
 80086a6:	eeb0 7a48 	vmovmi.f32	s14, s16
 80086aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80086ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086b2:	ee17 5a90 	vmov	r5, s15
 80086b6:	f7ff ff53 	bl	8008560 <get_dt>
 80086ba:	ee38 7aa8 	vadd.f32	s14, s17, s17
 80086be:	ee20 0a29 	vmul.f32	s0, s0, s19
 80086c2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80086c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80086ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ce:	bf58      	it	pl
 80086d0:	eeb0 8a49 	vmovpl.f32	s16, s18
 80086d4:	ee37 8a88 	vadd.f32	s16, s15, s16
 80086d8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80086dc:	ee17 4a90 	vmov	r4, s15
 80086e0:	e78a      	b.n	80085f8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x34>
 80086e2:	f7fe ffc7 	bl	8007674 <acc_rss_integration_log_level>
 80086e6:	2801      	cmp	r0, #1
 80086e8:	d905      	bls.n	80086f6 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x132>
 80086ea:	496f      	ldr	r1, [pc, #444]	; (80088a8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e4>)
 80086ec:	4a72      	ldr	r2, [pc, #456]	; (80088b8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2f4>)
 80086ee:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80086f0:	496f      	ldr	r1, [pc, #444]	; (80088b0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2ec>)
 80086f2:	2002      	movs	r0, #2
 80086f4:	4798      	blx	r3
 80086f6:	eba4 040a 	sub.w	r4, r4, sl
 80086fa:	42ac      	cmp	r4, r5
 80086fc:	db9d      	blt.n	800863a <acc_radar_engine_common_sweep_w_dly_initialize_range+0x76>
 80086fe:	4640      	mov	r0, r8
 8008700:	f7fe fd36 	bl	8007170 <acc_base_configuration_ignore_range_limits_get>
 8008704:	4682      	mov	sl, r0
 8008706:	b970      	cbnz	r0, 8008726 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x162>
 8008708:	fb0b fb06 	mul.w	fp, fp, r6
 800870c:	45ab      	cmp	fp, r5
 800870e:	f300 80d9 	bgt.w	80088c4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x300>
 8008712:	9b07      	ldr	r3, [sp, #28]
 8008714:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8008718:	f1ab 0b4b 	sub.w	fp, fp, #75	; 0x4b
 800871c:	fb06 fb0b 	mul.w	fp, r6, fp
 8008720:	455c      	cmp	r4, fp
 8008722:	f300 8171 	bgt.w	8008a08 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x444>
 8008726:	4640      	mov	r0, r8
 8008728:	f7fe fd36 	bl	8007198 <acc_base_configuration_downsampling_factor_get>
 800872c:	f898 202e 	ldrb.w	r2, [r8, #46]	; 0x2e
 8008730:	4683      	mov	fp, r0
 8008732:	2a00      	cmp	r2, #0
 8008734:	f000 80a7 	beq.w	8008886 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2c2>
 8008738:	f8b8 e030 	ldrh.w	lr, [r8, #48]	; 0x30
 800873c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800873e:	fb95 f1fb 	sdiv	r1, r5, fp
 8008742:	eb04 72d4 	add.w	r2, r4, r4, lsr #31
 8008746:	fb92 f2f6 	sdiv	r2, r2, r6
 800874a:	eba2 72d4 	sub.w	r2, r2, r4, lsr #31
 800874e:	3201      	adds	r2, #1
 8008750:	eb05 70d5 	add.w	r0, r5, r5, lsr #31
 8008754:	fb90 f0f6 	sdiv	r0, r0, r6
 8008758:	eba0 70d5 	sub.w	r0, r0, r5, lsr #31
 800875c:	1a12      	subs	r2, r2, r0
 800875e:	fb0b 5111 	mls	r1, fp, r1, r5
 8008762:	b292      	uxth	r2, r2
 8008764:	4459      	add	r1, fp
 8008766:	fbb2 fcf3 	udiv	ip, r2, r3
 800876a:	80fa      	strh	r2, [r7, #6]
 800876c:	fb03 2a1c 	mls	sl, r3, ip, r2
 8008770:	fb91 f2fb 	sdiv	r2, r1, fp
 8008774:	fb0b 1112 	mls	r1, fp, r2, r1
 8008778:	f8a7 e000 	strh.w	lr, [r7]
 800877c:	80b8      	strh	r0, [r7, #4]
 800877e:	fa1f fc8c 	uxth.w	ip, ip
 8008782:	8079      	strh	r1, [r7, #2]
 8008784:	f1ba 0f00 	cmp.w	sl, #0
 8008788:	d001      	beq.n	800878e <acc_radar_engine_common_sweep_w_dly_initialize_range+0x1ca>
 800878a:	f10c 0c01 	add.w	ip, ip, #1
 800878e:	f8a7 c008 	strh.w	ip, [r7, #8]
 8008792:	4640      	mov	r0, r8
 8008794:	f7fe fb52 	bl	8006e3c <acc_base_configuration_power_save_mode_get>
 8008798:	4602      	mov	r2, r0
 800879a:	4640      	mov	r0, r8
 800879c:	9207      	str	r2, [sp, #28]
 800879e:	f7fe fc17 	bl	8006fd0 <acc_base_configuration_repetition_mode_get>
 80087a2:	9a07      	ldr	r2, [sp, #28]
 80087a4:	2a04      	cmp	r2, #4
 80087a6:	d001      	beq.n	80087ac <acc_radar_engine_common_sweep_w_dly_initialize_range+0x1e8>
 80087a8:	2801      	cmp	r0, #1
 80087aa:	d003      	beq.n	80087b4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x1f0>
 80087ac:	88fb      	ldrh	r3, [r7, #6]
 80087ae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d876      	bhi.n	80088a2 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2de>
 80087b4:	4630      	mov	r0, r6
 80087b6:	f7ff fed3 	bl	8008560 <get_dt>
 80087ba:	ee07 ba90 	vmov	s15, fp
 80087be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c2:	4631      	mov	r1, r6
 80087c4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80087c8:	4628      	mov	r0, r5
 80087ca:	ed89 0a03 	vstr	s0, [r9, #12]
 80087ce:	f7ff fedf 	bl	8008590 <points_to_meter>
 80087d2:	4631      	mov	r1, r6
 80087d4:	4620      	mov	r0, r4
 80087d6:	ed89 0a00 	vstr	s0, [r9]
 80087da:	f7ff fed9 	bl	8008590 <points_to_meter>
 80087de:	fbb6 f2fb 	udiv	r2, r6, fp
 80087e2:	fb95 fcf6 	sdiv	ip, r5, r6
 80087e6:	edd9 7a00 	vldr	s15, [r9]
 80087ea:	88fb      	ldrh	r3, [r7, #6]
 80087ec:	8939      	ldrh	r1, [r7, #8]
 80087ee:	9806      	ldr	r0, [sp, #24]
 80087f0:	ed89 0a02 	vstr	s0, [r9, #8]
 80087f4:	1b64      	subs	r4, r4, r5
 80087f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80087fa:	fbb4 f4fb 	udiv	r4, r4, fp
 80087fe:	3401      	adds	r4, #1
 8008800:	b2a4      	uxth	r4, r4
 8008802:	f8a9 4016 	strh.w	r4, [r9, #22]
 8008806:	ed89 0a01 	vstr	s0, [r9, #4]
 800880a:	f8a9 1018 	strh.w	r1, [r9, #24]
 800880e:	80c2      	strh	r2, [r0, #6]
 8008810:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008812:	8084      	strh	r4, [r0, #4]
 8008814:	fb06 551c 	mls	r5, r6, ip, r5
 8008818:	4435      	add	r5, r6
 800881a:	429a      	cmp	r2, r3
 800881c:	fb95 fcf6 	sdiv	ip, r5, r6
 8008820:	8103      	strh	r3, [r0, #8]
 8008822:	fb06 551c 	mls	r5, r6, ip, r5
 8008826:	8201      	strh	r1, [r0, #16]
 8008828:	fb95 f5fb 	sdiv	r5, r5, fp
 800882c:	fb03 f606 	mul.w	r6, r3, r6
 8008830:	8045      	strh	r5, [r0, #2]
 8008832:	fbb6 fbfb 	udiv	fp, r6, fp
 8008836:	f8a0 b000 	strh.w	fp, [r0]
 800883a:	d227      	bcs.n	800888c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2c8>
 800883c:	b292      	uxth	r2, r2
 800883e:	8282      	strh	r2, [r0, #20]
 8008840:	f1ba 0f00 	cmp.w	sl, #0
 8008844:	d006      	beq.n	8008854 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x290>
 8008846:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008848:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800884a:	fbb3 f2f2 	udiv	r2, r3, r2
 800884e:	fb01 3312 	mls	r3, r1, r2, r3
 8008852:	b29a      	uxth	r2, r3
 8008854:	9b06      	ldr	r3, [sp, #24]
 8008856:	f04f 0a01 	mov.w	sl, #1
 800885a:	4650      	mov	r0, sl
 800885c:	82da      	strh	r2, [r3, #22]
 800885e:	b009      	add	sp, #36	; 0x24
 8008860:	ecbd 8b04 	vpop	{d8-d9}
 8008864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008868:	07eb      	lsls	r3, r5, #31
 800886a:	f53f aedc 	bmi.w	8008626 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x62>
 800886e:	f7fe ff01 	bl	8007674 <acc_rss_integration_log_level>
 8008872:	2801      	cmp	r0, #1
 8008874:	d905      	bls.n	8008882 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2be>
 8008876:	490c      	ldr	r1, [pc, #48]	; (80088a8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e4>)
 8008878:	4a10      	ldr	r2, [pc, #64]	; (80088bc <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2f8>)
 800887a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800887c:	490c      	ldr	r1, [pc, #48]	; (80088b0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2ec>)
 800887e:	4650      	mov	r0, sl
 8008880:	4798      	blx	r3
 8008882:	3501      	adds	r5, #1
 8008884:	e6cf      	b.n	8008626 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x62>
 8008886:	f898 e032 	ldrb.w	lr, [r8, #50]	; 0x32
 800888a:	e757      	b.n	800873c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x178>
 800888c:	9a06      	ldr	r2, [sp, #24]
 800888e:	f04f 0a01 	mov.w	sl, #1
 8008892:	4650      	mov	r0, sl
 8008894:	8293      	strh	r3, [r2, #20]
 8008896:	82d3      	strh	r3, [r2, #22]
 8008898:	b009      	add	sp, #36	; 0x24
 800889a:	ecbd 8b04 	vpop	{d8-d9}
 800889e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a2:	4b01      	ldr	r3, [pc, #4]	; (80088a8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e4>)
 80088a4:	4a06      	ldr	r2, [pc, #24]	; (80088c0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2fc>)
 80088a6:	e6ca      	b.n	800863e <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7a>
 80088a8:	2000082c 	.word	0x2000082c
 80088ac:	080124bc 	.word	0x080124bc
 80088b0:	08012468 	.word	0x08012468
 80088b4:	4d8ef3c2 	.word	0x4d8ef3c2
 80088b8:	08012488 	.word	0x08012488
 80088bc:	08012430 	.word	0x08012430
 80088c0:	0801256c 	.word	0x0801256c
 80088c4:	4b9d      	ldr	r3, [pc, #628]	; (8008b3c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x578>)
 80088c6:	4c9e      	ldr	r4, [pc, #632]	; (8008b40 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>)
 80088c8:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 80088ca:	4631      	mov	r1, r6
 80088cc:	4628      	mov	r0, r5
 80088ce:	f7ff fe5f 	bl	8008590 <points_to_meter>
 80088d2:	4b9c      	ldr	r3, [pc, #624]	; (8008b44 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>)
 80088d4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80088d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088dc:	4631      	mov	r1, r6
 80088de:	4628      	mov	r0, r5
 80088e0:	bf54      	ite	pl
 80088e2:	4698      	movpl	r8, r3
 80088e4:	46a0      	movmi	r8, r4
 80088e6:	f7ff fe53 	bl	8008590 <points_to_meter>
 80088ea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80088ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088f2:	eddf 7a95 	vldr	s15, [pc, #596]	; 8008b48 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 80088f6:	bf48      	it	mi
 80088f8:	eeb1 0a40 	vnegmi.f32	s0, s0
 80088fc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008900:	4628      	mov	r0, r5
 8008902:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8008906:	4631      	mov	r1, r6
 8008908:	ee17 5a90 	vmov	r5, s15
 800890c:	f7ff fe40 	bl	8008590 <points_to_meter>
 8008910:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008918:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8008b48 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 800891c:	ed9f 6a8a 	vldr	s12, [pc, #552]	; 8008b48 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8008920:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8008b4c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>
 8008924:	bf48      	it	mi
 8008926:	eeb1 0a40 	vnegmi.f32	s0, s0
 800892a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800892e:	4631      	mov	r1, r6
 8008930:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008938:	bf4c      	ite	mi
 800893a:	eeb1 7a67 	vnegmi.f32	s14, s15
 800893e:	eeb0 7a67 	vmovpl.f32	s14, s15
 8008942:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008946:	4658      	mov	r0, fp
 8008948:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800894c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008950:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008954:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800895c:	ee17 4a90 	vmov	r4, s15
 8008960:	f7ff fe16 	bl	8008590 <points_to_meter>
 8008964:	4b77      	ldr	r3, [pc, #476]	; (8008b44 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>)
 8008966:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8008b40 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>
 800896a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800896e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008972:	4631      	mov	r1, r6
 8008974:	4658      	mov	r0, fp
 8008976:	bf54      	ite	pl
 8008978:	4699      	movpl	r9, r3
 800897a:	46e1      	movmi	r9, ip
 800897c:	f7ff fe08 	bl	8008590 <points_to_meter>
 8008980:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008988:	eddf 7a6f 	vldr	s15, [pc, #444]	; 8008b48 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 800898c:	bf48      	it	mi
 800898e:	eeb1 0a40 	vnegmi.f32	s0, s0
 8008992:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008996:	4631      	mov	r1, r6
 8008998:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800899c:	4658      	mov	r0, fp
 800899e:	ee17 6a90 	vmov	r6, s15
 80089a2:	f7ff fdf5 	bl	8008590 <points_to_meter>
 80089a6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80089aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ae:	eddf 7a66 	vldr	s15, [pc, #408]	; 8008b48 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 80089b2:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8008b48 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 80089b6:	eddf 6a65 	vldr	s13, [pc, #404]	; 8008b4c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>
 80089ba:	4a65      	ldr	r2, [pc, #404]	; (8008b50 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x58c>)
 80089bc:	9603      	str	r6, [sp, #12]
 80089be:	bf48      	it	mi
 80089c0:	eeb1 0a40 	vnegmi.f32	s0, s0
 80089c4:	ee70 7a27 	vadd.f32	s15, s0, s15
 80089c8:	f8cd 9008 	str.w	r9, [sp, #8]
 80089cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80089d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089d4:	bf4c      	ite	mi
 80089d6:	eeb1 7a67 	vnegmi.f32	s14, s15
 80089da:	eeb0 7a67 	vmovpl.f32	s14, s15
 80089de:	ee37 7a06 	vadd.f32	s14, s14, s12
 80089e2:	9401      	str	r4, [sp, #4]
 80089e4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80089e8:	9500      	str	r5, [sp, #0]
 80089ea:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80089ee:	4643      	mov	r3, r8
 80089f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80089f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80089f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089fc:	4955      	ldr	r1, [pc, #340]	; (8008b54 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x590>)
 80089fe:	edcd 7a04 	vstr	s15, [sp, #16]
 8008a02:	2000      	movs	r0, #0
 8008a04:	47b8      	blx	r7
 8008a06:	e620      	b.n	800864a <acc_radar_engine_common_sweep_w_dly_initialize_range+0x86>
 8008a08:	4b4c      	ldr	r3, [pc, #304]	; (8008b3c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x578>)
 8008a0a:	4631      	mov	r1, r6
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8008a10:	f7ff fdbe 	bl	8008590 <points_to_meter>
 8008a14:	4a4a      	ldr	r2, [pc, #296]	; (8008b40 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>)
 8008a16:	4b4b      	ldr	r3, [pc, #300]	; (8008b44 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>)
 8008a18:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a20:	4631      	mov	r1, r6
 8008a22:	4620      	mov	r0, r4
 8008a24:	bf4c      	ite	mi
 8008a26:	4690      	movmi	r8, r2
 8008a28:	4698      	movpl	r8, r3
 8008a2a:	f7ff fdb1 	bl	8008590 <points_to_meter>
 8008a2e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a36:	eddf 7a44 	vldr	s15, [pc, #272]	; 8008b48 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8008a3a:	bf48      	it	mi
 8008a3c:	eeb1 0a40 	vnegmi.f32	s0, s0
 8008a40:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008a44:	4620      	mov	r0, r4
 8008a46:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8008a4a:	4631      	mov	r1, r6
 8008a4c:	ee17 5a90 	vmov	r5, s15
 8008a50:	f7ff fd9e 	bl	8008590 <points_to_meter>
 8008a54:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a5c:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8008b48 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8008a60:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8008b48 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8008a64:	eddf 6a39 	vldr	s13, [pc, #228]	; 8008b4c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>
 8008a68:	bf48      	it	mi
 8008a6a:	eeb1 0a40 	vnegmi.f32	s0, s0
 8008a6e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8008a72:	4631      	mov	r1, r6
 8008a74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a7c:	bf4c      	ite	mi
 8008a7e:	eeb1 7a67 	vnegmi.f32	s14, s15
 8008a82:	eeb0 7a67 	vmovpl.f32	s14, s15
 8008a86:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008a8a:	4658      	mov	r0, fp
 8008a8c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008a90:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008a94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a98:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aa0:	ee17 4a90 	vmov	r4, s15
 8008aa4:	f7ff fd74 	bl	8008590 <points_to_meter>
 8008aa8:	4a25      	ldr	r2, [pc, #148]	; (8008b40 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>)
 8008aaa:	4b26      	ldr	r3, [pc, #152]	; (8008b44 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>)
 8008aac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ab4:	4631      	mov	r1, r6
 8008ab6:	4658      	mov	r0, fp
 8008ab8:	bf4c      	ite	mi
 8008aba:	4691      	movmi	r9, r2
 8008abc:	4699      	movpl	r9, r3
 8008abe:	f7ff fd67 	bl	8008590 <points_to_meter>
 8008ac2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aca:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008b48 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8008ace:	bf48      	it	mi
 8008ad0:	eeb1 0a40 	vnegmi.f32	s0, s0
 8008ad4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008ad8:	4631      	mov	r1, r6
 8008ada:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8008ade:	4658      	mov	r0, fp
 8008ae0:	ee17 6a90 	vmov	r6, s15
 8008ae4:	f7ff fd54 	bl	8008590 <points_to_meter>
 8008ae8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008af0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008b48 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8008af4:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8008b48 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8008af8:	eddf 6a14 	vldr	s13, [pc, #80]	; 8008b4c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>
 8008afc:	4a16      	ldr	r2, [pc, #88]	; (8008b58 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x594>)
 8008afe:	9603      	str	r6, [sp, #12]
 8008b00:	bf48      	it	mi
 8008b02:	eeb1 0a40 	vnegmi.f32	s0, s0
 8008b06:	ee70 7a27 	vadd.f32	s15, s0, s15
 8008b0a:	f8cd 9008 	str.w	r9, [sp, #8]
 8008b0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b16:	bf4c      	ite	mi
 8008b18:	eeb1 7a67 	vnegmi.f32	s14, s15
 8008b1c:	eeb0 7a67 	vmovpl.f32	s14, s15
 8008b20:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008b24:	9401      	str	r4, [sp, #4]
 8008b26:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008b2a:	9500      	str	r5, [sp, #0]
 8008b2c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008b30:	4643      	mov	r3, r8
 8008b32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008b36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008b3a:	e75d      	b.n	80089f8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x434>
 8008b3c:	2000082c 	.word	0x2000082c
 8008b40:	0801242c 	.word	0x0801242c
 8008b44:	080134b4 	.word	0x080134b4
 8008b48:	350637bd 	.word	0x350637bd
 8008b4c:	49742400 	.word	0x49742400
 8008b50:	080124ec 	.word	0x080124ec
 8008b54:	08012468 	.word	0x08012468
 8008b58:	0801252c 	.word	0x0801252c

08008b5c <acc_radar_engine_common_sweep_w_dly_stitching_required>:
 8008b5c:	8900      	ldrh	r0, [r0, #8]
 8008b5e:	2801      	cmp	r0, #1
 8008b60:	bf94      	ite	ls
 8008b62:	2000      	movls	r0, #0
 8008b64:	2001      	movhi	r0, #1
 8008b66:	4770      	bx	lr

08008b68 <internal_buffer_processed_read>:
 8008b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6c:	b085      	sub	sp, #20
 8008b6e:	461f      	mov	r7, r3
 8008b70:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
 8008b74:	9101      	str	r1, [sp, #4]
 8008b76:	4682      	mov	sl, r0
 8008b78:	4689      	mov	r9, r1
 8008b7a:	4615      	mov	r5, r2
 8008b7c:	f7fe fcd0 	bl	8007520 <acc_rss_integration_get_max_spi_transfer_size>
 8008b80:	2300      	movs	r3, #0
 8008b82:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008b86:	9302      	str	r3, [sp, #8]
 8008b88:	2f00      	cmp	r7, #0
 8008b8a:	d03d      	beq.n	8008c08 <internal_buffer_processed_read+0xa0>
 8008b8c:	429c      	cmp	r4, r3
 8008b8e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008b92:	bf14      	ite	ne
 8008b94:	f44f 4be0 	movne.w	fp, #28672	; 0x7000
 8008b98:	f44f 4b00 	moveq.w	fp, #32768	; 0x8000
 8008b9c:	f1a0 0803 	sub.w	r8, r0, #3
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	fa0f fb8b 	sxth.w	fp, fp
 8008ba6:	e024      	b.n	8008bf2 <internal_buffer_processed_read+0x8a>
 8008ba8:	b2a6      	uxth	r6, r4
 8008baa:	9900      	ldr	r1, [sp, #0]
 8008bac:	f8a9 1004 	strh.w	r1, [r9, #4]
 8008bb0:	1e72      	subs	r2, r6, #1
 8008bb2:	ea4b 0305 	orr.w	r3, fp, r5
 8008bb6:	f8a9 2002 	strh.w	r2, [r9, #2]
 8008bba:	f8a9 3000 	strh.w	r3, [r9]
 8008bbe:	4649      	mov	r1, r9
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	4650      	mov	r0, sl
 8008bc4:	1ce2      	adds	r2, r4, #3
 8008bc6:	f7fe fcdb 	bl	8007580 <acc_rss_integration_sensor_device_transfer>
 8008bca:	9802      	ldr	r0, [sp, #8]
 8008bcc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008bd0:	f8c9 0000 	str.w	r0, [r9]
 8008bd4:	f8a9 3004 	strh.w	r3, [r9, #4]
 8008bd8:	eb09 0944 	add.w	r9, r9, r4, lsl #1
 8008bdc:	442e      	add	r6, r5
 8008bde:	f8d9 0000 	ldr.w	r0, [r9]
 8008be2:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8008be6:	9002      	str	r0, [sp, #8]
 8008be8:	1b3f      	subs	r7, r7, r4
 8008bea:	b2b5      	uxth	r5, r6
 8008bec:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008bf0:	d00a      	beq.n	8008c08 <internal_buffer_processed_read+0xa0>
 8008bf2:	45b8      	cmp	r8, r7
 8008bf4:	4644      	mov	r4, r8
 8008bf6:	bf28      	it	cs
 8008bf8:	463c      	movcs	r4, r7
 8008bfa:	45b8      	cmp	r8, r7
 8008bfc:	d2d4      	bcs.n	8008ba8 <internal_buffer_processed_read+0x40>
 8008bfe:	e000      	b.n	8008c02 <internal_buffer_processed_read+0x9a>
 8008c00:	3c01      	subs	r4, #1
 8008c02:	07e3      	lsls	r3, r4, #31
 8008c04:	d4fc      	bmi.n	8008c00 <internal_buffer_processed_read+0x98>
 8008c06:	e7cf      	b.n	8008ba8 <internal_buffer_processed_read+0x40>
 8008c08:	9801      	ldr	r0, [sp, #4]
 8008c0a:	3006      	adds	r0, #6
 8008c0c:	b005      	add	sp, #20
 8008c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c12:	bf00      	nop

08008c14 <acc_sensor_r2_get_max_header_length>:
 8008c14:	2003      	movs	r0, #3
 8008c16:	4770      	bx	lr

08008c18 <acc_sensor_r2_conf_write_instr>:
 8008c18:	b510      	push	{r4, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	f441 43a0 	orr.w	r3, r1, #20480	; 0x5000
 8008c20:	4604      	mov	r4, r0
 8008c22:	9201      	str	r2, [sp, #4]
 8008c24:	f10d 010a 	add.w	r1, sp, #10
 8008c28:	a801      	add	r0, sp, #4
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8008c30:	f001 fa40 	bl	800a0b4 <acc_utils_uint32_to_transfer_buffer>
 8008c34:	4620      	mov	r0, r4
 8008c36:	a902      	add	r1, sp, #8
 8008c38:	2300      	movs	r3, #0
 8008c3a:	2203      	movs	r2, #3
 8008c3c:	f7fe fca0 	bl	8007580 <acc_rss_integration_sensor_device_transfer>
 8008c40:	b004      	add	sp, #16
 8008c42:	bd10      	pop	{r4, pc}

08008c44 <acc_sensor_r2_prepare_load_confmem>:
 8008c44:	0849      	lsrs	r1, r1, #1
 8008c46:	b538      	push	{r3, r4, r5, lr}
 8008c48:	6010      	str	r0, [r2, #0]
 8008c4a:	461c      	mov	r4, r3
 8008c4c:	6019      	str	r1, [r3, #0]
 8008c4e:	4615      	mov	r5, r2
 8008c50:	f7fe fc66 	bl	8007520 <acc_rss_integration_get_max_spi_transfer_size>
 8008c54:	6821      	ldr	r1, [r4, #0]
 8008c56:	ebb1 0f50 	cmp.w	r1, r0, lsr #1
 8008c5a:	d807      	bhi.n	8008c6c <acc_sensor_r2_prepare_load_confmem+0x28>
 8008c5c:	682b      	ldr	r3, [r5, #0]
 8008c5e:	3901      	subs	r1, #1
 8008c60:	f021 0101 	bic.w	r1, r1, #1
 8008c64:	3302      	adds	r3, #2
 8008c66:	602b      	str	r3, [r5, #0]
 8008c68:	6021      	str	r1, [r4, #0]
 8008c6a:	bd38      	pop	{r3, r4, r5, pc}
 8008c6c:	f7fe fc58 	bl	8007520 <acc_rss_integration_get_max_spi_transfer_size>
 8008c70:	0841      	lsrs	r1, r0, #1
 8008c72:	e7f3      	b.n	8008c5c <acc_sensor_r2_prepare_load_confmem+0x18>

08008c74 <acc_sensor_r2_load_confmem>:
 8008c74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c78:	b083      	sub	sp, #12
 8008c7a:	1c5d      	adds	r5, r3, #1
 8008c7c:	4606      	mov	r6, r0
 8008c7e:	460c      	mov	r4, r1
 8008c80:	4617      	mov	r7, r2
 8008c82:	f7fe fcf7 	bl	8007674 <acc_rss_integration_log_level>
 8008c86:	2803      	cmp	r0, #3
 8008c88:	ea4f 0845 	mov.w	r8, r5, lsl #1
 8008c8c:	d908      	bls.n	8008ca0 <acc_sensor_r2_load_confmem+0x2c>
 8008c8e:	4b11      	ldr	r3, [pc, #68]	; (8008cd4 <acc_sensor_r2_load_confmem+0x60>)
 8008c90:	9400      	str	r4, [sp, #0]
 8008c92:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 8008c96:	4a10      	ldr	r2, [pc, #64]	; (8008cd8 <acc_sensor_r2_load_confmem+0x64>)
 8008c98:	4910      	ldr	r1, [pc, #64]	; (8008cdc <acc_sensor_r2_load_confmem+0x68>)
 8008c9a:	4633      	mov	r3, r6
 8008c9c:	2004      	movs	r0, #4
 8008c9e:	47c8      	blx	r9
 8008ca0:	f7fe fc3e 	bl	8007520 <acc_rss_integration_get_max_spi_transfer_size>
 8008ca4:	4540      	cmp	r0, r8
 8008ca6:	d208      	bcs.n	8008cba <acc_sensor_r2_load_confmem+0x46>
 8008ca8:	4b0a      	ldr	r3, [pc, #40]	; (8008cd4 <acc_sensor_r2_load_confmem+0x60>)
 8008caa:	4a0d      	ldr	r2, [pc, #52]	; (8008ce0 <acc_sensor_r2_load_confmem+0x6c>)
 8008cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cae:	490b      	ldr	r1, [pc, #44]	; (8008cdc <acc_sensor_r2_load_confmem+0x68>)
 8008cb0:	2000      	movs	r0, #0
 8008cb2:	b003      	add	sp, #12
 8008cb4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cb8:	4718      	bx	r3
 8008cba:	f444 44a0 	orr.w	r4, r4, #20480	; 0x5000
 8008cbe:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8008cc2:	4639      	mov	r1, r7
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	803c      	strh	r4, [r7, #0]
 8008cca:	b003      	add	sp, #12
 8008ccc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cd0:	f7fe bc56 	b.w	8007580 <acc_rss_integration_sensor_device_transfer>
 8008cd4:	2000082c 	.word	0x2000082c
 8008cd8:	080125a8 	.word	0x080125a8
 8008cdc:	08012598 	.word	0x08012598
 8008ce0:	080125d0 	.word	0x080125d0

08008ce4 <acc_sensor_r2_buffer_processed_verify_size>:
 8008ce4:	3103      	adds	r1, #3
 8008ce6:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 8008cea:	bf2c      	ite	cs
 8008cec:	2001      	movcs	r0, #1
 8008cee:	2000      	movcc	r0, #0
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop

08008cf4 <acc_sensor_r2_buffer_processed_read>:
 8008cf4:	b510      	push	{r4, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	2400      	movs	r4, #0
 8008cfa:	9400      	str	r4, [sp, #0]
 8008cfc:	f7ff ff34 	bl	8008b68 <internal_buffer_processed_read>
 8008d00:	b002      	add	sp, #8
 8008d02:	bd10      	pop	{r4, pc}

08008d04 <acc_sensor_manager_power_on_and_start_sensor>:
 8008d04:	b570      	push	{r4, r5, r6, lr}
 8008d06:	6986      	ldr	r6, [r0, #24]
 8008d08:	4604      	mov	r4, r0
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	f7fe fc0e 	bl	800752c <acc_rss_integration_sensor_device_power_on>
 8008d10:	4b0a      	ldr	r3, [pc, #40]	; (8008d3c <acc_sensor_manager_power_on_and_start_sensor+0x38>)
 8008d12:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008d14:	6819      	ldr	r1, [r3, #0]
 8008d16:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8008d1a:	00db      	lsls	r3, r3, #3
 8008d1c:	3b48      	subs	r3, #72	; 0x48
 8008d1e:	4419      	add	r1, r3
 8008d20:	1d20      	adds	r0, r4, #4
 8008d22:	f000 fe5f 	bl	80099e4 <acc_sweep_manager_start>
 8008d26:	4605      	mov	r5, r0
 8008d28:	b118      	cbz	r0, 8008d32 <acc_sensor_manager_power_on_and_start_sensor+0x2e>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	70e3      	strb	r3, [r4, #3]
 8008d2e:	4628      	mov	r0, r5
 8008d30:	bd70      	pop	{r4, r5, r6, pc}
 8008d32:	4630      	mov	r0, r6
 8008d34:	f7fe fc00 	bl	8007538 <acc_rss_integration_sensor_device_power_off>
 8008d38:	4628      	mov	r0, r5
 8008d3a:	bd70      	pop	{r4, r5, r6, pc}
 8008d3c:	200006d4 	.word	0x200006d4

08008d40 <calibrate_sensor>:
 8008d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d44:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8008e14 <calibrate_sensor+0xd4>
 8008d48:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8008e18 <calibrate_sensor+0xd8>
 8008d4c:	f8d8 3000 	ldr.w	r3, [r8]
 8008d50:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
 8008d54:	00e4      	lsls	r4, r4, #3
 8008d56:	3c48      	subs	r4, #72	; 0x48
 8008d58:	4423      	add	r3, r4
 8008d5a:	f04f 0900 	mov.w	r9, #0
 8008d5e:	b085      	sub	sp, #20
 8008d60:	460e      	mov	r6, r1
 8008d62:	f883 9041 	strb.w	r9, [r3, #65]	; 0x41
 8008d66:	f883 9042 	strb.w	r9, [r3, #66]	; 0x42
 8008d6a:	f8c3 b044 	str.w	fp, [r3, #68]	; 0x44
 8008d6e:	4607      	mov	r7, r0
 8008d70:	4692      	mov	sl, r2
 8008d72:	f7fe fbdb 	bl	800752c <acc_rss_integration_sensor_device_power_on>
 8008d76:	4630      	mov	r0, r6
 8008d78:	f000 fe10 	bl	800999c <acc_sweep_manager_is_sensor_connected>
 8008d7c:	b968      	cbnz	r0, 8008d9a <calibrate_sensor+0x5a>
 8008d7e:	4b21      	ldr	r3, [pc, #132]	; (8008e04 <calibrate_sensor+0xc4>)
 8008d80:	4a21      	ldr	r2, [pc, #132]	; (8008e08 <calibrate_sensor+0xc8>)
 8008d82:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8008d84:	4921      	ldr	r1, [pc, #132]	; (8008e0c <calibrate_sensor+0xcc>)
 8008d86:	463b      	mov	r3, r7
 8008d88:	4605      	mov	r5, r0
 8008d8a:	47a0      	blx	r4
 8008d8c:	4638      	mov	r0, r7
 8008d8e:	f7fe fbd3 	bl	8007538 <acc_rss_integration_sensor_device_power_off>
 8008d92:	4628      	mov	r0, r5
 8008d94:	b005      	add	sp, #20
 8008d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	200b      	movs	r0, #11
 8008d9e:	f000 ffe3 	bl	8009d68 <acc_probes_execute_primitive_probe>
 8008da2:	f8d8 2000 	ldr.w	r2, [r8]
 8008da6:	f8cd 9004 	str.w	r9, [sp, #4]
 8008daa:	4651      	mov	r1, sl
 8008dac:	4630      	mov	r0, r6
 8008dae:	4422      	add	r2, r4
 8008db0:	ab01      	add	r3, sp, #4
 8008db2:	f8cd b008 	str.w	fp, [sp, #8]
 8008db6:	f8cd 900c 	str.w	r9, [sp, #12]
 8008dba:	f000 fdf3 	bl	80099a4 <acc_sweep_manager_calibrate>
 8008dbe:	4605      	mov	r5, r0
 8008dc0:	b9c8      	cbnz	r0, 8008df6 <calibrate_sensor+0xb6>
 8008dc2:	4b10      	ldr	r3, [pc, #64]	; (8008e04 <calibrate_sensor+0xc4>)
 8008dc4:	4a12      	ldr	r2, [pc, #72]	; (8008e10 <calibrate_sensor+0xd0>)
 8008dc6:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8008dc8:	4910      	ldr	r1, [pc, #64]	; (8008e0c <calibrate_sensor+0xcc>)
 8008dca:	463b      	mov	r3, r7
 8008dcc:	47b0      	blx	r6
 8008dce:	f8d8 3000 	ldr.w	r3, [r8]
 8008dd2:	441c      	add	r4, r3
 8008dd4:	9a02      	ldr	r2, [sp, #8]
 8008dd6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008dda:	6462      	str	r2, [r4, #68]	; 0x44
 8008ddc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008de0:	4639      	mov	r1, r7
 8008de2:	200c      	movs	r0, #12
 8008de4:	f000 ffc0 	bl	8009d68 <acc_probes_execute_primitive_probe>
 8008de8:	4638      	mov	r0, r7
 8008dea:	f7fe fba5 	bl	8007538 <acc_rss_integration_sensor_device_power_off>
 8008dee:	4628      	mov	r0, r5
 8008df0:	b005      	add	sp, #20
 8008df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008df6:	f8d8 3000 	ldr.w	r3, [r8]
 8008dfa:	441c      	add	r4, r3
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008e02:	e7e7      	b.n	8008dd4 <calibrate_sensor+0x94>
 8008e04:	2000082c 	.word	0x2000082c
 8008e08:	080125f0 	.word	0x080125f0
 8008e0c:	0801262c 	.word	0x0801262c
 8008e10:	0801263c 	.word	0x0801263c
 8008e14:	200006d4 	.word	0x200006d4
 8008e18:	ff800000 	.word	0xff800000

08008e1c <acc_sensor_manager_hibernate_enter>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	4603      	mov	r3, r0
 8008e20:	3004      	adds	r0, #4
 8008e22:	699d      	ldr	r5, [r3, #24]
 8008e24:	f000 fdf6 	bl	8009a14 <acc_sweep_manager_wait_for_hibernate_ready>
 8008e28:	4604      	mov	r4, r0
 8008e2a:	b930      	cbnz	r0, 8008e3a <acc_sensor_manager_hibernate_enter+0x1e>
 8008e2c:	4b05      	ldr	r3, [pc, #20]	; (8008e44 <acc_sensor_manager_hibernate_enter+0x28>)
 8008e2e:	4a06      	ldr	r2, [pc, #24]	; (8008e48 <acc_sensor_manager_hibernate_enter+0x2c>)
 8008e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e32:	4906      	ldr	r1, [pc, #24]	; (8008e4c <acc_sensor_manager_hibernate_enter+0x30>)
 8008e34:	4798      	blx	r3
 8008e36:	4620      	mov	r0, r4
 8008e38:	bd38      	pop	{r3, r4, r5, pc}
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	f7fe fb82 	bl	8007544 <acc_rss_integration_sensor_device_hibernate_enter>
 8008e40:	4620      	mov	r0, r4
 8008e42:	bd38      	pop	{r3, r4, r5, pc}
 8008e44:	2000082c 	.word	0x2000082c
 8008e48:	08012660 	.word	0x08012660
 8008e4c:	0801262c 	.word	0x0801262c

08008e50 <acc_sensor_manager_activate>:
 8008e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e54:	4e18      	ldr	r6, [pc, #96]	; (8008eb8 <acc_sensor_manager_activate+0x68>)
 8008e56:	7834      	ldrb	r4, [r6, #0]
 8008e58:	b114      	cbz	r4, 8008e60 <acc_sensor_manager_activate+0x10>
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e60:	f7fe fb52 	bl	8007508 <acc_rss_integration_get_sensor_count>
 8008e64:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8008e68:	4914      	ldr	r1, [pc, #80]	; (8008ebc <acc_sensor_manager_activate+0x6c>)
 8008e6a:	4f15      	ldr	r7, [pc, #84]	; (8008ec0 <acc_sensor_manager_activate+0x70>)
 8008e6c:	00c0      	lsls	r0, r0, #3
 8008e6e:	f240 1253 	movw	r2, #339	; 0x153
 8008e72:	f7fe fbab 	bl	80075cc <acc_rss_integration_mem_alloc_debug>
 8008e76:	6038      	str	r0, [r7, #0]
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d0ee      	beq.n	8008e5a <acc_sensor_manager_activate+0xa>
 8008e7c:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8008ec4 <acc_sensor_manager_activate+0x74>
 8008e80:	4625      	mov	r5, r4
 8008e82:	e00e      	b.n	8008ea2 <acc_sensor_manager_activate+0x52>
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	2248      	movs	r2, #72	; 0x48
 8008e8e:	2100      	movs	r1, #0
 8008e90:	f006 fd4a 	bl	800f928 <memset>
 8008e94:	3401      	adds	r4, #1
 8008e96:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8008e9a:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 8008e9e:	f8c0 8044 	str.w	r8, [r0, #68]	; 0x44
 8008ea2:	f7fe fb31 	bl	8007508 <acc_rss_integration_get_sensor_count>
 8008ea6:	42a0      	cmp	r0, r4
 8008ea8:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8008eac:	d8ea      	bhi.n	8008e84 <acc_sensor_manager_activate+0x34>
 8008eae:	2401      	movs	r4, #1
 8008eb0:	7034      	strb	r4, [r6, #0]
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eb8:	200006cc 	.word	0x200006cc
 8008ebc:	0801262c 	.word	0x0801262c
 8008ec0:	200006d4 	.word	0x200006d4
 8008ec4:	ff800000 	.word	0xff800000

08008ec8 <acc_sensor_manager_deactivate>:
 8008ec8:	b510      	push	{r4, lr}
 8008eca:	4c05      	ldr	r4, [pc, #20]	; (8008ee0 <acc_sensor_manager_deactivate+0x18>)
 8008ecc:	7823      	ldrb	r3, [r4, #0]
 8008ece:	b903      	cbnz	r3, 8008ed2 <acc_sensor_manager_deactivate+0xa>
 8008ed0:	bd10      	pop	{r4, pc}
 8008ed2:	4b04      	ldr	r3, [pc, #16]	; (8008ee4 <acc_sensor_manager_deactivate+0x1c>)
 8008ed4:	6818      	ldr	r0, [r3, #0]
 8008ed6:	f7fe fbbb 	bl	8007650 <acc_rss_integration_mem_free>
 8008eda:	2300      	movs	r3, #0
 8008edc:	7023      	strb	r3, [r4, #0]
 8008ede:	bd10      	pop	{r4, pc}
 8008ee0:	200006cc 	.word	0x200006cc
 8008ee4:	200006d4 	.word	0x200006d4

08008ee8 <acc_sensor_manager_acquire_adc_data>:
 8008ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eec:	7846      	ldrb	r6, [r0, #1]
 8008eee:	461c      	mov	r4, r3
 8008ef0:	b13e      	cbz	r6, 8008f02 <acc_sensor_manager_acquire_adc_data+0x1a>
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	7023      	strb	r3, [r4, #0]
 8008ef6:	7063      	strb	r3, [r4, #1]
 8008ef8:	70a3      	strb	r3, [r4, #2]
 8008efa:	70e3      	strb	r3, [r4, #3]
 8008efc:	4630      	mov	r0, r6
 8008efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f02:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8009000 <acc_sensor_manager_acquire_adc_data+0x118>
 8008f06:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8008f0a:	f8dc c000 	ldr.w	ip, [ip]
 8008f0e:	4605      	mov	r5, r0
 8008f10:	4688      	mov	r8, r1
 8008f12:	4617      	mov	r7, r2
 8008f14:	f1bc 0f00 	cmp.w	ip, #0
 8008f18:	d014      	beq.n	8008f44 <acc_sensor_manager_acquire_adc_data+0x5c>
 8008f1a:	f8dc a00c 	ldr.w	sl, [ip, #12]
 8008f1e:	f1ba 0f00 	cmp.w	sl, #0
 8008f22:	d00f      	beq.n	8008f44 <acc_sensor_manager_acquire_adc_data+0x5c>
 8008f24:	47d0      	blx	sl
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d0e8      	beq.n	8008efc <acc_sensor_manager_acquire_adc_data+0x14>
 8008f2a:	786e      	ldrb	r6, [r5, #1]
 8008f2c:	2e00      	cmp	r6, #0
 8008f2e:	d1e5      	bne.n	8008efc <acc_sensor_manager_acquire_adc_data+0x14>
 8008f30:	463b      	mov	r3, r7
 8008f32:	4642      	mov	r2, r8
 8008f34:	4649      	mov	r1, r9
 8008f36:	2601      	movs	r6, #1
 8008f38:	2002      	movs	r0, #2
 8008f3a:	f000 fee7 	bl	8009d0c <acc_probes_execute_uint16>
 8008f3e:	4630      	mov	r0, r6
 8008f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f44:	2300      	movs	r3, #0
 8008f46:	7023      	strb	r3, [r4, #0]
 8008f48:	7063      	strb	r3, [r4, #1]
 8008f4a:	70a3      	strb	r3, [r4, #2]
 8008f4c:	70e3      	strb	r3, [r4, #3]
 8008f4e:	f895 a000 	ldrb.w	sl, [r5]
 8008f52:	f1ba 0f02 	cmp.w	sl, #2
 8008f56:	d031      	beq.n	8008fbc <acc_sensor_manager_acquire_adc_data+0xd4>
 8008f58:	f1ba 0f01 	cmp.w	sl, #1
 8008f5c:	d034      	beq.n	8008fc8 <acc_sensor_manager_acquire_adc_data+0xe0>
 8008f5e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8008f60:	1d28      	adds	r0, r5, #4
 8008f62:	f000 fd5f 	bl	8009a24 <acc_sweep_manager_acquire_adc_data>
 8008f66:	6843      	ldr	r3, [r0, #4]
 8008f68:	b30b      	cbz	r3, 8008fae <acc_sensor_manager_acquire_adc_data+0xc6>
 8008f6a:	4543      	cmp	r3, r8
 8008f6c:	d13b      	bne.n	8008fe6 <acc_sensor_manager_acquire_adc_data+0xfe>
 8008f6e:	8843      	ldrh	r3, [r0, #2]
 8008f70:	42bb      	cmp	r3, r7
 8008f72:	d133      	bne.n	8008fdc <acc_sensor_manager_acquire_adc_data+0xf4>
 8008f74:	4b1e      	ldr	r3, [pc, #120]	; (8008ff0 <acc_sensor_manager_acquire_adc_data+0x108>)
 8008f76:	68c1      	ldr	r1, [r0, #12]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	7a06      	ldrb	r6, [r0, #8]
 8008f7c:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8008f80:	00db      	lsls	r3, r3, #3
 8008f82:	3b48      	subs	r3, #72	; 0x48
 8008f84:	4413      	add	r3, r2
 8008f86:	7802      	ldrb	r2, [r0, #0]
 8008f88:	7022      	strb	r2, [r4, #0]
 8008f8a:	7842      	ldrb	r2, [r0, #1]
 8008f8c:	7062      	strb	r2, [r4, #1]
 8008f8e:	f1ba 0f02 	cmp.w	sl, #2
 8008f92:	7a42      	ldrb	r2, [r0, #9]
 8008f94:	70e2      	strb	r2, [r4, #3]
 8008f96:	70a6      	strb	r6, [r4, #2]
 8008f98:	6459      	str	r1, [r3, #68]	; 0x44
 8008f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f9e:	d017      	beq.n	8008fd0 <acc_sensor_manager_acquire_adc_data+0xe8>
 8008fa0:	f1ba 0f01 	cmp.w	sl, #1
 8008fa4:	d1c1      	bne.n	8008f2a <acc_sensor_manager_acquire_adc_data+0x42>
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	f7ff ff38 	bl	8008e1c <acc_sensor_manager_hibernate_enter>
 8008fac:	e7bd      	b.n	8008f2a <acc_sensor_manager_acquire_adc_data+0x42>
 8008fae:	4911      	ldr	r1, [pc, #68]	; (8008ff4 <acc_sensor_manager_acquire_adc_data+0x10c>)
 8008fb0:	4a11      	ldr	r2, [pc, #68]	; (8008ff8 <acc_sensor_manager_acquire_adc_data+0x110>)
 8008fb2:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8008fb4:	4911      	ldr	r1, [pc, #68]	; (8008ffc <acc_sensor_manager_acquire_adc_data+0x114>)
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	47a0      	blx	r4
 8008fba:	e79f      	b.n	8008efc <acc_sensor_manager_acquire_adc_data+0x14>
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	f7ff fea1 	bl	8008d04 <acc_sensor_manager_power_on_and_start_sensor>
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	d1cb      	bne.n	8008f5e <acc_sensor_manager_acquire_adc_data+0x76>
 8008fc6:	e799      	b.n	8008efc <acc_sensor_manager_acquire_adc_data+0x14>
 8008fc8:	4648      	mov	r0, r9
 8008fca:	f7fe fac3 	bl	8007554 <acc_rss_integration_sensor_device_hibernate_exit>
 8008fce:	e7c6      	b.n	8008f5e <acc_sensor_manager_acquire_adc_data+0x76>
 8008fd0:	4648      	mov	r0, r9
 8008fd2:	f7fe fab1 	bl	8007538 <acc_rss_integration_sensor_device_power_off>
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	70eb      	strb	r3, [r5, #3]
 8008fda:	e7a6      	b.n	8008f2a <acc_sensor_manager_acquire_adc_data+0x42>
 8008fdc:	4807      	ldr	r0, [pc, #28]	; (8008ffc <acc_sensor_manager_acquire_adc_data+0x114>)
 8008fde:	f240 11c9 	movw	r1, #457	; 0x1c9
 8008fe2:	f000 fd6b 	bl	8009abc <acc_assert_fail>
 8008fe6:	4805      	ldr	r0, [pc, #20]	; (8008ffc <acc_sensor_manager_acquire_adc_data+0x114>)
 8008fe8:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8008fec:	f000 fd66 	bl	8009abc <acc_assert_fail>
 8008ff0:	200006d4 	.word	0x200006d4
 8008ff4:	2000082c 	.word	0x2000082c
 8008ff8:	08012680 	.word	0x08012680
 8008ffc:	0801262c 	.word	0x0801262c
 8009000:	200006d0 	.word	0x200006d0

08009004 <acc_sensor_manager_prepare_radar_engine>:
 8009004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009008:	f100 0804 	add.w	r8, r0, #4
 800900c:	4617      	mov	r7, r2
 800900e:	4605      	mov	r5, r0
 8009010:	2234      	movs	r2, #52	; 0x34
 8009012:	460c      	mov	r4, r1
 8009014:	4640      	mov	r0, r8
 8009016:	2100      	movs	r1, #0
 8009018:	461e      	mov	r6, r3
 800901a:	f006 fc85 	bl	800f928 <memset>
 800901e:	4b1e      	ldr	r3, [pc, #120]	; (8009098 <acc_sensor_manager_prepare_radar_engine+0x94>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	463a      	mov	r2, r7
 8009024:	4640      	mov	r0, r8
 8009026:	b33b      	cbz	r3, 8009078 <acc_sensor_manager_prepare_radar_engine+0x74>
 8009028:	f8d3 9000 	ldr.w	r9, [r3]
 800902c:	f1b9 0f00 	cmp.w	r9, #0
 8009030:	d022      	beq.n	8009078 <acc_sensor_manager_prepare_radar_engine+0x74>
 8009032:	4633      	mov	r3, r6
 8009034:	4621      	mov	r1, r4
 8009036:	47c8      	blx	r9
 8009038:	4607      	mov	r7, r0
 800903a:	4620      	mov	r0, r4
 800903c:	f7fd fefe 	bl	8006e3c <acc_base_configuration_power_save_mode_get>
 8009040:	b320      	cbz	r0, 800908c <acc_sensor_manager_prepare_radar_engine+0x88>
 8009042:	2804      	cmp	r0, #4
 8009044:	d025      	beq.n	8009092 <acc_sensor_manager_prepare_radar_engine+0x8e>
 8009046:	2300      	movs	r3, #0
 8009048:	702b      	strb	r3, [r5, #0]
 800904a:	4620      	mov	r0, r4
 800904c:	f7fd ffc0 	bl	8006fd0 <acc_base_configuration_repetition_mode_get>
 8009050:	fab0 f280 	clz	r2, r0
 8009054:	0952      	lsrs	r2, r2, #5
 8009056:	706a      	strb	r2, [r5, #1]
 8009058:	4620      	mov	r0, r4
 800905a:	f7fe f8cf 	bl	80071fc <acc_base_configuration_asynchronous_measurement_get>
 800905e:	70a8      	strb	r0, [r5, #2]
 8009060:	4620      	mov	r0, r4
 8009062:	f7fd fe9b 	bl	8006d9c <acc_base_configuration_sensor_get>
 8009066:	4632      	mov	r2, r6
 8009068:	4601      	mov	r1, r0
 800906a:	231a      	movs	r3, #26
 800906c:	2005      	movs	r0, #5
 800906e:	f000 fe63 	bl	8009d38 <acc_probes_execute_struct>
 8009072:	4638      	mov	r0, r7
 8009074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009078:	4633      	mov	r3, r6
 800907a:	4621      	mov	r1, r4
 800907c:	f000 fbec 	bl	8009858 <acc_sweep_manager_prepare>
 8009080:	4607      	mov	r7, r0
 8009082:	4620      	mov	r0, r4
 8009084:	f7fd feda 	bl	8006e3c <acc_base_configuration_power_save_mode_get>
 8009088:	2800      	cmp	r0, #0
 800908a:	d1da      	bne.n	8009042 <acc_sensor_manager_prepare_radar_engine+0x3e>
 800908c:	2302      	movs	r3, #2
 800908e:	702b      	strb	r3, [r5, #0]
 8009090:	e7db      	b.n	800904a <acc_sensor_manager_prepare_radar_engine+0x46>
 8009092:	2301      	movs	r3, #1
 8009094:	702b      	strb	r3, [r5, #0]
 8009096:	e7d8      	b.n	800904a <acc_sensor_manager_prepare_radar_engine+0x46>
 8009098:	200006d0 	.word	0x200006d0

0800909c <acc_sensor_manager_prepare_measurement>:
 800909c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a0:	4680      	mov	r8, r0
 80090a2:	b083      	sub	sp, #12
 80090a4:	4608      	mov	r0, r1
 80090a6:	460e      	mov	r6, r1
 80090a8:	4617      	mov	r7, r2
 80090aa:	469a      	mov	sl, r3
 80090ac:	f7fd fe76 	bl	8006d9c <acc_base_configuration_sensor_get>
 80090b0:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8009198 <acc_sensor_manager_prepare_measurement+0xfc>
 80090b4:	4605      	mov	r5, r0
 80090b6:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
 80090ba:	4630      	mov	r0, r6
 80090bc:	f7fe f894 	bl	80071e8 <acc_base_configuration_noise_deviation_override_get>
 80090c0:	00e4      	lsls	r4, r4, #3
 80090c2:	f8d9 1000 	ldr.w	r1, [r9]
 80090c6:	4b32      	ldr	r3, [pc, #200]	; (8009190 <acc_sensor_manager_prepare_measurement+0xf4>)
 80090c8:	4a32      	ldr	r2, [pc, #200]	; (8009194 <acc_sensor_manager_prepare_measurement+0xf8>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	3c48      	subs	r4, #72	; 0x48
 80090ce:	440c      	add	r4, r1
 80090d0:	2100      	movs	r1, #0
 80090d2:	4683      	mov	fp, r0
 80090d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80090d8:	6462      	str	r2, [r4, #68]	; 0x44
 80090da:	b163      	cbz	r3, 80090f6 <acc_sensor_manager_prepare_measurement+0x5a>
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	b153      	cbz	r3, 80090f6 <acc_sensor_manager_prepare_measurement+0x5a>
 80090e0:	4652      	mov	r2, sl
 80090e2:	4630      	mov	r0, r6
 80090e4:	4639      	mov	r1, r7
 80090e6:	4798      	blx	r3
 80090e8:	4604      	mov	r4, r0
 80090ea:	2800      	cmp	r0, #0
 80090ec:	d14b      	bne.n	8009186 <acc_sensor_manager_prepare_measurement+0xea>
 80090ee:	4620      	mov	r0, r4
 80090f0:	b003      	add	sp, #12
 80090f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80090fa:	f8c8 a038 	str.w	sl, [r8, #56]	; 0x38
 80090fe:	b17b      	cbz	r3, 8009120 <acc_sensor_manager_prepare_measurement+0x84>
 8009100:	f1bb 0f00 	cmp.w	fp, #0
 8009104:	d01b      	beq.n	800913e <acc_sensor_manager_prepare_measurement+0xa2>
 8009106:	f8a7 b014 	strh.w	fp, [r7, #20]
 800910a:	463a      	mov	r2, r7
 800910c:	4629      	mov	r1, r5
 800910e:	2320      	movs	r3, #32
 8009110:	200e      	movs	r0, #14
 8009112:	f000 fe11 	bl	8009d38 <acc_probes_execute_struct>
 8009116:	2401      	movs	r4, #1
 8009118:	4620      	mov	r0, r4
 800911a:	b003      	add	sp, #12
 800911c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009120:	f108 0104 	add.w	r1, r8, #4
 8009124:	4652      	mov	r2, sl
 8009126:	4628      	mov	r0, r5
 8009128:	9101      	str	r1, [sp, #4]
 800912a:	f7ff fe09 	bl	8008d40 <calibrate_sensor>
 800912e:	9901      	ldr	r1, [sp, #4]
 8009130:	4604      	mov	r4, r0
 8009132:	2800      	cmp	r0, #0
 8009134:	d1e4      	bne.n	8009100 <acc_sensor_manager_prepare_measurement+0x64>
 8009136:	4608      	mov	r0, r1
 8009138:	f000 fc28 	bl	800998c <acc_sweep_manager_release>
 800913c:	e7d7      	b.n	80090ee <acc_sensor_manager_prepare_measurement+0x52>
 800913e:	4630      	mov	r0, r6
 8009140:	f7fe f83e 	bl	80071c0 <acc_base_configuration_noise_level_normalization_get>
 8009144:	2800      	cmp	r0, #0
 8009146:	d0e0      	beq.n	800910a <acc_sensor_manager_prepare_measurement+0x6e>
 8009148:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800914c:	4630      	mov	r0, r6
 800914e:	f7fe f9ed 	bl	800752c <acc_rss_integration_sensor_device_power_on>
 8009152:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8009156:	f8d9 1000 	ldr.w	r1, [r9]
 800915a:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 800915e:	00db      	lsls	r3, r3, #3
 8009160:	3b48      	subs	r3, #72	; 0x48
 8009162:	f108 0804 	add.w	r8, r8, #4
 8009166:	4419      	add	r1, r3
 8009168:	4640      	mov	r0, r8
 800916a:	f107 0314 	add.w	r3, r7, #20
 800916e:	f000 fc23 	bl	80099b8 <acc_sweep_manager_measure_noise>
 8009172:	4604      	mov	r4, r0
 8009174:	4630      	mov	r0, r6
 8009176:	f7fe f9df 	bl	8007538 <acc_rss_integration_sensor_device_power_off>
 800917a:	2c00      	cmp	r4, #0
 800917c:	d1c5      	bne.n	800910a <acc_sensor_manager_prepare_measurement+0x6e>
 800917e:	4640      	mov	r0, r8
 8009180:	f000 fc04 	bl	800998c <acc_sweep_manager_release>
 8009184:	e7b3      	b.n	80090ee <acc_sensor_manager_prepare_measurement+0x52>
 8009186:	f1bb 0f00 	cmp.w	fp, #0
 800918a:	d0be      	beq.n	800910a <acc_sensor_manager_prepare_measurement+0x6e>
 800918c:	e7bb      	b.n	8009106 <acc_sensor_manager_prepare_measurement+0x6a>
 800918e:	bf00      	nop
 8009190:	200006d0 	.word	0x200006d0
 8009194:	ff800000 	.word	0xff800000
 8009198:	200006d4 	.word	0x200006d4

0800919c <acc_sensor_manager_start_measurement>:
 800919c:	4b1b      	ldr	r3, [pc, #108]	; (800920c <acc_sensor_manager_start_measurement+0x70>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	b570      	push	{r4, r5, r6, lr}
 80091a2:	4604      	mov	r4, r0
 80091a4:	b123      	cbz	r3, 80091b0 <acc_sensor_manager_start_measurement+0x14>
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	b113      	cbz	r3, 80091b0 <acc_sensor_manager_start_measurement+0x14>
 80091aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80091ae:	4718      	bx	r3
 80091b0:	7823      	ldrb	r3, [r4, #0]
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d008      	beq.n	80091c8 <acc_sensor_manager_start_measurement+0x2c>
 80091b6:	4620      	mov	r0, r4
 80091b8:	f7ff fda4 	bl	8008d04 <acc_sensor_manager_power_on_and_start_sensor>
 80091bc:	b160      	cbz	r0, 80091d8 <acc_sensor_manager_start_measurement+0x3c>
 80091be:	78a3      	ldrb	r3, [r4, #2]
 80091c0:	b12b      	cbz	r3, 80091ce <acc_sensor_manager_start_measurement+0x32>
 80091c2:	7823      	ldrb	r3, [r4, #0]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d010      	beq.n	80091ea <acc_sensor_manager_start_measurement+0x4e>
 80091c8:	2501      	movs	r5, #1
 80091ca:	4628      	mov	r0, r5
 80091cc:	bd70      	pop	{r4, r5, r6, pc}
 80091ce:	1d25      	adds	r5, r4, #4
 80091d0:	4628      	mov	r0, r5
 80091d2:	f000 fc23 	bl	8009a1c <acc_sweep_manager_measure>
 80091d6:	b910      	cbnz	r0, 80091de <acc_sensor_manager_start_measurement+0x42>
 80091d8:	2500      	movs	r5, #0
 80091da:	4628      	mov	r0, r5
 80091dc:	bd70      	pop	{r4, r5, r6, pc}
 80091de:	4628      	mov	r0, r5
 80091e0:	f000 fc12 	bl	8009a08 <acc_sweep_manager_wait_for_data>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	d1ec      	bne.n	80091c2 <acc_sensor_manager_start_measurement+0x26>
 80091e8:	e7f6      	b.n	80091d8 <acc_sensor_manager_start_measurement+0x3c>
 80091ea:	1d25      	adds	r5, r4, #4
 80091ec:	4628      	mov	r0, r5
 80091ee:	f000 fc0b 	bl	8009a08 <acc_sweep_manager_wait_for_data>
 80091f2:	2800      	cmp	r0, #0
 80091f4:	d0f0      	beq.n	80091d8 <acc_sensor_manager_start_measurement+0x3c>
 80091f6:	4628      	mov	r0, r5
 80091f8:	f000 fc10 	bl	8009a1c <acc_sweep_manager_measure>
 80091fc:	4605      	mov	r5, r0
 80091fe:	2800      	cmp	r0, #0
 8009200:	d0ea      	beq.n	80091d8 <acc_sensor_manager_start_measurement+0x3c>
 8009202:	4620      	mov	r0, r4
 8009204:	f7ff fe0a 	bl	8008e1c <acc_sensor_manager_hibernate_enter>
 8009208:	e7df      	b.n	80091ca <acc_sensor_manager_start_measurement+0x2e>
 800920a:	bf00      	nop
 800920c:	200006d0 	.word	0x200006d0

08009210 <acc_sensor_manager_stop_measurement>:
 8009210:	78c3      	ldrb	r3, [r0, #3]
 8009212:	b903      	cbnz	r3, 8009216 <acc_sensor_manager_stop_measurement+0x6>
 8009214:	4770      	bx	lr
 8009216:	b510      	push	{r4, lr}
 8009218:	4604      	mov	r4, r0
 800921a:	6980      	ldr	r0, [r0, #24]
 800921c:	f7fe f98c 	bl	8007538 <acc_rss_integration_sensor_device_power_off>
 8009220:	2300      	movs	r3, #0
 8009222:	70e3      	strb	r3, [r4, #3]
 8009224:	bd10      	pop	{r4, pc}
 8009226:	bf00      	nop

08009228 <acc_sensor_manager_release_measurement>:
 8009228:	6983      	ldr	r3, [r0, #24]
 800922a:	b173      	cbz	r3, 800924a <acc_sensor_manager_release_measurement+0x22>
 800922c:	4a07      	ldr	r2, [pc, #28]	; (800924c <acc_sensor_manager_release_measurement+0x24>)
 800922e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8009232:	6812      	ldr	r2, [r2, #0]
 8009234:	00db      	lsls	r3, r3, #3
 8009236:	3b48      	subs	r3, #72	; 0x48
 8009238:	4413      	add	r3, r2
 800923a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800923e:	b90a      	cbnz	r2, 8009244 <acc_sensor_manager_release_measurement+0x1c>
 8009240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009244:	3004      	adds	r0, #4
 8009246:	f000 bba1 	b.w	800998c <acc_sweep_manager_release>
 800924a:	4770      	bx	lr
 800924c:	200006d4 	.word	0x200006d4

08009250 <acc_sensor_manager_get_sensor_id>:
 8009250:	6980      	ldr	r0, [r0, #24]
 8009252:	4770      	bx	lr

08009254 <acc_sensor_protocol_r2_prepare_load>:
 8009254:	b570      	push	{r4, r5, r6, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	4604      	mov	r4, r0
 800925a:	4608      	mov	r0, r1
 800925c:	4611      	mov	r1, r2
 800925e:	461a      	mov	r2, r3
 8009260:	9b08      	ldr	r3, [sp, #32]
 8009262:	f7ff fcef 	bl	8008c44 <acc_sensor_r2_prepare_load_confmem>
 8009266:	2300      	movs	r3, #0
 8009268:	4620      	mov	r0, r4
 800926a:	f10d 020e 	add.w	r2, sp, #14
 800926e:	212a      	movs	r1, #42	; 0x2a
 8009270:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009274:	f000 fd90 	bl	8009d98 <acc_sensor_reg_read>
 8009278:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800927c:	065b      	lsls	r3, r3, #25
 800927e:	d436      	bmi.n	80092ee <acc_sensor_protocol_r2_prepare_load+0x9a>
 8009280:	f10d 020e 	add.w	r2, sp, #14
 8009284:	2500      	movs	r5, #0
 8009286:	2111      	movs	r1, #17
 8009288:	4620      	mov	r0, r4
 800928a:	f8ad 500e 	strh.w	r5, [sp, #14]
 800928e:	f000 fd83 	bl	8009d98 <acc_sensor_reg_read>
 8009292:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009296:	f413 6680 	ands.w	r6, r3, #1024	; 0x400
 800929a:	d00c      	beq.n	80092b6 <acc_sensor_protocol_r2_prepare_load+0x62>
 800929c:	4b1b      	ldr	r3, [pc, #108]	; (800930c <acc_sensor_protocol_r2_prepare_load+0xb8>)
 800929e:	4a1c      	ldr	r2, [pc, #112]	; (8009310 <acc_sensor_protocol_r2_prepare_load+0xbc>)
 80092a0:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80092a2:	491c      	ldr	r1, [pc, #112]	; (8009314 <acc_sensor_protocol_r2_prepare_load+0xc0>)
 80092a4:	4623      	mov	r3, r4
 80092a6:	4628      	mov	r0, r5
 80092a8:	47b0      	blx	r6
 80092aa:	4620      	mov	r0, r4
 80092ac:	f004 f8c8 	bl	800d440 <acc_sensor_diagnostics_r2_sensor_status>
 80092b0:	4628      	mov	r0, r5
 80092b2:	b004      	add	sp, #16
 80092b4:	bd70      	pop	{r4, r5, r6, pc}
 80092b6:	2501      	movs	r5, #1
 80092b8:	4629      	mov	r1, r5
 80092ba:	4620      	mov	r0, r4
 80092bc:	9500      	str	r5, [sp, #0]
 80092be:	2380      	movs	r3, #128	; 0x80
 80092c0:	2202      	movs	r2, #2
 80092c2:	f000 fd8f 	bl	8009de4 <acc_sensor_reg_field_write>
 80092c6:	2380      	movs	r3, #128	; 0x80
 80092c8:	461a      	mov	r2, r3
 80092ca:	4620      	mov	r0, r4
 80092cc:	9600      	str	r6, [sp, #0]
 80092ce:	2107      	movs	r1, #7
 80092d0:	f000 fd88 	bl	8009de4 <acc_sensor_reg_field_write>
 80092d4:	462a      	mov	r2, r5
 80092d6:	4620      	mov	r0, r4
 80092d8:	2105      	movs	r1, #5
 80092da:	f000 fd73 	bl	8009dc4 <acc_sensor_reg_write>
 80092de:	4620      	mov	r0, r4
 80092e0:	2203      	movs	r2, #3
 80092e2:	217a      	movs	r1, #122	; 0x7a
 80092e4:	f000 fd6e 	bl	8009dc4 <acc_sensor_reg_write>
 80092e8:	4628      	mov	r0, r5
 80092ea:	b004      	add	sp, #16
 80092ec:	bd70      	pop	{r4, r5, r6, pc}
 80092ee:	f7fe f9c1 	bl	8007674 <acc_rss_integration_log_level>
 80092f2:	b130      	cbz	r0, 8009302 <acc_sensor_protocol_r2_prepare_load+0xae>
 80092f4:	4b05      	ldr	r3, [pc, #20]	; (800930c <acc_sensor_protocol_r2_prepare_load+0xb8>)
 80092f6:	4a08      	ldr	r2, [pc, #32]	; (8009318 <acc_sensor_protocol_r2_prepare_load+0xc4>)
 80092f8:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80092fa:	4906      	ldr	r1, [pc, #24]	; (8009314 <acc_sensor_protocol_r2_prepare_load+0xc0>)
 80092fc:	4623      	mov	r3, r4
 80092fe:	2001      	movs	r0, #1
 8009300:	47a8      	blx	r5
 8009302:	4620      	mov	r0, r4
 8009304:	f004 f89c 	bl	800d440 <acc_sensor_diagnostics_r2_sensor_status>
 8009308:	e7ba      	b.n	8009280 <acc_sensor_protocol_r2_prepare_load+0x2c>
 800930a:	bf00      	nop
 800930c:	2000082c 	.word	0x2000082c
 8009310:	080126d8 	.word	0x080126d8
 8009314:	080126c4 	.word	0x080126c4
 8009318:	08012698 	.word	0x08012698

0800931c <acc_sensor_protocol_r2_run_program>:
 800931c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800931e:	b085      	sub	sp, #20
 8009320:	4604      	mov	r4, r0
 8009322:	460e      	mov	r6, r1
 8009324:	f7fe f9a6 	bl	8007674 <acc_rss_integration_log_level>
 8009328:	2803      	cmp	r0, #3
 800932a:	d907      	bls.n	800933c <acc_sensor_protocol_r2_run_program+0x20>
 800932c:	4b1e      	ldr	r3, [pc, #120]	; (80093a8 <acc_sensor_protocol_r2_run_program+0x8c>)
 800932e:	9600      	str	r6, [sp, #0]
 8009330:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009332:	4a1e      	ldr	r2, [pc, #120]	; (80093ac <acc_sensor_protocol_r2_run_program+0x90>)
 8009334:	491e      	ldr	r1, [pc, #120]	; (80093b0 <acc_sensor_protocol_r2_run_program+0x94>)
 8009336:	4623      	mov	r3, r4
 8009338:	2004      	movs	r0, #4
 800933a:	47a8      	blx	r5
 800933c:	f10d 020e 	add.w	r2, sp, #14
 8009340:	2700      	movs	r7, #0
 8009342:	2111      	movs	r1, #17
 8009344:	4620      	mov	r0, r4
 8009346:	f8ad 700e 	strh.w	r7, [sp, #14]
 800934a:	f000 fd25 	bl	8009d98 <acc_sensor_reg_read>
 800934e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8009352:	f412 6580 	ands.w	r5, r2, #1024	; 0x400
 8009356:	d11a      	bne.n	800938e <acc_sensor_protocol_r2_run_program+0x72>
 8009358:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800935c:	d309      	bcc.n	8009372 <acc_sensor_protocol_r2_run_program+0x56>
 800935e:	4b12      	ldr	r3, [pc, #72]	; (80093a8 <acc_sensor_protocol_r2_run_program+0x8c>)
 8009360:	4a14      	ldr	r2, [pc, #80]	; (80093b4 <acc_sensor_protocol_r2_run_program+0x98>)
 8009362:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009364:	4912      	ldr	r1, [pc, #72]	; (80093b0 <acc_sensor_protocol_r2_run_program+0x94>)
 8009366:	4628      	mov	r0, r5
 8009368:	4633      	mov	r3, r6
 800936a:	47a0      	blx	r4
 800936c:	4628      	mov	r0, r5
 800936e:	b005      	add	sp, #20
 8009370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009372:	462a      	mov	r2, r5
 8009374:	4620      	mov	r0, r4
 8009376:	2110      	movs	r1, #16
 8009378:	f000 fd24 	bl	8009dc4 <acc_sensor_reg_write>
 800937c:	4620      	mov	r0, r4
 800937e:	f446 6280 	orr.w	r2, r6, #1024	; 0x400
 8009382:	2110      	movs	r1, #16
 8009384:	f000 fd1e 	bl	8009dc4 <acc_sensor_reg_write>
 8009388:	2001      	movs	r0, #1
 800938a:	b005      	add	sp, #20
 800938c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800938e:	4b06      	ldr	r3, [pc, #24]	; (80093a8 <acc_sensor_protocol_r2_run_program+0x8c>)
 8009390:	4a09      	ldr	r2, [pc, #36]	; (80093b8 <acc_sensor_protocol_r2_run_program+0x9c>)
 8009392:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009394:	4906      	ldr	r1, [pc, #24]	; (80093b0 <acc_sensor_protocol_r2_run_program+0x94>)
 8009396:	4623      	mov	r3, r4
 8009398:	4638      	mov	r0, r7
 800939a:	47a8      	blx	r5
 800939c:	4620      	mov	r0, r4
 800939e:	f004 f84f 	bl	800d440 <acc_sensor_diagnostics_r2_sensor_status>
 80093a2:	4638      	mov	r0, r7
 80093a4:	b005      	add	sp, #20
 80093a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093a8:	2000082c 	.word	0x2000082c
 80093ac:	08012708 	.word	0x08012708
 80093b0:	080126c4 	.word	0x080126c4
 80093b4:	0801275c 	.word	0x0801275c
 80093b8:	0801272c 	.word	0x0801272c

080093bc <acc_sensor_protocol_r2_terminate_program>:
 80093bc:	b530      	push	{r4, r5, lr}
 80093be:	b083      	sub	sp, #12
 80093c0:	2300      	movs	r3, #0
 80093c2:	f10d 0206 	add.w	r2, sp, #6
 80093c6:	2111      	movs	r1, #17
 80093c8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80093cc:	4605      	mov	r5, r0
 80093ce:	f000 fce3 	bl	8009d98 <acc_sensor_reg_read>
 80093d2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80093d6:	f413 6480 	ands.w	r4, r3, #1024	; 0x400
 80093da:	d10b      	bne.n	80093f4 <acc_sensor_protocol_r2_terminate_program+0x38>
 80093dc:	4b09      	ldr	r3, [pc, #36]	; (8009404 <acc_sensor_protocol_r2_terminate_program+0x48>)
 80093de:	4a0a      	ldr	r2, [pc, #40]	; (8009408 <acc_sensor_protocol_r2_terminate_program+0x4c>)
 80093e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e2:	490a      	ldr	r1, [pc, #40]	; (800940c <acc_sensor_protocol_r2_terminate_program+0x50>)
 80093e4:	4620      	mov	r0, r4
 80093e6:	4798      	blx	r3
 80093e8:	4628      	mov	r0, r5
 80093ea:	f004 f829 	bl	800d440 <acc_sensor_diagnostics_r2_sensor_status>
 80093ee:	4620      	mov	r0, r4
 80093f0:	b003      	add	sp, #12
 80093f2:	bd30      	pop	{r4, r5, pc}
 80093f4:	4628      	mov	r0, r5
 80093f6:	2201      	movs	r2, #1
 80093f8:	2174      	movs	r1, #116	; 0x74
 80093fa:	f000 fce3 	bl	8009dc4 <acc_sensor_reg_write>
 80093fe:	2001      	movs	r0, #1
 8009400:	b003      	add	sp, #12
 8009402:	bd30      	pop	{r4, r5, pc}
 8009404:	2000082c 	.word	0x2000082c
 8009408:	08012778 	.word	0x08012778
 800940c:	080126c4 	.word	0x080126c4

08009410 <acc_sensor_protocol_r2_is_sensor_running>:
 8009410:	b500      	push	{lr}
 8009412:	b083      	sub	sp, #12
 8009414:	2300      	movs	r3, #0
 8009416:	f10d 0206 	add.w	r2, sp, #6
 800941a:	2111      	movs	r1, #17
 800941c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009420:	f000 fcba 	bl	8009d98 <acc_sensor_reg_read>
 8009424:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8009428:	f3c0 2080 	ubfx	r0, r0, #10, #1
 800942c:	b003      	add	sp, #12
 800942e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009432:	bf00      	nop

08009434 <acc_sensor_protocol_r2_ack_event>:
 8009434:	b570      	push	{r4, r5, r6, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	2300      	movs	r3, #0
 800943a:	f10d 0206 	add.w	r2, sp, #6
 800943e:	2138      	movs	r1, #56	; 0x38
 8009440:	4605      	mov	r5, r0
 8009442:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009446:	f000 fca7 	bl	8009d98 <acc_sensor_reg_read>
 800944a:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 800944e:	b114      	cbz	r4, 8009456 <acc_sensor_protocol_r2_ack_event+0x22>
 8009450:	2001      	movs	r0, #1
 8009452:	b002      	add	sp, #8
 8009454:	bd70      	pop	{r4, r5, r6, pc}
 8009456:	4b06      	ldr	r3, [pc, #24]	; (8009470 <acc_sensor_protocol_r2_ack_event+0x3c>)
 8009458:	4a06      	ldr	r2, [pc, #24]	; (8009474 <acc_sensor_protocol_r2_ack_event+0x40>)
 800945a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800945c:	4906      	ldr	r1, [pc, #24]	; (8009478 <acc_sensor_protocol_r2_ack_event+0x44>)
 800945e:	462b      	mov	r3, r5
 8009460:	4620      	mov	r0, r4
 8009462:	47b0      	blx	r6
 8009464:	4628      	mov	r0, r5
 8009466:	f003 ffeb 	bl	800d440 <acc_sensor_diagnostics_r2_sensor_status>
 800946a:	4620      	mov	r0, r4
 800946c:	b002      	add	sp, #8
 800946e:	bd70      	pop	{r4, r5, r6, pc}
 8009470:	2000082c 	.word	0x2000082c
 8009474:	080127ac 	.word	0x080127ac
 8009478:	080126c4 	.word	0x080126c4

0800947c <acc_sensor_protocol_r2_get_event>:
 800947c:	b570      	push	{r4, r5, r6, lr}
 800947e:	460c      	mov	r4, r1
 8009480:	b084      	sub	sp, #16
 8009482:	b301      	cbz	r1, 80094c6 <acc_sensor_protocol_r2_get_event+0x4a>
 8009484:	f10d 020e 	add.w	r2, sp, #14
 8009488:	2128      	movs	r1, #40	; 0x28
 800948a:	4605      	mov	r5, r0
 800948c:	f000 fc84 	bl	8009d98 <acc_sensor_reg_read>
 8009490:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8009494:	8062      	strh	r2, [r4, #2]
 8009496:	b2d3      	uxtb	r3, r2
 8009498:	2b01      	cmp	r3, #1
 800949a:	7023      	strb	r3, [r4, #0]
 800949c:	d026      	beq.n	80094ec <acc_sensor_protocol_r2_get_event+0x70>
 800949e:	d80c      	bhi.n	80094ba <acc_sensor_protocol_r2_get_event+0x3e>
 80094a0:	4b22      	ldr	r3, [pc, #136]	; (800952c <acc_sensor_protocol_r2_get_event+0xb0>)
 80094a2:	4a23      	ldr	r2, [pc, #140]	; (8009530 <acc_sensor_protocol_r2_get_event+0xb4>)
 80094a4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80094a6:	4923      	ldr	r1, [pc, #140]	; (8009534 <acc_sensor_protocol_r2_get_event+0xb8>)
 80094a8:	462b      	mov	r3, r5
 80094aa:	2000      	movs	r0, #0
 80094ac:	47a0      	blx	r4
 80094ae:	4628      	mov	r0, r5
 80094b0:	f003 ffc6 	bl	800d440 <acc_sensor_diagnostics_r2_sensor_status>
 80094b4:	2000      	movs	r0, #0
 80094b6:	b004      	add	sp, #16
 80094b8:	bd70      	pop	{r4, r5, r6, pc}
 80094ba:	1e9a      	subs	r2, r3, #2
 80094bc:	2a09      	cmp	r2, #9
 80094be:	d80b      	bhi.n	80094d8 <acc_sensor_protocol_r2_get_event+0x5c>
 80094c0:	2001      	movs	r0, #1
 80094c2:	b004      	add	sp, #16
 80094c4:	bd70      	pop	{r4, r5, r6, pc}
 80094c6:	4b19      	ldr	r3, [pc, #100]	; (800952c <acc_sensor_protocol_r2_get_event+0xb0>)
 80094c8:	4a1b      	ldr	r2, [pc, #108]	; (8009538 <acc_sensor_protocol_r2_get_event+0xbc>)
 80094ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094cc:	4919      	ldr	r1, [pc, #100]	; (8009534 <acc_sensor_protocol_r2_get_event+0xb8>)
 80094ce:	4620      	mov	r0, r4
 80094d0:	4798      	blx	r3
 80094d2:	4620      	mov	r0, r4
 80094d4:	b004      	add	sp, #16
 80094d6:	bd70      	pop	{r4, r5, r6, pc}
 80094d8:	4a14      	ldr	r2, [pc, #80]	; (800952c <acc_sensor_protocol_r2_get_event+0xb0>)
 80094da:	9500      	str	r5, [sp, #0]
 80094dc:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80094de:	4915      	ldr	r1, [pc, #84]	; (8009534 <acc_sensor_protocol_r2_get_event+0xb8>)
 80094e0:	4a16      	ldr	r2, [pc, #88]	; (800953c <acc_sensor_protocol_r2_get_event+0xc0>)
 80094e2:	2000      	movs	r0, #0
 80094e4:	47b0      	blx	r6
 80094e6:	2300      	movs	r3, #0
 80094e8:	7023      	strb	r3, [r4, #0]
 80094ea:	e7e0      	b.n	80094ae <acc_sensor_protocol_r2_get_event+0x32>
 80094ec:	f5b2 5f88 	cmp.w	r2, #4352	; 0x1100
 80094f0:	ea4f 2112 	mov.w	r1, r2, lsr #8
 80094f4:	d203      	bcs.n	80094fe <acc_sensor_protocol_r2_get_event+0x82>
 80094f6:	4a12      	ldr	r2, [pc, #72]	; (8009540 <acc_sensor_protocol_r2_get_event+0xc4>)
 80094f8:	408b      	lsls	r3, r1
 80094fa:	401a      	ands	r2, r3
 80094fc:	b96a      	cbnz	r2, 800951a <acc_sensor_protocol_r2_get_event+0x9e>
 80094fe:	4a0b      	ldr	r2, [pc, #44]	; (800952c <acc_sensor_protocol_r2_get_event+0xb0>)
 8009500:	f242 1301 	movw	r3, #8449	; 0x2101
 8009504:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8009506:	8063      	strh	r3, [r4, #2]
 8009508:	2320      	movs	r3, #32
 800950a:	4a0e      	ldr	r2, [pc, #56]	; (8009544 <acc_sensor_protocol_r2_get_event+0xc8>)
 800950c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009510:	4a0d      	ldr	r2, [pc, #52]	; (8009548 <acc_sensor_protocol_r2_get_event+0xcc>)
 8009512:	4908      	ldr	r1, [pc, #32]	; (8009534 <acc_sensor_protocol_r2_get_event+0xb8>)
 8009514:	2000      	movs	r0, #0
 8009516:	47b0      	blx	r6
 8009518:	e7c9      	b.n	80094ae <acc_sensor_protocol_r2_get_event+0x32>
 800951a:	1e4b      	subs	r3, r1, #1
 800951c:	4a03      	ldr	r2, [pc, #12]	; (800952c <acc_sensor_protocol_r2_get_event+0xb0>)
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2b20      	cmp	r3, #32
 8009522:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8009524:	d9f1      	bls.n	800950a <acc_sensor_protocol_r2_get_event+0x8e>
 8009526:	4b09      	ldr	r3, [pc, #36]	; (800954c <acc_sensor_protocol_r2_get_event+0xd0>)
 8009528:	e7f2      	b.n	8009510 <acc_sensor_protocol_r2_get_event+0x94>
 800952a:	bf00      	nop
 800952c:	2000082c 	.word	0x2000082c
 8009530:	08012804 	.word	0x08012804
 8009534:	080126c4 	.word	0x080126c4
 8009538:	080127f0 	.word	0x080127f0
 800953c:	08012848 	.word	0x08012848
 8009540:	00010016 	.word	0x00010016
 8009544:	08012b24 	.word	0x08012b24
 8009548:	08012828 	.word	0x08012828
 800954c:	080127e0 	.word	0x080127e0

08009550 <acc_sensor_protocol_r2_wait_for_event>:
 8009550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009554:	b087      	sub	sp, #28
 8009556:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 800960c <acc_sensor_protocol_r2_wait_for_event+0xbc>
 800955a:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009620 <acc_sensor_protocol_r2_wait_for_event+0xd0>
 800955e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8009614 <acc_sensor_protocol_r2_wait_for_event+0xc4>
 8009562:	9303      	str	r3, [sp, #12]
 8009564:	4604      	mov	r4, r0
 8009566:	460e      	mov	r6, r1
 8009568:	4690      	mov	r8, r2
 800956a:	2500      	movs	r5, #0
 800956c:	e018      	b.n	80095a0 <acc_sensor_protocol_r2_wait_for_event+0x50>
 800956e:	4620      	mov	r0, r4
 8009570:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009574:	f000 fc10 	bl	8009d98 <acc_sensor_reg_read>
 8009578:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800957c:	065b      	lsls	r3, r3, #25
 800957e:	d434      	bmi.n	80095ea <acc_sensor_protocol_r2_wait_for_event+0x9a>
 8009580:	f7fe f878 	bl	8007674 <acc_rss_integration_log_level>
 8009584:	4607      	mov	r7, r0
 8009586:	4623      	mov	r3, r4
 8009588:	4652      	mov	r2, sl
 800958a:	4649      	mov	r1, r9
 800958c:	2001      	movs	r0, #1
 800958e:	b117      	cbz	r7, 8009596 <acc_sensor_protocol_r2_wait_for_event+0x46>
 8009590:	f8db 7034 	ldr.w	r7, [fp, #52]	; 0x34
 8009594:	47b8      	blx	r7
 8009596:	4545      	cmp	r5, r8
 8009598:	f105 0301 	add.w	r3, r5, #1
 800959c:	d018      	beq.n	80095d0 <acc_sensor_protocol_r2_wait_for_event+0x80>
 800959e:	461d      	mov	r5, r3
 80095a0:	4631      	mov	r1, r6
 80095a2:	4620      	mov	r0, r4
 80095a4:	f7fd ffe6 	bl	8007574 <acc_rss_integration_wait_for_sensor_interrupt>
 80095a8:	f10d 0216 	add.w	r2, sp, #22
 80095ac:	212a      	movs	r1, #42	; 0x2a
 80095ae:	2300      	movs	r3, #0
 80095b0:	4607      	mov	r7, r0
 80095b2:	2800      	cmp	r0, #0
 80095b4:	d1db      	bne.n	800956e <acc_sensor_protocol_r2_wait_for_event+0x1e>
 80095b6:	4b15      	ldr	r3, [pc, #84]	; (800960c <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 80095b8:	4a15      	ldr	r2, [pc, #84]	; (8009610 <acc_sensor_protocol_r2_wait_for_event+0xc0>)
 80095ba:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80095bc:	4915      	ldr	r1, [pc, #84]	; (8009614 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 80095be:	4623      	mov	r3, r4
 80095c0:	47a8      	blx	r5
 80095c2:	4620      	mov	r0, r4
 80095c4:	f003 ff3c 	bl	800d440 <acc_sensor_diagnostics_r2_sensor_status>
 80095c8:	4638      	mov	r0, r7
 80095ca:	b007      	add	sp, #28
 80095cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095d0:	4a0e      	ldr	r2, [pc, #56]	; (800960c <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 80095d2:	9400      	str	r4, [sp, #0]
 80095d4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80095d6:	490f      	ldr	r1, [pc, #60]	; (8009614 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 80095d8:	4a0f      	ldr	r2, [pc, #60]	; (8009618 <acc_sensor_protocol_r2_wait_for_event+0xc8>)
 80095da:	462b      	mov	r3, r5
 80095dc:	2000      	movs	r0, #0
 80095de:	47a0      	blx	r4
 80095e0:	2700      	movs	r7, #0
 80095e2:	4638      	mov	r0, r7
 80095e4:	b007      	add	sp, #28
 80095e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ea:	9903      	ldr	r1, [sp, #12]
 80095ec:	4620      	mov	r0, r4
 80095ee:	f7ff ff45 	bl	800947c <acc_sensor_protocol_r2_get_event>
 80095f2:	4607      	mov	r7, r0
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d1e7      	bne.n	80095c8 <acc_sensor_protocol_r2_wait_for_event+0x78>
 80095f8:	4b04      	ldr	r3, [pc, #16]	; (800960c <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 80095fa:	4a08      	ldr	r2, [pc, #32]	; (800961c <acc_sensor_protocol_r2_wait_for_event+0xcc>)
 80095fc:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80095fe:	4905      	ldr	r1, [pc, #20]	; (8009614 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 8009600:	4623      	mov	r3, r4
 8009602:	47a8      	blx	r5
 8009604:	4638      	mov	r0, r7
 8009606:	b007      	add	sp, #28
 8009608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800960c:	2000082c 	.word	0x2000082c
 8009610:	08012878 	.word	0x08012878
 8009614:	080126c4 	.word	0x080126c4
 8009618:	080128c4 	.word	0x080128c4
 800961c:	08012900 	.word	0x08012900
 8009620:	080128a0 	.word	0x080128a0

08009624 <acc_sensor_protocol_r2_wait_for_specific_event>:
 8009624:	b570      	push	{r4, r5, r6, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	4616      	mov	r6, r2
 800962a:	461c      	mov	r4, r3
 800962c:	2264      	movs	r2, #100	; 0x64
 800962e:	ab03      	add	r3, sp, #12
 8009630:	4605      	mov	r5, r0
 8009632:	f7ff ff8d 	bl	8009550 <acc_sensor_protocol_r2_wait_for_event>
 8009636:	b168      	cbz	r0, 8009654 <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 8009638:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800963c:	42b3      	cmp	r3, r6
 800963e:	d00b      	beq.n	8009658 <acc_sensor_protocol_r2_wait_for_specific_event+0x34>
 8009640:	e9cd 3600 	strd	r3, r6, [sp]
 8009644:	4a08      	ldr	r2, [pc, #32]	; (8009668 <acc_sensor_protocol_r2_wait_for_specific_event+0x44>)
 8009646:	4b09      	ldr	r3, [pc, #36]	; (800966c <acc_sensor_protocol_r2_wait_for_specific_event+0x48>)
 8009648:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800964a:	4909      	ldr	r1, [pc, #36]	; (8009670 <acc_sensor_protocol_r2_wait_for_specific_event+0x4c>)
 800964c:	4a09      	ldr	r2, [pc, #36]	; (8009674 <acc_sensor_protocol_r2_wait_for_specific_event+0x50>)
 800964e:	2000      	movs	r0, #0
 8009650:	47a0      	blx	r4
 8009652:	2000      	movs	r0, #0
 8009654:	b004      	add	sp, #16
 8009656:	bd70      	pop	{r4, r5, r6, pc}
 8009658:	2c00      	cmp	r4, #0
 800965a:	d0fb      	beq.n	8009654 <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 800965c:	4628      	mov	r0, r5
 800965e:	f7ff fee9 	bl	8009434 <acc_sensor_protocol_r2_ack_event>
 8009662:	b004      	add	sp, #16
 8009664:	bd70      	pop	{r4, r5, r6, pc}
 8009666:	bf00      	nop
 8009668:	2000082c 	.word	0x2000082c
 800966c:	08012ba8 	.word	0x08012ba8
 8009670:	080126c4 	.word	0x080126c4
 8009674:	08012928 	.word	0x08012928

08009678 <acc_sensor_protocol_r2_wait_for_hibernate_ready>:
 8009678:	2301      	movs	r3, #1
 800967a:	220b      	movs	r2, #11
 800967c:	f7ff bfd2 	b.w	8009624 <acc_sensor_protocol_r2_wait_for_specific_event>

08009680 <acc_sensor_protocol_r2_stop>:
 8009680:	b530      	push	{r4, r5, lr}
 8009682:	b083      	sub	sp, #12
 8009684:	460c      	mov	r4, r1
 8009686:	4605      	mov	r5, r0
 8009688:	f7ff fe98 	bl	80093bc <acc_sensor_protocol_r2_terminate_program>
 800968c:	b910      	cbnz	r0, 8009694 <acc_sensor_protocol_r2_stop+0x14>
 800968e:	2000      	movs	r0, #0
 8009690:	b003      	add	sp, #12
 8009692:	bd30      	pop	{r4, r5, pc}
 8009694:	4628      	mov	r0, r5
 8009696:	f7ff fecd 	bl	8009434 <acc_sensor_protocol_r2_ack_event>
 800969a:	2800      	cmp	r0, #0
 800969c:	d0f7      	beq.n	800968e <acc_sensor_protocol_r2_stop+0xe>
 800969e:	4621      	mov	r1, r4
 80096a0:	ab01      	add	r3, sp, #4
 80096a2:	2264      	movs	r2, #100	; 0x64
 80096a4:	4628      	mov	r0, r5
 80096a6:	f7ff ff53 	bl	8009550 <acc_sensor_protocol_r2_wait_for_event>
 80096aa:	2800      	cmp	r0, #0
 80096ac:	d0ef      	beq.n	800968e <acc_sensor_protocol_r2_stop+0xe>
 80096ae:	4628      	mov	r0, r5
 80096b0:	f7ff fec0 	bl	8009434 <acc_sensor_protocol_r2_ack_event>
 80096b4:	2800      	cmp	r0, #0
 80096b6:	d0ea      	beq.n	800968e <acc_sensor_protocol_r2_stop+0xe>
 80096b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80096bc:	2b02      	cmp	r3, #2
 80096be:	d0e7      	beq.n	8009690 <acc_sensor_protocol_r2_stop+0x10>
 80096c0:	4a05      	ldr	r2, [pc, #20]	; (80096d8 <acc_sensor_protocol_r2_stop+0x58>)
 80096c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80096c6:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80096c8:	4904      	ldr	r1, [pc, #16]	; (80096dc <acc_sensor_protocol_r2_stop+0x5c>)
 80096ca:	4a05      	ldr	r2, [pc, #20]	; (80096e0 <acc_sensor_protocol_r2_stop+0x60>)
 80096cc:	2000      	movs	r0, #0
 80096ce:	47a0      	blx	r4
 80096d0:	4628      	mov	r0, r5
 80096d2:	f003 feb5 	bl	800d440 <acc_sensor_diagnostics_r2_sensor_status>
 80096d6:	e7da      	b.n	800968e <acc_sensor_protocol_r2_stop+0xe>
 80096d8:	2000082c 	.word	0x2000082c
 80096dc:	080126c4 	.word	0x080126c4
 80096e0:	08012954 	.word	0x08012954

080096e4 <acc_sensor_protocol_r2_wait_for_radar_data>:
 80096e4:	b570      	push	{r4, r5, r6, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	4616      	mov	r6, r2
 80096ea:	ab03      	add	r3, sp, #12
 80096ec:	2264      	movs	r2, #100	; 0x64
 80096ee:	4605      	mov	r5, r0
 80096f0:	f7ff ff2e 	bl	8009550 <acc_sensor_protocol_r2_wait_for_event>
 80096f4:	4604      	mov	r4, r0
 80096f6:	b180      	cbz	r0, 800971a <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 80096f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80096fc:	2b06      	cmp	r3, #6
 80096fe:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009702:	d10d      	bne.n	8009720 <acc_sensor_protocol_r2_wait_for_radar_data+0x3c>
 8009704:	0519      	lsls	r1, r3, #20
 8009706:	d50b      	bpl.n	8009720 <acc_sensor_protocol_r2_wait_for_radar_data+0x3c>
 8009708:	f413 6280 	ands.w	r2, r3, #1024	; 0x400
 800970c:	d114      	bne.n	8009738 <acc_sensor_protocol_r2_wait_for_radar_data+0x54>
 800970e:	b106      	cbz	r6, 8009712 <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 8009710:	7032      	strb	r2, [r6, #0]
 8009712:	05da      	lsls	r2, r3, #23
 8009714:	d425      	bmi.n	8009762 <acc_sensor_protocol_r2_wait_for_radar_data+0x7e>
 8009716:	059b      	lsls	r3, r3, #22
 8009718:	d418      	bmi.n	800974c <acc_sensor_protocol_r2_wait_for_radar_data+0x68>
 800971a:	4620      	mov	r0, r4
 800971c:	b004      	add	sp, #16
 800971e:	bd70      	pop	{r4, r5, r6, pc}
 8009720:	4a16      	ldr	r2, [pc, #88]	; (800977c <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009726:	4916      	ldr	r1, [pc, #88]	; (8009780 <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 8009728:	4a16      	ldr	r2, [pc, #88]	; (8009784 <acc_sensor_protocol_r2_wait_for_radar_data+0xa0>)
 800972a:	462b      	mov	r3, r5
 800972c:	2000      	movs	r0, #0
 800972e:	47a0      	blx	r4
 8009730:	2400      	movs	r4, #0
 8009732:	4620      	mov	r0, r4
 8009734:	b004      	add	sp, #16
 8009736:	bd70      	pop	{r4, r5, r6, pc}
 8009738:	4629      	mov	r1, r5
 800973a:	200f      	movs	r0, #15
 800973c:	f000 fb14 	bl	8009d68 <acc_probes_execute_primitive_probe>
 8009740:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009744:	4622      	mov	r2, r4
 8009746:	2e00      	cmp	r6, #0
 8009748:	d1e2      	bne.n	8009710 <acc_sensor_protocol_r2_wait_for_radar_data+0x2c>
 800974a:	e7e2      	b.n	8009712 <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 800974c:	f7fd ff92 	bl	8007674 <acc_rss_integration_log_level>
 8009750:	2803      	cmp	r0, #3
 8009752:	d9e2      	bls.n	800971a <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 8009754:	4b09      	ldr	r3, [pc, #36]	; (800977c <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 8009756:	4a0c      	ldr	r2, [pc, #48]	; (8009788 <acc_sensor_protocol_r2_wait_for_radar_data+0xa4>)
 8009758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800975a:	4909      	ldr	r1, [pc, #36]	; (8009780 <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 800975c:	2004      	movs	r0, #4
 800975e:	4798      	blx	r3
 8009760:	e7db      	b.n	800971a <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 8009762:	f7fd ff87 	bl	8007674 <acc_rss_integration_log_level>
 8009766:	2803      	cmp	r0, #3
 8009768:	d905      	bls.n	8009776 <acc_sensor_protocol_r2_wait_for_radar_data+0x92>
 800976a:	4b04      	ldr	r3, [pc, #16]	; (800977c <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 800976c:	4a07      	ldr	r2, [pc, #28]	; (800978c <acc_sensor_protocol_r2_wait_for_radar_data+0xa8>)
 800976e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009770:	4903      	ldr	r1, [pc, #12]	; (8009780 <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 8009772:	2004      	movs	r0, #4
 8009774:	4798      	blx	r3
 8009776:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800977a:	e7cc      	b.n	8009716 <acc_sensor_protocol_r2_wait_for_radar_data+0x32>
 800977c:	2000082c 	.word	0x2000082c
 8009780:	080126c4 	.word	0x080126c4
 8009784:	08012974 	.word	0x08012974
 8009788:	080129c0 	.word	0x080129c0
 800978c:	080129a4 	.word	0x080129a4

08009790 <acc_sensor_protocol_r2_wait_for_sync_start>:
 8009790:	b570      	push	{r4, r5, r6, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	ab03      	add	r3, sp, #12
 8009796:	2264      	movs	r2, #100	; 0x64
 8009798:	4605      	mov	r5, r0
 800979a:	f7ff fed9 	bl	8009550 <acc_sensor_protocol_r2_wait_for_event>
 800979e:	4604      	mov	r4, r0
 80097a0:	b178      	cbz	r0, 80097c2 <acc_sensor_protocol_r2_wait_for_sync_start+0x32>
 80097a2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80097a6:	2b06      	cmp	r3, #6
 80097a8:	d008      	beq.n	80097bc <acc_sensor_protocol_r2_wait_for_sync_start+0x2c>
 80097aa:	4a0a      	ldr	r2, [pc, #40]	; (80097d4 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80097b0:	4909      	ldr	r1, [pc, #36]	; (80097d8 <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 80097b2:	4a0a      	ldr	r2, [pc, #40]	; (80097dc <acc_sensor_protocol_r2_wait_for_sync_start+0x4c>)
 80097b4:	462b      	mov	r3, r5
 80097b6:	2000      	movs	r0, #0
 80097b8:	47a0      	blx	r4
 80097ba:	2400      	movs	r4, #0
 80097bc:	4620      	mov	r0, r4
 80097be:	b004      	add	sp, #16
 80097c0:	bd70      	pop	{r4, r5, r6, pc}
 80097c2:	4b04      	ldr	r3, [pc, #16]	; (80097d4 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 80097c4:	4a06      	ldr	r2, [pc, #24]	; (80097e0 <acc_sensor_protocol_r2_wait_for_sync_start+0x50>)
 80097c6:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80097c8:	4903      	ldr	r1, [pc, #12]	; (80097d8 <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 80097ca:	462b      	mov	r3, r5
 80097cc:	47b0      	blx	r6
 80097ce:	4620      	mov	r0, r4
 80097d0:	b004      	add	sp, #16
 80097d2:	bd70      	pop	{r4, r5, r6, pc}
 80097d4:	2000082c 	.word	0x2000082c
 80097d8:	080126c4 	.word	0x080126c4
 80097dc:	08012a0c 	.word	0x08012a0c
 80097e0:	080129d8 	.word	0x080129d8

080097e4 <acc_sensor_protocol_r2_transfer_data>:
 80097e4:	b530      	push	{r4, r5, lr}
 80097e6:	b083      	sub	sp, #12
 80097e8:	4613      	mov	r3, r2
 80097ea:	9201      	str	r2, [sp, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	4605      	mov	r5, r0
 80097f0:	f7ff fa80 	bl	8008cf4 <acc_sensor_r2_buffer_processed_read>
 80097f4:	9b01      	ldr	r3, [sp, #4]
 80097f6:	4604      	mov	r4, r0
 80097f8:	4602      	mov	r2, r0
 80097fa:	4629      	mov	r1, r5
 80097fc:	2000      	movs	r0, #0
 80097fe:	f000 fa85 	bl	8009d0c <acc_probes_execute_uint16>
 8009802:	4620      	mov	r0, r4
 8009804:	b003      	add	sp, #12
 8009806:	bd30      	pop	{r4, r5, pc}

08009808 <acc_sensor_protocol_r2_check_asic_id>:
 8009808:	b530      	push	{r4, r5, lr}
 800980a:	2400      	movs	r4, #0
 800980c:	b085      	sub	sp, #20
 800980e:	f10d 020e 	add.w	r2, sp, #14
 8009812:	460d      	mov	r5, r1
 8009814:	4621      	mov	r1, r4
 8009816:	f8ad 400e 	strh.w	r4, [sp, #14]
 800981a:	f000 fabd 	bl	8009d98 <acc_sensor_reg_read>
 800981e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8009822:	f241 1312 	movw	r3, #4370	; 0x1112
 8009826:	429a      	cmp	r2, r3
 8009828:	d00a      	beq.n	8009840 <acc_sensor_protocol_r2_check_asic_id+0x38>
 800982a:	b965      	cbnz	r5, 8009846 <acc_sensor_protocol_r2_check_asic_id+0x3e>
 800982c:	4907      	ldr	r1, [pc, #28]	; (800984c <acc_sensor_protocol_r2_check_asic_id+0x44>)
 800982e:	9200      	str	r2, [sp, #0]
 8009830:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8009832:	4a07      	ldr	r2, [pc, #28]	; (8009850 <acc_sensor_protocol_r2_check_asic_id+0x48>)
 8009834:	4907      	ldr	r1, [pc, #28]	; (8009854 <acc_sensor_protocol_r2_check_asic_id+0x4c>)
 8009836:	4628      	mov	r0, r5
 8009838:	47a0      	blx	r4
 800983a:	4628      	mov	r0, r5
 800983c:	b005      	add	sp, #20
 800983e:	bd30      	pop	{r4, r5, pc}
 8009840:	2001      	movs	r0, #1
 8009842:	b005      	add	sp, #20
 8009844:	bd30      	pop	{r4, r5, pc}
 8009846:	4620      	mov	r0, r4
 8009848:	b005      	add	sp, #20
 800984a:	bd30      	pop	{r4, r5, pc}
 800984c:	2000082c 	.word	0x2000082c
 8009850:	08012a48 	.word	0x08012a48
 8009854:	080126c4 	.word	0x080126c4

08009858 <acc_sweep_manager_prepare>:
 8009858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800985c:	4680      	mov	r8, r0
 800985e:	b095      	sub	sp, #84	; 0x54
 8009860:	4608      	mov	r0, r1
 8009862:	460c      	mov	r4, r1
 8009864:	4617      	mov	r7, r2
 8009866:	4699      	mov	r9, r3
 8009868:	f7fd fa98 	bl	8006d9c <acc_base_configuration_sensor_get>
 800986c:	4601      	mov	r1, r0
 800986e:	4620      	mov	r0, r4
 8009870:	9101      	str	r1, [sp, #4]
 8009872:	f7fd fbf1 	bl	8007058 <acc_base_configuration_wg_duration_get>
 8009876:	4603      	mov	r3, r0
 8009878:	4620      	mov	r0, r4
 800987a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800987e:	f7fd fbd7 	bl	8007030 <acc_base_configuration_integrator_get>
 8009882:	4603      	mov	r3, r0
 8009884:	4620      	mov	r0, r4
 8009886:	f8ad 300e 	strh.w	r3, [sp, #14]
 800988a:	f7fd fbf9 	bl	8007080 <acc_base_configuration_integrator_ramp_up_get>
 800988e:	4603      	mov	r3, r0
 8009890:	4620      	mov	r0, r4
 8009892:	f8ad 3010 	strh.w	r3, [sp, #16]
 8009896:	f7fd faf5 	bl	8006e84 <acc_base_configuration_decrease_tx_emission_get>
 800989a:	4605      	mov	r5, r0
 800989c:	2304      	movs	r3, #4
 800989e:	9901      	ldr	r1, [sp, #4]
 80098a0:	f8ad 5012 	strh.w	r5, [sp, #18]
 80098a4:	aa03      	add	r2, sp, #12
 80098a6:	f108 0514 	add.w	r5, r8, #20
 80098aa:	2012      	movs	r0, #18
 80098ac:	f000 fa2e 	bl	8009d0c <acc_probes_execute_uint16>
 80098b0:	2220      	movs	r2, #32
 80098b2:	2100      	movs	r1, #0
 80098b4:	4628      	mov	r0, r5
 80098b6:	f006 f837 	bl	800f928 <memset>
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	4628      	mov	r0, r5
 80098be:	4621      	mov	r1, r4
 80098c0:	4798      	blx	r3
 80098c2:	4606      	mov	r6, r0
 80098c4:	2800      	cmp	r0, #0
 80098c6:	d04e      	beq.n	8009966 <acc_sweep_manager_prepare+0x10e>
 80098c8:	2220      	movs	r2, #32
 80098ca:	2100      	movs	r1, #0
 80098cc:	a80c      	add	r0, sp, #48	; 0x30
 80098ce:	f006 f82b 	bl	800f928 <memset>
 80098d2:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 80098d6:	2100      	movs	r1, #0
 80098d8:	6806      	ldr	r6, [r0, #0]
 80098da:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80098de:	e9cd 1105 	strd	r1, r1, [sp, #20]
 80098e2:	e9cd 1107 	strd	r1, r1, [sp, #28]
 80098e6:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
 80098ea:	aa0c      	add	r2, sp, #48	; 0x30
 80098ec:	ab05      	add	r3, sp, #20
 80098ee:	4621      	mov	r1, r4
 80098f0:	4628      	mov	r0, r5
 80098f2:	47b0      	blx	r6
 80098f4:	4606      	mov	r6, r0
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d039      	beq.n	800996e <acc_sweep_manager_prepare+0x116>
 80098fa:	b137      	cbz	r7, 800990a <acc_sweep_manager_prepare+0xb2>
 80098fc:	ad0c      	add	r5, sp, #48	; 0x30
 80098fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009900:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8009902:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009906:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 800990a:	f1b9 0f00 	cmp.w	r9, #0
 800990e:	d011      	beq.n	8009934 <acc_sweep_manager_prepare+0xdc>
 8009910:	ad05      	add	r5, sp, #20
 8009912:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009914:	f8c9 0000 	str.w	r0, [r9]
 8009918:	f8c9 1004 	str.w	r1, [r9, #4]
 800991c:	cd03      	ldmia	r5!, {r0, r1}
 800991e:	882d      	ldrh	r5, [r5, #0]
 8009920:	f8c9 2008 	str.w	r2, [r9, #8]
 8009924:	f8c9 300c 	str.w	r3, [r9, #12]
 8009928:	f8a9 5018 	strh.w	r5, [r9, #24]
 800992c:	f8c9 0010 	str.w	r0, [r9, #16]
 8009930:	f8c9 1014 	str.w	r1, [r9, #20]
 8009934:	4620      	mov	r0, r4
 8009936:	f7fd fb4b 	bl	8006fd0 <acc_base_configuration_repetition_mode_get>
 800993a:	2801      	cmp	r0, #1
 800993c:	d020      	beq.n	8009980 <acc_sweep_manager_prepare+0x128>
 800993e:	4620      	mov	r0, r4
 8009940:	f7fd fb4e 	bl	8006fe0 <acc_base_configuration_update_rate_get>
 8009944:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009988 <acc_sweep_manager_prepare+0x130>
 8009948:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800994c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009954:	ee17 3a90 	vmov	r3, s15
 8009958:	2200      	movs	r2, #0
 800995a:	f8c8 3000 	str.w	r3, [r8]
 800995e:	f8c8 2008 	str.w	r2, [r8, #8]
 8009962:	f8a8 2006 	strh.w	r2, [r8, #6]
 8009966:	4630      	mov	r0, r6
 8009968:	b015      	add	sp, #84	; 0x54
 800996a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800996e:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8009972:	4628      	mov	r0, r5
 8009974:	6a1b      	ldr	r3, [r3, #32]
 8009976:	4798      	blx	r3
 8009978:	4630      	mov	r0, r6
 800997a:	b015      	add	sp, #84	; 0x54
 800997c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009980:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009984:	e7e8      	b.n	8009958 <acc_sweep_manager_prepare+0x100>
 8009986:	bf00      	nop
 8009988:	44fa0000 	.word	0x44fa0000

0800998c <acc_sweep_manager_release>:
 800998c:	b120      	cbz	r0, 8009998 <acc_sweep_manager_release+0xc>
 800998e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009990:	b113      	cbz	r3, 8009998 <acc_sweep_manager_release+0xc>
 8009992:	6a1b      	ldr	r3, [r3, #32]
 8009994:	3014      	adds	r0, #20
 8009996:	4718      	bx	r3
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop

0800999c <acc_sweep_manager_is_sensor_connected>:
 800999c:	3014      	adds	r0, #20
 800999e:	f003 bca9 	b.w	800d2f4 <acc_radar_engine_check_asic_id>
 80099a2:	bf00      	nop

080099a4 <acc_sweep_manager_calibrate>:
 80099a4:	b410      	push	{r4}
 80099a6:	4604      	mov	r4, r0
 80099a8:	3014      	adds	r0, #20
 80099aa:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80099ac:	68a4      	ldr	r4, [r4, #8]
 80099ae:	46a4      	mov	ip, r4
 80099b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099b4:	4760      	bx	ip
 80099b6:	bf00      	nop

080099b8 <acc_sweep_manager_measure_noise>:
 80099b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099bc:	4604      	mov	r4, r0
 80099be:	e9d0 050a 	ldrd	r0, r5, [r0, #40]	; 0x28
 80099c2:	686f      	ldr	r7, [r5, #4]
 80099c4:	461e      	mov	r6, r3
 80099c6:	4615      	mov	r5, r2
 80099c8:	47b8      	blx	r7
 80099ca:	b140      	cbz	r0, 80099de <acc_sweep_manager_measure_noise+0x26>
 80099cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80099ce:	4632      	mov	r2, r6
 80099d0:	4629      	mov	r1, r5
 80099d2:	f104 0014 	add.w	r0, r4, #20
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099dc:	4718      	bx	r3
 80099de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e2:	bf00      	nop

080099e4 <acc_sweep_manager_start>:
 80099e4:	b570      	push	{r4, r5, r6, lr}
 80099e6:	4604      	mov	r4, r0
 80099e8:	e9d0 030a 	ldrd	r0, r3, [r0, #40]	; 0x28
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	4615      	mov	r5, r2
 80099f0:	4798      	blx	r3
 80099f2:	b138      	cbz	r0, 8009a04 <acc_sweep_manager_start+0x20>
 80099f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80099f6:	4629      	mov	r1, r5
 80099f8:	f104 0014 	add.w	r0, r4, #20
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a02:	4718      	bx	r3
 8009a04:	bd70      	pop	{r4, r5, r6, pc}
 8009a06:	bf00      	nop

08009a08 <acc_sweep_manager_wait_for_data>:
 8009a08:	f850 1b14 	ldr.w	r1, [r0], #20
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f003 bc75 	b.w	800d2fc <acc_radar_engine_wait_for_radar_data>
 8009a12:	bf00      	nop

08009a14 <acc_sweep_manager_wait_for_hibernate_ready>:
 8009a14:	f850 1b14 	ldr.w	r1, [r0], #20
 8009a18:	f003 bc78 	b.w	800d30c <acc_radar_engine_wait_for_hibernate_ready>

08009a1c <acc_sweep_manager_measure>:
 8009a1c:	3014      	adds	r0, #20
 8009a1e:	f003 bc71 	b.w	800d304 <acc_radar_engine_measure>
 8009a22:	bf00      	nop

08009a24 <acc_sweep_manager_acquire_adc_data>:
 8009a24:	b570      	push	{r4, r5, r6, lr}
 8009a26:	2300      	movs	r3, #0
 8009a28:	b084      	sub	sp, #16
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	6043      	str	r3, [r0, #4]
 8009a2e:	6083      	str	r3, [r0, #8]
 8009a30:	60c3      	str	r3, [r0, #12]
 8009a32:	6103      	str	r3, [r0, #16]
 8009a34:	466a      	mov	r2, sp
 8009a36:	3014      	adds	r0, #20
 8009a38:	f003 fc6c 	bl	800d314 <acc_radar_engine_acquire_adc_data>
 8009a3c:	9b02      	ldr	r3, [sp, #8]
 8009a3e:	f8bd 6000 	ldrh.w	r6, [sp]
 8009a42:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8009a46:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8009a4a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009a4e:	60a0      	str	r0, [r4, #8]
 8009a50:	1d20      	adds	r0, r4, #4
 8009a52:	80e6      	strh	r6, [r4, #6]
 8009a54:	80a5      	strh	r5, [r4, #4]
 8009a56:	7321      	strb	r1, [r4, #12]
 8009a58:	7362      	strb	r2, [r4, #13]
 8009a5a:	6123      	str	r3, [r4, #16]
 8009a5c:	b004      	add	sp, #16
 8009a5e:	bd70      	pop	{r4, r5, r6, pc}

08009a60 <acc_alg_cca_u16_calculate>:
 8009a60:	2901      	cmp	r1, #1
 8009a62:	b538      	push	{r3, r4, r5, lr}
 8009a64:	d925      	bls.n	8009ab2 <acc_alg_cca_u16_calculate+0x52>
 8009a66:	1e8d      	subs	r5, r1, #2
 8009a68:	1c83      	adds	r3, r0, #2
 8009a6a:	b2ad      	uxth	r5, r5
 8009a6c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8009a70:	2400      	movs	r4, #0
 8009a72:	4602      	mov	r2, r0
 8009a74:	3002      	adds	r0, #2
 8009a76:	8853      	ldrh	r3, [r2, #2]
 8009a78:	8812      	ldrh	r2, [r2, #0]
 8009a7a:	1a9b      	subs	r3, r3, r2
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	bfb8      	it	lt
 8009a80:	425b      	neglt	r3, r3
 8009a82:	4285      	cmp	r5, r0
 8009a84:	441c      	add	r4, r3
 8009a86:	d1f4      	bne.n	8009a72 <acc_alg_cca_u16_calculate+0x12>
 8009a88:	ee07 4a90 	vmov	s15, r4
 8009a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a90:	ee07 1a10 	vmov	s14, r1
 8009a94:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8009a98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a9c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009aa0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8009aa4:	f007 fe10 	bl	80116c8 <log10f>
 8009aa8:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8009aac:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009ab0:	bd38      	pop	{r3, r4, r5, pc}
 8009ab2:	eddf 7a01 	vldr	s15, [pc, #4]	; 8009ab8 <acc_alg_cca_u16_calculate+0x58>
 8009ab6:	e7eb      	b.n	8009a90 <acc_alg_cca_u16_calculate+0x30>
 8009ab8:	00000000 	.word	0x00000000

08009abc <acc_assert_fail>:
 8009abc:	b500      	push	{lr}
 8009abe:	4b07      	ldr	r3, [pc, #28]	; (8009adc <acc_assert_fail+0x20>)
 8009ac0:	4a07      	ldr	r2, [pc, #28]	; (8009ae0 <acc_assert_fail+0x24>)
 8009ac2:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009ac4:	b083      	sub	sp, #12
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	9100      	str	r1, [sp, #0]
 8009aca:	2000      	movs	r0, #0
 8009acc:	4905      	ldr	r1, [pc, #20]	; (8009ae4 <acc_assert_fail+0x28>)
 8009ace:	47a0      	blx	r4
 8009ad0:	4b05      	ldr	r3, [pc, #20]	; (8009ae8 <acc_assert_fail+0x2c>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	b103      	cbz	r3, 8009ad8 <acc_assert_fail+0x1c>
 8009ad6:	4798      	blx	r3
 8009ad8:	e7fe      	b.n	8009ad8 <acc_assert_fail+0x1c>
 8009ada:	bf00      	nop
 8009adc:	2000082c 	.word	0x2000082c
 8009ae0:	08012bd8 	.word	0x08012bd8
 8009ae4:	08012bf0 	.word	0x08012bf0
 8009ae8:	200006d8 	.word	0x200006d8

08009aec <acc_diagnostic_log_set_scope>:
 8009aec:	4b02      	ldr	r3, [pc, #8]	; (8009af8 <acc_diagnostic_log_set_scope+0xc>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	b10b      	cbz	r3, 8009af6 <acc_diagnostic_log_set_scope+0xa>
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4718      	bx	r3
 8009af6:	4770      	bx	lr
 8009af8:	200006dc 	.word	0x200006dc

08009afc <acc_diagnostic_log_declare_parameter>:
 8009afc:	4b02      	ldr	r3, [pc, #8]	; (8009b08 <acc_diagnostic_log_declare_parameter+0xc>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	b10b      	cbz	r3, 8009b06 <acc_diagnostic_log_declare_parameter+0xa>
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	4718      	bx	r3
 8009b06:	4770      	bx	lr
 8009b08:	200006dc 	.word	0x200006dc

08009b0c <acc_diagnostic_log_set_parameter>:
 8009b0c:	4b02      	ldr	r3, [pc, #8]	; (8009b18 <acc_diagnostic_log_set_parameter+0xc>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	b10b      	cbz	r3, 8009b16 <acc_diagnostic_log_set_parameter+0xa>
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	4718      	bx	r3
 8009b16:	4770      	bx	lr
 8009b18:	200006dc 	.word	0x200006dc

08009b1c <acc_diagnostic_log_array>:
 8009b1c:	4b02      	ldr	r3, [pc, #8]	; (8009b28 <acc_diagnostic_log_array+0xc>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	b10b      	cbz	r3, 8009b26 <acc_diagnostic_log_array+0xa>
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	4718      	bx	r3
 8009b26:	4770      	bx	lr
 8009b28:	200006dc 	.word	0x200006dc

08009b2c <acc_diagnostic_log_scalar>:
 8009b2c:	4b02      	ldr	r3, [pc, #8]	; (8009b38 <acc_diagnostic_log_scalar+0xc>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	b10b      	cbz	r3, 8009b36 <acc_diagnostic_log_scalar+0xa>
 8009b32:	695b      	ldr	r3, [r3, #20]
 8009b34:	4718      	bx	r3
 8009b36:	4770      	bx	lr
 8009b38:	200006dc 	.word	0x200006dc

08009b3c <acc_diagnostic_log_data_u16>:
 8009b3c:	4b02      	ldr	r3, [pc, #8]	; (8009b48 <acc_diagnostic_log_data_u16+0xc>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	b10b      	cbz	r3, 8009b46 <acc_diagnostic_log_data_u16+0xa>
 8009b42:	6a1b      	ldr	r3, [r3, #32]
 8009b44:	4718      	bx	r3
 8009b46:	4770      	bx	lr
 8009b48:	200006dc 	.word	0x200006dc

08009b4c <acc_diagnostic_log_data_i16>:
 8009b4c:	4b02      	ldr	r3, [pc, #8]	; (8009b58 <acc_diagnostic_log_data_i16+0xc>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	b10b      	cbz	r3, 8009b56 <acc_diagnostic_log_data_i16+0xa>
 8009b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b54:	4718      	bx	r3
 8009b56:	4770      	bx	lr
 8009b58:	200006dc 	.word	0x200006dc

08009b5c <acc_diagnostic_log_data_u8>:
 8009b5c:	4b02      	ldr	r3, [pc, #8]	; (8009b68 <acc_diagnostic_log_data_u8+0xc>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	b10b      	cbz	r3, 8009b66 <acc_diagnostic_log_data_u8+0xa>
 8009b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b64:	4718      	bx	r3
 8009b66:	4770      	bx	lr
 8009b68:	200006dc 	.word	0x200006dc

08009b6c <acc_element_sizeof>:
 8009b6c:	3801      	subs	r0, #1
 8009b6e:	b2c0      	uxtb	r0, r0
 8009b70:	2807      	cmp	r0, #7
 8009b72:	bf9a      	itte	ls
 8009b74:	4b02      	ldrls	r3, [pc, #8]	; (8009b80 <acc_element_sizeof+0x14>)
 8009b76:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8009b7a:	2000      	movhi	r0, #0
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	08012bf8 	.word	0x08012bf8

08009b84 <acc_element_connect>:
 8009b84:	6001      	str	r1, [r0, #0]
 8009b86:	4770      	bx	lr

08009b88 <event>:
 8009b88:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8009b8a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8009b8c:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 8009b90:	6811      	ldr	r1, [r2, #0]
 8009b92:	b570      	push	{r4, r5, r6, lr}
 8009b94:	4604      	mov	r4, r0
 8009b96:	e9d0 0504 	ldrd	r0, r5, [r0, #16]
 8009b9a:	4798      	blx	r3
 8009b9c:	6823      	ldr	r3, [r4, #0]
 8009b9e:	7028      	strb	r0, [r5, #0]
 8009ba0:	685a      	ldr	r2, [r3, #4]
 8009ba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	4710      	bx	r2
 8009baa:	bf00      	nop

08009bac <reset>:
 8009bac:	6800      	ldr	r0, [r0, #0]
 8009bae:	68c3      	ldr	r3, [r0, #12]
 8009bb0:	4718      	bx	r3
 8009bb2:	bf00      	nop

08009bb4 <validate>:
 8009bb4:	6983      	ldr	r3, [r0, #24]
 8009bb6:	b510      	push	{r4, lr}
 8009bb8:	4604      	mov	r4, r0
 8009bba:	b113      	cbz	r3, 8009bc2 <validate+0xe>
 8009bbc:	f7fd fd5a 	bl	8007674 <acc_rss_integration_log_level>
 8009bc0:	b978      	cbnz	r0, 8009be2 <validate+0x2e>
 8009bc2:	69e3      	ldr	r3, [r4, #28]
 8009bc4:	b143      	cbz	r3, 8009bd8 <validate+0x24>
 8009bc6:	f7fd fd55 	bl	8007674 <acc_rss_integration_log_level>
 8009bca:	b128      	cbz	r0, 8009bd8 <validate+0x24>
 8009bcc:	4b08      	ldr	r3, [pc, #32]	; (8009bf0 <validate+0x3c>)
 8009bce:	4a09      	ldr	r2, [pc, #36]	; (8009bf4 <validate+0x40>)
 8009bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bd2:	4909      	ldr	r1, [pc, #36]	; (8009bf8 <validate+0x44>)
 8009bd4:	2001      	movs	r0, #1
 8009bd6:	4798      	blx	r3
 8009bd8:	6820      	ldr	r0, [r4, #0]
 8009bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bde:	6883      	ldr	r3, [r0, #8]
 8009be0:	4718      	bx	r3
 8009be2:	4b03      	ldr	r3, [pc, #12]	; (8009bf0 <validate+0x3c>)
 8009be4:	4a05      	ldr	r2, [pc, #20]	; (8009bfc <validate+0x48>)
 8009be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be8:	4903      	ldr	r1, [pc, #12]	; (8009bf8 <validate+0x44>)
 8009bea:	2001      	movs	r0, #1
 8009bec:	4798      	blx	r3
 8009bee:	e7e8      	b.n	8009bc2 <validate+0xe>
 8009bf0:	2000082c 	.word	0x2000082c
 8009bf4:	08012c48 	.word	0x08012c48
 8009bf8:	08012c2c 	.word	0x08012c2c
 8009bfc:	08012c18 	.word	0x08012c18

08009c00 <saturation_check_i16>:
 8009c00:	f003 be8e 	b.w	800d920 <acc_alg_basic_saturation_check_i16>

08009c04 <saturation_check_u16>:
 8009c04:	f003 be58 	b.w	800d8b8 <acc_alg_basic_saturation_check_u16>

08009c08 <acc_element_saturation_check_init>:
 8009c08:	2903      	cmp	r1, #3
 8009c0a:	ed80 0a0e 	vstr	s0, [r0, #56]	; 0x38
 8009c0e:	d00e      	beq.n	8009c2e <acc_element_saturation_check_init+0x26>
 8009c10:	2905      	cmp	r1, #5
 8009c12:	d016      	beq.n	8009c42 <acc_element_saturation_check_init+0x3a>
 8009c14:	2902      	cmp	r1, #2
 8009c16:	d014      	beq.n	8009c42 <acc_element_saturation_check_init+0x3a>
 8009c18:	b510      	push	{r4, lr}
 8009c1a:	4b0b      	ldr	r3, [pc, #44]	; (8009c48 <acc_element_saturation_check_init+0x40>)
 8009c1c:	4a0b      	ldr	r2, [pc, #44]	; (8009c4c <acc_element_saturation_check_init+0x44>)
 8009c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c20:	490b      	ldr	r1, [pc, #44]	; (8009c50 <acc_element_saturation_check_init+0x48>)
 8009c22:	2400      	movs	r4, #0
 8009c24:	63c4      	str	r4, [r0, #60]	; 0x3c
 8009c26:	4620      	mov	r0, r4
 8009c28:	4798      	blx	r3
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	bd10      	pop	{r4, pc}
 8009c2e:	4b09      	ldr	r3, [pc, #36]	; (8009c54 <acc_element_saturation_check_init+0x4c>)
 8009c30:	63c3      	str	r3, [r0, #60]	; 0x3c
 8009c32:	4909      	ldr	r1, [pc, #36]	; (8009c58 <acc_element_saturation_check_init+0x50>)
 8009c34:	4a09      	ldr	r2, [pc, #36]	; (8009c5c <acc_element_saturation_check_init+0x54>)
 8009c36:	4b0a      	ldr	r3, [pc, #40]	; (8009c60 <acc_element_saturation_check_init+0x58>)
 8009c38:	60c3      	str	r3, [r0, #12]
 8009c3a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8009c3e:	2001      	movs	r0, #1
 8009c40:	4770      	bx	lr
 8009c42:	4b08      	ldr	r3, [pc, #32]	; (8009c64 <acc_element_saturation_check_init+0x5c>)
 8009c44:	63c3      	str	r3, [r0, #60]	; 0x3c
 8009c46:	e7f4      	b.n	8009c32 <acc_element_saturation_check_init+0x2a>
 8009c48:	2000082c 	.word	0x2000082c
 8009c4c:	08012c58 	.word	0x08012c58
 8009c50:	08012c2c 	.word	0x08012c2c
 8009c54:	08009c01 	.word	0x08009c01
 8009c58:	08009b89 	.word	0x08009b89
 8009c5c:	08009bb5 	.word	0x08009bb5
 8009c60:	08009bad 	.word	0x08009bad
 8009c64:	08009c05 	.word	0x08009c05

08009c68 <consume>:
 8009c68:	b510      	push	{r4, lr}
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	e9d0 230f 	ldrd	r2, r3, [r0, #60]	; 0x3c
 8009c70:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8009c72:	6900      	ldr	r0, [r0, #16]
 8009c74:	4798      	blx	r3
 8009c76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009c78:	2200      	movs	r2, #0
 8009c7a:	611a      	str	r2, [r3, #16]
 8009c7c:	bd10      	pop	{r4, pc}
 8009c7e:	bf00      	nop

08009c80 <reset>:
 8009c80:	4770      	bx	lr
 8009c82:	bf00      	nop

08009c84 <validate>:
 8009c84:	6983      	ldr	r3, [r0, #24]
 8009c86:	b510      	push	{r4, lr}
 8009c88:	4604      	mov	r4, r0
 8009c8a:	b113      	cbz	r3, 8009c92 <validate+0xe>
 8009c8c:	f7fd fcf2 	bl	8007674 <acc_rss_integration_log_level>
 8009c90:	b9c8      	cbnz	r0, 8009cc6 <validate+0x42>
 8009c92:	69e3      	ldr	r3, [r4, #28]
 8009c94:	b113      	cbz	r3, 8009c9c <validate+0x18>
 8009c96:	f7fd fced 	bl	8007674 <acc_rss_integration_log_level>
 8009c9a:	b948      	cbnz	r0, 8009cb0 <validate+0x2c>
 8009c9c:	6963      	ldr	r3, [r4, #20]
 8009c9e:	b183      	cbz	r3, 8009cc2 <validate+0x3e>
 8009ca0:	4b0c      	ldr	r3, [pc, #48]	; (8009cd4 <validate+0x50>)
 8009ca2:	4a0d      	ldr	r2, [pc, #52]	; (8009cd8 <validate+0x54>)
 8009ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ca6:	490d      	ldr	r1, [pc, #52]	; (8009cdc <validate+0x58>)
 8009ca8:	2000      	movs	r0, #0
 8009caa:	4798      	blx	r3
 8009cac:	2000      	movs	r0, #0
 8009cae:	bd10      	pop	{r4, pc}
 8009cb0:	4b08      	ldr	r3, [pc, #32]	; (8009cd4 <validate+0x50>)
 8009cb2:	4a0b      	ldr	r2, [pc, #44]	; (8009ce0 <validate+0x5c>)
 8009cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb6:	4909      	ldr	r1, [pc, #36]	; (8009cdc <validate+0x58>)
 8009cb8:	2001      	movs	r0, #1
 8009cba:	4798      	blx	r3
 8009cbc:	6963      	ldr	r3, [r4, #20]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1ee      	bne.n	8009ca0 <validate+0x1c>
 8009cc2:	2001      	movs	r0, #1
 8009cc4:	bd10      	pop	{r4, pc}
 8009cc6:	4b03      	ldr	r3, [pc, #12]	; (8009cd4 <validate+0x50>)
 8009cc8:	4a06      	ldr	r2, [pc, #24]	; (8009ce4 <validate+0x60>)
 8009cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ccc:	4903      	ldr	r1, [pc, #12]	; (8009cdc <validate+0x58>)
 8009cce:	2001      	movs	r0, #1
 8009cd0:	4798      	blx	r3
 8009cd2:	e7de      	b.n	8009c92 <validate+0xe>
 8009cd4:	2000082c 	.word	0x2000082c
 8009cd8:	08012c84 	.word	0x08012c84
 8009cdc:	08012c6c 	.word	0x08012c6c
 8009ce0:	08012c48 	.word	0x08012c48
 8009ce4:	08012c18 	.word	0x08012c18

08009ce8 <acc_element_sink_callback_init>:
 8009ce8:	b410      	push	{r4}
 8009cea:	4a05      	ldr	r2, [pc, #20]	; (8009d00 <acc_element_sink_callback_init+0x18>)
 8009cec:	4c05      	ldr	r4, [pc, #20]	; (8009d04 <acc_element_sink_callback_init+0x1c>)
 8009cee:	4b06      	ldr	r3, [pc, #24]	; (8009d08 <acc_element_sink_callback_init+0x20>)
 8009cf0:	6401      	str	r1, [r0, #64]	; 0x40
 8009cf2:	e9c0 4201 	strd	r4, r2, [r0, #4]
 8009cf6:	60c3      	str	r3, [r0, #12]
 8009cf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	08009c85 	.word	0x08009c85
 8009d04:	08009c69 	.word	0x08009c69
 8009d08:	08009c81 	.word	0x08009c81

08009d0c <acc_probes_execute_uint16>:
 8009d0c:	b530      	push	{r4, r5, lr}
 8009d0e:	4c09      	ldr	r4, [pc, #36]	; (8009d34 <acc_probes_execute_uint16+0x28>)
 8009d10:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 8009d14:	b085      	sub	sp, #20
 8009d16:	6865      	ldr	r5, [r4, #4]
 8009d18:	f88d 0004 	strb.w	r0, [sp, #4]
 8009d1c:	2001      	movs	r0, #1
 8009d1e:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8009d22:	b12d      	cbz	r5, 8009d30 <acc_probes_execute_uint16+0x24>
 8009d24:	4611      	mov	r1, r2
 8009d26:	461a      	mov	r2, r3
 8009d28:	4082      	lsls	r2, r0
 8009d2a:	68e3      	ldr	r3, [r4, #12]
 8009d2c:	a801      	add	r0, sp, #4
 8009d2e:	47a8      	blx	r5
 8009d30:	b005      	add	sp, #20
 8009d32:	bd30      	pop	{r4, r5, pc}
 8009d34:	20000024 	.word	0x20000024

08009d38 <acc_probes_execute_struct>:
 8009d38:	b530      	push	{r4, r5, lr}
 8009d3a:	4c0a      	ldr	r4, [pc, #40]	; (8009d64 <acc_probes_execute_struct+0x2c>)
 8009d3c:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 8009d40:	b085      	sub	sp, #20
 8009d42:	6865      	ldr	r5, [r4, #4]
 8009d44:	f88d 0004 	strb.w	r0, [sp, #4]
 8009d48:	2007      	movs	r0, #7
 8009d4a:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8009d4e:	b135      	cbz	r5, 8009d5e <acc_probes_execute_struct+0x26>
 8009d50:	4611      	mov	r1, r2
 8009d52:	a801      	add	r0, sp, #4
 8009d54:	461a      	mov	r2, r3
 8009d56:	68e3      	ldr	r3, [r4, #12]
 8009d58:	47a8      	blx	r5
 8009d5a:	b005      	add	sp, #20
 8009d5c:	bd30      	pop	{r4, r5, pc}
 8009d5e:	2001      	movs	r0, #1
 8009d60:	b005      	add	sp, #20
 8009d62:	bd30      	pop	{r4, r5, pc}
 8009d64:	20000024 	.word	0x20000024

08009d68 <acc_probes_execute_primitive_probe>:
 8009d68:	b510      	push	{r4, lr}
 8009d6a:	4b0a      	ldr	r3, [pc, #40]	; (8009d94 <acc_probes_execute_primitive_probe+0x2c>)
 8009d6c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8009d70:	b084      	sub	sp, #16
 8009d72:	685c      	ldr	r4, [r3, #4]
 8009d74:	f88d 0004 	strb.w	r0, [sp, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009d7e:	b12c      	cbz	r4, 8009d8c <acc_probes_execute_primitive_probe+0x24>
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	4611      	mov	r1, r2
 8009d84:	a801      	add	r0, sp, #4
 8009d86:	47a0      	blx	r4
 8009d88:	b004      	add	sp, #16
 8009d8a:	bd10      	pop	{r4, pc}
 8009d8c:	2001      	movs	r0, #1
 8009d8e:	b004      	add	sp, #16
 8009d90:	bd10      	pop	{r4, pc}
 8009d92:	bf00      	nop
 8009d94:	20000024 	.word	0x20000024

08009d98 <acc_sensor_reg_read>:
 8009d98:	b530      	push	{r4, r5, lr}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 8009da0:	4614      	mov	r4, r2
 8009da2:	2500      	movs	r5, #0
 8009da4:	f8ad 1000 	strh.w	r1, [sp]
 8009da8:	2301      	movs	r3, #1
 8009daa:	2203      	movs	r2, #3
 8009dac:	4669      	mov	r1, sp
 8009dae:	f8ad 5002 	strh.w	r5, [sp, #2]
 8009db2:	f8ad 5004 	strh.w	r5, [sp, #4]
 8009db6:	f7fd fbe3 	bl	8007580 <acc_rss_integration_sensor_device_transfer>
 8009dba:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009dbe:	8023      	strh	r3, [r4, #0]
 8009dc0:	b003      	add	sp, #12
 8009dc2:	bd30      	pop	{r4, r5, pc}

08009dc4 <acc_sensor_reg_write>:
 8009dc4:	b530      	push	{r4, r5, lr}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	f441 5480 	orr.w	r4, r1, #4096	; 0x1000
 8009dcc:	4615      	mov	r5, r2
 8009dce:	2300      	movs	r3, #0
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	a901      	add	r1, sp, #4
 8009dd4:	f8ad 4004 	strh.w	r4, [sp, #4]
 8009dd8:	f8ad 5006 	strh.w	r5, [sp, #6]
 8009ddc:	f7fd fbd0 	bl	8007580 <acc_rss_integration_sensor_device_transfer>
 8009de0:	b003      	add	sp, #12
 8009de2:	bd30      	pop	{r4, r5, pc}

08009de4 <acc_sensor_reg_field_write>:
 8009de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009de8:	b082      	sub	sp, #8
 8009dea:	461d      	mov	r5, r3
 8009dec:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8009df0:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 8009df4:	f8ad 3000 	strh.w	r3, [sp]
 8009df8:	2700      	movs	r7, #0
 8009dfa:	468a      	mov	sl, r1
 8009dfc:	4691      	mov	r9, r2
 8009dfe:	4669      	mov	r1, sp
 8009e00:	2301      	movs	r3, #1
 8009e02:	2203      	movs	r2, #3
 8009e04:	4680      	mov	r8, r0
 8009e06:	f8ad 7002 	strh.w	r7, [sp, #2]
 8009e0a:	f8ad 7004 	strh.w	r7, [sp, #4]
 8009e0e:	f7fd fbb7 	bl	8007580 <acc_rss_integration_sensor_device_transfer>
 8009e12:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8009e16:	fa04 f10a 	lsl.w	r1, r4, sl
 8009e1a:	4071      	eors	r1, r6
 8009e1c:	ea01 0409 	and.w	r4, r1, r9
 8009e20:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 8009e24:	4640      	mov	r0, r8
 8009e26:	463b      	mov	r3, r7
 8009e28:	4669      	mov	r1, sp
 8009e2a:	4074      	eors	r4, r6
 8009e2c:	2202      	movs	r2, #2
 8009e2e:	f8ad 5000 	strh.w	r5, [sp]
 8009e32:	f8ad 4002 	strh.w	r4, [sp, #2]
 8009e36:	f7fd fba3 	bl	8007580 <acc_rss_integration_sensor_device_transfer>
 8009e3a:	b002      	add	sp, #8
 8009e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009e40 <acc_sensor_conf_read_instr>:
 8009e40:	b530      	push	{r4, r5, lr}
 8009e42:	b085      	sub	sp, #20
 8009e44:	2401      	movs	r4, #1
 8009e46:	f441 4120 	orr.w	r1, r1, #40960	; 0xa000
 8009e4a:	4623      	mov	r3, r4
 8009e4c:	2500      	movs	r5, #0
 8009e4e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8009e52:	2205      	movs	r2, #5
 8009e54:	a901      	add	r1, sp, #4
 8009e56:	f8ad 4006 	strh.w	r4, [sp, #6]
 8009e5a:	f8ad 5008 	strh.w	r5, [sp, #8]
 8009e5e:	f8cd 500a 	str.w	r5, [sp, #10]
 8009e62:	f7fd fb8d 	bl	8007580 <acc_rss_integration_sensor_device_transfer>
 8009e66:	f10d 000a 	add.w	r0, sp, #10
 8009e6a:	4622      	mov	r2, r4
 8009e6c:	4669      	mov	r1, sp
 8009e6e:	f000 f92f 	bl	800a0d0 <acc_utils_transfer_buffer_to_uint32>
 8009e72:	9800      	ldr	r0, [sp, #0]
 8009e74:	b005      	add	sp, #20
 8009e76:	bd30      	pop	{r4, r5, pc}

08009e78 <acc_cpd_pll_divisors_calculate>:
 8009e78:	edd0 7a00 	vldr	s15, [r0]
 8009e7c:	ed9f 6a61 	vldr	s12, [pc, #388]	; 800a004 <acc_cpd_pll_divisors_calculate+0x18c>
 8009e80:	eddf 6a61 	vldr	s13, [pc, #388]	; 800a008 <acc_cpd_pll_divisors_calculate+0x190>
 8009e84:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8009e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e8a:	4606      	mov	r6, r0
 8009e8c:	b083      	sub	sp, #12
 8009e8e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009e92:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009e96:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009e9a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ea2:	ee17 3a10 	vmov	r3, s14
 8009ea6:	b29c      	uxth	r4, r3
 8009ea8:	dc06      	bgt.n	8009eb8 <acc_cpd_pll_divisors_calculate+0x40>
 8009eaa:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800a00c <acc_cpd_pll_divisors_calculate+0x194>
 8009eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eb6:	d571      	bpl.n	8009f9c <acc_cpd_pll_divisors_calculate+0x124>
 8009eb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ec0:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800a010 <acc_cpd_pll_divisors_calculate+0x198>
 8009ec4:	bf4c      	ite	mi
 8009ec6:	4b53      	ldrmi	r3, [pc, #332]	; (800a014 <acc_cpd_pll_divisors_calculate+0x19c>)
 8009ec8:	4b53      	ldrpl	r3, [pc, #332]	; (800a018 <acc_cpd_pll_divisors_calculate+0x1a0>)
 8009eca:	ed9f 6a51 	vldr	s12, [pc, #324]	; 800a010 <acc_cpd_pll_divisors_calculate+0x198>
 8009ece:	eddf 6a53 	vldr	s13, [pc, #332]	; 800a01c <acc_cpd_pll_divisors_calculate+0x1a4>
 8009ed2:	4d53      	ldr	r5, [pc, #332]	; (800a020 <acc_cpd_pll_divisors_calculate+0x1a8>)
 8009ed4:	4953      	ldr	r1, [pc, #332]	; (800a024 <acc_cpd_pll_divisors_calculate+0x1ac>)
 8009ed6:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8009ed8:	bf48      	it	mi
 8009eda:	eef1 7a67 	vnegmi.f32	s15, s15
 8009ede:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ee2:	2000      	movs	r0, #0
 8009ee4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8009ee8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ef0:	ee17 2a10 	vmov	r2, s14
 8009ef4:	bf4c      	ite	mi
 8009ef6:	eeb1 7a67 	vnegmi.f32	s14, s15
 8009efa:	eeb0 7a67 	vmovpl.f32	s14, s15
 8009efe:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009f02:	9200      	str	r2, [sp, #0]
 8009f04:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009f08:	4a47      	ldr	r2, [pc, #284]	; (800a028 <acc_cpd_pll_divisors_calculate+0x1b0>)
 8009f0a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009f0e:	3c10      	subs	r4, #16
 8009f10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009f14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f1c:	edcd 7a01 	vstr	s15, [sp, #4]
 8009f20:	47b8      	blx	r7
 8009f22:	2cef      	cmp	r4, #239	; 0xef
 8009f24:	d937      	bls.n	8009f96 <acc_cpd_pll_divisors_calculate+0x11e>
 8009f26:	edd6 7a00 	vldr	s15, [r6]
 8009f2a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800a010 <acc_cpd_pll_divisors_calculate+0x198>
 8009f2e:	ed9f 6a38 	vldr	s12, [pc, #224]	; 800a010 <acc_cpd_pll_divisors_calculate+0x198>
 8009f32:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800a01c <acc_cpd_pll_divisors_calculate+0x1a4>
 8009f36:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8009f38:	493a      	ldr	r1, [pc, #232]	; (800a024 <acc_cpd_pll_divisors_calculate+0x1ac>)
 8009f3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f42:	bf48      	it	mi
 8009f44:	eef1 7a67 	vnegmi.f32	s15, s15
 8009f48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f4c:	bf4c      	ite	mi
 8009f4e:	4b31      	ldrmi	r3, [pc, #196]	; (800a014 <acc_cpd_pll_divisors_calculate+0x19c>)
 8009f50:	4b31      	ldrpl	r3, [pc, #196]	; (800a018 <acc_cpd_pll_divisors_calculate+0x1a0>)
 8009f52:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8009f56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f5e:	ee17 2a10 	vmov	r2, s14
 8009f62:	bf4c      	ite	mi
 8009f64:	eeb1 7a67 	vnegmi.f32	s14, s15
 8009f68:	eeb0 7a67 	vmovpl.f32	s14, s15
 8009f6c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009f70:	9200      	str	r2, [sp, #0]
 8009f72:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009f76:	4a2c      	ldr	r2, [pc, #176]	; (800a028 <acc_cpd_pll_divisors_calculate+0x1b0>)
 8009f78:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009f7c:	2000      	movs	r0, #0
 8009f7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009f82:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f8a:	edcd 7a01 	vstr	s15, [sp, #4]
 8009f8e:	47a0      	blx	r4
 8009f90:	2000      	movs	r0, #0
 8009f92:	b003      	add	sp, #12
 8009f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f96:	2000      	movs	r0, #0
 8009f98:	b003      	add	sp, #12
 8009f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f9c:	f1a4 0310 	sub.w	r3, r4, #16
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	2bef      	cmp	r3, #239	; 0xef
 8009fa4:	d901      	bls.n	8009faa <acc_cpd_pll_divisors_calculate+0x132>
 8009fa6:	4d1e      	ldr	r5, [pc, #120]	; (800a020 <acc_cpd_pll_divisors_calculate+0x1a8>)
 8009fa8:	e7bf      	b.n	8009f2a <acc_cpd_pll_divisors_calculate+0xb2>
 8009faa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009fae:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a02c <acc_cpd_pll_divisors_calculate+0x1b4>
 8009fb2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800a030 <acc_cpd_pll_divisors_calculate+0x1b8>
 8009fb6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009fba:	2c3f      	cmp	r4, #63	; 0x3f
 8009fbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fc4:	ee17 2a90 	vmov	r2, s15
 8009fc8:	810a      	strh	r2, [r1, #8]
 8009fca:	d912      	bls.n	8009ff2 <acc_cpd_pll_divisors_calculate+0x17a>
 8009fcc:	2cbf      	cmp	r4, #191	; 0xbf
 8009fce:	f04f 0301 	mov.w	r3, #1
 8009fd2:	bf98      	it	ls
 8009fd4:	f1a4 0240 	subls.w	r2, r4, #64	; 0x40
 8009fd8:	804b      	strh	r3, [r1, #2]
 8009fda:	bf8c      	ite	hi
 8009fdc:	08e2      	lsrhi	r2, r4, #3
 8009fde:	f3c2 02cf 	ubfxls	r2, r2, #3, #16
 8009fe2:	f004 0307 	and.w	r3, r4, #7
 8009fe6:	808a      	strh	r2, [r1, #4]
 8009fe8:	80cb      	strh	r3, [r1, #6]
 8009fea:	2001      	movs	r0, #1
 8009fec:	800c      	strh	r4, [r1, #0]
 8009fee:	b003      	add	sp, #12
 8009ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	2c2f      	cmp	r4, #47	; 0x2f
 8009ff6:	bf88      	it	hi
 8009ff8:	4623      	movhi	r3, r4
 8009ffa:	808b      	strh	r3, [r1, #4]
 8009ffc:	804a      	strh	r2, [r1, #2]
 8009ffe:	80ca      	strh	r2, [r1, #6]
 800a000:	e7f3      	b.n	8009fea <acc_cpd_pll_divisors_calculate+0x172>
 800a002:	bf00      	nop
 800a004:	4f1502f9 	.word	0x4f1502f9
 800a008:	4c989680 	.word	0x4c989680
 800a00c:	4b989680 	.word	0x4b989680
 800a010:	350637bd 	.word	0x350637bd
 800a014:	0801242c 	.word	0x0801242c
 800a018:	080134b4 	.word	0x080134b4
 800a01c:	49742400 	.word	0x49742400
 800a020:	2000082c 	.word	0x2000082c
 800a024:	08012cd8 	.word	0x08012cd8
 800a028:	08012cac 	.word	0x08012cac
 800a02c:	b55b38e8 	.word	0xb55b38e8
 800a030:	427c0000 	.word	0x427c0000

0800a034 <acc_cpd_pll_divisors_ref_divisor>:
 800a034:	eddf 7a02 	vldr	s15, [pc, #8]	; 800a040 <acc_cpd_pll_divisors_ref_divisor+0xc>
 800a038:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a03c:	f007 bbb0 	b.w	80117a0 <roundf>
 800a040:	4f1502f9 	.word	0x4f1502f9

0800a044 <acc_dll_calculate_area_settings>:
 800a044:	0080      	lsls	r0, r0, #2
 800a046:	b280      	uxth	r0, r0
 800a048:	eb00 0351 	add.w	r3, r0, r1, lsr #1
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	428b      	cmp	r3, r1
 800a050:	8010      	strh	r0, [r2, #0]
 800a052:	8053      	strh	r3, [r2, #2]
 800a054:	d20c      	bcs.n	800a070 <acc_dll_calculate_area_settings+0x2c>
 800a056:	2301      	movs	r3, #1
 800a058:	2100      	movs	r1, #0
 800a05a:	2003      	movs	r0, #3
 800a05c:	8093      	strh	r3, [r2, #4]
 800a05e:	8153      	strh	r3, [r2, #10]
 800a060:	8193      	strh	r3, [r2, #12]
 800a062:	8213      	strh	r3, [r2, #16]
 800a064:	80d1      	strh	r1, [r2, #6]
 800a066:	8251      	strh	r1, [r2, #18]
 800a068:	8291      	strh	r1, [r2, #20]
 800a06a:	8110      	strh	r0, [r2, #8]
 800a06c:	81d0      	strh	r0, [r2, #14]
 800a06e:	4770      	bx	lr
 800a070:	b430      	push	{r4, r5}
 800a072:	fbb3 f4f1 	udiv	r4, r3, r1
 800a076:	2500      	movs	r5, #0
 800a078:	fb01 3114 	mls	r1, r1, r4, r3
 800a07c:	2401      	movs	r4, #1
 800a07e:	2303      	movs	r3, #3
 800a080:	8094      	strh	r4, [r2, #4]
 800a082:	80d4      	strh	r4, [r2, #6]
 800a084:	8154      	strh	r4, [r2, #10]
 800a086:	8214      	strh	r4, [r2, #16]
 800a088:	8254      	strh	r4, [r2, #18]
 800a08a:	8195      	strh	r5, [r2, #12]
 800a08c:	81d5      	strh	r5, [r2, #14]
 800a08e:	8295      	strh	r5, [r2, #20]
 800a090:	8050      	strh	r0, [r2, #2]
 800a092:	bc30      	pop	{r4, r5}
 800a094:	8011      	strh	r1, [r2, #0]
 800a096:	8113      	strh	r3, [r2, #8]
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop

0800a09c <acc_utils_swap16_array>:
 800a09c:	b141      	cbz	r1, 800a0b0 <acc_utils_swap16_array+0x14>
 800a09e:	3802      	subs	r0, #2
 800a0a0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800a0a4:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800a0a8:	ba5b      	rev16	r3, r3
 800a0aa:	4288      	cmp	r0, r1
 800a0ac:	8003      	strh	r3, [r0, #0]
 800a0ae:	d1f9      	bne.n	800a0a4 <acc_utils_swap16_array+0x8>
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop

0800a0b4 <acc_utils_uint32_to_transfer_buffer>:
 800a0b4:	b152      	cbz	r2, 800a0cc <acc_utils_uint32_to_transfer_buffer+0x18>
 800a0b6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800a0ba:	3804      	subs	r0, #4
 800a0bc:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800a0c0:	804b      	strh	r3, [r1, #2]
 800a0c2:	0c1b      	lsrs	r3, r3, #16
 800a0c4:	800b      	strh	r3, [r1, #0]
 800a0c6:	3104      	adds	r1, #4
 800a0c8:	4291      	cmp	r1, r2
 800a0ca:	d1f7      	bne.n	800a0bc <acc_utils_uint32_to_transfer_buffer+0x8>
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop

0800a0d0 <acc_utils_transfer_buffer_to_uint32>:
 800a0d0:	b17a      	cbz	r2, 800a0f2 <acc_utils_transfer_buffer_to_uint32+0x22>
 800a0d2:	b410      	push	{r4}
 800a0d4:	3904      	subs	r1, #4
 800a0d6:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 800a0da:	8802      	ldrh	r2, [r0, #0]
 800a0dc:	8843      	ldrh	r3, [r0, #2]
 800a0de:	3004      	adds	r0, #4
 800a0e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0e4:	4284      	cmp	r4, r0
 800a0e6:	f841 3f04 	str.w	r3, [r1, #4]!
 800a0ea:	d1f6      	bne.n	800a0da <acc_utils_transfer_buffer_to_uint32+0xa>
 800a0ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0f0:	4770      	bx	lr
 800a0f2:	4770      	bx	lr

0800a0f4 <event>:
 800a0f4:	b570      	push	{r4, r5, r6, lr}
 800a0f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a0f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a0fa:	682a      	ldr	r2, [r5, #0]
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 800a102:	4798      	blx	r3
 800a104:	6823      	ldr	r3, [r4, #0]
 800a106:	6028      	str	r0, [r5, #0]
 800a108:	685a      	ldr	r2, [r3, #4]
 800a10a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a10e:	4618      	mov	r0, r3
 800a110:	4710      	bx	r2
 800a112:	bf00      	nop

0800a114 <reset>:
 800a114:	6800      	ldr	r0, [r0, #0]
 800a116:	68c3      	ldr	r3, [r0, #12]
 800a118:	4718      	bx	r3
 800a11a:	bf00      	nop

0800a11c <validate>:
 800a11c:	6983      	ldr	r3, [r0, #24]
 800a11e:	b510      	push	{r4, lr}
 800a120:	4604      	mov	r4, r0
 800a122:	b113      	cbz	r3, 800a12a <validate+0xe>
 800a124:	f7fd faa6 	bl	8007674 <acc_rss_integration_log_level>
 800a128:	b978      	cbnz	r0, 800a14a <validate+0x2e>
 800a12a:	69e3      	ldr	r3, [r4, #28]
 800a12c:	b143      	cbz	r3, 800a140 <validate+0x24>
 800a12e:	f7fd faa1 	bl	8007674 <acc_rss_integration_log_level>
 800a132:	b128      	cbz	r0, 800a140 <validate+0x24>
 800a134:	4b08      	ldr	r3, [pc, #32]	; (800a158 <validate+0x3c>)
 800a136:	4a09      	ldr	r2, [pc, #36]	; (800a15c <validate+0x40>)
 800a138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a13a:	4909      	ldr	r1, [pc, #36]	; (800a160 <validate+0x44>)
 800a13c:	2001      	movs	r0, #1
 800a13e:	4798      	blx	r3
 800a140:	6820      	ldr	r0, [r4, #0]
 800a142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a146:	6883      	ldr	r3, [r0, #8]
 800a148:	4718      	bx	r3
 800a14a:	4b03      	ldr	r3, [pc, #12]	; (800a158 <validate+0x3c>)
 800a14c:	4a05      	ldr	r2, [pc, #20]	; (800a164 <validate+0x48>)
 800a14e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a150:	4903      	ldr	r1, [pc, #12]	; (800a160 <validate+0x44>)
 800a152:	2001      	movs	r0, #1
 800a154:	4798      	blx	r3
 800a156:	e7e8      	b.n	800a12a <validate+0xe>
 800a158:	2000082c 	.word	0x2000082c
 800a15c:	08012c48 	.word	0x08012c48
 800a160:	08012cec 	.word	0x08012cec
 800a164:	08012c18 	.word	0x08012c18

0800a168 <abs_q3_12_complex>:
 800a168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16a:	0897      	lsrs	r7, r2, #2
 800a16c:	d00b      	beq.n	800a186 <abs_q3_12_complex+0x1e>
 800a16e:	4604      	mov	r4, r0
 800a170:	1e8d      	subs	r5, r1, #2
 800a172:	eb00 0687 	add.w	r6, r0, r7, lsl #2
 800a176:	f854 0b04 	ldr.w	r0, [r4], #4
 800a17a:	f004 fabb 	bl	800e6f4 <acc_alg_basic_math_q3_12_complex_scalar_abs>
 800a17e:	42b4      	cmp	r4, r6
 800a180:	f825 0f02 	strh.w	r0, [r5, #2]!
 800a184:	d1f7      	bne.n	800a176 <abs_q3_12_complex+0xe>
 800a186:	0078      	lsls	r0, r7, #1
 800a188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a18a:	bf00      	nop

0800a18c <acc_element_abs_init>:
 800a18c:	b510      	push	{r4, lr}
 800a18e:	4a0b      	ldr	r2, [pc, #44]	; (800a1bc <acc_element_abs_init+0x30>)
 800a190:	4c0b      	ldr	r4, [pc, #44]	; (800a1c0 <acc_element_abs_init+0x34>)
 800a192:	4b0c      	ldr	r3, [pc, #48]	; (800a1c4 <acc_element_abs_init+0x38>)
 800a194:	60c3      	str	r3, [r0, #12]
 800a196:	2907      	cmp	r1, #7
 800a198:	e9c0 4201 	strd	r4, r2, [r0, #4]
 800a19c:	d103      	bne.n	800a1a6 <acc_element_abs_init+0x1a>
 800a19e:	4b0a      	ldr	r3, [pc, #40]	; (800a1c8 <acc_element_abs_init+0x3c>)
 800a1a0:	6383      	str	r3, [r0, #56]	; 0x38
 800a1a2:	2001      	movs	r0, #1
 800a1a4:	bd10      	pop	{r4, pc}
 800a1a6:	4b09      	ldr	r3, [pc, #36]	; (800a1cc <acc_element_abs_init+0x40>)
 800a1a8:	4a09      	ldr	r2, [pc, #36]	; (800a1d0 <acc_element_abs_init+0x44>)
 800a1aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ac:	4909      	ldr	r1, [pc, #36]	; (800a1d4 <acc_element_abs_init+0x48>)
 800a1ae:	2400      	movs	r4, #0
 800a1b0:	6384      	str	r4, [r0, #56]	; 0x38
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	4798      	blx	r3
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	bd10      	pop	{r4, pc}
 800a1ba:	bf00      	nop
 800a1bc:	0800a11d 	.word	0x0800a11d
 800a1c0:	0800a0f5 	.word	0x0800a0f5
 800a1c4:	0800a115 	.word	0x0800a115
 800a1c8:	0800a169 	.word	0x0800a169
 800a1cc:	2000082c 	.word	0x2000082c
 800a1d0:	08012c58 	.word	0x08012c58
 800a1d4:	08012cec 	.word	0x08012cec

0800a1d8 <event>:
 800a1d8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800a1da:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a1dc:	6811      	ldr	r1, [r2, #0]
 800a1de:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 800a1e0:	b510      	push	{r4, lr}
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	6900      	ldr	r0, [r0, #16]
 800a1e6:	4798      	blx	r3
 800a1e8:	6820      	ldr	r0, [r4, #0]
 800a1ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1ee:	6843      	ldr	r3, [r0, #4]
 800a1f0:	4718      	bx	r3
 800a1f2:	bf00      	nop

0800a1f4 <reset>:
 800a1f4:	6800      	ldr	r0, [r0, #0]
 800a1f6:	68c3      	ldr	r3, [r0, #12]
 800a1f8:	4718      	bx	r3
 800a1fa:	bf00      	nop

0800a1fc <validate>:
 800a1fc:	6983      	ldr	r3, [r0, #24]
 800a1fe:	b510      	push	{r4, lr}
 800a200:	4604      	mov	r4, r0
 800a202:	b113      	cbz	r3, 800a20a <validate+0xe>
 800a204:	f7fd fa36 	bl	8007674 <acc_rss_integration_log_level>
 800a208:	b978      	cbnz	r0, 800a22a <validate+0x2e>
 800a20a:	69e3      	ldr	r3, [r4, #28]
 800a20c:	b143      	cbz	r3, 800a220 <validate+0x24>
 800a20e:	f7fd fa31 	bl	8007674 <acc_rss_integration_log_level>
 800a212:	b128      	cbz	r0, 800a220 <validate+0x24>
 800a214:	4b08      	ldr	r3, [pc, #32]	; (800a238 <validate+0x3c>)
 800a216:	4a09      	ldr	r2, [pc, #36]	; (800a23c <validate+0x40>)
 800a218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a21a:	4909      	ldr	r1, [pc, #36]	; (800a240 <validate+0x44>)
 800a21c:	2001      	movs	r0, #1
 800a21e:	4798      	blx	r3
 800a220:	6820      	ldr	r0, [r4, #0]
 800a222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a226:	6883      	ldr	r3, [r0, #8]
 800a228:	4718      	bx	r3
 800a22a:	4b03      	ldr	r3, [pc, #12]	; (800a238 <validate+0x3c>)
 800a22c:	4a05      	ldr	r2, [pc, #20]	; (800a244 <validate+0x48>)
 800a22e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a230:	4903      	ldr	r1, [pc, #12]	; (800a240 <validate+0x44>)
 800a232:	2001      	movs	r0, #1
 800a234:	4798      	blx	r3
 800a236:	e7e8      	b.n	800a20a <validate+0xe>
 800a238:	2000082c 	.word	0x2000082c
 800a23c:	08012c48 	.word	0x08012c48
 800a240:	08012cf8 	.word	0x08012cf8
 800a244:	08012c18 	.word	0x08012c18

0800a248 <centering_q12_4>:
 800a248:	f3c1 014f 	ubfx	r1, r1, #1, #16
 800a24c:	f3c2 024f 	ubfx	r2, r2, #1, #16
 800a250:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a254:	f003 bbe2 	b.w	800da1c <acc_alg_basic_subtract_section_mean_q12_4>

0800a258 <acc_element_centering_init>:
 800a258:	b430      	push	{r4, r5}
 800a25a:	4b09      	ldr	r3, [pc, #36]	; (800a280 <acc_element_centering_init+0x28>)
 800a25c:	60c3      	str	r3, [r0, #12]
 800a25e:	2905      	cmp	r1, #5
 800a260:	4d08      	ldr	r5, [pc, #32]	; (800a284 <acc_element_centering_init+0x2c>)
 800a262:	4c09      	ldr	r4, [pc, #36]	; (800a288 <acc_element_centering_init+0x30>)
 800a264:	bf08      	it	eq
 800a266:	4909      	ldreq	r1, [pc, #36]	; (800a28c <acc_element_centering_init+0x34>)
 800a268:	8782      	strh	r2, [r0, #60]	; 0x3c
 800a26a:	bf1a      	itte	ne
 800a26c:	2300      	movne	r3, #0
 800a26e:	4619      	movne	r1, r3
 800a270:	2301      	moveq	r3, #1
 800a272:	e9c0 5401 	strd	r5, r4, [r0, #4]
 800a276:	6381      	str	r1, [r0, #56]	; 0x38
 800a278:	bc30      	pop	{r4, r5}
 800a27a:	4618      	mov	r0, r3
 800a27c:	4770      	bx	lr
 800a27e:	bf00      	nop
 800a280:	0800a1f5 	.word	0x0800a1f5
 800a284:	0800a1d9 	.word	0x0800a1d9
 800a288:	0800a1fd 	.word	0x0800a1fd
 800a28c:	0800a249 	.word	0x0800a249

0800a290 <convert_q3_12_to_u16>:
 800a290:	0853      	lsrs	r3, r2, #1
 800a292:	d010      	beq.n	800a2b6 <convert_q3_12_to_u16+0x26>
 800a294:	b410      	push	{r4}
 800a296:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 800a29a:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 800a29e:	f831 3d02 	ldrh.w	r3, [r1, #-2]!
 800a2a2:	005b      	lsls	r3, r3, #1
 800a2a4:	4281      	cmp	r1, r0
 800a2a6:	f824 3d02 	strh.w	r3, [r4, #-2]!
 800a2aa:	d1f8      	bne.n	800a29e <convert_q3_12_to_u16+0xe>
 800a2ac:	f022 0001 	bic.w	r0, r2, #1
 800a2b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2b4:	4770      	bx	lr
 800a2b6:	f022 0001 	bic.w	r0, r2, #1
 800a2ba:	4770      	bx	lr

0800a2bc <convert_q3_12_complex_to_f32_complex>:
 800a2bc:	0892      	lsrs	r2, r2, #2
 800a2be:	d024      	beq.n	800a30a <convert_q3_12_complex_to_f32_complex+0x4e>
 800a2c0:	eddf 6a13 	vldr	s13, [pc, #76]	; 800a310 <convert_q3_12_complex_to_f32_complex+0x54>
 800a2c4:	eddf 5a13 	vldr	s11, [pc, #76]	; 800a314 <convert_q3_12_complex_to_f32_complex+0x58>
 800a2c8:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800a2cc:	00d0      	lsls	r0, r2, #3
 800a2ce:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a2d2:	f933 cc02 	ldrsh.w	ip, [r3, #-2]
 800a2d6:	ee07 ca10 	vmov	s14, ip
 800a2da:	f933 cd04 	ldrsh.w	ip, [r3, #-4]!
 800a2de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a2e2:	ee07 ca90 	vmov	s15, ip
 800a2e6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a2ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2ee:	ee27 6a25 	vmul.f32	s12, s14, s11
 800a2f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a2f6:	ed02 7a01 	vstr	s14, [r2, #-4]
 800a2fa:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a2fe:	3a08      	subs	r2, #8
 800a300:	edc2 7a00 	vstr	s15, [r2]
 800a304:	4291      	cmp	r1, r2
 800a306:	d1e4      	bne.n	800a2d2 <convert_q3_12_complex_to_f32_complex+0x16>
 800a308:	4770      	bx	lr
 800a30a:	4610      	mov	r0, r2
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop
 800a310:	39800000 	.word	0x39800000
 800a314:	00000000 	.word	0x00000000

0800a318 <convert_q12_4_to_q3_12>:
 800a318:	0853      	lsrs	r3, r2, #1
 800a31a:	d012      	beq.n	800a342 <convert_q12_4_to_q3_12+0x2a>
 800a31c:	b410      	push	{r4}
 800a31e:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 800a322:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 800a326:	f931 3d02 	ldrsh.w	r3, [r1, #-2]!
 800a32a:	105b      	asrs	r3, r3, #1
 800a32c:	f483 4340 	eor.w	r3, r3, #49152	; 0xc000
 800a330:	4281      	cmp	r1, r0
 800a332:	f824 3d02 	strh.w	r3, [r4, #-2]!
 800a336:	d1f6      	bne.n	800a326 <convert_q12_4_to_q3_12+0xe>
 800a338:	f022 0001 	bic.w	r0, r2, #1
 800a33c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	f022 0001 	bic.w	r0, r2, #1
 800a346:	4770      	bx	lr

0800a348 <convert_q12_4_to_q3_12_complex>:
 800a348:	b470      	push	{r4, r5, r6}
 800a34a:	4605      	mov	r5, r0
 800a34c:	0850      	lsrs	r0, r2, #1
 800a34e:	d012      	beq.n	800a376 <convert_q12_4_to_q3_12_complex+0x2e>
 800a350:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a354:	eb05 0440 	add.w	r4, r5, r0, lsl #1
 800a358:	2600      	movs	r6, #0
 800a35a:	0080      	lsls	r0, r0, #2
 800a35c:	f934 3d02 	ldrsh.w	r3, [r4, #-2]!
 800a360:	f821 6c02 	strh.w	r6, [r1, #-2]
 800a364:	105b      	asrs	r3, r3, #1
 800a366:	f483 4340 	eor.w	r3, r3, #49152	; 0xc000
 800a36a:	42a5      	cmp	r5, r4
 800a36c:	f821 3c04 	strh.w	r3, [r1, #-4]
 800a370:	f1a1 0104 	sub.w	r1, r1, #4
 800a374:	d1f2      	bne.n	800a35c <convert_q12_4_to_q3_12_complex+0x14>
 800a376:	bc70      	pop	{r4, r5, r6}
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop

0800a37c <event>:
 800a37c:	b570      	push	{r4, r5, r6, lr}
 800a37e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a380:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a382:	682a      	ldr	r2, [r5, #0]
 800a384:	4604      	mov	r4, r0
 800a386:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 800a38a:	4798      	blx	r3
 800a38c:	6823      	ldr	r3, [r4, #0]
 800a38e:	6028      	str	r0, [r5, #0]
 800a390:	685a      	ldr	r2, [r3, #4]
 800a392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a396:	4618      	mov	r0, r3
 800a398:	4710      	bx	r2
 800a39a:	bf00      	nop

0800a39c <reset>:
 800a39c:	6800      	ldr	r0, [r0, #0]
 800a39e:	68c3      	ldr	r3, [r0, #12]
 800a3a0:	4718      	bx	r3
 800a3a2:	bf00      	nop

0800a3a4 <validate>:
 800a3a4:	6983      	ldr	r3, [r0, #24]
 800a3a6:	b510      	push	{r4, lr}
 800a3a8:	4604      	mov	r4, r0
 800a3aa:	b113      	cbz	r3, 800a3b2 <validate+0xe>
 800a3ac:	f7fd f962 	bl	8007674 <acc_rss_integration_log_level>
 800a3b0:	b978      	cbnz	r0, 800a3d2 <validate+0x2e>
 800a3b2:	69e3      	ldr	r3, [r4, #28]
 800a3b4:	b143      	cbz	r3, 800a3c8 <validate+0x24>
 800a3b6:	f7fd f95d 	bl	8007674 <acc_rss_integration_log_level>
 800a3ba:	b128      	cbz	r0, 800a3c8 <validate+0x24>
 800a3bc:	4b08      	ldr	r3, [pc, #32]	; (800a3e0 <validate+0x3c>)
 800a3be:	4a09      	ldr	r2, [pc, #36]	; (800a3e4 <validate+0x40>)
 800a3c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3c2:	4909      	ldr	r1, [pc, #36]	; (800a3e8 <validate+0x44>)
 800a3c4:	2001      	movs	r0, #1
 800a3c6:	4798      	blx	r3
 800a3c8:	6820      	ldr	r0, [r4, #0]
 800a3ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3ce:	6883      	ldr	r3, [r0, #8]
 800a3d0:	4718      	bx	r3
 800a3d2:	4b03      	ldr	r3, [pc, #12]	; (800a3e0 <validate+0x3c>)
 800a3d4:	4a05      	ldr	r2, [pc, #20]	; (800a3ec <validate+0x48>)
 800a3d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3d8:	4903      	ldr	r1, [pc, #12]	; (800a3e8 <validate+0x44>)
 800a3da:	2001      	movs	r0, #1
 800a3dc:	4798      	blx	r3
 800a3de:	e7e8      	b.n	800a3b2 <validate+0xe>
 800a3e0:	2000082c 	.word	0x2000082c
 800a3e4:	08012c48 	.word	0x08012c48
 800a3e8:	08012d0c 	.word	0x08012d0c
 800a3ec:	08012c18 	.word	0x08012c18

0800a3f0 <acc_element_converter_init>:
 800a3f0:	3a02      	subs	r2, #2
 800a3f2:	b510      	push	{r4, lr}
 800a3f4:	2a05      	cmp	r2, #5
 800a3f6:	d804      	bhi.n	800a402 <acc_element_converter_init+0x12>
 800a3f8:	e8df f002 	tbb	[pc, r2]
 800a3fc:	031d0319 	.word	0x031d0319
 800a400:	0d21      	.short	0x0d21
 800a402:	2300      	movs	r3, #0
 800a404:	6383      	str	r3, [r0, #56]	; 0x38
 800a406:	4b10      	ldr	r3, [pc, #64]	; (800a448 <acc_element_converter_init+0x58>)
 800a408:	4a10      	ldr	r2, [pc, #64]	; (800a44c <acc_element_converter_init+0x5c>)
 800a40a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a40c:	4910      	ldr	r1, [pc, #64]	; (800a450 <acc_element_converter_init+0x60>)
 800a40e:	2000      	movs	r0, #0
 800a410:	4798      	blx	r3
 800a412:	2000      	movs	r0, #0
 800a414:	bd10      	pop	{r4, pc}
 800a416:	2905      	cmp	r1, #5
 800a418:	d1f3      	bne.n	800a402 <acc_element_converter_init+0x12>
 800a41a:	4c0e      	ldr	r4, [pc, #56]	; (800a454 <acc_element_converter_init+0x64>)
 800a41c:	490e      	ldr	r1, [pc, #56]	; (800a458 <acc_element_converter_init+0x68>)
 800a41e:	4a0f      	ldr	r2, [pc, #60]	; (800a45c <acc_element_converter_init+0x6c>)
 800a420:	4b0f      	ldr	r3, [pc, #60]	; (800a460 <acc_element_converter_init+0x70>)
 800a422:	6384      	str	r4, [r0, #56]	; 0x38
 800a424:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800a428:	60c3      	str	r3, [r0, #12]
 800a42a:	2001      	movs	r0, #1
 800a42c:	bd10      	pop	{r4, pc}
 800a42e:	2904      	cmp	r1, #4
 800a430:	d1e7      	bne.n	800a402 <acc_element_converter_init+0x12>
 800a432:	4c0c      	ldr	r4, [pc, #48]	; (800a464 <acc_element_converter_init+0x74>)
 800a434:	e7f2      	b.n	800a41c <acc_element_converter_init+0x2c>
 800a436:	2905      	cmp	r1, #5
 800a438:	d1e3      	bne.n	800a402 <acc_element_converter_init+0x12>
 800a43a:	4c0b      	ldr	r4, [pc, #44]	; (800a468 <acc_element_converter_init+0x78>)
 800a43c:	e7ee      	b.n	800a41c <acc_element_converter_init+0x2c>
 800a43e:	2907      	cmp	r1, #7
 800a440:	d1df      	bne.n	800a402 <acc_element_converter_init+0x12>
 800a442:	4c0a      	ldr	r4, [pc, #40]	; (800a46c <acc_element_converter_init+0x7c>)
 800a444:	e7ea      	b.n	800a41c <acc_element_converter_init+0x2c>
 800a446:	bf00      	nop
 800a448:	2000082c 	.word	0x2000082c
 800a44c:	08012d20 	.word	0x08012d20
 800a450:	08012d0c 	.word	0x08012d0c
 800a454:	0800a349 	.word	0x0800a349
 800a458:	0800a37d 	.word	0x0800a37d
 800a45c:	0800a3a5 	.word	0x0800a3a5
 800a460:	0800a39d 	.word	0x0800a39d
 800a464:	0800a291 	.word	0x0800a291
 800a468:	0800a319 	.word	0x0800a319
 800a46c:	0800a2bd 	.word	0x0800a2bd

0800a470 <event>:
 800a470:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800a472:	6803      	ldr	r3, [r0, #0]
 800a474:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800a476:	6011      	str	r1, [r2, #0]
 800a478:	4618      	mov	r0, r3
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	4710      	bx	r2
 800a47e:	bf00      	nop

0800a480 <reset>:
 800a480:	6800      	ldr	r0, [r0, #0]
 800a482:	68c3      	ldr	r3, [r0, #12]
 800a484:	4718      	bx	r3
 800a486:	bf00      	nop

0800a488 <validate>:
 800a488:	6983      	ldr	r3, [r0, #24]
 800a48a:	b510      	push	{r4, lr}
 800a48c:	4604      	mov	r4, r0
 800a48e:	b113      	cbz	r3, 800a496 <validate+0xe>
 800a490:	f7fd f8f0 	bl	8007674 <acc_rss_integration_log_level>
 800a494:	b978      	cbnz	r0, 800a4b6 <validate+0x2e>
 800a496:	69e3      	ldr	r3, [r4, #28]
 800a498:	b143      	cbz	r3, 800a4ac <validate+0x24>
 800a49a:	f7fd f8eb 	bl	8007674 <acc_rss_integration_log_level>
 800a49e:	b128      	cbz	r0, 800a4ac <validate+0x24>
 800a4a0:	4b08      	ldr	r3, [pc, #32]	; (800a4c4 <validate+0x3c>)
 800a4a2:	4a09      	ldr	r2, [pc, #36]	; (800a4c8 <validate+0x40>)
 800a4a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4a6:	4909      	ldr	r1, [pc, #36]	; (800a4cc <validate+0x44>)
 800a4a8:	2001      	movs	r0, #1
 800a4aa:	4798      	blx	r3
 800a4ac:	6820      	ldr	r0, [r4, #0]
 800a4ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4b2:	6883      	ldr	r3, [r0, #8]
 800a4b4:	4718      	bx	r3
 800a4b6:	4b03      	ldr	r3, [pc, #12]	; (800a4c4 <validate+0x3c>)
 800a4b8:	4a05      	ldr	r2, [pc, #20]	; (800a4d0 <validate+0x48>)
 800a4ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4bc:	4903      	ldr	r1, [pc, #12]	; (800a4cc <validate+0x44>)
 800a4be:	2001      	movs	r0, #1
 800a4c0:	4798      	blx	r3
 800a4c2:	e7e8      	b.n	800a496 <validate+0xe>
 800a4c4:	2000082c 	.word	0x2000082c
 800a4c8:	08012c48 	.word	0x08012c48
 800a4cc:	08012d48 	.word	0x08012d48
 800a4d0:	08012c18 	.word	0x08012c18

0800a4d4 <acc_element_crop_init>:
 800a4d4:	b538      	push	{r3, r4, r5, lr}
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	4608      	mov	r0, r1
 800a4da:	4615      	mov	r5, r2
 800a4dc:	f7ff fb46 	bl	8009b6c <acc_element_sizeof>
 800a4e0:	4904      	ldr	r1, [pc, #16]	; (800a4f4 <acc_element_crop_init+0x20>)
 800a4e2:	4a05      	ldr	r2, [pc, #20]	; (800a4f8 <acc_element_crop_init+0x24>)
 800a4e4:	4b05      	ldr	r3, [pc, #20]	; (800a4fc <acc_element_crop_init+0x28>)
 800a4e6:	60e3      	str	r3, [r4, #12]
 800a4e8:	fb05 f000 	mul.w	r0, r5, r0
 800a4ec:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a4f0:	63a0      	str	r0, [r4, #56]	; 0x38
 800a4f2:	bd38      	pop	{r3, r4, r5, pc}
 800a4f4:	0800a471 	.word	0x0800a471
 800a4f8:	0800a489 	.word	0x0800a489
 800a4fc:	0800a481 	.word	0x0800a481

0800a500 <filter_no_operation>:
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop

0800a504 <event>:
 800a504:	b510      	push	{r4, lr}
 800a506:	4604      	mov	r4, r0
 800a508:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a50a:	4798      	blx	r3
 800a50c:	6820      	ldr	r0, [r4, #0]
 800a50e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a512:	6843      	ldr	r3, [r0, #4]
 800a514:	4718      	bx	r3
 800a516:	bf00      	nop

0800a518 <reset>:
 800a518:	6800      	ldr	r0, [r0, #0]
 800a51a:	68c3      	ldr	r3, [r0, #12]
 800a51c:	4718      	bx	r3
 800a51e:	bf00      	nop

0800a520 <filter_q3_12_complex>:
 800a520:	4603      	mov	r3, r0
 800a522:	3040      	adds	r0, #64	; 0x40
 800a524:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a526:	6919      	ldr	r1, [r3, #16]
 800a528:	6812      	ldr	r2, [r2, #0]
 800a52a:	0892      	lsrs	r2, r2, #2
 800a52c:	f003 bc5c 	b.w	800dde8 <acc_alg_biquad_q3_12_complex_direct_form_1_filtfilt_reduced_edge_transients>

0800a530 <validate>:
 800a530:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800a534:	429a      	cmp	r2, r3
 800a536:	b510      	push	{r4, lr}
 800a538:	d007      	beq.n	800a54a <validate+0x1a>
 800a53a:	4b12      	ldr	r3, [pc, #72]	; (800a584 <validate+0x54>)
 800a53c:	4a12      	ldr	r2, [pc, #72]	; (800a588 <validate+0x58>)
 800a53e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a540:	4912      	ldr	r1, [pc, #72]	; (800a58c <validate+0x5c>)
 800a542:	2000      	movs	r0, #0
 800a544:	4798      	blx	r3
 800a546:	2000      	movs	r0, #0
 800a548:	bd10      	pop	{r4, pc}
 800a54a:	6983      	ldr	r3, [r0, #24]
 800a54c:	4604      	mov	r4, r0
 800a54e:	b113      	cbz	r3, 800a556 <validate+0x26>
 800a550:	f7fd f890 	bl	8007674 <acc_rss_integration_log_level>
 800a554:	b978      	cbnz	r0, 800a576 <validate+0x46>
 800a556:	69e3      	ldr	r3, [r4, #28]
 800a558:	b143      	cbz	r3, 800a56c <validate+0x3c>
 800a55a:	f7fd f88b 	bl	8007674 <acc_rss_integration_log_level>
 800a55e:	b128      	cbz	r0, 800a56c <validate+0x3c>
 800a560:	4b08      	ldr	r3, [pc, #32]	; (800a584 <validate+0x54>)
 800a562:	4a0b      	ldr	r2, [pc, #44]	; (800a590 <validate+0x60>)
 800a564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a566:	4909      	ldr	r1, [pc, #36]	; (800a58c <validate+0x5c>)
 800a568:	2001      	movs	r0, #1
 800a56a:	4798      	blx	r3
 800a56c:	6820      	ldr	r0, [r4, #0]
 800a56e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a572:	6883      	ldr	r3, [r0, #8]
 800a574:	4718      	bx	r3
 800a576:	4b03      	ldr	r3, [pc, #12]	; (800a584 <validate+0x54>)
 800a578:	4a06      	ldr	r2, [pc, #24]	; (800a594 <validate+0x64>)
 800a57a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a57c:	4903      	ldr	r1, [pc, #12]	; (800a58c <validate+0x5c>)
 800a57e:	2001      	movs	r0, #1
 800a580:	4798      	blx	r3
 800a582:	e7e8      	b.n	800a556 <validate+0x26>
 800a584:	2000082c 	.word	0x2000082c
 800a588:	08012d58 	.word	0x08012d58
 800a58c:	08012d80 	.word	0x08012d80
 800a590:	08012c48 	.word	0x08012c48
 800a594:	08012c18 	.word	0x08012c18

0800a598 <acc_element_depth_domain_low_pass_filter_init>:
 800a598:	b570      	push	{r4, r5, r6, lr}
 800a59a:	4604      	mov	r4, r0
 800a59c:	4823      	ldr	r0, [pc, #140]	; (800a62c <acc_element_depth_domain_low_pass_filter_init+0x94>)
 800a59e:	6060      	str	r0, [r4, #4]
 800a5a0:	4823      	ldr	r0, [pc, #140]	; (800a630 <acc_element_depth_domain_low_pass_filter_init+0x98>)
 800a5a2:	60a0      	str	r0, [r4, #8]
 800a5a4:	4823      	ldr	r0, [pc, #140]	; (800a634 <acc_element_depth_domain_low_pass_filter_init+0x9c>)
 800a5a6:	60e0      	str	r0, [r4, #12]
 800a5a8:	461e      	mov	r6, r3
 800a5aa:	b30a      	cbz	r2, 800a5f0 <acc_element_depth_domain_low_pass_filter_init+0x58>
 800a5ac:	eddf 7a22 	vldr	s15, [pc, #136]	; 800a638 <acc_element_depth_domain_low_pass_filter_init+0xa0>
 800a5b0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5b8:	d513      	bpl.n	800a5e2 <acc_element_depth_domain_low_pass_filter_init+0x4a>
 800a5ba:	eeb0 0a67 	vmov.f32	s0, s15
 800a5be:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 800a5c2:	2907      	cmp	r1, #7
 800a5c4:	d124      	bne.n	800a610 <acc_element_depth_domain_low_pass_filter_init+0x78>
 800a5c6:	4b1d      	ldr	r3, [pc, #116]	; (800a63c <acc_element_depth_domain_low_pass_filter_init+0xa4>)
 800a5c8:	63a3      	str	r3, [r4, #56]	; 0x38
 800a5ca:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800a5d4:	2001      	movs	r0, #1
 800a5d6:	f003 fa6d 	bl	800dab4 <acc_alg_biquad_q3_12_lowpass_coeffs>
 800a5da:	4605      	mov	r5, r0
 800a5dc:	b188      	cbz	r0, 800a602 <acc_element_depth_domain_low_pass_filter_init+0x6a>
 800a5de:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a5e0:	e00b      	b.n	800a5fa <acc_element_depth_domain_low_pass_filter_init+0x62>
 800a5e2:	eddf 7a17 	vldr	s15, [pc, #92]	; 800a640 <acc_element_depth_domain_low_pass_filter_init+0xa8>
 800a5e6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a5ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5ee:	dd19      	ble.n	800a624 <acc_element_depth_domain_low_pass_filter_init+0x8c>
 800a5f0:	4b14      	ldr	r3, [pc, #80]	; (800a644 <acc_element_depth_domain_low_pass_filter_init+0xac>)
 800a5f2:	63a3      	str	r3, [r4, #56]	; 0x38
 800a5f4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800a5f8:	63e2      	str	r2, [r4, #60]	; 0x3c
 800a5fa:	2501      	movs	r5, #1
 800a5fc:	61f2      	str	r2, [r6, #28]
 800a5fe:	4628      	mov	r0, r5
 800a600:	bd70      	pop	{r4, r5, r6, pc}
 800a602:	4b11      	ldr	r3, [pc, #68]	; (800a648 <acc_element_depth_domain_low_pass_filter_init+0xb0>)
 800a604:	4a11      	ldr	r2, [pc, #68]	; (800a64c <acc_element_depth_domain_low_pass_filter_init+0xb4>)
 800a606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a608:	4911      	ldr	r1, [pc, #68]	; (800a650 <acc_element_depth_domain_low_pass_filter_init+0xb8>)
 800a60a:	4798      	blx	r3
 800a60c:	4628      	mov	r0, r5
 800a60e:	bd70      	pop	{r4, r5, r6, pc}
 800a610:	4b0d      	ldr	r3, [pc, #52]	; (800a648 <acc_element_depth_domain_low_pass_filter_init+0xb0>)
 800a612:	4a10      	ldr	r2, [pc, #64]	; (800a654 <acc_element_depth_domain_low_pass_filter_init+0xbc>)
 800a614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a616:	490e      	ldr	r1, [pc, #56]	; (800a650 <acc_element_depth_domain_low_pass_filter_init+0xb8>)
 800a618:	2000      	movs	r0, #0
 800a61a:	63a0      	str	r0, [r4, #56]	; 0x38
 800a61c:	4605      	mov	r5, r0
 800a61e:	4798      	blx	r3
 800a620:	4628      	mov	r0, r5
 800a622:	bd70      	pop	{r4, r5, r6, pc}
 800a624:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800a628:	e7cb      	b.n	800a5c2 <acc_element_depth_domain_low_pass_filter_init+0x2a>
 800a62a:	bf00      	nop
 800a62c:	0800a505 	.word	0x0800a505
 800a630:	0800a531 	.word	0x0800a531
 800a634:	0800a519 	.word	0x0800a519
 800a638:	3b843809 	.word	0x3b843809
 800a63c:	0800a521 	.word	0x0800a521
 800a640:	3efdca08 	.word	0x3efdca08
 800a644:	0800a501 	.word	0x0800a501
 800a648:	2000082c 	.word	0x2000082c
 800a64c:	08012da8 	.word	0x08012da8
 800a650:	08012d80 	.word	0x08012d80
 800a654:	08012c58 	.word	0x08012c58

0800a658 <event>:
 800a658:	b510      	push	{r4, lr}
 800a65a:	4604      	mov	r4, r0
 800a65c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a65e:	4798      	blx	r3
 800a660:	6820      	ldr	r0, [r4, #0]
 800a662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a666:	6843      	ldr	r3, [r0, #4]
 800a668:	4718      	bx	r3
 800a66a:	bf00      	nop

0800a66c <reset>:
 800a66c:	6800      	ldr	r0, [r0, #0]
 800a66e:	68c3      	ldr	r3, [r0, #12]
 800a670:	4718      	bx	r3
 800a672:	bf00      	nop

0800a674 <iq_mix_q3_12>:
 800a674:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800a676:	ed90 1a10 	vldr	s2, [r0, #64]	; 0x40
 800a67a:	edd0 0a0f 	vldr	s1, [r0, #60]	; 0x3c
 800a67e:	b538      	push	{r3, r4, r5, lr}
 800a680:	6815      	ldr	r5, [r2, #0]
 800a682:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a684:	4604      	mov	r4, r0
 800a686:	086d      	lsrs	r5, r5, #1
 800a688:	ed93 0a00 	vldr	s0, [r3]
 800a68c:	462a      	mov	r2, r5
 800a68e:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 800a692:	f003 fbc7 	bl	800de24 <acc_alg_iq_demodulation_q3_12_real>
 800a696:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a698:	00ad      	lsls	r5, r5, #2
 800a69a:	601d      	str	r5, [r3, #0]
 800a69c:	bd38      	pop	{r3, r4, r5, pc}
 800a69e:	bf00      	nop

0800a6a0 <iq_mix_q3_12_complex>:
 800a6a0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800a6a2:	ed90 1a10 	vldr	s2, [r0, #64]	; 0x40
 800a6a6:	edd0 0a0f 	vldr	s1, [r0, #60]	; 0x3c
 800a6aa:	b538      	push	{r3, r4, r5, lr}
 800a6ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a6ae:	6815      	ldr	r5, [r2, #0]
 800a6b0:	ed93 0a00 	vldr	s0, [r3]
 800a6b4:	4604      	mov	r4, r0
 800a6b6:	08a9      	lsrs	r1, r5, #2
 800a6b8:	6900      	ldr	r0, [r0, #16]
 800a6ba:	f003 fc15 	bl	800dee8 <acc_alg_iq_demodulation_q3_12_complex>
 800a6be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6c0:	f025 0503 	bic.w	r5, r5, #3
 800a6c4:	601d      	str	r5, [r3, #0]
 800a6c6:	bd38      	pop	{r3, r4, r5, pc}

0800a6c8 <validate>:
 800a6c8:	4a21      	ldr	r2, [pc, #132]	; (800a750 <validate+0x88>)
 800a6ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	b510      	push	{r4, lr}
 800a6d0:	4604      	mov	r4, r0
 800a6d2:	d023      	beq.n	800a71c <validate+0x54>
 800a6d4:	4a1f      	ldr	r2, [pc, #124]	; (800a754 <validate+0x8c>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d007      	beq.n	800a6ea <validate+0x22>
 800a6da:	4b1f      	ldr	r3, [pc, #124]	; (800a758 <validate+0x90>)
 800a6dc:	4a1f      	ldr	r2, [pc, #124]	; (800a75c <validate+0x94>)
 800a6de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e0:	491f      	ldr	r1, [pc, #124]	; (800a760 <validate+0x98>)
 800a6e2:	2000      	movs	r0, #0
 800a6e4:	4798      	blx	r3
 800a6e6:	2000      	movs	r0, #0
 800a6e8:	bd10      	pop	{r4, pc}
 800a6ea:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d027      	beq.n	800a742 <validate+0x7a>
 800a6f2:	69a3      	ldr	r3, [r4, #24]
 800a6f4:	b113      	cbz	r3, 800a6fc <validate+0x34>
 800a6f6:	f7fc ffbd 	bl	8007674 <acc_rss_integration_log_level>
 800a6fa:	b9d8      	cbnz	r0, 800a734 <validate+0x6c>
 800a6fc:	69e3      	ldr	r3, [r4, #28]
 800a6fe:	b143      	cbz	r3, 800a712 <validate+0x4a>
 800a700:	f7fc ffb8 	bl	8007674 <acc_rss_integration_log_level>
 800a704:	b128      	cbz	r0, 800a712 <validate+0x4a>
 800a706:	4b14      	ldr	r3, [pc, #80]	; (800a758 <validate+0x90>)
 800a708:	4a16      	ldr	r2, [pc, #88]	; (800a764 <validate+0x9c>)
 800a70a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a70c:	4914      	ldr	r1, [pc, #80]	; (800a760 <validate+0x98>)
 800a70e:	2001      	movs	r0, #1
 800a710:	4798      	blx	r3
 800a712:	6820      	ldr	r0, [r4, #0]
 800a714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a718:	6883      	ldr	r3, [r0, #8]
 800a71a:	4718      	bx	r3
 800a71c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800a720:	429a      	cmp	r2, r3
 800a722:	d0e6      	beq.n	800a6f2 <validate+0x2a>
 800a724:	4b0c      	ldr	r3, [pc, #48]	; (800a758 <validate+0x90>)
 800a726:	4a10      	ldr	r2, [pc, #64]	; (800a768 <validate+0xa0>)
 800a728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a72a:	490d      	ldr	r1, [pc, #52]	; (800a760 <validate+0x98>)
 800a72c:	2000      	movs	r0, #0
 800a72e:	4798      	blx	r3
 800a730:	2000      	movs	r0, #0
 800a732:	bd10      	pop	{r4, pc}
 800a734:	4b08      	ldr	r3, [pc, #32]	; (800a758 <validate+0x90>)
 800a736:	4a0d      	ldr	r2, [pc, #52]	; (800a76c <validate+0xa4>)
 800a738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a73a:	4909      	ldr	r1, [pc, #36]	; (800a760 <validate+0x98>)
 800a73c:	2001      	movs	r0, #1
 800a73e:	4798      	blx	r3
 800a740:	e7dc      	b.n	800a6fc <validate+0x34>
 800a742:	4b05      	ldr	r3, [pc, #20]	; (800a758 <validate+0x90>)
 800a744:	4a0a      	ldr	r2, [pc, #40]	; (800a770 <validate+0xa8>)
 800a746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a748:	4905      	ldr	r1, [pc, #20]	; (800a760 <validate+0x98>)
 800a74a:	2000      	movs	r0, #0
 800a74c:	4798      	blx	r3
 800a74e:	e7ca      	b.n	800a6e6 <validate+0x1e>
 800a750:	0800a6a1 	.word	0x0800a6a1
 800a754:	0800a675 	.word	0x0800a675
 800a758:	2000082c 	.word	0x2000082c
 800a75c:	08012e20 	.word	0x08012e20
 800a760:	08012dd4 	.word	0x08012dd4
 800a764:	08012c48 	.word	0x08012c48
 800a768:	08012d58 	.word	0x08012d58
 800a76c:	08012c18 	.word	0x08012c18
 800a770:	08012de8 	.word	0x08012de8

0800a774 <acc_element_iq_mixer_init>:
 800a774:	4b10      	ldr	r3, [pc, #64]	; (800a7b8 <acc_element_iq_mixer_init+0x44>)
 800a776:	4a11      	ldr	r2, [pc, #68]	; (800a7bc <acc_element_iq_mixer_init+0x48>)
 800a778:	6043      	str	r3, [r0, #4]
 800a77a:	4b11      	ldr	r3, [pc, #68]	; (800a7c0 <acc_element_iq_mixer_init+0x4c>)
 800a77c:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
 800a780:	2904      	cmp	r1, #4
 800a782:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a786:	edc0 0a10 	vstr	s1, [r0, #64]	; 0x40
 800a78a:	d00c      	beq.n	800a7a6 <acc_element_iq_mixer_init+0x32>
 800a78c:	2907      	cmp	r1, #7
 800a78e:	d00e      	beq.n	800a7ae <acc_element_iq_mixer_init+0x3a>
 800a790:	b510      	push	{r4, lr}
 800a792:	4b0c      	ldr	r3, [pc, #48]	; (800a7c4 <acc_element_iq_mixer_init+0x50>)
 800a794:	4a0c      	ldr	r2, [pc, #48]	; (800a7c8 <acc_element_iq_mixer_init+0x54>)
 800a796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a798:	490c      	ldr	r1, [pc, #48]	; (800a7cc <acc_element_iq_mixer_init+0x58>)
 800a79a:	2400      	movs	r4, #0
 800a79c:	6384      	str	r4, [r0, #56]	; 0x38
 800a79e:	4620      	mov	r0, r4
 800a7a0:	4798      	blx	r3
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	bd10      	pop	{r4, pc}
 800a7a6:	4b0a      	ldr	r3, [pc, #40]	; (800a7d0 <acc_element_iq_mixer_init+0x5c>)
 800a7a8:	6383      	str	r3, [r0, #56]	; 0x38
 800a7aa:	2001      	movs	r0, #1
 800a7ac:	4770      	bx	lr
 800a7ae:	4b09      	ldr	r3, [pc, #36]	; (800a7d4 <acc_element_iq_mixer_init+0x60>)
 800a7b0:	6383      	str	r3, [r0, #56]	; 0x38
 800a7b2:	2001      	movs	r0, #1
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	0800a659 	.word	0x0800a659
 800a7bc:	0800a6c9 	.word	0x0800a6c9
 800a7c0:	0800a66d 	.word	0x0800a66d
 800a7c4:	2000082c 	.word	0x2000082c
 800a7c8:	08012c58 	.word	0x08012c58
 800a7cc:	08012dd4 	.word	0x08012dd4
 800a7d0:	0800a675 	.word	0x0800a675
 800a7d4:	0800a6a1 	.word	0x0800a6a1

0800a7d8 <noise_level_normalization_u16>:
 800a7d8:	0849      	lsrs	r1, r1, #1
 800a7da:	d01e      	beq.n	800a81a <noise_level_normalization_u16+0x42>
 800a7dc:	b470      	push	{r4, r5, r6}
 800a7de:	eb00 0441 	add.w	r4, r0, r1, lsl #1
 800a7e2:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800a7e6:	2600      	movs	r6, #0
 800a7e8:	b92a      	cbnz	r2, 800a7f6 <noise_level_normalization_u16+0x1e>
 800a7ea:	8005      	strh	r5, [r0, #0]
 800a7ec:	3002      	adds	r0, #2
 800a7ee:	42a0      	cmp	r0, r4
 800a7f0:	d1fa      	bne.n	800a7e8 <noise_level_normalization_u16+0x10>
 800a7f2:	bc70      	pop	{r4, r5, r6}
 800a7f4:	4770      	bx	lr
 800a7f6:	8801      	ldrh	r1, [r0, #0]
 800a7f8:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 800a7fc:	fb03 f101 	mul.w	r1, r3, r1
 800a800:	fb91 f1f2 	sdiv	r1, r1, r2
 800a804:	f511 4100 	adds.w	r1, r1, #32768	; 0x8000
 800a808:	d405      	bmi.n	800a816 <noise_level_normalization_u16+0x3e>
 800a80a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800a80e:	bfa8      	it	ge
 800a810:	4629      	movge	r1, r5
 800a812:	8001      	strh	r1, [r0, #0]
 800a814:	e7ea      	b.n	800a7ec <noise_level_normalization_u16+0x14>
 800a816:	8006      	strh	r6, [r0, #0]
 800a818:	e7e8      	b.n	800a7ec <noise_level_normalization_u16+0x14>
 800a81a:	4770      	bx	lr

0800a81c <event>:
 800a81c:	b570      	push	{r4, r5, r6, lr}
 800a81e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a820:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800a822:	6819      	ldr	r1, [r3, #0]
 800a824:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 800a826:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
 800a828:	4604      	mov	r4, r0
 800a82a:	6900      	ldr	r0, [r0, #16]
 800a82c:	47a8      	blx	r5
 800a82e:	6820      	ldr	r0, [r4, #0]
 800a830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a834:	6843      	ldr	r3, [r0, #4]
 800a836:	4718      	bx	r3

0800a838 <reset>:
 800a838:	6800      	ldr	r0, [r0, #0]
 800a83a:	68c3      	ldr	r3, [r0, #12]
 800a83c:	4718      	bx	r3
 800a83e:	bf00      	nop

0800a840 <validate>:
 800a840:	6983      	ldr	r3, [r0, #24]
 800a842:	b510      	push	{r4, lr}
 800a844:	4604      	mov	r4, r0
 800a846:	b113      	cbz	r3, 800a84e <validate+0xe>
 800a848:	f7fc ff14 	bl	8007674 <acc_rss_integration_log_level>
 800a84c:	b978      	cbnz	r0, 800a86e <validate+0x2e>
 800a84e:	69e3      	ldr	r3, [r4, #28]
 800a850:	b143      	cbz	r3, 800a864 <validate+0x24>
 800a852:	f7fc ff0f 	bl	8007674 <acc_rss_integration_log_level>
 800a856:	b128      	cbz	r0, 800a864 <validate+0x24>
 800a858:	4b08      	ldr	r3, [pc, #32]	; (800a87c <validate+0x3c>)
 800a85a:	4a09      	ldr	r2, [pc, #36]	; (800a880 <validate+0x40>)
 800a85c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a85e:	4909      	ldr	r1, [pc, #36]	; (800a884 <validate+0x44>)
 800a860:	2001      	movs	r0, #1
 800a862:	4798      	blx	r3
 800a864:	6820      	ldr	r0, [r4, #0]
 800a866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a86a:	6883      	ldr	r3, [r0, #8]
 800a86c:	4718      	bx	r3
 800a86e:	4b03      	ldr	r3, [pc, #12]	; (800a87c <validate+0x3c>)
 800a870:	4a05      	ldr	r2, [pc, #20]	; (800a888 <validate+0x48>)
 800a872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a874:	4903      	ldr	r1, [pc, #12]	; (800a884 <validate+0x44>)
 800a876:	2001      	movs	r0, #1
 800a878:	4798      	blx	r3
 800a87a:	e7e8      	b.n	800a84e <validate+0xe>
 800a87c:	2000082c 	.word	0x2000082c
 800a880:	08012c48 	.word	0x08012c48
 800a884:	08012e38 	.word	0x08012e38
 800a888:	08012c18 	.word	0x08012c18

0800a88c <acc_element_noise_level_normalization_init>:
 800a88c:	2902      	cmp	r1, #2
 800a88e:	b510      	push	{r4, lr}
 800a890:	8702      	strh	r2, [r0, #56]	; 0x38
 800a892:	8743      	strh	r3, [r0, #58]	; 0x3a
 800a894:	d001      	beq.n	800a89a <acc_element_noise_level_normalization_init+0xe>
 800a896:	2905      	cmp	r1, #5
 800a898:	d109      	bne.n	800a8ae <acc_element_noise_level_normalization_init+0x22>
 800a89a:	490a      	ldr	r1, [pc, #40]	; (800a8c4 <acc_element_noise_level_normalization_init+0x38>)
 800a89c:	4a0a      	ldr	r2, [pc, #40]	; (800a8c8 <acc_element_noise_level_normalization_init+0x3c>)
 800a89e:	4c0b      	ldr	r4, [pc, #44]	; (800a8cc <acc_element_noise_level_normalization_init+0x40>)
 800a8a0:	4b0b      	ldr	r3, [pc, #44]	; (800a8d0 <acc_element_noise_level_normalization_init+0x44>)
 800a8a2:	63c4      	str	r4, [r0, #60]	; 0x3c
 800a8a4:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800a8a8:	60c3      	str	r3, [r0, #12]
 800a8aa:	2001      	movs	r0, #1
 800a8ac:	bd10      	pop	{r4, pc}
 800a8ae:	4b09      	ldr	r3, [pc, #36]	; (800a8d4 <acc_element_noise_level_normalization_init+0x48>)
 800a8b0:	4a09      	ldr	r2, [pc, #36]	; (800a8d8 <acc_element_noise_level_normalization_init+0x4c>)
 800a8b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8b4:	4909      	ldr	r1, [pc, #36]	; (800a8dc <acc_element_noise_level_normalization_init+0x50>)
 800a8b6:	2400      	movs	r4, #0
 800a8b8:	63c4      	str	r4, [r0, #60]	; 0x3c
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	4798      	blx	r3
 800a8be:	4620      	mov	r0, r4
 800a8c0:	bd10      	pop	{r4, pc}
 800a8c2:	bf00      	nop
 800a8c4:	0800a81d 	.word	0x0800a81d
 800a8c8:	0800a841 	.word	0x0800a841
 800a8cc:	0800a7d9 	.word	0x0800a7d9
 800a8d0:	0800a839 	.word	0x0800a839
 800a8d4:	2000082c 	.word	0x2000082c
 800a8d8:	08012c58 	.word	0x08012c58
 800a8dc:	08012e38 	.word	0x08012e38

0800a8e0 <event>:
 800a8e0:	b510      	push	{r4, lr}
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a8e6:	4798      	blx	r3
 800a8e8:	6820      	ldr	r0, [r4, #0]
 800a8ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8ee:	6843      	ldr	r3, [r0, #4]
 800a8f0:	4718      	bx	r3
 800a8f2:	bf00      	nop

0800a8f4 <reset>:
 800a8f4:	6800      	ldr	r0, [r0, #0]
 800a8f6:	68c3      	ldr	r3, [r0, #12]
 800a8f8:	4718      	bx	r3
 800a8fa:	bf00      	nop

0800a8fc <do_phase_compensation_q3_12>:
 800a8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a900:	2a7c      	cmp	r2, #124	; 0x7c
 800a902:	b0fd      	sub	sp, #500	; 0x1f4
 800a904:	d82a      	bhi.n	800a95c <do_phase_compensation_q3_12+0x60>
 800a906:	4689      	mov	r9, r1
 800a908:	b329      	cbz	r1, 800a956 <do_phase_compensation_q3_12+0x5a>
 800a90a:	469a      	mov	sl, r3
 800a90c:	ab7c      	add	r3, sp, #496	; 0x1f0
 800a90e:	2600      	movs	r6, #0
 800a910:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
 800a914:	4615      	mov	r5, r2
 800a916:	4604      	mov	r4, r0
 800a918:	46b0      	mov	r8, r6
 800a91a:	f5ab 7bfa 	sub.w	fp, fp, #500	; 0x1f4
 800a91e:	0097      	lsls	r7, r2, #2
 800a920:	4621      	mov	r1, r4
 800a922:	463a      	mov	r2, r7
 800a924:	4668      	mov	r0, sp
 800a926:	f005 f88d 	bl	800fa44 <memcpy>
 800a92a:	462a      	mov	r2, r5
 800a92c:	4651      	mov	r1, sl
 800a92e:	4668      	mov	r0, sp
 800a930:	f8cd 8000 	str.w	r8, [sp]
 800a934:	f8cb 8000 	str.w	r8, [fp]
 800a938:	f003 fb48 	bl	800dfcc <acc_alg_phase_estimation_q3_12>
 800a93c:	4629      	mov	r1, r5
 800a93e:	4668      	mov	r0, sp
 800a940:	f003 ff0c 	bl	800e75c <acc_alg_basic_math_q3_12_complex_conj_normalize>
 800a944:	3601      	adds	r6, #1
 800a946:	4620      	mov	r0, r4
 800a948:	462a      	mov	r2, r5
 800a94a:	4669      	mov	r1, sp
 800a94c:	f003 feae 	bl	800e6ac <acc_alg_basic_math_q3_12_complex_mul>
 800a950:	45b1      	cmp	r9, r6
 800a952:	443c      	add	r4, r7
 800a954:	d1e4      	bne.n	800a920 <do_phase_compensation_q3_12+0x24>
 800a956:	b07d      	add	sp, #500	; 0x1f4
 800a958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a95c:	4801      	ldr	r0, [pc, #4]	; (800a964 <do_phase_compensation_q3_12+0x68>)
 800a95e:	217d      	movs	r1, #125	; 0x7d
 800a960:	f7ff f8ac 	bl	8009abc <acc_assert_fail>
 800a964:	08012e5c 	.word	0x08012e5c

0800a968 <phase_compensate_q3_12_complex>:
 800a968:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
 800a96c:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	; 0x44
 800a970:	6900      	ldr	r0, [r0, #16]
 800a972:	f7ff bfc3 	b.w	800a8fc <do_phase_compensation_q3_12>
 800a976:	bf00      	nop

0800a978 <validate>:
 800a978:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	b510      	push	{r4, lr}
 800a980:	d007      	beq.n	800a992 <validate+0x1a>
 800a982:	4b12      	ldr	r3, [pc, #72]	; (800a9cc <validate+0x54>)
 800a984:	4a12      	ldr	r2, [pc, #72]	; (800a9d0 <validate+0x58>)
 800a986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a988:	4912      	ldr	r1, [pc, #72]	; (800a9d4 <validate+0x5c>)
 800a98a:	2000      	movs	r0, #0
 800a98c:	4798      	blx	r3
 800a98e:	2000      	movs	r0, #0
 800a990:	bd10      	pop	{r4, pc}
 800a992:	6983      	ldr	r3, [r0, #24]
 800a994:	4604      	mov	r4, r0
 800a996:	b113      	cbz	r3, 800a99e <validate+0x26>
 800a998:	f7fc fe6c 	bl	8007674 <acc_rss_integration_log_level>
 800a99c:	b978      	cbnz	r0, 800a9be <validate+0x46>
 800a99e:	69e3      	ldr	r3, [r4, #28]
 800a9a0:	b143      	cbz	r3, 800a9b4 <validate+0x3c>
 800a9a2:	f7fc fe67 	bl	8007674 <acc_rss_integration_log_level>
 800a9a6:	b128      	cbz	r0, 800a9b4 <validate+0x3c>
 800a9a8:	4b08      	ldr	r3, [pc, #32]	; (800a9cc <validate+0x54>)
 800a9aa:	4a0b      	ldr	r2, [pc, #44]	; (800a9d8 <validate+0x60>)
 800a9ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9ae:	4909      	ldr	r1, [pc, #36]	; (800a9d4 <validate+0x5c>)
 800a9b0:	2001      	movs	r0, #1
 800a9b2:	4798      	blx	r3
 800a9b4:	6820      	ldr	r0, [r4, #0]
 800a9b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9ba:	6883      	ldr	r3, [r0, #8]
 800a9bc:	4718      	bx	r3
 800a9be:	4b03      	ldr	r3, [pc, #12]	; (800a9cc <validate+0x54>)
 800a9c0:	4a06      	ldr	r2, [pc, #24]	; (800a9dc <validate+0x64>)
 800a9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9c4:	4903      	ldr	r1, [pc, #12]	; (800a9d4 <validate+0x5c>)
 800a9c6:	2001      	movs	r0, #1
 800a9c8:	4798      	blx	r3
 800a9ca:	e7e8      	b.n	800a99e <validate+0x26>
 800a9cc:	2000082c 	.word	0x2000082c
 800a9d0:	08012d58 	.word	0x08012d58
 800a9d4:	08012e5c 	.word	0x08012e5c
 800a9d8:	08012c48 	.word	0x08012c48
 800a9dc:	08012c18 	.word	0x08012c18

0800a9e0 <acc_element_phase_compensation_init>:
 800a9e0:	eddf 6a17 	vldr	s13, [pc, #92]	; 800aa40 <acc_element_phase_compensation_init+0x60>
 800a9e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ec:	ee20 0a26 	vmul.f32	s0, s0, s13
 800a9f0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a9f4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800a9f8:	bfb8      	it	lt
 800a9fa:	eef0 7a47 	vmovlt.f32	s15, s14
 800a9fe:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aa02:	b538      	push	{r3, r4, r5, lr}
 800aa04:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800aa08:	6403      	str	r3, [r0, #64]	; 0x40
 800aa0a:	4b0e      	ldr	r3, [pc, #56]	; (800aa44 <acc_element_phase_compensation_init+0x64>)
 800aa0c:	4d0e      	ldr	r5, [pc, #56]	; (800aa48 <acc_element_phase_compensation_init+0x68>)
 800aa0e:	4c0f      	ldr	r4, [pc, #60]	; (800aa4c <acc_element_phase_compensation_init+0x6c>)
 800aa10:	60c3      	str	r3, [r0, #12]
 800aa12:	ee10 3a10 	vmov	r3, s0
 800aa16:	2907      	cmp	r1, #7
 800aa18:	e9c0 5401 	strd	r5, r4, [r0, #4]
 800aa1c:	63c2      	str	r2, [r0, #60]	; 0x3c
 800aa1e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 800aa22:	d103      	bne.n	800aa2c <acc_element_phase_compensation_init+0x4c>
 800aa24:	4b0a      	ldr	r3, [pc, #40]	; (800aa50 <acc_element_phase_compensation_init+0x70>)
 800aa26:	6383      	str	r3, [r0, #56]	; 0x38
 800aa28:	2001      	movs	r0, #1
 800aa2a:	bd38      	pop	{r3, r4, r5, pc}
 800aa2c:	4b09      	ldr	r3, [pc, #36]	; (800aa54 <acc_element_phase_compensation_init+0x74>)
 800aa2e:	4a0a      	ldr	r2, [pc, #40]	; (800aa58 <acc_element_phase_compensation_init+0x78>)
 800aa30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa32:	490a      	ldr	r1, [pc, #40]	; (800aa5c <acc_element_phase_compensation_init+0x7c>)
 800aa34:	2400      	movs	r4, #0
 800aa36:	6384      	str	r4, [r0, #56]	; 0x38
 800aa38:	4620      	mov	r0, r4
 800aa3a:	4798      	blx	r3
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	bd38      	pop	{r3, r4, r5, pc}
 800aa40:	45800000 	.word	0x45800000
 800aa44:	0800a8f5 	.word	0x0800a8f5
 800aa48:	0800a8e1 	.word	0x0800a8e1
 800aa4c:	0800a979 	.word	0x0800a979
 800aa50:	0800a969 	.word	0x0800a969
 800aa54:	2000082c 	.word	0x2000082c
 800aa58:	08012c58 	.word	0x08012c58
 800aa5c:	08012e5c 	.word	0x08012e5c

0800aa60 <reset>:
 800aa60:	69c3      	ldr	r3, [r0, #28]
 800aa62:	6800      	ldr	r0, [r0, #0]
 800aa64:	2201      	movs	r2, #1
 800aa66:	701a      	strb	r2, [r3, #0]
 800aa68:	68c3      	ldr	r3, [r0, #12]
 800aa6a:	4718      	bx	r3

0800aa6c <event>:
 800aa6c:	b570      	push	{r4, r5, r6, lr}
 800aa6e:	69c5      	ldr	r5, [r0, #28]
 800aa70:	462b      	mov	r3, r5
 800aa72:	4604      	mov	r4, r0
 800aa74:	f813 2b04 	ldrb.w	r2, [r3], #4
 800aa78:	b962      	cbnz	r2, 800aa94 <event+0x28>
 800aa7a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800aa7c:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800aa7e:	ed90 0a0f 	vldr	s0, [r0, #60]	; 0x3c
 800aa82:	6812      	ldr	r2, [r2, #0]
 800aa84:	6900      	ldr	r0, [r0, #16]
 800aa86:	4619      	mov	r1, r3
 800aa88:	47a8      	blx	r5
 800aa8a:	6820      	ldr	r0, [r4, #0]
 800aa8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa90:	6843      	ldr	r3, [r0, #4]
 800aa92:	4718      	bx	r3
 800aa94:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800aa96:	6901      	ldr	r1, [r0, #16]
 800aa98:	6812      	ldr	r2, [r2, #0]
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f004 ffd2 	bl	800fa44 <memcpy>
 800aaa0:	6820      	ldr	r0, [r4, #0]
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	702b      	strb	r3, [r5, #0]
 800aaa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aaaa:	6843      	ldr	r3, [r0, #4]
 800aaac:	4718      	bx	r3
 800aaae:	bf00      	nop

0800aab0 <filter_q3_12_complex>:
 800aab0:	b530      	push	{r4, r5, lr}
 800aab2:	ed2d 8b02 	vpush	{d8}
 800aab6:	b083      	sub	sp, #12
 800aab8:	4604      	mov	r4, r0
 800aaba:	2007      	movs	r0, #7
 800aabc:	eeb0 8a40 	vmov.f32	s16, s0
 800aac0:	4615      	mov	r5, r2
 800aac2:	9101      	str	r1, [sp, #4]
 800aac4:	f7ff f852 	bl	8009b6c <acc_element_sizeof>
 800aac8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800ab0c <filter_q3_12_complex+0x5c>
 800aacc:	9901      	ldr	r1, [sp, #4]
 800aace:	fbb5 f3f0 	udiv	r3, r5, r0
 800aad2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800aad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aada:	ee28 8a07 	vmul.f32	s16, s16, s14
 800aade:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800aae2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800aae6:	bfb8      	it	lt
 800aae8:	eeb0 0a67 	vmovlt.f32	s0, s15
 800aaec:	ee38 8a00 	vadd.f32	s16, s16, s0
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 800aaf6:	ee18 2a10 	vmov	r2, s16
 800aafa:	b212      	sxth	r2, r2
 800aafc:	b003      	add	sp, #12
 800aafe:	ecbd 8b02 	vpop	{d8}
 800ab02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab06:	f002 bfab 	b.w	800da60 <acc_alg_basic_exponential_smoothing_q3_12_complex>
 800ab0a:	bf00      	nop
 800ab0c:	45800000 	.word	0x45800000

0800ab10 <validate>:
 800ab10:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	b510      	push	{r4, lr}
 800ab18:	d015      	beq.n	800ab46 <validate+0x36>
 800ab1a:	6984      	ldr	r4, [r0, #24]
 800ab1c:	b13c      	cbz	r4, 800ab2e <validate+0x1e>
 800ab1e:	4b10      	ldr	r3, [pc, #64]	; (800ab60 <validate+0x50>)
 800ab20:	4a10      	ldr	r2, [pc, #64]	; (800ab64 <validate+0x54>)
 800ab22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab24:	4910      	ldr	r1, [pc, #64]	; (800ab68 <validate+0x58>)
 800ab26:	2000      	movs	r0, #0
 800ab28:	4798      	blx	r3
 800ab2a:	2000      	movs	r0, #0
 800ab2c:	bd10      	pop	{r4, pc}
 800ab2e:	69c2      	ldr	r2, [r0, #28]
 800ab30:	3204      	adds	r2, #4
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d00f      	beq.n	800ab56 <validate+0x46>
 800ab36:	4b0a      	ldr	r3, [pc, #40]	; (800ab60 <validate+0x50>)
 800ab38:	4a0c      	ldr	r2, [pc, #48]	; (800ab6c <validate+0x5c>)
 800ab3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab3c:	490a      	ldr	r1, [pc, #40]	; (800ab68 <validate+0x58>)
 800ab3e:	4620      	mov	r0, r4
 800ab40:	4798      	blx	r3
 800ab42:	2000      	movs	r0, #0
 800ab44:	bd10      	pop	{r4, pc}
 800ab46:	4b06      	ldr	r3, [pc, #24]	; (800ab60 <validate+0x50>)
 800ab48:	4a09      	ldr	r2, [pc, #36]	; (800ab70 <validate+0x60>)
 800ab4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab4c:	4906      	ldr	r1, [pc, #24]	; (800ab68 <validate+0x58>)
 800ab4e:	2000      	movs	r0, #0
 800ab50:	4798      	blx	r3
 800ab52:	2000      	movs	r0, #0
 800ab54:	bd10      	pop	{r4, pc}
 800ab56:	6800      	ldr	r0, [r0, #0]
 800ab58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab5c:	6883      	ldr	r3, [r0, #8]
 800ab5e:	4718      	bx	r3
 800ab60:	2000082c 	.word	0x2000082c
 800ab64:	08012ec8 	.word	0x08012ec8
 800ab68:	08012ea4 	.word	0x08012ea4
 800ab6c:	08012ee8 	.word	0x08012ee8
 800ab70:	08012e78 	.word	0x08012e78

0800ab74 <acc_element_time_domain_low_pass_filter_init>:
 800ab74:	b510      	push	{r4, lr}
 800ab76:	4a0c      	ldr	r2, [pc, #48]	; (800aba8 <acc_element_time_domain_low_pass_filter_init+0x34>)
 800ab78:	4c0c      	ldr	r4, [pc, #48]	; (800abac <acc_element_time_domain_low_pass_filter_init+0x38>)
 800ab7a:	4b0d      	ldr	r3, [pc, #52]	; (800abb0 <acc_element_time_domain_low_pass_filter_init+0x3c>)
 800ab7c:	60c3      	str	r3, [r0, #12]
 800ab7e:	2907      	cmp	r1, #7
 800ab80:	e9c0 4201 	strd	r4, r2, [r0, #4]
 800ab84:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
 800ab88:	d103      	bne.n	800ab92 <acc_element_time_domain_low_pass_filter_init+0x1e>
 800ab8a:	4b0a      	ldr	r3, [pc, #40]	; (800abb4 <acc_element_time_domain_low_pass_filter_init+0x40>)
 800ab8c:	6383      	str	r3, [r0, #56]	; 0x38
 800ab8e:	2001      	movs	r0, #1
 800ab90:	bd10      	pop	{r4, pc}
 800ab92:	4b09      	ldr	r3, [pc, #36]	; (800abb8 <acc_element_time_domain_low_pass_filter_init+0x44>)
 800ab94:	4a09      	ldr	r2, [pc, #36]	; (800abbc <acc_element_time_domain_low_pass_filter_init+0x48>)
 800ab96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab98:	4909      	ldr	r1, [pc, #36]	; (800abc0 <acc_element_time_domain_low_pass_filter_init+0x4c>)
 800ab9a:	2400      	movs	r4, #0
 800ab9c:	6384      	str	r4, [r0, #56]	; 0x38
 800ab9e:	4620      	mov	r0, r4
 800aba0:	4798      	blx	r3
 800aba2:	4620      	mov	r0, r4
 800aba4:	bd10      	pop	{r4, pc}
 800aba6:	bf00      	nop
 800aba8:	0800ab11 	.word	0x0800ab11
 800abac:	0800aa6d 	.word	0x0800aa6d
 800abb0:	0800aa61 	.word	0x0800aa61
 800abb4:	0800aab1 	.word	0x0800aab1
 800abb8:	2000082c 	.word	0x2000082c
 800abbc:	08012c58 	.word	0x08012c58
 800abc0:	08012ea4 	.word	0x08012ea4

0800abc4 <acc_element_source_adc_init_radar_engine>:
 800abc4:	b538      	push	{r3, r4, r5, lr}
 800abc6:	9d04      	ldr	r5, [sp, #16]
 800abc8:	4604      	mov	r4, r0
 800abca:	4608      	mov	r0, r1
 800abcc:	63e1      	str	r1, [r4, #60]	; 0x3c
 800abce:	4611      	mov	r1, r2
 800abd0:	461a      	mov	r2, r3
 800abd2:	462b      	mov	r3, r5
 800abd4:	f7fe fa16 	bl	8009004 <acc_sensor_manager_prepare_radar_engine>
 800abd8:	896b      	ldrh	r3, [r5, #10]
 800abda:	8723      	strh	r3, [r4, #56]	; 0x38
 800abdc:	bd38      	pop	{r3, r4, r5, pc}
 800abde:	bf00      	nop

0800abe0 <acc_element_source_adc_init>:
 800abe0:	b510      	push	{r4, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	4604      	mov	r4, r0
 800abe6:	4608      	mov	r0, r1
 800abe8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800abec:	9101      	str	r1, [sp, #4]
 800abee:	f7fc fb7d 	bl	80072ec <acc_base_configuration_print>
 800abf2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800abf6:	9901      	ldr	r1, [sp, #4]
 800abf8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800abfa:	b004      	add	sp, #16
 800abfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac00:	f7fe ba4c 	b.w	800909c <acc_sensor_manager_prepare_measurement>

0800ac04 <acc_element_source_adc_release>:
 800ac04:	b110      	cbz	r0, 800ac0c <acc_element_source_adc_release+0x8>
 800ac06:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800ac08:	f7fe bb0e 	b.w	8009228 <acc_sensor_manager_release_measurement>
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop

0800ac10 <acc_element_source_adc_reset>:
 800ac10:	6800      	ldr	r0, [r0, #0]
 800ac12:	68c3      	ldr	r3, [r0, #12]
 800ac14:	4718      	bx	r3
 800ac16:	bf00      	nop

0800ac18 <acc_element_source_adc_validate>:
 800ac18:	6800      	ldr	r0, [r0, #0]
 800ac1a:	6883      	ldr	r3, [r0, #8]
 800ac1c:	4718      	bx	r3
 800ac1e:	bf00      	nop

0800ac20 <acc_element_source_adc_produce>:
 800ac20:	b530      	push	{r4, r5, lr}
 800ac22:	4604      	mov	r4, r0
 800ac24:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800ac26:	b083      	sub	sp, #12
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	d02f      	beq.n	800ac8c <acc_element_source_adc_produce+0x6c>
 800ac2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ac2e:	4a19      	ldr	r2, [pc, #100]	; (800ac94 <acc_element_source_adc_produce+0x74>)
 800ac30:	6a25      	ldr	r5, [r4, #32]
 800ac32:	601a      	str	r2, [r3, #0]
 800ac34:	f7fe fb0c 	bl	8009250 <acc_sensor_manager_get_sensor_id>
 800ac38:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800ac3a:	6028      	str	r0, [r5, #0]
 800ac3c:	6961      	ldr	r1, [r4, #20]
 800ac3e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800ac40:	ab01      	add	r3, sp, #4
 800ac42:	f7fe f951 	bl	8008ee8 <acc_sensor_manager_acquire_adc_data>
 800ac46:	4605      	mov	r5, r0
 800ac48:	b1c0      	cbz	r0, 800ac7c <acc_element_source_adc_produce+0x5c>
 800ac4a:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 800ac4e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800ac50:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ac54:	005b      	lsls	r3, r3, #1
 800ac56:	6003      	str	r3, [r0, #0]
 800ac58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ac5a:	7011      	strb	r1, [r2, #0]
 800ac5c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ac60:	701a      	strb	r2, [r3, #0]
 800ac62:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ac66:	b90b      	cbnz	r3, 800ac6c <acc_element_source_adc_produce+0x4c>
 800ac68:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ac6c:	6820      	ldr	r0, [r4, #0]
 800ac6e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ac70:	7013      	strb	r3, [r2, #0]
 800ac72:	6843      	ldr	r3, [r0, #4]
 800ac74:	4798      	blx	r3
 800ac76:	4628      	mov	r0, r5
 800ac78:	b003      	add	sp, #12
 800ac7a:	bd30      	pop	{r4, r5, pc}
 800ac7c:	4b06      	ldr	r3, [pc, #24]	; (800ac98 <acc_element_source_adc_produce+0x78>)
 800ac7e:	4a07      	ldr	r2, [pc, #28]	; (800ac9c <acc_element_source_adc_produce+0x7c>)
 800ac80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac82:	4907      	ldr	r1, [pc, #28]	; (800aca0 <acc_element_source_adc_produce+0x80>)
 800ac84:	4798      	blx	r3
 800ac86:	4628      	mov	r0, r5
 800ac88:	b003      	add	sp, #12
 800ac8a:	bd30      	pop	{r4, r5, pc}
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	4628      	mov	r0, r5
 800ac90:	b003      	add	sp, #12
 800ac92:	bd30      	pop	{r4, r5, pc}
 800ac94:	51645c3c 	.word	0x51645c3c
 800ac98:	2000082c 	.word	0x2000082c
 800ac9c:	08012f10 	.word	0x08012f10
 800aca0:	08012f30 	.word	0x08012f30

0800aca4 <acc_element_source_adc_inject_data>:
 800aca4:	b570      	push	{r4, r5, r6, lr}
 800aca6:	4604      	mov	r4, r0
 800aca8:	6940      	ldr	r0, [r0, #20]
 800acaa:	4e08      	ldr	r6, [pc, #32]	; (800accc <acc_element_source_adc_inject_data+0x28>)
 800acac:	4615      	mov	r5, r2
 800acae:	f004 fec9 	bl	800fa44 <memcpy>
 800acb2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800acb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800acb6:	6820      	ldr	r0, [r4, #0]
 800acb8:	6a22      	ldr	r2, [r4, #32]
 800acba:	600d      	str	r5, [r1, #0]
 800acbc:	2100      	movs	r1, #0
 800acbe:	601e      	str	r6, [r3, #0]
 800acc0:	6843      	ldr	r3, [r0, #4]
 800acc2:	6011      	str	r1, [r2, #0]
 800acc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800acc8:	4718      	bx	r3
 800acca:	bf00      	nop
 800accc:	51645c3c 	.word	0x51645c3c

0800acd0 <acc_cpd_cbank_and_vana_calibration>:
 800acd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd4:	ed2d 8b02 	vpush	{d8}
 800acd8:	4614      	mov	r4, r2
 800acda:	b08b      	sub	sp, #44	; 0x2c
 800acdc:	461e      	mov	r6, r3
 800acde:	ab09      	add	r3, sp, #36	; 0x24
 800ace0:	4680      	mov	r8, r0
 800ace2:	4689      	mov	r9, r1
 800ace4:	460a      	mov	r2, r1
 800ace6:	2500      	movs	r5, #0
 800ace8:	4601      	mov	r1, r0
 800acea:	6820      	ldr	r0, [r4, #0]
 800acec:	9300      	str	r3, [sp, #0]
 800acee:	ab08      	add	r3, sp, #32
 800acf0:	e9cd 5508 	strd	r5, r5, [sp, #32]
 800acf4:	9606      	str	r6, [sp, #24]
 800acf6:	f7fe faad 	bl	8009254 <acc_sensor_protocol_r2_prepare_load>
 800acfa:	2800      	cmp	r0, #0
 800acfc:	f000 808b 	beq.w	800ae16 <acc_cpd_cbank_and_vana_calibration+0x146>
 800ad00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad02:	461e      	mov	r6, r3
 800ad04:	f5c5 734b 	rsb	r3, r5, #812	; 0x32c
 800ad08:	429e      	cmp	r6, r3
 800ad0a:	bf28      	it	cs
 800ad0c:	461e      	movcs	r6, r3
 800ad0e:	9f08      	ldr	r7, [sp, #32]
 800ad10:	f003 fbe2 	bl	800e4d8 <acc_image_a111_r2c_cbank_and_vana_calibration_get>
 800ad14:	ea4f 0a55 	mov.w	sl, r5, lsr #1
 800ad18:	0872      	lsrs	r2, r6, #1
 800ad1a:	4639      	mov	r1, r7
 800ad1c:	eb00 008a 	add.w	r0, r0, sl, lsl #2
 800ad20:	f003 fbcc 	bl	800e4bc <acc_confprogram_copy>
 800ad24:	b2b2      	uxth	r2, r6
 800ad26:	9204      	str	r2, [sp, #16]
 800ad28:	f003 fbda 	bl	800e4e0 <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 800ad2c:	6862      	ldr	r2, [r4, #4]
 800ad2e:	9201      	str	r2, [sp, #4]
 800ad30:	2218      	movs	r2, #24
 800ad32:	b2a9      	uxth	r1, r5
 800ad34:	4603      	mov	r3, r0
 800ad36:	9200      	str	r2, [sp, #0]
 800ad38:	4638      	mov	r0, r7
 800ad3a:	9a04      	ldr	r2, [sp, #16]
 800ad3c:	9205      	str	r2, [sp, #20]
 800ad3e:	9104      	str	r1, [sp, #16]
 800ad40:	f003 face 	bl	800e2e0 <acc_confprogram_patch_offset>
 800ad44:	f003 fbcc 	bl	800e4e0 <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 800ad48:	68a2      	ldr	r2, [r4, #8]
 800ad4a:	9201      	str	r2, [sp, #4]
 800ad4c:	2216      	movs	r2, #22
 800ad4e:	4603      	mov	r3, r0
 800ad50:	9200      	str	r2, [sp, #0]
 800ad52:	4638      	mov	r0, r7
 800ad54:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800ad58:	f003 fac2 	bl	800e2e0 <acc_confprogram_patch_offset>
 800ad5c:	f003 fbc0 	bl	800e4e0 <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 800ad60:	68e2      	ldr	r2, [r4, #12]
 800ad62:	9201      	str	r2, [sp, #4]
 800ad64:	2217      	movs	r2, #23
 800ad66:	4603      	mov	r3, r0
 800ad68:	9200      	str	r2, [sp, #0]
 800ad6a:	4638      	mov	r0, r7
 800ad6c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800ad70:	f003 fab6 	bl	800e2e0 <acc_confprogram_patch_offset>
 800ad74:	f003 fbb4 	bl	800e4e0 <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 800ad78:	f04f 0c15 	mov.w	ip, #21
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	8a20      	ldrh	r0, [r4, #16]
 800ad80:	9001      	str	r0, [sp, #4]
 800ad82:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800ad86:	f8cd c000 	str.w	ip, [sp]
 800ad8a:	4638      	mov	r0, r7
 800ad8c:	f003 faa8 	bl	800e2e0 <acc_confprogram_patch_offset>
 800ad90:	f003 fba6 	bl	800e4e0 <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 800ad94:	f04f 0b00 	mov.w	fp, #0
 800ad98:	f04f 0c10 	mov.w	ip, #16
 800ad9c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800ada0:	4603      	mov	r3, r0
 800ada2:	e9cd bc00 	strd	fp, ip, [sp]
 800ada6:	4638      	mov	r0, r7
 800ada8:	f003 fa9a 	bl	800e2e0 <acc_confprogram_patch_offset>
 800adac:	4633      	mov	r3, r6
 800adae:	6820      	ldr	r0, [r4, #0]
 800adb0:	4642      	mov	r2, r8
 800adb2:	fa1f f18a 	uxth.w	r1, sl
 800adb6:	f7fd ff5d 	bl	8008c74 <acc_sensor_r2_load_confmem>
 800adba:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800adbc:	4435      	add	r5, r6
 800adbe:	f5b5 7f4b 	cmp.w	r5, #812	; 0x32c
 800adc2:	d39f      	bcc.n	800ad04 <acc_cpd_cbank_and_vana_calibration+0x34>
 800adc4:	48ba      	ldr	r0, [pc, #744]	; (800b0b0 <acc_cpd_cbank_and_vana_calibration+0x3e0>)
 800adc6:	f7fe fe91 	bl	8009aec <acc_diagnostic_log_set_scope>
 800adca:	6821      	ldr	r1, [r4, #0]
 800adcc:	48b9      	ldr	r0, [pc, #740]	; (800b0b4 <acc_cpd_cbank_and_vana_calibration+0x3e4>)
 800adce:	f7fe fead 	bl	8009b2c <acc_diagnostic_log_scalar>
 800add2:	48b9      	ldr	r0, [pc, #740]	; (800b0b8 <acc_cpd_cbank_and_vana_calibration+0x3e8>)
 800add4:	2203      	movs	r2, #3
 800add6:	4659      	mov	r1, fp
 800add8:	f7fe fe90 	bl	8009afc <acc_diagnostic_log_declare_parameter>
 800addc:	6826      	ldr	r6, [r4, #0]
 800adde:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ade2:	4630      	mov	r0, r6
 800ade4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800ade8:	f7fe fb12 	bl	8009410 <acc_sensor_protocol_r2_is_sensor_running>
 800adec:	4605      	mov	r5, r0
 800adee:	b1f0      	cbz	r0, 800ae2e <acc_cpd_cbank_and_vana_calibration+0x15e>
 800adf0:	4db2      	ldr	r5, [pc, #712]	; (800b0bc <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 800adf2:	4ab3      	ldr	r2, [pc, #716]	; (800b0c0 <acc_cpd_cbank_and_vana_calibration+0x3f0>)
 800adf4:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800adf6:	49b3      	ldr	r1, [pc, #716]	; (800b0c4 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 800adf8:	4633      	mov	r3, r6
 800adfa:	4658      	mov	r0, fp
 800adfc:	47a0      	blx	r4
 800adfe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ae00:	4ab1      	ldr	r2, [pc, #708]	; (800b0c8 <acc_cpd_cbank_and_vana_calibration+0x3f8>)
 800ae02:	49b0      	ldr	r1, [pc, #704]	; (800b0c4 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 800ae04:	2000      	movs	r0, #0
 800ae06:	4798      	blx	r3
 800ae08:	2600      	movs	r6, #0
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	b00b      	add	sp, #44	; 0x2c
 800ae0e:	ecbd 8b02 	vpop	{d8}
 800ae12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae16:	4ba9      	ldr	r3, [pc, #676]	; (800b0bc <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 800ae18:	4aac      	ldr	r2, [pc, #688]	; (800b0cc <acc_cpd_cbank_and_vana_calibration+0x3fc>)
 800ae1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae1c:	49a9      	ldr	r1, [pc, #676]	; (800b0c4 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 800ae1e:	4606      	mov	r6, r0
 800ae20:	4798      	blx	r3
 800ae22:	4630      	mov	r0, r6
 800ae24:	b00b      	add	sp, #44	; 0x2c
 800ae26:	ecbd 8b02 	vpop	{d8}
 800ae2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae2e:	f003 fb53 	bl	800e4d8 <acc_image_a111_r2c_cbank_and_vana_calibration_get>
 800ae32:	9004      	str	r0, [sp, #16]
 800ae34:	f003 fb54 	bl	800e4e0 <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 800ae38:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 800b0f0 <acc_cpd_cbank_and_vana_calibration+0x420>
 800ae3c:	9904      	ldr	r1, [sp, #16]
 800ae3e:	f8df b278 	ldr.w	fp, [pc, #632]	; 800b0b8 <acc_cpd_cbank_and_vana_calibration+0x3e8>
 800ae42:	2201      	movs	r2, #1
 800ae44:	4603      	mov	r3, r0
 800ae46:	9200      	str	r2, [sp, #0]
 800ae48:	e9cd 5a01 	strd	r5, sl, [sp, #4]
 800ae4c:	462a      	mov	r2, r5
 800ae4e:	4630      	mov	r0, r6
 800ae50:	ee08 8a10 	vmov	s16, r8
 800ae54:	f003 fab8 	bl	800e3c8 <acc_confprogram_live_patch>
 800ae58:	462f      	mov	r7, r5
 800ae5a:	9405      	str	r4, [sp, #20]
 800ae5c:	462c      	mov	r4, r5
 800ae5e:	4639      	mov	r1, r7
 800ae60:	4658      	mov	r0, fp
 800ae62:	f7fe fe53 	bl	8009b0c <acc_diagnostic_log_set_parameter>
 800ae66:	f003 fb37 	bl	800e4d8 <acc_image_a111_r2c_cbank_and_vana_calibration_get>
 800ae6a:	9004      	str	r0, [sp, #16]
 800ae6c:	f003 fb38 	bl	800e4e0 <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 800ae70:	221c      	movs	r2, #28
 800ae72:	9904      	ldr	r1, [sp, #16]
 800ae74:	9200      	str	r2, [sp, #0]
 800ae76:	4603      	mov	r3, r0
 800ae78:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f003 faa2 	bl	800e3c8 <acc_confprogram_live_patch>
 800ae84:	21ef      	movs	r1, #239	; 0xef
 800ae86:	4630      	mov	r0, r6
 800ae88:	f7fe fa48 	bl	800931c <acc_sensor_protocol_r2_run_program>
 800ae8c:	2800      	cmp	r0, #0
 800ae8e:	f000 8131 	beq.w	800b0f4 <acc_cpd_cbank_and_vana_calibration+0x424>
 800ae92:	2300      	movs	r3, #0
 800ae94:	2209      	movs	r2, #9
 800ae96:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800ae9a:	4630      	mov	r0, r6
 800ae9c:	f7fe fbc2 	bl	8009624 <acc_sensor_protocol_r2_wait_for_specific_event>
 800aea0:	b938      	cbnz	r0, 800aeb2 <acc_cpd_cbank_and_vana_calibration+0x1e2>
 800aea2:	4d86      	ldr	r5, [pc, #536]	; (800b0bc <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 800aea4:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800aea6:	4a8a      	ldr	r2, [pc, #552]	; (800b0d0 <acc_cpd_cbank_and_vana_calibration+0x400>)
 800aea8:	4986      	ldr	r1, [pc, #536]	; (800b0c4 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 800aeaa:	463b      	mov	r3, r7
 800aeac:	2000      	movs	r0, #0
 800aeae:	47a0      	blx	r4
 800aeb0:	e7a5      	b.n	800adfe <acc_cpd_cbank_and_vana_calibration+0x12e>
 800aeb2:	2110      	movs	r1, #16
 800aeb4:	4648      	mov	r0, r9
 800aeb6:	f7fd ff15 	bl	8008ce4 <acc_sensor_r2_buffer_processed_verify_size>
 800aeba:	b928      	cbnz	r0, 800aec8 <acc_cpd_cbank_and_vana_calibration+0x1f8>
 800aebc:	4d7f      	ldr	r5, [pc, #508]	; (800b0bc <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 800aebe:	4a85      	ldr	r2, [pc, #532]	; (800b0d4 <acc_cpd_cbank_and_vana_calibration+0x404>)
 800aec0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800aec2:	4980      	ldr	r1, [pc, #512]	; (800b0c4 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 800aec4:	4798      	blx	r3
 800aec6:	e7ed      	b.n	800aea4 <acc_cpd_cbank_and_vana_calibration+0x1d4>
 800aec8:	ee18 1a10 	vmov	r1, s16
 800aecc:	2310      	movs	r3, #16
 800aece:	2200      	movs	r2, #0
 800aed0:	4630      	mov	r0, r6
 800aed2:	f7fd ff0f 	bl	8008cf4 <acc_sensor_r2_buffer_processed_read>
 800aed6:	2310      	movs	r3, #16
 800aed8:	4602      	mov	r2, r0
 800aeda:	4680      	mov	r8, r0
 800aedc:	4631      	mov	r1, r6
 800aede:	2000      	movs	r0, #0
 800aee0:	f7fe ff14 	bl	8009d0c <acc_probes_execute_uint16>
 800aee4:	4630      	mov	r0, r6
 800aee6:	f7fe faa5 	bl	8009434 <acc_sensor_protocol_r2_ack_event>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	d0d9      	beq.n	800aea2 <acc_cpd_cbank_and_vana_calibration+0x1d2>
 800aeee:	2500      	movs	r5, #0
 800aef0:	462b      	mov	r3, r5
 800aef2:	4642      	mov	r2, r8
 800aef4:	f108 0c1e 	add.w	ip, r8, #30
 800aef8:	8851      	ldrh	r1, [r2, #2]
 800aefa:	f832 0b02 	ldrh.w	r0, [r2], #2
 800aefe:	4281      	cmp	r1, r0
 800af00:	440b      	add	r3, r1
 800af02:	bf34      	ite	cc
 800af04:	1a41      	subcc	r1, r0, r1
 800af06:	1a09      	subcs	r1, r1, r0
 800af08:	428d      	cmp	r5, r1
 800af0a:	bf38      	it	cc
 800af0c:	460d      	movcc	r5, r1
 800af0e:	4594      	cmp	ip, r2
 800af10:	d1f2      	bne.n	800aef8 <acc_cpd_cbank_and_vana_calibration+0x228>
 800af12:	4871      	ldr	r0, [pc, #452]	; (800b0d8 <acc_cpd_cbank_and_vana_calibration+0x408>)
 800af14:	9304      	str	r3, [sp, #16]
 800af16:	4659      	mov	r1, fp
 800af18:	f7fe fe00 	bl	8009b1c <acc_diagnostic_log_array>
 800af1c:	2110      	movs	r1, #16
 800af1e:	4640      	mov	r0, r8
 800af20:	f7fe fe0c 	bl	8009b3c <acc_diagnostic_log_data_u16>
 800af24:	f8b8 2000 	ldrh.w	r2, [r8]
 800af28:	9b04      	ldr	r3, [sp, #16]
 800af2a:	4413      	add	r3, r2
 800af2c:	ea4f 1813 	mov.w	r8, r3, lsr #4
 800af30:	f5a8 43f2 	sub.w	r3, r8, #30976	; 0x7900
 800af34:	3b18      	subs	r3, #24
 800af36:	b29b      	uxth	r3, r3
 800af38:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800af3c:	428b      	cmp	r3, r1
 800af3e:	d83d      	bhi.n	800afbc <acc_cpd_cbank_and_vana_calibration+0x2ec>
 800af40:	f5b5 7f48 	cmp.w	r5, #800	; 0x320
 800af44:	d83a      	bhi.n	800afbc <acc_cpd_cbank_and_vana_calibration+0x2ec>
 800af46:	f8cd 8010 	str.w	r8, [sp, #16]
 800af4a:	9c05      	ldr	r4, [sp, #20]
 800af4c:	9507      	str	r5, [sp, #28]
 800af4e:	f7fc fb91 	bl	8007674 <acc_rss_integration_log_level>
 800af52:	2803      	cmp	r0, #3
 800af54:	ee18 8a10 	vmov	r8, s16
 800af58:	9a04      	ldr	r2, [sp, #16]
 800af5a:	9b07      	ldr	r3, [sp, #28]
 800af5c:	d909      	bls.n	800af72 <acc_cpd_cbank_and_vana_calibration+0x2a2>
 800af5e:	b292      	uxth	r2, r2
 800af60:	4d56      	ldr	r5, [pc, #344]	; (800b0bc <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 800af62:	9301      	str	r3, [sp, #4]
 800af64:	9200      	str	r2, [sp, #0]
 800af66:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800af68:	4a5c      	ldr	r2, [pc, #368]	; (800b0dc <acc_cpd_cbank_and_vana_calibration+0x40c>)
 800af6a:	4956      	ldr	r1, [pc, #344]	; (800b0c4 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 800af6c:	4633      	mov	r3, r6
 800af6e:	2004      	movs	r0, #4
 800af70:	47a8      	blx	r5
 800af72:	9e06      	ldr	r6, [sp, #24]
 800af74:	7137      	strb	r7, [r6, #4]
 800af76:	6825      	ldr	r5, [r4, #0]
 800af78:	f003 faae 	bl	800e4d8 <acc_image_a111_r2c_cbank_and_vana_calibration_get>
 800af7c:	9004      	str	r0, [sp, #16]
 800af7e:	f003 faaf 	bl	800e4e0 <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 800af82:	7936      	ldrb	r6, [r6, #4]
 800af84:	9904      	ldr	r1, [sp, #16]
 800af86:	f8cd a008 	str.w	sl, [sp, #8]
 800af8a:	221c      	movs	r2, #28
 800af8c:	e9cd 2600 	strd	r2, r6, [sp]
 800af90:	4603      	mov	r3, r0
 800af92:	2200      	movs	r2, #0
 800af94:	4628      	mov	r0, r5
 800af96:	f003 fa17 	bl	800e3c8 <acc_confprogram_live_patch>
 800af9a:	6820      	ldr	r0, [r4, #0]
 800af9c:	2119      	movs	r1, #25
 800af9e:	f7fe f9bd 	bl	800931c <acc_sensor_protocol_r2_run_program>
 800afa2:	4606      	mov	r6, r0
 800afa4:	bb00      	cbnz	r0, 800afe8 <acc_cpd_cbank_and_vana_calibration+0x318>
 800afa6:	4b45      	ldr	r3, [pc, #276]	; (800b0bc <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 800afa8:	4a4d      	ldr	r2, [pc, #308]	; (800b0e0 <acc_cpd_cbank_and_vana_calibration+0x410>)
 800afaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afac:	4945      	ldr	r1, [pc, #276]	; (800b0c4 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 800afae:	4798      	blx	r3
 800afb0:	4630      	mov	r0, r6
 800afb2:	b00b      	add	sp, #44	; 0x2c
 800afb4:	ecbd 8b02 	vpop	{d8}
 800afb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afbc:	f7fc fb5a 	bl	8007674 <acc_rss_integration_log_level>
 800afc0:	2803      	cmp	r0, #3
 800afc2:	d90a      	bls.n	800afda <acc_cpd_cbank_and_vana_calibration+0x30a>
 800afc4:	fa1f f288 	uxth.w	r2, r8
 800afc8:	e9cd 2500 	strd	r2, r5, [sp]
 800afcc:	4b3b      	ldr	r3, [pc, #236]	; (800b0bc <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 800afce:	4a43      	ldr	r2, [pc, #268]	; (800b0dc <acc_cpd_cbank_and_vana_calibration+0x40c>)
 800afd0:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800afd2:	493c      	ldr	r1, [pc, #240]	; (800b0c4 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 800afd4:	4633      	mov	r3, r6
 800afd6:	2004      	movs	r0, #4
 800afd8:	47a8      	blx	r5
 800afda:	b10c      	cbz	r4, 800afe0 <acc_cpd_cbank_and_vana_calibration+0x310>
 800afdc:	4d37      	ldr	r5, [pc, #220]	; (800b0bc <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 800afde:	e70e      	b.n	800adfe <acc_cpd_cbank_and_vana_calibration+0x12e>
 800afe0:	f89d 7025 	ldrb.w	r7, [sp, #37]	; 0x25
 800afe4:	2401      	movs	r4, #1
 800afe6:	e73a      	b.n	800ae5e <acc_cpd_cbank_and_vana_calibration+0x18e>
 800afe8:	4648      	mov	r0, r9
 800afea:	2108      	movs	r1, #8
 800afec:	6826      	ldr	r6, [r4, #0]
 800afee:	f7fd fe79 	bl	8008ce4 <acc_sensor_r2_buffer_processed_verify_size>
 800aff2:	b958      	cbnz	r0, 800b00c <acc_cpd_cbank_and_vana_calibration+0x33c>
 800aff4:	4d31      	ldr	r5, [pc, #196]	; (800b0bc <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 800aff6:	4a37      	ldr	r2, [pc, #220]	; (800b0d4 <acc_cpd_cbank_and_vana_calibration+0x404>)
 800aff8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800affa:	4932      	ldr	r1, [pc, #200]	; (800b0c4 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 800affc:	4798      	blx	r3
 800affe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b000:	4a38      	ldr	r2, [pc, #224]	; (800b0e4 <acc_cpd_cbank_and_vana_calibration+0x414>)
 800b002:	4930      	ldr	r1, [pc, #192]	; (800b0c4 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 800b004:	2000      	movs	r0, #0
 800b006:	4798      	blx	r3
 800b008:	2600      	movs	r6, #0
 800b00a:	e70a      	b.n	800ae22 <acc_cpd_cbank_and_vana_calibration+0x152>
 800b00c:	2300      	movs	r3, #0
 800b00e:	2203      	movs	r2, #3
 800b010:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b014:	4630      	mov	r0, r6
 800b016:	f7fe fb05 	bl	8009624 <acc_sensor_protocol_r2_wait_for_specific_event>
 800b01a:	2800      	cmp	r0, #0
 800b01c:	d046      	beq.n	800b0ac <acc_cpd_cbank_and_vana_calibration+0x3dc>
 800b01e:	2408      	movs	r4, #8
 800b020:	4623      	mov	r3, r4
 800b022:	2200      	movs	r2, #0
 800b024:	4641      	mov	r1, r8
 800b026:	4630      	mov	r0, r6
 800b028:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
 800b02c:	f7fd fe62 	bl	8008cf4 <acc_sensor_r2_buffer_processed_read>
 800b030:	492d      	ldr	r1, [pc, #180]	; (800b0e8 <acc_cpd_cbank_and_vana_calibration+0x418>)
 800b032:	4605      	mov	r5, r0
 800b034:	482d      	ldr	r0, [pc, #180]	; (800b0ec <acc_cpd_cbank_and_vana_calibration+0x41c>)
 800b036:	f7fe fd71 	bl	8009b1c <acc_diagnostic_log_array>
 800b03a:	4621      	mov	r1, r4
 800b03c:	4628      	mov	r0, r5
 800b03e:	1eac      	subs	r4, r5, #2
 800b040:	f7fe fd7c 	bl	8009b3c <acc_diagnostic_log_data_u16>
 800b044:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800b048:	4620      	mov	r0, r4
 800b04a:	2300      	movs	r3, #0
 800b04c:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800b050:	f5d2 4100 	rsbs	r1, r2, #32768	; 0x8000
 800b054:	bf48      	it	mi
 800b056:	f5a2 4100 	submi.w	r1, r2, #32768	; 0x8000
 800b05a:	42b9      	cmp	r1, r7
 800b05c:	bfb8      	it	lt
 800b05e:	f8ad 3024 	strhlt.w	r3, [sp, #36]	; 0x24
 800b062:	f103 0301 	add.w	r3, r3, #1
 800b066:	bfb8      	it	lt
 800b068:	460f      	movlt	r7, r1
 800b06a:	2b08      	cmp	r3, #8
 800b06c:	d1ee      	bne.n	800b04c <acc_cpd_cbank_and_vana_calibration+0x37c>
 800b06e:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 800b072:	4631      	mov	r1, r6
 800b074:	aa09      	add	r2, sp, #36	; 0x24
 800b076:	2301      	movs	r3, #1
 800b078:	f007 0707 	and.w	r7, r7, #7
 800b07c:	2006      	movs	r0, #6
 800b07e:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800b082:	f7fe fe43 	bl	8009d0c <acc_probes_execute_uint16>
 800b086:	4630      	mov	r0, r6
 800b088:	f7fe f9d4 	bl	8009434 <acc_sensor_protocol_r2_ack_event>
 800b08c:	4606      	mov	r6, r0
 800b08e:	b168      	cbz	r0, 800b0ac <acc_cpd_cbank_and_vana_calibration+0x3dc>
 800b090:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800b094:	2900      	cmp	r1, #0
 800b096:	d05e      	beq.n	800b156 <acc_cpd_cbank_and_vana_calibration+0x486>
 800b098:	2300      	movs	r3, #0
 800b09a:	e001      	b.n	800b0a0 <acc_cpd_cbank_and_vana_calibration+0x3d0>
 800b09c:	428b      	cmp	r3, r1
 800b09e:	d030      	beq.n	800b102 <acc_cpd_cbank_and_vana_calibration+0x432>
 800b0a0:	f934 2f02 	ldrsh.w	r2, [r4, #2]!
 800b0a4:	2a00      	cmp	r2, #0
 800b0a6:	f103 0301 	add.w	r3, r3, #1
 800b0aa:	daf7      	bge.n	800b09c <acc_cpd_cbank_and_vana_calibration+0x3cc>
 800b0ac:	4d03      	ldr	r5, [pc, #12]	; (800b0bc <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 800b0ae:	e7a6      	b.n	800affe <acc_cpd_cbank_and_vana_calibration+0x32e>
 800b0b0:	08012f8c 	.word	0x08012f8c
 800b0b4:	08012fa8 	.word	0x08012fa8
 800b0b8:	08012fb4 	.word	0x08012fb4
 800b0bc:	2000082c 	.word	0x2000082c
 800b0c0:	08012fc0 	.word	0x08012fc0
 800b0c4:	08012f88 	.word	0x08012f88
 800b0c8:	08013088 	.word	0x08013088
 800b0cc:	08012f44 	.word	0x08012f44
 800b0d0:	0801305c 	.word	0x0801305c
 800b0d4:	08013034 	.word	0x08013034
 800b0d8:	0801304c 	.word	0x0801304c
 800b0dc:	0801311c 	.word	0x0801311c
 800b0e0:	080130a0 	.word	0x080130a0
 800b0e4:	080130e4 	.word	0x080130e4
 800b0e8:	080134b4 	.word	0x080134b4
 800b0ec:	080130d4 	.word	0x080130d4
 800b0f0:	08008c19 	.word	0x08008c19
 800b0f4:	4d19      	ldr	r5, [pc, #100]	; (800b15c <acc_cpd_cbank_and_vana_calibration+0x48c>)
 800b0f6:	4a1a      	ldr	r2, [pc, #104]	; (800b160 <acc_cpd_cbank_and_vana_calibration+0x490>)
 800b0f8:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800b0fa:	491a      	ldr	r1, [pc, #104]	; (800b164 <acc_cpd_cbank_and_vana_calibration+0x494>)
 800b0fc:	463b      	mov	r3, r7
 800b0fe:	47a0      	blx	r4
 800b100:	e67d      	b.n	800adfe <acc_cpd_cbank_and_vana_calibration+0x12e>
 800b102:	1c4b      	adds	r3, r1, #1
 800b104:	2b07      	cmp	r3, #7
 800b106:	dc0c      	bgt.n	800b122 <acc_cpd_cbank_and_vana_calibration+0x452>
 800b108:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 800b10c:	e001      	b.n	800b112 <acc_cpd_cbank_and_vana_calibration+0x442>
 800b10e:	2b08      	cmp	r3, #8
 800b110:	d007      	beq.n	800b122 <acc_cpd_cbank_and_vana_calibration+0x452>
 800b112:	f835 2b02 	ldrh.w	r2, [r5], #2
 800b116:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b11a:	f103 0301 	add.w	r3, r3, #1
 800b11e:	d8f6      	bhi.n	800b10e <acc_cpd_cbank_and_vana_calibration+0x43e>
 800b120:	e7c4      	b.n	800b0ac <acc_cpd_cbank_and_vana_calibration+0x3dc>
 800b122:	9b06      	ldr	r3, [sp, #24]
 800b124:	6019      	str	r1, [r3, #0]
 800b126:	f7fc faa5 	bl	8007674 <acc_rss_integration_log_level>
 800b12a:	2801      	cmp	r0, #1
 800b12c:	d909      	bls.n	800b142 <acc_cpd_cbank_and_vana_calibration+0x472>
 800b12e:	9906      	ldr	r1, [sp, #24]
 800b130:	4a0a      	ldr	r2, [pc, #40]	; (800b15c <acc_cpd_cbank_and_vana_calibration+0x48c>)
 800b132:	790b      	ldrb	r3, [r1, #4]
 800b134:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800b136:	9300      	str	r3, [sp, #0]
 800b138:	680b      	ldr	r3, [r1, #0]
 800b13a:	4a0b      	ldr	r2, [pc, #44]	; (800b168 <acc_cpd_cbank_and_vana_calibration+0x498>)
 800b13c:	4909      	ldr	r1, [pc, #36]	; (800b164 <acc_cpd_cbank_and_vana_calibration+0x494>)
 800b13e:	2002      	movs	r0, #2
 800b140:	47a0      	blx	r4
 800b142:	9c06      	ldr	r4, [sp, #24]
 800b144:	4809      	ldr	r0, [pc, #36]	; (800b16c <acc_cpd_cbank_and_vana_calibration+0x49c>)
 800b146:	6821      	ldr	r1, [r4, #0]
 800b148:	f7fe fcf0 	bl	8009b2c <acc_diagnostic_log_scalar>
 800b14c:	7921      	ldrb	r1, [r4, #4]
 800b14e:	4808      	ldr	r0, [pc, #32]	; (800b170 <acc_cpd_cbank_and_vana_calibration+0x4a0>)
 800b150:	f7fe fcec 	bl	8009b2c <acc_diagnostic_log_scalar>
 800b154:	e665      	b.n	800ae22 <acc_cpd_cbank_and_vana_calibration+0x152>
 800b156:	2301      	movs	r3, #1
 800b158:	e7d6      	b.n	800b108 <acc_cpd_cbank_and_vana_calibration+0x438>
 800b15a:	bf00      	nop
 800b15c:	2000082c 	.word	0x2000082c
 800b160:	08012ff4 	.word	0x08012ff4
 800b164:	08012f88 	.word	0x08012f88
 800b168:	080130fc 	.word	0x080130fc
 800b16c:	08013110 	.word	0x08013110
 800b170:	08012fb4 	.word	0x08012fb4

0800b174 <acc_cpd_dll_calibration>:
 800b174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b178:	ed2d 8b0a 	vpush	{d8-d12}
 800b17c:	b0c7      	sub	sp, #284	; 0x11c
 800b17e:	461d      	mov	r5, r3
 800b180:	9309      	str	r3, [sp, #36]	; 0x24
 800b182:	2400      	movs	r4, #0
 800b184:	4b63      	ldr	r3, [pc, #396]	; (800b314 <acc_cpd_dll_calibration+0x1a0>)
 800b186:	61eb      	str	r3, [r5, #28]
 800b188:	f5b1 7f45 	cmp.w	r1, #788	; 0x314
 800b18c:	ee0b 0a90 	vmov	s23, r0
 800b190:	4693      	mov	fp, r2
 800b192:	766c      	strb	r4, [r5, #25]
 800b194:	f0c0 8479 	bcc.w	800ba8a <acc_cpd_dll_calibration+0x916>
 800b198:	f5a1 7316 	sub.w	r3, r1, #600	; 0x258
 800b19c:	f023 0301 	bic.w	r3, r3, #1
 800b1a0:	f5a1 7145 	sub.w	r1, r1, #788	; 0x314
 800b1a4:	f021 0201 	bic.w	r2, r1, #1
 800b1a8:	18c3      	adds	r3, r0, r3
 800b1aa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b1ae:	ee0c 1a10 	vmov	s24, r1
 800b1b2:	9312      	str	r3, [sp, #72]	; 0x48
 800b1b4:	eb00 0a02 	add.w	sl, r0, r2
 800b1b8:	f0c0 8085 	bcc.w	800b2c6 <acc_cpd_dll_calibration+0x152>
 800b1bc:	4856      	ldr	r0, [pc, #344]	; (800b318 <acc_cpd_dll_calibration+0x1a4>)
 800b1be:	ed9f 9a57 	vldr	s18, [pc, #348]	; 800b31c <acc_cpd_dll_calibration+0x1a8>
 800b1c2:	eddf 8a57 	vldr	s17, [pc, #348]	; 800b320 <acc_cpd_dll_calibration+0x1ac>
 800b1c6:	f7fe fc91 	bl	8009aec <acc_diagnostic_log_set_scope>
 800b1ca:	f8db 1000 	ldr.w	r1, [fp]
 800b1ce:	4855      	ldr	r0, [pc, #340]	; (800b324 <acc_cpd_dll_calibration+0x1b0>)
 800b1d0:	f7fe fcac 	bl	8009b2c <acc_diagnostic_log_scalar>
 800b1d4:	4854      	ldr	r0, [pc, #336]	; (800b328 <acc_cpd_dll_calibration+0x1b4>)
 800b1d6:	2202      	movs	r2, #2
 800b1d8:	2101      	movs	r1, #1
 800b1da:	f7fe fc8f 	bl	8009afc <acc_diagnostic_log_declare_parameter>
 800b1de:	4853      	ldr	r0, [pc, #332]	; (800b32c <acc_cpd_dll_calibration+0x1b8>)
 800b1e0:	221f      	movs	r2, #31
 800b1e2:	2100      	movs	r1, #0
 800b1e4:	f7fe fc8a 	bl	8009afc <acc_diagnostic_log_declare_parameter>
 800b1e8:	4851      	ldr	r0, [pc, #324]	; (800b330 <acc_cpd_dll_calibration+0x1bc>)
 800b1ea:	227b      	movs	r2, #123	; 0x7b
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	f7fe fc85 	bl	8009afc <acc_diagnostic_log_declare_parameter>
 800b1f2:	2302      	movs	r3, #2
 800b1f4:	461c      	mov	r4, r3
 800b1f6:	484f      	ldr	r0, [pc, #316]	; (800b334 <acc_cpd_dll_calibration+0x1c0>)
 800b1f8:	9319      	str	r3, [sp, #100]	; 0x64
 800b1fa:	220b      	movs	r2, #11
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	f7fe fc7d 	bl	8009afc <acc_diagnostic_log_declare_parameter>
 800b202:	46d1      	mov	r9, sl
 800b204:	940e      	str	r4, [sp, #56]	; 0x38
 800b206:	46da      	mov	sl, fp
 800b208:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b20a:	4847      	ldr	r0, [pc, #284]	; (800b328 <acc_cpd_dll_calibration+0x1b4>)
 800b20c:	ed9f 8a4a 	vldr	s16, [pc, #296]	; 800b338 <acc_cpd_dll_calibration+0x1c4>
 800b210:	f7fe fc7c 	bl	8009b0c <acc_diagnostic_log_set_parameter>
 800b214:	ab20      	add	r3, sp, #128	; 0x80
 800b216:	464c      	mov	r4, r9
 800b218:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800b21a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b21c:	ee1c ba10 	vmov	fp, s24
 800b220:	ee1b 9a90 	vmov	r9, s23
 800b224:	2500      	movs	r5, #0
 800b226:	4698      	mov	r8, r3
 800b228:	e023      	b.n	800b272 <acc_cpd_dll_calibration+0xfe>
 800b22a:	f837 3b32 	ldrh.w	r3, [r7], #50
 800b22e:	ee07 3a10 	vmov	s14, r3
 800b232:	4b42      	ldr	r3, [pc, #264]	; (800b33c <acc_cpd_dll_calibration+0x1c8>)
 800b234:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b238:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
 800b23c:	4b40      	ldr	r3, [pc, #256]	; (800b340 <acc_cpd_dll_calibration+0x1cc>)
 800b23e:	ee27 7a09 	vmul.f32	s14, s14, s18
 800b242:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800b246:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b24a:	1ad3      	subs	r3, r2, r3
 800b24c:	b21b      	sxth	r3, r3
 800b24e:	ee07 3a90 	vmov	s15, r3
 800b252:	ee27 7a28 	vmul.f32	s14, s14, s17
 800b256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b25a:	ee27 7a08 	vmul.f32	s14, s14, s16
 800b25e:	2d0c      	cmp	r5, #12
 800b260:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b268:	ee17 3a90 	vmov	r3, s15
 800b26c:	f828 3b02 	strh.w	r3, [r8], #2
 800b270:	d035      	beq.n	800b2de <acc_cpd_dll_calibration+0x16a>
 800b272:	4629      	mov	r1, r5
 800b274:	482f      	ldr	r0, [pc, #188]	; (800b334 <acc_cpd_dll_calibration+0x1c0>)
 800b276:	f7fe fc49 	bl	8009b0c <acc_diagnostic_log_set_parameter>
 800b27a:	e9da 1200 	ldrd	r1, r2, [sl]
 800b27e:	e9da 3002 	ldrd	r3, r0, [sl, #8]
 800b282:	9139      	str	r1, [sp, #228]	; 0xe4
 800b284:	e9cd 303b 	strd	r3, r0, [sp, #236]	; 0xec
 800b288:	f8da 1014 	ldr.w	r1, [sl, #20]
 800b28c:	f8da 0018 	ldr.w	r0, [sl, #24]
 800b290:	f8ba c010 	ldrh.w	ip, [sl, #16]
 800b294:	923a      	str	r2, [sp, #232]	; 0xe8
 800b296:	9140      	str	r1, [sp, #256]	; 0x100
 800b298:	9041      	str	r0, [sp, #260]	; 0x104
 800b29a:	463b      	mov	r3, r7
 800b29c:	aa39      	add	r2, sp, #228	; 0xe4
 800b29e:	4659      	mov	r1, fp
 800b2a0:	4648      	mov	r0, r9
 800b2a2:	e9cd 653e 	strd	r6, r5, [sp, #248]	; 0xf8
 800b2a6:	f8ad c0f4 	strh.w	ip, [sp, #244]	; 0xf4
 800b2aa:	f001 fe85 	bl	800cfb8 <acc_cpd_rx_fine_dip_calibration>
 800b2ae:	3501      	adds	r5, #1
 800b2b0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	d1b8      	bne.n	800b22a <acc_cpd_dll_calibration+0xb6>
 800b2b8:	4604      	mov	r4, r0
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	b047      	add	sp, #284	; 0x11c
 800b2be:	ecbd 8b0a 	vpop	{d8-d12}
 800b2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c6:	f7fc f9d5 	bl	8007674 <acc_rss_integration_log_level>
 800b2ca:	2801      	cmp	r0, #1
 800b2cc:	f67f af76 	bls.w	800b1bc <acc_cpd_dll_calibration+0x48>
 800b2d0:	4b1c      	ldr	r3, [pc, #112]	; (800b344 <acc_cpd_dll_calibration+0x1d0>)
 800b2d2:	4a1d      	ldr	r2, [pc, #116]	; (800b348 <acc_cpd_dll_calibration+0x1d4>)
 800b2d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2d6:	491d      	ldr	r1, [pc, #116]	; (800b34c <acc_cpd_dll_calibration+0x1d8>)
 800b2d8:	2002      	movs	r0, #2
 800b2da:	4798      	blx	r3
 800b2dc:	e76e      	b.n	800b1bc <acc_cpd_dll_calibration+0x48>
 800b2de:	491c      	ldr	r1, [pc, #112]	; (800b350 <acc_cpd_dll_calibration+0x1dc>)
 800b2e0:	481c      	ldr	r0, [pc, #112]	; (800b354 <acc_cpd_dll_calibration+0x1e0>)
 800b2e2:	f7fe fc1b 	bl	8009b1c <acc_diagnostic_log_array>
 800b2e6:	4629      	mov	r1, r5
 800b2e8:	a820      	add	r0, sp, #128	; 0x80
 800b2ea:	f7fe fc27 	bl	8009b3c <acc_diagnostic_log_data_u16>
 800b2ee:	aa1d      	add	r2, sp, #116	; 0x74
 800b2f0:	a920      	add	r1, sp, #128	; 0x80
 800b2f2:	4628      	mov	r0, r5
 800b2f4:	f000 fd66 	bl	800bdc4 <acc_dll_dly_coarse_priority_sort>
 800b2f8:	4915      	ldr	r1, [pc, #84]	; (800b350 <acc_cpd_dll_calibration+0x1dc>)
 800b2fa:	4817      	ldr	r0, [pc, #92]	; (800b358 <acc_cpd_dll_calibration+0x1e4>)
 800b2fc:	f7fe fc0e 	bl	8009b1c <acc_diagnostic_log_array>
 800b300:	4629      	mov	r1, r5
 800b302:	a81d      	add	r0, sp, #116	; 0x74
 800b304:	f7fe fc2a 	bl	8009b5c <acc_diagnostic_log_data_u8>
 800b308:	ab1d      	add	r3, sp, #116	; 0x74
 800b30a:	930d      	str	r3, [sp, #52]	; 0x34
 800b30c:	4653      	mov	r3, sl
 800b30e:	4699      	mov	r9, r3
 800b310:	46a2      	mov	sl, r4
 800b312:	e075      	b.n	800b400 <acc_cpd_dll_calibration+0x28c>
 800b314:	ff800000 	.word	0xff800000
 800b318:	0801318c 	.word	0x0801318c
 800b31c:	37800000 	.word	0x37800000
 800b320:	3f99999a 	.word	0x3f99999a
 800b324:	08012fa8 	.word	0x08012fa8
 800b328:	0801319c 	.word	0x0801319c
 800b32c:	080131a8 	.word	0x080131a8
 800b330:	080131b4 	.word	0x080131b4
 800b334:	080131c0 	.word	0x080131c0
 800b338:	447a0000 	.word	0x447a0000
 800b33c:	08017234 	.word	0x08017234
 800b340:	0801722c 	.word	0x0801722c
 800b344:	2000082c 	.word	0x2000082c
 800b348:	08013160 	.word	0x08013160
 800b34c:	0801314c 	.word	0x0801314c
 800b350:	080131cc 	.word	0x080131cc
 800b354:	080131e4 	.word	0x080131e4
 800b358:	080131f8 	.word	0x080131f8
 800b35c:	f5a2 7243 	sub.w	r2, r2, #780	; 0x30c
 800b360:	f5b2 7fe6 	cmp.w	r2, #460	; 0x1cc
 800b364:	f200 82eb 	bhi.w	800b93e <acc_cpd_dll_calibration+0x7ca>
 800b368:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
 800b36c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b36e:	1a9b      	subs	r3, r3, r2
 800b370:	b21b      	sxth	r3, r3
 800b372:	2b00      	cmp	r3, #0
 800b374:	bfb8      	it	lt
 800b376:	425b      	neglt	r3, r3
 800b378:	b21b      	sxth	r3, r3
 800b37a:	2b64      	cmp	r3, #100	; 0x64
 800b37c:	f300 82df 	bgt.w	800b93e <acc_cpd_dll_calibration+0x7ca>
 800b380:	ee18 3a10 	vmov	r3, s16
 800b384:	4293      	cmp	r3, r2
 800b386:	f2c0 82da 	blt.w	800b93e <acc_cpd_dll_calibration+0x7ca>
 800b38a:	49d4      	ldr	r1, [pc, #848]	; (800b6dc <acc_cpd_dll_calibration+0x568>)
 800b38c:	48d4      	ldr	r0, [pc, #848]	; (800b6e0 <acc_cpd_dll_calibration+0x56c>)
 800b38e:	f7fe fbc5 	bl	8009b1c <acc_diagnostic_log_array>
 800b392:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800b394:	4628      	mov	r0, r5
 800b396:	4621      	mov	r1, r4
 800b398:	f7fe fbd0 	bl	8009b3c <acc_diagnostic_log_data_u16>
 800b39c:	4621      	mov	r1, r4
 800b39e:	4628      	mov	r0, r5
 800b3a0:	f000 fc76 	bl	800bc90 <acc_dll_check_direct_leakage>
 800b3a4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b3a8:	4604      	mov	r4, r0
 800b3aa:	4658      	mov	r0, fp
 800b3ac:	f7fe f968 	bl	8009680 <acc_sensor_protocol_r2_stop>
 800b3b0:	2c00      	cmp	r4, #0
 800b3b2:	f040 840f 	bne.w	800bbd4 <acc_cpd_dll_calibration+0xa60>
 800b3b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	f04f 0100 	mov.w	r1, #0
 800b3be:	f040 82e5 	bne.w	800b98c <acc_cpd_dll_calibration+0x818>
 800b3c2:	f7fc f957 	bl	8007674 <acc_rss_integration_log_level>
 800b3c6:	2803      	cmp	r0, #3
 800b3c8:	d908      	bls.n	800b3dc <acc_cpd_dll_calibration+0x268>
 800b3ca:	4bc6      	ldr	r3, [pc, #792]	; (800b6e4 <acc_cpd_dll_calibration+0x570>)
 800b3cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b3ce:	9200      	str	r2, [sp, #0]
 800b3d0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800b3d2:	4ac5      	ldr	r2, [pc, #788]	; (800b6e8 <acc_cpd_dll_calibration+0x574>)
 800b3d4:	49c5      	ldr	r1, [pc, #788]	; (800b6ec <acc_cpd_dll_calibration+0x578>)
 800b3d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3d8:	2004      	movs	r0, #4
 800b3da:	47a0      	blx	r4
 800b3dc:	f7fc f94a 	bl	8007674 <acc_rss_integration_log_level>
 800b3e0:	2803      	cmp	r0, #3
 800b3e2:	d908      	bls.n	800b3f6 <acc_cpd_dll_calibration+0x282>
 800b3e4:	4bbf      	ldr	r3, [pc, #764]	; (800b6e4 <acc_cpd_dll_calibration+0x570>)
 800b3e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b3e8:	9200      	str	r2, [sp, #0]
 800b3ea:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800b3ec:	4ac0      	ldr	r2, [pc, #768]	; (800b6f0 <acc_cpd_dll_calibration+0x57c>)
 800b3ee:	49bf      	ldr	r1, [pc, #764]	; (800b6ec <acc_cpd_dll_calibration+0x578>)
 800b3f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3f2:	2004      	movs	r0, #4
 800b3f4:	47a0      	blx	r4
 800b3f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3f8:	aa20      	add	r2, sp, #128	; 0x80
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	f000 8332 	beq.w	800ba64 <acc_cpd_dll_calibration+0x8f0>
 800b400:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b402:	48bc      	ldr	r0, [pc, #752]	; (800b6f4 <acc_cpd_dll_calibration+0x580>)
 800b404:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b408:	9311      	str	r3, [sp, #68]	; 0x44
 800b40a:	461c      	mov	r4, r3
 800b40c:	4619      	mov	r1, r3
 800b40e:	920d      	str	r2, [sp, #52]	; 0x34
 800b410:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800b414:	f7fe fb7a 	bl	8009b0c <acc_diagnostic_log_set_parameter>
 800b418:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b41a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800b41e:	eb06 0544 	add.w	r5, r6, r4, lsl #1
 800b422:	4629      	mov	r1, r5
 800b424:	ab2c      	add	r3, sp, #176	; 0xb0
 800b426:	aa39      	add	r2, sp, #228	; 0xe4
 800b428:	2019      	movs	r0, #25
 800b42a:	f000 fd8f 	bl	800bf4c <acc_dll_plateau_finder>
 800b42e:	9016      	str	r0, [sp, #88]	; 0x58
 800b430:	2800      	cmp	r0, #0
 800b432:	d0d3      	beq.n	800b3dc <acc_cpd_dll_calibration+0x268>
 800b434:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
 800b438:	49af      	ldr	r1, [pc, #700]	; (800b6f8 <acc_cpd_dll_calibration+0x584>)
 800b43a:	eddf 6abc 	vldr	s13, [pc, #752]	; 800b72c <acc_cpd_dll_calibration+0x5b8>
 800b43e:	ee07 3a10 	vmov	s14, r3
 800b442:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b444:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b448:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b44c:	49ab      	ldr	r1, [pc, #684]	; (800b6fc <acc_cpd_dll_calibration+0x588>)
 800b44e:	ee27 7a09 	vmul.f32	s14, s14, s18
 800b452:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b456:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800b45a:	1ad3      	subs	r3, r2, r3
 800b45c:	ee37 7a46 	vsub.f32	s14, s14, s12
 800b460:	b21b      	sxth	r3, r3
 800b462:	ee07 3a90 	vmov	s15, r3
 800b466:	ee27 7a28 	vmul.f32	s14, s14, s17
 800b46a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b46e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b472:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b47a:	ee17 3a90 	vmov	r3, s15
 800b47e:	b21a      	sxth	r2, r3
 800b480:	f5a2 7343 	sub.w	r3, r2, #780	; 0x30c
 800b484:	b29b      	uxth	r3, r3
 800b486:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 800b48a:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
 800b48e:	f200 82dd 	bhi.w	800ba4c <acc_cpd_dll_calibration+0x8d8>
 800b492:	f8bd 40e4 	ldrh.w	r4, [sp, #228]	; 0xe4
 800b496:	4b9a      	ldr	r3, [pc, #616]	; (800b700 <acc_cpd_dll_calibration+0x58c>)
 800b498:	a946      	add	r1, sp, #280	; 0x118
 800b49a:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 800b49e:	ee07 2a90 	vmov	s15, r2
 800b4a2:	f831 6c68 	ldrh.w	r6, [r1, #-104]
 800b4a6:	9613      	str	r6, [sp, #76]	; 0x4c
 800b4a8:	4632      	mov	r2, r6
 800b4aa:	fba3 2302 	umull	r2, r3, r3, r2
 800b4ae:	f3c3 0387 	ubfx	r3, r3, #2, #8
 800b4b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b4b6:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 800b4ba:	ee07 3a90 	vmov	s15, r3
 800b4be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4c2:	ee67 7a89 	vmul.f32	s15, s15, s18
 800b4c6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b4ca:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800b4ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b4d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b4d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b4da:	ee17 3a90 	vmov	r3, s15
 800b4de:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
 800b4e2:	f7fc f8c7 	bl	8007674 <acc_rss_integration_log_level>
 800b4e6:	2803      	cmp	r0, #3
 800b4e8:	d907      	bls.n	800b4fa <acc_cpd_dll_calibration+0x386>
 800b4ea:	4a7e      	ldr	r2, [pc, #504]	; (800b6e4 <acc_cpd_dll_calibration+0x570>)
 800b4ec:	9600      	str	r6, [sp, #0]
 800b4ee:	4623      	mov	r3, r4
 800b4f0:	497e      	ldr	r1, [pc, #504]	; (800b6ec <acc_cpd_dll_calibration+0x578>)
 800b4f2:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800b4f4:	4a83      	ldr	r2, [pc, #524]	; (800b704 <acc_cpd_dll_calibration+0x590>)
 800b4f6:	2004      	movs	r0, #4
 800b4f8:	47a0      	blx	r4
 800b4fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b4fc:	4882      	ldr	r0, [pc, #520]	; (800b708 <acc_cpd_dll_calibration+0x594>)
 800b4fe:	f7fe fb05 	bl	8009b0c <acc_diagnostic_log_set_parameter>
 800b502:	4982      	ldr	r1, [pc, #520]	; (800b70c <acc_cpd_dll_calibration+0x598>)
 800b504:	4882      	ldr	r0, [pc, #520]	; (800b710 <acc_cpd_dll_calibration+0x59c>)
 800b506:	f7fe fb09 	bl	8009b1c <acc_diagnostic_log_array>
 800b50a:	2101      	movs	r1, #1
 800b50c:	f10d 006a 	add.w	r0, sp, #106	; 0x6a
 800b510:	f7fe fb1c 	bl	8009b4c <acc_diagnostic_log_data_i16>
 800b514:	497d      	ldr	r1, [pc, #500]	; (800b70c <acc_cpd_dll_calibration+0x598>)
 800b516:	487f      	ldr	r0, [pc, #508]	; (800b714 <acc_cpd_dll_calibration+0x5a0>)
 800b518:	f7fe fb00 	bl	8009b1c <acc_diagnostic_log_array>
 800b51c:	2101      	movs	r1, #1
 800b51e:	a81a      	add	r0, sp, #104	; 0x68
 800b520:	f7fe fb14 	bl	8009b4c <acc_diagnostic_log_data_i16>
 800b524:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 800b528:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	2bc8      	cmp	r3, #200	; 0xc8
 800b530:	f200 8330 	bhi.w	800bb94 <acc_cpd_dll_calibration+0xa20>
 800b534:	2302      	movs	r3, #2
 800b536:	9315      	str	r3, [sp, #84]	; 0x54
 800b538:	211b      	movs	r1, #27
 800b53a:	b28b      	uxth	r3, r1
 800b53c:	461c      	mov	r4, r3
 800b53e:	4876      	ldr	r0, [pc, #472]	; (800b718 <acc_cpd_dll_calibration+0x5a4>)
 800b540:	9318      	str	r3, [sp, #96]	; 0x60
 800b542:	f7fe fae3 	bl	8009b0c <acc_diagnostic_log_set_parameter>
 800b546:	4620      	mov	r0, r4
 800b548:	aa26      	add	r2, sp, #152	; 0x98
 800b54a:	217c      	movs	r1, #124	; 0x7c
 800b54c:	f7fe fd7a 	bl	800a044 <acc_dll_calculate_area_settings>
 800b550:	f899 301c 	ldrb.w	r3, [r9, #28]
 800b554:	2b00      	cmp	r3, #0
 800b556:	f000 8274 	beq.w	800ba42 <acc_cpd_dll_calibration+0x8ce>
 800b55a:	f899 301d 	ldrb.w	r3, [r9, #29]
 800b55e:	f083 0301 	eor.w	r3, r3, #1
 800b562:	f8b9 2010 	ldrh.w	r2, [r9, #16]
 800b566:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800b56a:	f8bd b0ac 	ldrh.w	fp, [sp, #172]	; 0xac
 800b56e:	f8bd c098 	ldrh.w	ip, [sp, #152]	; 0x98
 800b572:	f8bd 709a 	ldrh.w	r7, [sp, #154]	; 0x9a
 800b576:	f8bd 609e 	ldrh.w	r6, [sp, #158]	; 0x9e
 800b57a:	f8bd 50a0 	ldrh.w	r5, [sp, #160]	; 0xa0
 800b57e:	e9d9 4001 	ldrd	r4, r0, [r9, #4]
 800b582:	e9d9 8e05 	ldrd	r8, lr, [r9, #20]
 800b586:	f8aa 200c 	strh.w	r2, [sl, #12]
 800b58a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b58c:	f8ca 2018 	str.w	r2, [sl, #24]
 800b590:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b592:	f8ca 1008 	str.w	r1, [sl, #8]
 800b596:	f8ca 201c 	str.w	r2, [sl, #28]
 800b59a:	f8bd 10aa 	ldrh.w	r1, [sp, #170]	; 0xaa
 800b59e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5a0:	f8ca 4000 	str.w	r4, [sl]
 800b5a4:	e9ca 8e04 	strd	r8, lr, [sl, #16]
 800b5a8:	f8bd 40a4 	ldrh.w	r4, [sp, #164]	; 0xa4
 800b5ac:	f8ca 0004 	str.w	r0, [sl, #4]
 800b5b0:	f04f 0e01 	mov.w	lr, #1
 800b5b4:	f8bd 00a6 	ldrh.w	r0, [sp, #166]	; 0xa6
 800b5b8:	f8ca 2020 	str.w	r2, [sl, #32]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f8ca c028 	str.w	ip, [sl, #40]	; 0x28
 800b5c2:	f8ca 702c 	str.w	r7, [sl, #44]	; 0x2c
 800b5c6:	f04f 0c06 	mov.w	ip, #6
 800b5ca:	2703      	movs	r7, #3
 800b5cc:	f8ca 6030 	str.w	r6, [sl, #48]	; 0x30
 800b5d0:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 800b5d4:	f06f 0601 	mvn.w	r6, #1
 800b5d8:	f8ca 4038 	str.w	r4, [sl, #56]	; 0x38
 800b5dc:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
 800b5e0:	240f      	movs	r4, #15
 800b5e2:	e9ca 1b10 	strd	r1, fp, [sl, #64]	; 0x40
 800b5e6:	2007      	movs	r0, #7
 800b5e8:	e9ca 2e12 	strd	r2, lr, [sl, #72]	; 0x48
 800b5ec:	e9ca e216 	strd	lr, r2, [sl, #88]	; 0x58
 800b5f0:	e9ca 2214 	strd	r2, r2, [sl, #80]	; 0x50
 800b5f4:	e9ca 2218 	strd	r2, r2, [sl, #96]	; 0x60
 800b5f8:	e9ca 2227 	strd	r2, r2, [sl, #156]	; 0x9c
 800b5fc:	f8ca 2068 	str.w	r2, [sl, #104]	; 0x68
 800b600:	f8ca 2078 	str.w	r2, [sl, #120]	; 0x78
 800b604:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 800b608:	f8aa 208c 	strh.w	r2, [sl, #140]	; 0x8c
 800b60c:	2516      	movs	r5, #22
 800b60e:	2200      	movs	r2, #0
 800b610:	e9ca c724 	strd	ip, r7, [sl, #144]	; 0x90
 800b614:	e9ca ee1c 	strd	lr, lr, [sl, #112]	; 0x70
 800b618:	e9ca 541f 	strd	r5, r4, [sl, #124]	; 0x7c
 800b61c:	f8ca e0a4 	str.w	lr, [sl, #164]	; 0xa4
 800b620:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
 800b624:	f88a e0ad 	strb.w	lr, [sl, #173]	; 0xad
 800b628:	f8ca 306c 	str.w	r3, [sl, #108]	; 0x6c
 800b62c:	f8ca 6098 	str.w	r6, [sl, #152]	; 0x98
 800b630:	f8ca 0088 	str.w	r0, [sl, #136]	; 0x88
 800b634:	f7fb ff6e 	bl	8007514 <acc_rss_integration_get_sensor_reference_frequency>
 800b638:	f8b9 301e 	ldrh.w	r3, [r9, #30]
 800b63c:	f899 201c 	ldrb.w	r2, [r9, #28]
 800b640:	ed8a 0a2c 	vstr	s0, [sl, #176]	; 0xb0
 800b644:	3b01      	subs	r3, #1
 800b646:	e9ca 232d 	strd	r2, r3, [sl, #180]	; 0xb4
 800b64a:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 800b64e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b650:	f04f 0100 	mov.w	r1, #0
 800b654:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 800b658:	f88a 10ac 	strb.w	r1, [sl, #172]	; 0xac
 800b65c:	9314      	str	r3, [sp, #80]	; 0x50
 800b65e:	a926      	add	r1, sp, #152	; 0x98
 800b660:	f89a 308c 	ldrb.w	r3, [sl, #140]	; 0x8c
 800b664:	9308      	str	r3, [sp, #32]
 800b666:	4650      	mov	r0, sl
 800b668:	f8d9 b000 	ldr.w	fp, [r9]
 800b66c:	f8da 4094 	ldr.w	r4, [sl, #148]	; 0x94
 800b670:	f8da 60a4 	ldr.w	r6, [sl, #164]	; 0xa4
 800b674:	f8da 7080 	ldr.w	r7, [sl, #128]	; 0x80
 800b678:	f001 fc38 	bl	800ceec <acc_cpd_linear_sweep_get_info>
 800b67c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800b67e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800b680:	429a      	cmp	r2, r3
 800b682:	f000 81fb 	beq.w	800ba7c <acc_cpd_dll_calibration+0x908>
 800b686:	f899 301c 	ldrb.w	r3, [r9, #28]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	f000 81db 	beq.w	800ba46 <acc_cpd_dll_calibration+0x8d2>
 800b690:	f8b9 301e 	ldrh.w	r3, [r9, #30]
 800b694:	ee0c 3a90 	vmov	s25, r3
 800b698:	ee1c 2a10 	vmov	r2, s24
 800b69c:	ee1b 1a90 	vmov	r1, s23
 800b6a0:	4653      	mov	r3, sl
 800b6a2:	4658      	mov	r0, fp
 800b6a4:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800b6a6:	f000 fe93 	bl	800c3d0 <acc_cpd_linear_sweep_load_program>
 800b6aa:	2800      	cmp	r0, #0
 800b6ac:	f000 81b9 	beq.w	800ba22 <acc_cpd_dll_calibration+0x8ae>
 800b6b0:	f899 301c 	ldrb.w	r3, [r9, #28]
 800b6b4:	930a      	str	r3, [sp, #40]	; 0x28
 800b6b6:	b113      	cbz	r3, 800b6be <acc_cpd_dll_calibration+0x54a>
 800b6b8:	f899 301d 	ldrb.w	r3, [r9, #29]
 800b6bc:	930a      	str	r3, [sp, #40]	; 0x28
 800b6be:	ee07 6a90 	vmov	s15, r6
 800b6c2:	eddf 6a16 	vldr	s13, [pc, #88]	; 800b71c <acc_cpd_dll_calibration+0x5a8>
 800b6c6:	ed9f ba16 	vldr	s22, [pc, #88]	; 800b720 <acc_cpd_dll_calibration+0x5ac>
 800b6ca:	eddf aa16 	vldr	s21, [pc, #88]	; 800b724 <acc_cpd_dll_calibration+0x5b0>
 800b6ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b6d2:	3401      	adds	r4, #1
 800b6d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6d8:	b2a4      	uxth	r4, r4
 800b6da:	e029      	b.n	800b730 <acc_cpd_dll_calibration+0x5bc>
 800b6dc:	080134f4 	.word	0x080134f4
 800b6e0:	08013524 	.word	0x08013524
 800b6e4:	2000082c 	.word	0x2000082c
 800b6e8:	08013454 	.word	0x08013454
 800b6ec:	0801314c 	.word	0x0801314c
 800b6f0:	080134b8 	.word	0x080134b8
 800b6f4:	080131c0 	.word	0x080131c0
 800b6f8:	08017234 	.word	0x08017234
 800b6fc:	0801722c 	.word	0x0801722c
 800b700:	cccccccd 	.word	0xcccccccd
 800b704:	08013238 	.word	0x08013238
 800b708:	080131b4 	.word	0x080131b4
 800b70c:	08013250 	.word	0x08013250
 800b710:	08013274 	.word	0x08013274
 800b714:	0801327c 	.word	0x0801327c
 800b718:	080131a8 	.word	0x080131a8
 800b71c:	42f80000 	.word	0x42f80000
 800b720:	42640000 	.word	0x42640000
 800b724:	42172c98 	.word	0x42172c98
 800b728:	402ca8ad 	.word	0x402ca8ad
 800b72c:	447a0000 	.word	0x447a0000
 800b730:	ee1c 2a90 	vmov	r2, s25
 800b734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b738:	ee17 3a90 	vmov	r3, s15
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	fb04 f303 	mul.w	r3, r4, r3
 800b742:	441d      	add	r5, r3
 800b744:	18aa      	adds	r2, r5, r2
 800b746:	9317      	str	r3, [sp, #92]	; 0x5c
 800b748:	920b      	str	r2, [sp, #44]	; 0x2c
 800b74a:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800b74e:	4658      	mov	r0, fp
 800b750:	f001 fb76 	bl	800ce40 <acc_cpd_linear_sweep_run_program>
 800b754:	2800      	cmp	r0, #0
 800b756:	f000 8164 	beq.w	800ba22 <acc_cpd_dll_calibration+0x8ae>
 800b75a:	ed1f aa0d 	vldr	s20, [pc, #-52]	; 800b728 <acc_cpd_dll_calibration+0x5b4>
 800b75e:	ed5f 9a0d 	vldr	s19, [pc, #-52]	; 800b72c <acc_cpd_dll_calibration+0x5b8>
 800b762:	2600      	movs	r6, #0
 800b764:	ab1c      	add	r3, sp, #112	; 0x70
 800b766:	2264      	movs	r2, #100	; 0x64
 800b768:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b76c:	4658      	mov	r0, fp
 800b76e:	f7fd feef 	bl	8009550 <acc_sensor_protocol_r2_wait_for_event>
 800b772:	2800      	cmp	r0, #0
 800b774:	f000 8155 	beq.w	800ba22 <acc_cpd_dll_calibration+0x8ae>
 800b778:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 800b77c:	2b06      	cmp	r3, #6
 800b77e:	f040 8150 	bne.w	800ba22 <acc_cpd_dll_calibration+0x8ae>
 800b782:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800b786:	ee1c 0a10 	vmov	r0, s24
 800b78a:	f7fd faab 	bl	8008ce4 <acc_sensor_r2_buffer_processed_verify_size>
 800b78e:	2800      	cmp	r0, #0
 800b790:	f000 813d 	beq.w	800ba0e <acc_cpd_dll_calibration+0x89a>
 800b794:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b796:	ee1b 1a90 	vmov	r1, s23
 800b79a:	4658      	mov	r0, fp
 800b79c:	f7fe f822 	bl	80097e4 <acc_sensor_protocol_r2_transfer_data>
 800b7a0:	4604      	mov	r4, r0
 800b7a2:	2800      	cmp	r0, #0
 800b7a4:	f000 813d 	beq.w	800ba22 <acc_cpd_dll_calibration+0x8ae>
 800b7a8:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800b7aa:	f899 301c 	ldrb.w	r3, [r9, #28]
 800b7ae:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800b7b2:	b1fb      	cbz	r3, 800b7f4 <acc_cpd_dll_calibration+0x680>
 800b7b4:	ee1c 3a90 	vmov	r3, s25
 800b7b8:	eb05 0208 	add.w	r2, r5, r8
 800b7bc:	4659      	mov	r1, fp
 800b7be:	2001      	movs	r0, #1
 800b7c0:	920c      	str	r2, [sp, #48]	; 0x30
 800b7c2:	f7fe faa3 	bl	8009d0c <acc_probes_execute_uint16>
 800b7c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7c8:	ee1c 1a90 	vmov	r1, s25
 800b7cc:	4610      	mov	r0, r2
 800b7ce:	f7fe f947 	bl	8009a60 <acc_alg_cca_u16_calculate>
 800b7d2:	eeb4 0acb 	vcmpe.f32	s0, s22
 800b7d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7dc:	bfcc      	ite	gt
 800b7de:	2301      	movgt	r3, #1
 800b7e0:	2300      	movle	r3, #0
 800b7e2:	ed82 0a07 	vstr	s0, [r2, #28]
 800b7e6:	7653      	strb	r3, [r2, #25]
 800b7e8:	f300 8237 	bgt.w	800bc5a <acc_cpd_dll_calibration+0xae6>
 800b7ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	f040 80f1 	bne.w	800b9d6 <acc_cpd_dll_calibration+0x862>
 800b7f4:	eeb0 0a6a 	vmov.f32	s0, s21
 800b7f8:	4641      	mov	r1, r8
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	f002 f85c 	bl	800d8b8 <acc_alg_basic_saturation_check_u16>
 800b800:	2800      	cmp	r0, #0
 800b802:	f040 80c6 	bne.w	800b992 <acc_cpd_dll_calibration+0x81e>
 800b806:	2f00      	cmp	r7, #0
 800b808:	f040 814b 	bne.w	800baa2 <acc_cpd_dll_calibration+0x92e>
 800b80c:	9b08      	ldr	r3, [sp, #32]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	f040 81a8 	bne.w	800bb64 <acc_cpd_dll_calibration+0x9f0>
 800b814:	f7fb ff2e 	bl	8007674 <acc_rss_integration_log_level>
 800b818:	2803      	cmp	r0, #3
 800b81a:	d905      	bls.n	800b828 <acc_cpd_dll_calibration+0x6b4>
 800b81c:	4bbf      	ldr	r3, [pc, #764]	; (800bb1c <acc_cpd_dll_calibration+0x9a8>)
 800b81e:	4ac0      	ldr	r2, [pc, #768]	; (800bb20 <acc_cpd_dll_calibration+0x9ac>)
 800b820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b822:	49c0      	ldr	r1, [pc, #768]	; (800bb24 <acc_cpd_dll_calibration+0x9b0>)
 800b824:	2004      	movs	r0, #4
 800b826:	4798      	blx	r3
 800b828:	eeb0 0a4a 	vmov.f32	s0, s20
 800b82c:	4641      	mov	r1, r8
 800b82e:	4628      	mov	r0, r5
 800b830:	f002 f842 	bl	800d8b8 <acc_alg_basic_saturation_check_u16>
 800b834:	2800      	cmp	r0, #0
 800b836:	f040 81a2 	bne.w	800bb7e <acc_cpd_dll_calibration+0xa0a>
 800b83a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b83c:	f8da 2020 	ldr.w	r2, [sl, #32]
 800b840:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 800b844:	49b8      	ldr	r1, [pc, #736]	; (800bb28 <acc_cpd_dll_calibration+0x9b4>)
 800b846:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800b848:	ee06 3a90 	vmov	s13, r3
 800b84c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b84e:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 800b852:	615f      	str	r7, [r3, #20]
 800b854:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800b858:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 800b85c:	49b3      	ldr	r1, [pc, #716]	; (800bb2c <acc_cpd_dll_calibration+0x9b8>)
 800b85e:	ee66 6a89 	vmul.f32	s13, s13, s18
 800b862:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800b866:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800b86a:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800b86e:	1a5b      	subs	r3, r3, r1
 800b870:	b21b      	sxth	r3, r3
 800b872:	ee07 0a90 	vmov	s15, r0
 800b876:	ee08 3a10 	vmov	s16, r3
 800b87a:	e9dd 0208 	ldrd	r0, r2, [sp, #32]
 800b87e:	ee66 6aa8 	vmul.f32	s13, s13, s17
 800b882:	eeb8 6ac8 	vcvt.f32.s32	s12, s16
 800b886:	ee66 6aa9 	vmul.f32	s13, s13, s19
 800b88a:	7610      	strb	r0, [r2, #24]
 800b88c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800b88e:	49a8      	ldr	r1, [pc, #672]	; (800bb30 <acc_cpd_dll_calibration+0x9bc>)
 800b890:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
 800b894:	48a7      	ldr	r0, [pc, #668]	; (800bb34 <acc_cpd_dll_calibration+0x9c0>)
 800b896:	ee76 6a66 	vsub.f32	s13, s12, s13
 800b89a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b89e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800b8a2:	ee07 3a10 	vmov	s14, r3
 800b8a6:	ee67 7a89 	vmul.f32	s15, s15, s18
 800b8aa:	ee16 3a90 	vmov	r3, s13
 800b8ae:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b8b2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b8b6:	b21b      	sxth	r3, r3
 800b8b8:	ee06 3a90 	vmov	s13, r3
 800b8bc:	ee27 7a09 	vmul.f32	s14, s14, s18
 800b8c0:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800b8c4:	ee37 7a65 	vsub.f32	s14, s14, s11
 800b8c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b8cc:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800b8d0:	ee27 7a28 	vmul.f32	s14, s14, s17
 800b8d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8d8:	ee27 7a29 	vmul.f32	s14, s14, s19
 800b8dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b8e0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800b8e4:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 800b8e8:	ee17 3a90 	vmov	r3, s15
 800b8ec:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
 800b8f0:	ee17 3a10 	vmov	r3, s14
 800b8f4:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
 800b8f8:	f7fe f910 	bl	8009b1c <acc_diagnostic_log_array>
 800b8fc:	2101      	movs	r1, #1
 800b8fe:	a81b      	add	r0, sp, #108	; 0x6c
 800b900:	f7fe f924 	bl	8009b4c <acc_diagnostic_log_data_i16>
 800b904:	498a      	ldr	r1, [pc, #552]	; (800bb30 <acc_cpd_dll_calibration+0x9bc>)
 800b906:	488b      	ldr	r0, [pc, #556]	; (800bb34 <acc_cpd_dll_calibration+0x9c0>)
 800b908:	f7fe f908 	bl	8009b1c <acc_diagnostic_log_array>
 800b90c:	2101      	movs	r1, #1
 800b90e:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
 800b912:	f7fe f91b 	bl	8009b4c <acc_diagnostic_log_data_i16>
 800b916:	4986      	ldr	r1, [pc, #536]	; (800bb30 <acc_cpd_dll_calibration+0x9bc>)
 800b918:	4887      	ldr	r0, [pc, #540]	; (800bb38 <acc_cpd_dll_calibration+0x9c4>)
 800b91a:	f7fe f8ff 	bl	8009b1c <acc_diagnostic_log_array>
 800b91e:	2101      	movs	r1, #1
 800b920:	a81c      	add	r0, sp, #112	; 0x70
 800b922:	f7fe f913 	bl	8009b4c <acc_diagnostic_log_data_i16>
 800b926:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 800b92a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b92c:	1a9b      	subs	r3, r3, r2
 800b92e:	b21b      	sxth	r3, r3
 800b930:	2b00      	cmp	r3, #0
 800b932:	bfb8      	it	lt
 800b934:	425b      	neglt	r3, r3
 800b936:	b21b      	sxth	r3, r3
 800b938:	2b64      	cmp	r3, #100	; 0x64
 800b93a:	f77f ad0f 	ble.w	800b35c <acc_cpd_dll_calibration+0x1e8>
 800b93e:	2e02      	cmp	r6, #2
 800b940:	d00f      	beq.n	800b962 <acc_cpd_dll_calibration+0x7ee>
 800b942:	f7fb fe97 	bl	8007674 <acc_rss_integration_log_level>
 800b946:	2803      	cmp	r0, #3
 800b948:	d906      	bls.n	800b958 <acc_cpd_dll_calibration+0x7e4>
 800b94a:	4b74      	ldr	r3, [pc, #464]	; (800bb1c <acc_cpd_dll_calibration+0x9a8>)
 800b94c:	4a7b      	ldr	r2, [pc, #492]	; (800bb3c <acc_cpd_dll_calibration+0x9c8>)
 800b94e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800b950:	4974      	ldr	r1, [pc, #464]	; (800bb24 <acc_cpd_dll_calibration+0x9b0>)
 800b952:	4633      	mov	r3, r6
 800b954:	2004      	movs	r0, #4
 800b956:	47a0      	blx	r4
 800b958:	4658      	mov	r0, fp
 800b95a:	3601      	adds	r6, #1
 800b95c:	f7fd fd6a 	bl	8009434 <acc_sensor_protocol_r2_ack_event>
 800b960:	e700      	b.n	800b764 <acc_cpd_dll_calibration+0x5f0>
 800b962:	f7fb fe87 	bl	8007674 <acc_rss_integration_log_level>
 800b966:	2803      	cmp	r0, #3
 800b968:	d92f      	bls.n	800b9ca <acc_cpd_dll_calibration+0x856>
 800b96a:	4b6c      	ldr	r3, [pc, #432]	; (800bb1c <acc_cpd_dll_calibration+0x9a8>)
 800b96c:	4a74      	ldr	r2, [pc, #464]	; (800bb40 <acc_cpd_dll_calibration+0x9cc>)
 800b96e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b970:	496c      	ldr	r1, [pc, #432]	; (800bb24 <acc_cpd_dll_calibration+0x9b0>)
 800b972:	2004      	movs	r0, #4
 800b974:	4798      	blx	r3
 800b976:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b97a:	4658      	mov	r0, fp
 800b97c:	f7fd fe80 	bl	8009680 <acc_sensor_protocol_r2_stop>
 800b980:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b982:	2b01      	cmp	r3, #1
 800b984:	f04f 0100 	mov.w	r1, #0
 800b988:	f43f ad1b 	beq.w	800b3c2 <acc_cpd_dll_calibration+0x24e>
 800b98c:	2301      	movs	r3, #1
 800b98e:	9315      	str	r3, [sp, #84]	; 0x54
 800b990:	e5d3      	b.n	800b53a <acc_cpd_dll_calibration+0x3c6>
 800b992:	eeb0 0a4a 	vmov.f32	s0, s20
 800b996:	4641      	mov	r1, r8
 800b998:	4628      	mov	r0, r5
 800b99a:	f001 ff8d 	bl	800d8b8 <acc_alg_basic_saturation_check_u16>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	f43f af4b 	beq.w	800b83a <acc_cpd_dll_calibration+0x6c6>
 800b9a4:	2f0f      	cmp	r7, #15
 800b9a6:	f040 80ea 	bne.w	800bb7e <acc_cpd_dll_calibration+0xa0a>
 800b9aa:	9b08      	ldr	r3, [sp, #32]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f000 80fd 	beq.w	800bbac <acc_cpd_dll_calibration+0xa38>
 800b9b2:	f7fb fe5f 	bl	8007674 <acc_rss_integration_log_level>
 800b9b6:	2803      	cmp	r0, #3
 800b9b8:	f67f af3f 	bls.w	800b83a <acc_cpd_dll_calibration+0x6c6>
 800b9bc:	4b57      	ldr	r3, [pc, #348]	; (800bb1c <acc_cpd_dll_calibration+0x9a8>)
 800b9be:	4a61      	ldr	r2, [pc, #388]	; (800bb44 <acc_cpd_dll_calibration+0x9d0>)
 800b9c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9c2:	4958      	ldr	r1, [pc, #352]	; (800bb24 <acc_cpd_dll_calibration+0x9b0>)
 800b9c4:	2004      	movs	r0, #4
 800b9c6:	4798      	blx	r3
 800b9c8:	e737      	b.n	800b83a <acc_cpd_dll_calibration+0x6c6>
 800b9ca:	4658      	mov	r0, fp
 800b9cc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b9d0:	f7fd fe56 	bl	8009680 <acc_sensor_protocol_r2_stop>
 800b9d4:	e4ef      	b.n	800b3b6 <acc_cpd_dll_calibration+0x242>
 800b9d6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b9da:	4658      	mov	r0, fp
 800b9dc:	f7fd fe50 	bl	8009680 <acc_sensor_protocol_r2_stop>
 800b9e0:	4658      	mov	r0, fp
 800b9e2:	f7fd fd15 	bl	8009410 <acc_sensor_protocol_r2_is_sensor_running>
 800b9e6:	900a      	str	r0, [sp, #40]	; 0x28
 800b9e8:	bb10      	cbnz	r0, 800ba30 <acc_cpd_dll_calibration+0x8bc>
 800b9ea:	f002 fd85 	bl	800e4f8 <acc_image_a111_r2c_sweep_get>
 800b9ee:	900c      	str	r0, [sp, #48]	; 0x30
 800b9f0:	f002 fd86 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800b9f4:	4a54      	ldr	r2, [pc, #336]	; (800bb48 <acc_cpd_dll_calibration+0x9d4>)
 800b9f6:	9202      	str	r2, [sp, #8]
 800b9f8:	2401      	movs	r4, #1
 800b9fa:	2272      	movs	r2, #114	; 0x72
 800b9fc:	e9cd 2400 	strd	r2, r4, [sp]
 800ba00:	4603      	mov	r3, r0
 800ba02:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ba04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba06:	4658      	mov	r0, fp
 800ba08:	f002 fcde 	bl	800e3c8 <acc_confprogram_live_patch>
 800ba0c:	e69f      	b.n	800b74e <acc_cpd_dll_calibration+0x5da>
 800ba0e:	4b43      	ldr	r3, [pc, #268]	; (800bb1c <acc_cpd_dll_calibration+0x9a8>)
 800ba10:	4944      	ldr	r1, [pc, #272]	; (800bb24 <acc_cpd_dll_calibration+0x9b0>)
 800ba12:	4a4e      	ldr	r2, [pc, #312]	; (800bb4c <acc_cpd_dll_calibration+0x9d8>)
 800ba14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba16:	4798      	blx	r3
 800ba18:	4658      	mov	r0, fp
 800ba1a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800ba1e:	f7fd fe2f 	bl	8009680 <acc_sensor_protocol_r2_stop>
 800ba22:	2400      	movs	r4, #0
 800ba24:	4620      	mov	r0, r4
 800ba26:	b047      	add	sp, #284	; 0x11c
 800ba28:	ecbd 8b0a 	vpop	{d8-d12}
 800ba2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba30:	4b3a      	ldr	r3, [pc, #232]	; (800bb1c <acc_cpd_dll_calibration+0x9a8>)
 800ba32:	4a47      	ldr	r2, [pc, #284]	; (800bb50 <acc_cpd_dll_calibration+0x9dc>)
 800ba34:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800ba36:	493b      	ldr	r1, [pc, #236]	; (800bb24 <acc_cpd_dll_calibration+0x9b0>)
 800ba38:	46d9      	mov	r9, fp
 800ba3a:	464b      	mov	r3, r9
 800ba3c:	2000      	movs	r0, #0
 800ba3e:	47a0      	blx	r4
 800ba40:	e7ef      	b.n	800ba22 <acc_cpd_dll_calibration+0x8ae>
 800ba42:	2301      	movs	r3, #1
 800ba44:	e58d      	b.n	800b562 <acc_cpd_dll_calibration+0x3ee>
 800ba46:	ee0c 3a90 	vmov	s25, r3
 800ba4a:	e625      	b.n	800b698 <acc_cpd_dll_calibration+0x524>
 800ba4c:	f7fb fe12 	bl	8007674 <acc_rss_integration_log_level>
 800ba50:	2803      	cmp	r0, #3
 800ba52:	f67f acc3 	bls.w	800b3dc <acc_cpd_dll_calibration+0x268>
 800ba56:	4b31      	ldr	r3, [pc, #196]	; (800bb1c <acc_cpd_dll_calibration+0x9a8>)
 800ba58:	4a3e      	ldr	r2, [pc, #248]	; (800bb54 <acc_cpd_dll_calibration+0x9e0>)
 800ba5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba5c:	4931      	ldr	r1, [pc, #196]	; (800bb24 <acc_cpd_dll_calibration+0x9b0>)
 800ba5e:	2004      	movs	r0, #4
 800ba60:	4798      	blx	r3
 800ba62:	e4bb      	b.n	800b3dc <acc_cpd_dll_calibration+0x268>
 800ba64:	464b      	mov	r3, r9
 800ba66:	46d1      	mov	r9, sl
 800ba68:	469a      	mov	sl, r3
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	930e      	str	r3, [sp, #56]	; 0x38
 800ba6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d0d6      	beq.n	800ba22 <acc_cpd_dll_calibration+0x8ae>
 800ba74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba76:	9319      	str	r3, [sp, #100]	; 0x64
 800ba78:	f7ff bbc6 	b.w	800b208 <acc_cpd_dll_calibration+0x94>
 800ba7c:	4b27      	ldr	r3, [pc, #156]	; (800bb1c <acc_cpd_dll_calibration+0x9a8>)
 800ba7e:	4a36      	ldr	r2, [pc, #216]	; (800bb58 <acc_cpd_dll_calibration+0x9e4>)
 800ba80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba82:	4928      	ldr	r1, [pc, #160]	; (800bb24 <acc_cpd_dll_calibration+0x9b0>)
 800ba84:	2000      	movs	r0, #0
 800ba86:	4798      	blx	r3
 800ba88:	e7cb      	b.n	800ba22 <acc_cpd_dll_calibration+0x8ae>
 800ba8a:	4b24      	ldr	r3, [pc, #144]	; (800bb1c <acc_cpd_dll_calibration+0x9a8>)
 800ba8c:	4a33      	ldr	r2, [pc, #204]	; (800bb5c <acc_cpd_dll_calibration+0x9e8>)
 800ba8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba90:	4924      	ldr	r1, [pc, #144]	; (800bb24 <acc_cpd_dll_calibration+0x9b0>)
 800ba92:	4620      	mov	r0, r4
 800ba94:	4798      	blx	r3
 800ba96:	4620      	mov	r0, r4
 800ba98:	b047      	add	sp, #284	; 0x11c
 800ba9a:	ecbd 8b0a 	vpop	{d8-d12}
 800ba9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa2:	2f08      	cmp	r7, #8
 800baa4:	bf38      	it	cc
 800baa6:	2708      	movcc	r7, #8
 800baa8:	f7fb fde4 	bl	8007674 <acc_rss_integration_log_level>
 800baac:	2803      	cmp	r0, #3
 800baae:	f1a7 0708 	sub.w	r7, r7, #8
 800bab2:	d906      	bls.n	800bac2 <acc_cpd_dll_calibration+0x94e>
 800bab4:	4b19      	ldr	r3, [pc, #100]	; (800bb1c <acc_cpd_dll_calibration+0x9a8>)
 800bab6:	4a2a      	ldr	r2, [pc, #168]	; (800bb60 <acc_cpd_dll_calibration+0x9ec>)
 800bab8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800baba:	491a      	ldr	r1, [pc, #104]	; (800bb24 <acc_cpd_dll_calibration+0x9b0>)
 800babc:	463b      	mov	r3, r7
 800babe:	2004      	movs	r0, #4
 800bac0:	47a0      	blx	r4
 800bac2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800bac6:	4658      	mov	r0, fp
 800bac8:	f7fd fdda 	bl	8009680 <acc_sensor_protocol_r2_stop>
 800bacc:	4658      	mov	r0, fp
 800bace:	f7fd fc9f 	bl	8009410 <acc_sensor_protocol_r2_is_sensor_running>
 800bad2:	4602      	mov	r2, r0
 800bad4:	2800      	cmp	r0, #0
 800bad6:	d1ab      	bne.n	800ba30 <acc_cpd_dll_calibration+0x8bc>
 800bad8:	9210      	str	r2, [sp, #64]	; 0x40
 800bada:	f002 fd0d 	bl	800e4f8 <acc_image_a111_r2c_sweep_get>
 800bade:	900c      	str	r0, [sp, #48]	; 0x30
 800bae0:	f002 fd0e 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800bae4:	4c18      	ldr	r4, [pc, #96]	; (800bb48 <acc_cpd_dll_calibration+0x9d4>)
 800bae6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bae8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800baea:	2544      	movs	r5, #68	; 0x44
 800baec:	4603      	mov	r3, r0
 800baee:	9500      	str	r5, [sp, #0]
 800baf0:	4658      	mov	r0, fp
 800baf2:	e9cd 7401 	strd	r7, r4, [sp, #4]
 800baf6:	f002 fc67 	bl	800e3c8 <acc_confprogram_live_patch>
 800bafa:	f002 fcfd 	bl	800e4f8 <acc_image_a111_r2c_sweep_get>
 800bafe:	900c      	str	r0, [sp, #48]	; 0x30
 800bb00:	f002 fcfe 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800bb04:	2542      	movs	r5, #66	; 0x42
 800bb06:	9a08      	ldr	r2, [sp, #32]
 800bb08:	9201      	str	r2, [sp, #4]
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bb0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bb10:	9402      	str	r4, [sp, #8]
 800bb12:	9500      	str	r5, [sp, #0]
 800bb14:	4658      	mov	r0, fp
 800bb16:	f002 fc57 	bl	800e3c8 <acc_confprogram_live_patch>
 800bb1a:	e618      	b.n	800b74e <acc_cpd_dll_calibration+0x5da>
 800bb1c:	2000082c 	.word	0x2000082c
 800bb20:	080132f4 	.word	0x080132f4
 800bb24:	0801314c 	.word	0x0801314c
 800bb28:	08017234 	.word	0x08017234
 800bb2c:	0801722c 	.word	0x0801722c
 800bb30:	08013250 	.word	0x08013250
 800bb34:	080133c4 	.word	0x080133c4
 800bb38:	080133d4 	.word	0x080133d4
 800bb3c:	080133e4 	.word	0x080133e4
 800bb40:	0801340c 	.word	0x0801340c
 800bb44:	08013348 	.word	0x08013348
 800bb48:	08008c19 	.word	0x08008c19
 800bb4c:	08013034 	.word	0x08013034
 800bb50:	08012fc0 	.word	0x08012fc0
 800bb54:	08013210 	.word	0x08013210
 800bb58:	080132ac 	.word	0x080132ac
 800bb5c:	08012240 	.word	0x08012240
 800bb60:	08013314 	.word	0x08013314
 800bb64:	f7fb fd86 	bl	8007674 <acc_rss_integration_log_level>
 800bb68:	2803      	cmp	r0, #3
 800bb6a:	d92d      	bls.n	800bbc8 <acc_cpd_dll_calibration+0xa54>
 800bb6c:	4b3e      	ldr	r3, [pc, #248]	; (800bc68 <acc_cpd_dll_calibration+0xaf4>)
 800bb6e:	4a3f      	ldr	r2, [pc, #252]	; (800bc6c <acc_cpd_dll_calibration+0xaf8>)
 800bb70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb72:	493f      	ldr	r1, [pc, #252]	; (800bc70 <acc_cpd_dll_calibration+0xafc>)
 800bb74:	9708      	str	r7, [sp, #32]
 800bb76:	2004      	movs	r0, #4
 800bb78:	4798      	blx	r3
 800bb7a:	270f      	movs	r7, #15
 800bb7c:	e7a1      	b.n	800bac2 <acc_cpd_dll_calibration+0x94e>
 800bb7e:	3708      	adds	r7, #8
 800bb80:	2f0f      	cmp	r7, #15
 800bb82:	bf28      	it	cs
 800bb84:	270f      	movcs	r7, #15
 800bb86:	f7fb fd75 	bl	8007674 <acc_rss_integration_log_level>
 800bb8a:	2803      	cmp	r0, #3
 800bb8c:	d999      	bls.n	800bac2 <acc_cpd_dll_calibration+0x94e>
 800bb8e:	4b36      	ldr	r3, [pc, #216]	; (800bc68 <acc_cpd_dll_calibration+0xaf4>)
 800bb90:	4a38      	ldr	r2, [pc, #224]	; (800bc74 <acc_cpd_dll_calibration+0xb00>)
 800bb92:	e791      	b.n	800bab8 <acc_cpd_dll_calibration+0x944>
 800bb94:	f7fb fd6e 	bl	8007674 <acc_rss_integration_log_level>
 800bb98:	2803      	cmp	r0, #3
 800bb9a:	f67f ac1f 	bls.w	800b3dc <acc_cpd_dll_calibration+0x268>
 800bb9e:	4b32      	ldr	r3, [pc, #200]	; (800bc68 <acc_cpd_dll_calibration+0xaf4>)
 800bba0:	4a35      	ldr	r2, [pc, #212]	; (800bc78 <acc_cpd_dll_calibration+0xb04>)
 800bba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bba4:	4932      	ldr	r1, [pc, #200]	; (800bc70 <acc_cpd_dll_calibration+0xafc>)
 800bba6:	2004      	movs	r0, #4
 800bba8:	4798      	blx	r3
 800bbaa:	e417      	b.n	800b3dc <acc_cpd_dll_calibration+0x268>
 800bbac:	9008      	str	r0, [sp, #32]
 800bbae:	f7fb fd61 	bl	8007674 <acc_rss_integration_log_level>
 800bbb2:	2803      	cmp	r0, #3
 800bbb4:	9b08      	ldr	r3, [sp, #32]
 800bbb6:	d90a      	bls.n	800bbce <acc_cpd_dll_calibration+0xa5a>
 800bbb8:	492b      	ldr	r1, [pc, #172]	; (800bc68 <acc_cpd_dll_calibration+0xaf4>)
 800bbba:	4a30      	ldr	r2, [pc, #192]	; (800bc7c <acc_cpd_dll_calibration+0xb08>)
 800bbbc:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800bbbe:	492c      	ldr	r1, [pc, #176]	; (800bc70 <acc_cpd_dll_calibration+0xafc>)
 800bbc0:	2004      	movs	r0, #4
 800bbc2:	47a0      	blx	r4
 800bbc4:	2700      	movs	r7, #0
 800bbc6:	e77c      	b.n	800bac2 <acc_cpd_dll_calibration+0x94e>
 800bbc8:	9708      	str	r7, [sp, #32]
 800bbca:	270f      	movs	r7, #15
 800bbcc:	e779      	b.n	800bac2 <acc_cpd_dll_calibration+0x94e>
 800bbce:	9308      	str	r3, [sp, #32]
 800bbd0:	2700      	movs	r7, #0
 800bbd2:	e776      	b.n	800bac2 <acc_cpd_dll_calibration+0x94e>
 800bbd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bbd6:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 800bbda:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800bbdc:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 800bbe0:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800bbe2:	6008      	str	r0, [r1, #0]
 800bbe4:	818d      	strh	r5, [r1, #12]
 800bbe6:	81ca      	strh	r2, [r1, #14]
 800bbe8:	820b      	strh	r3, [r1, #16]
 800bbea:	f7fb fd43 	bl	8007674 <acc_rss_integration_log_level>
 800bbee:	2803      	cmp	r0, #3
 800bbf0:	d909      	bls.n	800bc06 <acc_cpd_dll_calibration+0xa92>
 800bbf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbf4:	4a1c      	ldr	r2, [pc, #112]	; (800bc68 <acc_cpd_dll_calibration+0xaf4>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800bbfa:	491d      	ldr	r1, [pc, #116]	; (800bc70 <acc_cpd_dll_calibration+0xafc>)
 800bbfc:	9300      	str	r3, [sp, #0]
 800bbfe:	4a20      	ldr	r2, [pc, #128]	; (800bc80 <acc_cpd_dll_calibration+0xb0c>)
 800bc00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc02:	2004      	movs	r0, #4
 800bc04:	47a8      	blx	r5
 800bc06:	f7fb fd35 	bl	8007674 <acc_rss_integration_log_level>
 800bc0a:	2801      	cmp	r0, #1
 800bc0c:	d91e      	bls.n	800bc4c <acc_cpd_dll_calibration+0xad8>
 800bc0e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bc10:	4a1c      	ldr	r2, [pc, #112]	; (800bc84 <acc_cpd_dll_calibration+0xb10>)
 800bc12:	7e39      	ldrb	r1, [r7, #24]
 800bc14:	f8df c074 	ldr.w	ip, [pc, #116]	; 800bc8c <acc_cpd_dll_calibration+0xb18>
 800bc18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc1a:	89b8      	ldrh	r0, [r7, #12]
 800bc1c:	683e      	ldr	r6, [r7, #0]
 800bc1e:	9300      	str	r3, [sp, #0]
 800bc20:	2900      	cmp	r1, #0
 800bc22:	bf14      	ite	ne
 800bc24:	4663      	movne	r3, ip
 800bc26:	4613      	moveq	r3, r2
 800bc28:	4d0f      	ldr	r5, [pc, #60]	; (800bc68 <acc_cpd_dll_calibration+0xaf4>)
 800bc2a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800bc2e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800bc32:	9306      	str	r3, [sp, #24]
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800bc38:	9305      	str	r3, [sp, #20]
 800bc3a:	e9cd 1203 	strd	r1, r2, [sp, #12]
 800bc3e:	e9cd 6001 	strd	r6, r0, [sp, #4]
 800bc42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc44:	4a10      	ldr	r2, [pc, #64]	; (800bc88 <acc_cpd_dll_calibration+0xb14>)
 800bc46:	490a      	ldr	r1, [pc, #40]	; (800bc70 <acc_cpd_dll_calibration+0xafc>)
 800bc48:	2002      	movs	r0, #2
 800bc4a:	47a8      	blx	r5
 800bc4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc4e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bc50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc52:	6059      	str	r1, [r3, #4]
 800bc54:	609a      	str	r2, [r3, #8]
 800bc56:	f7ff bb30 	b.w	800b2ba <acc_cpd_dll_calibration+0x146>
 800bc5a:	4658      	mov	r0, fp
 800bc5c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800bc60:	f7fd fd0e 	bl	8009680 <acc_sensor_protocol_r2_stop>
 800bc64:	e6dd      	b.n	800ba22 <acc_cpd_dll_calibration+0x8ae>
 800bc66:	bf00      	nop
 800bc68:	2000082c 	.word	0x2000082c
 800bc6c:	080132cc 	.word	0x080132cc
 800bc70:	0801314c 	.word	0x0801314c
 800bc74:	08013390 	.word	0x08013390
 800bc78:	08013284 	.word	0x08013284
 800bc7c:	08013368 	.word	0x08013368
 800bc80:	08013424 	.word	0x08013424
 800bc84:	08013144 	.word	0x08013144
 800bc88:	08013488 	.word	0x08013488
 800bc8c:	0801313c 	.word	0x0801313c

0800bc90 <acc_dll_check_direct_leakage>:
 800bc90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc94:	4b44      	ldr	r3, [pc, #272]	; (800bda8 <acc_dll_check_direct_leakage+0x118>)
 800bc96:	460d      	mov	r5, r1
 800bc98:	fba3 3101 	umull	r3, r1, r3, r1
 800bc9c:	ea4f 0991 	mov.w	r9, r1, lsr #2
 800bca0:	f021 0403 	bic.w	r4, r1, #3
 800bca4:	b084      	sub	sp, #16
 800bca6:	464b      	mov	r3, r9
 800bca8:	eb04 0191 	add.w	r1, r4, r1, lsr #2
 800bcac:	4602      	mov	r2, r0
 800bcae:	4682      	mov	sl, r0
 800bcb0:	f002 f9e2 	bl	800e078 <acc_alg_power_bins>
 800bcb4:	2d04      	cmp	r5, #4
 800bcb6:	d924      	bls.n	800bd02 <acc_dll_check_direct_leakage+0x72>
 800bcb8:	f1aa 0602 	sub.w	r6, sl, #2
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	4632      	mov	r2, r6
 800bcc0:	461c      	mov	r4, r3
 800bcc2:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	428c      	cmp	r4, r1
 800bcca:	bf38      	it	cc
 800bccc:	460c      	movcc	r4, r1
 800bcce:	4599      	cmp	r9, r3
 800bcd0:	d8f7      	bhi.n	800bcc2 <acc_dll_check_direct_leakage+0x32>
 800bcd2:	4b36      	ldr	r3, [pc, #216]	; (800bdac <acc_dll_check_direct_leakage+0x11c>)
 800bcd4:	2d0e      	cmp	r5, #14
 800bcd6:	fba3 3404 	umull	r3, r4, r3, r4
 800bcda:	f3c4 084f 	ubfx	r8, r4, #1, #16
 800bcde:	d910      	bls.n	800bd02 <acc_dll_check_direct_leakage+0x72>
 800bce0:	2702      	movs	r7, #2
 800bce2:	f836 5f02 	ldrh.w	r5, [r6, #2]!
 800bce6:	88b4      	ldrh	r4, [r6, #4]
 800bce8:	42a5      	cmp	r5, r4
 800bcea:	d902      	bls.n	800bcf2 <acc_dll_check_direct_leakage+0x62>
 800bcec:	4623      	mov	r3, r4
 800bcee:	462c      	mov	r4, r5
 800bcf0:	461d      	mov	r5, r3
 800bcf2:	4544      	cmp	r4, r8
 800bcf4:	d902      	bls.n	800bcfc <acc_dll_check_direct_leakage+0x6c>
 800bcf6:	ebb4 0fc5 	cmp.w	r4, r5, lsl #3
 800bcfa:	d834      	bhi.n	800bd66 <acc_dll_check_direct_leakage+0xd6>
 800bcfc:	3701      	adds	r7, #1
 800bcfe:	45b9      	cmp	r9, r7
 800bd00:	d8ef      	bhi.n	800bce2 <acc_dll_check_direct_leakage+0x52>
 800bd02:	ea4f 0559 	mov.w	r5, r9, lsr #1
 800bd06:	f105 0308 	add.w	r3, r5, #8
 800bd0a:	454b      	cmp	r3, r9
 800bd0c:	d821      	bhi.n	800bd52 <acc_dll_check_direct_leakage+0xc2>
 800bd0e:	f1aa 0202 	sub.w	r2, sl, #2
 800bd12:	f10a 000e 	add.w	r0, sl, #14
 800bd16:	2400      	movs	r4, #0
 800bd18:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 800bd1c:	4290      	cmp	r0, r2
 800bd1e:	440c      	add	r4, r1
 800bd20:	d1fa      	bne.n	800bd18 <acc_dll_check_direct_leakage+0x88>
 800bd22:	1c6a      	adds	r2, r5, #1
 800bd24:	4293      	cmp	r3, r2
 800bd26:	bf34      	ite	cc
 800bd28:	2301      	movcc	r3, #1
 800bd2a:	2308      	movcs	r3, #8
 800bd2c:	442b      	add	r3, r5
 800bd2e:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
 800bd32:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 800bd36:	2500      	movs	r5, #0
 800bd38:	f83a 2b02 	ldrh.w	r2, [sl], #2
 800bd3c:	4553      	cmp	r3, sl
 800bd3e:	4415      	add	r5, r2
 800bd40:	d1fa      	bne.n	800bd38 <acc_dll_check_direct_leakage+0xa8>
 800bd42:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800bd46:	42ab      	cmp	r3, r5
 800bd48:	d81f      	bhi.n	800bd8a <acc_dll_check_direct_leakage+0xfa>
 800bd4a:	2001      	movs	r0, #1
 800bd4c:	b004      	add	sp, #16
 800bd4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd52:	4b17      	ldr	r3, [pc, #92]	; (800bdb0 <acc_dll_check_direct_leakage+0x120>)
 800bd54:	4a17      	ldr	r2, [pc, #92]	; (800bdb4 <acc_dll_check_direct_leakage+0x124>)
 800bd56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd58:	4917      	ldr	r1, [pc, #92]	; (800bdb8 <acc_dll_check_direct_leakage+0x128>)
 800bd5a:	2000      	movs	r0, #0
 800bd5c:	4798      	blx	r3
 800bd5e:	2000      	movs	r0, #0
 800bd60:	b004      	add	sp, #16
 800bd62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd66:	f7fb fc85 	bl	8007674 <acc_rss_integration_log_level>
 800bd6a:	2803      	cmp	r0, #3
 800bd6c:	d909      	bls.n	800bd82 <acc_dll_check_direct_leakage+0xf2>
 800bd6e:	e9cd 5801 	strd	r5, r8, [sp, #4]
 800bd72:	4a0f      	ldr	r2, [pc, #60]	; (800bdb0 <acc_dll_check_direct_leakage+0x120>)
 800bd74:	9400      	str	r4, [sp, #0]
 800bd76:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800bd78:	490f      	ldr	r1, [pc, #60]	; (800bdb8 <acc_dll_check_direct_leakage+0x128>)
 800bd7a:	4a10      	ldr	r2, [pc, #64]	; (800bdbc <acc_dll_check_direct_leakage+0x12c>)
 800bd7c:	463b      	mov	r3, r7
 800bd7e:	2004      	movs	r0, #4
 800bd80:	47a0      	blx	r4
 800bd82:	2000      	movs	r0, #0
 800bd84:	b004      	add	sp, #16
 800bd86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd8a:	f7fb fc73 	bl	8007674 <acc_rss_integration_log_level>
 800bd8e:	2803      	cmp	r0, #3
 800bd90:	d9f7      	bls.n	800bd82 <acc_dll_check_direct_leakage+0xf2>
 800bd92:	4a07      	ldr	r2, [pc, #28]	; (800bdb0 <acc_dll_check_direct_leakage+0x120>)
 800bd94:	9500      	str	r5, [sp, #0]
 800bd96:	4623      	mov	r3, r4
 800bd98:	2004      	movs	r0, #4
 800bd9a:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800bd9c:	4906      	ldr	r1, [pc, #24]	; (800bdb8 <acc_dll_check_direct_leakage+0x128>)
 800bd9e:	4a08      	ldr	r2, [pc, #32]	; (800bdc0 <acc_dll_check_direct_leakage+0x130>)
 800bda0:	47a0      	blx	r4
 800bda2:	2000      	movs	r0, #0
 800bda4:	e7d2      	b.n	800bd4c <acc_dll_check_direct_leakage+0xbc>
 800bda6:	bf00      	nop
 800bda8:	cccccccd 	.word	0xcccccccd
 800bdac:	aaaaaaab 	.word	0xaaaaaaab
 800bdb0:	2000082c 	.word	0x2000082c
 800bdb4:	080135b0 	.word	0x080135b0
 800bdb8:	08013594 	.word	0x08013594
 800bdbc:	08013538 	.word	0x08013538
 800bdc0:	080135c0 	.word	0x080135c0

0800bdc4 <acc_dll_dly_coarse_priority_sort>:
 800bdc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdc8:	b084      	sub	sp, #16
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	f000 80ad 	beq.w	800bf2a <acc_dll_dly_coarse_priority_sort+0x166>
 800bdd0:	280c      	cmp	r0, #12
 800bdd2:	f200 80a6 	bhi.w	800bf22 <acc_dll_dly_coarse_priority_sort+0x15e>
 800bdd6:	2400      	movs	r4, #0
 800bdd8:	ed9f 4a56 	vldr	s8, [pc, #344]	; 800bf34 <acc_dll_dly_coarse_priority_sort+0x170>
 800bddc:	eddf 4a56 	vldr	s9, [pc, #344]	; 800bf38 <acc_dll_dly_coarse_priority_sort+0x174>
 800bde0:	ed9f 6a56 	vldr	s12, [pc, #344]	; 800bf3c <acc_dll_dly_coarse_priority_sort+0x178>
 800bde4:	ed9f 5a56 	vldr	s10, [pc, #344]	; 800bf40 <acc_dll_dly_coarse_priority_sort+0x17c>
 800bde8:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bf44 <acc_dll_dly_coarse_priority_sort+0x180>
 800bdec:	4626      	mov	r6, r4
 800bdee:	f10d 0e04 	add.w	lr, sp, #4
 800bdf2:	f102 3cff 	add.w	ip, r2, #4294967295
 800bdf6:	460d      	mov	r5, r1
 800bdf8:	1e47      	subs	r7, r0, #1
 800bdfa:	f240 5813 	movw	r8, #1299	; 0x513
 800bdfe:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800be02:	2c00      	cmp	r4, #0
 800be04:	d067      	beq.n	800bed6 <acc_dll_dly_coarse_priority_sort+0x112>
 800be06:	42bc      	cmp	r4, r7
 800be08:	d016      	beq.n	800be38 <acc_dll_dly_coarse_priority_sort+0x74>
 800be0a:	f935 ac02 	ldrsh.w	sl, [r5, #-2]
 800be0e:	f9b5 3000 	ldrsh.w	r3, [r5]
 800be12:	459a      	cmp	sl, r3
 800be14:	dd18      	ble.n	800be48 <acc_dll_dly_coarse_priority_sort+0x84>
 800be16:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 800be1a:	454b      	cmp	r3, r9
 800be1c:	dd14      	ble.n	800be48 <acc_dll_dly_coarse_priority_sort+0x84>
 800be1e:	45c2      	cmp	sl, r8
 800be20:	dc12      	bgt.n	800be48 <acc_dll_dly_coarse_priority_sort+0x84>
 800be22:	4543      	cmp	r3, r8
 800be24:	dc10      	bgt.n	800be48 <acc_dll_dly_coarse_priority_sort+0x84>
 800be26:	eba9 090a 	sub.w	r9, r9, sl
 800be2a:	ee07 9a90 	vmov	s15, r9
 800be2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be32:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800be36:	e05e      	b.n	800bef6 <acc_dll_dly_coarse_priority_sort+0x132>
 800be38:	f935 9c02 	ldrsh.w	r9, [r5, #-2]
 800be3c:	f9b5 3000 	ldrsh.w	r3, [r5]
 800be40:	4599      	cmp	r9, r3
 800be42:	dd01      	ble.n	800be48 <acc_dll_dly_coarse_priority_sort+0x84>
 800be44:	45c1      	cmp	r9, r8
 800be46:	dd65      	ble.n	800bf14 <acc_dll_dly_coarse_priority_sort+0x150>
 800be48:	eef0 6a46 	vmov.f32	s13, s12
 800be4c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800be50:	2b00      	cmp	r3, #0
 800be52:	bfb8      	it	lt
 800be54:	425b      	neglt	r3, r3
 800be56:	ee07 3a90 	vmov	s15, r3
 800be5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be5e:	3401      	adds	r4, #1
 800be60:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800be64:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800be68:	b2e6      	uxtb	r6, r4
 800be6a:	42b0      	cmp	r0, r6
 800be6c:	f105 0502 	add.w	r5, r5, #2
 800be70:	ee67 7a25 	vmul.f32	s15, s14, s11
 800be74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be7c:	ee17 3a90 	vmov	r3, s15
 800be80:	f80e 3b01 	strb.w	r3, [lr], #1
 800be84:	d8bd      	bhi.n	800be02 <acc_dll_dly_coarse_priority_sort+0x3e>
 800be86:	3802      	subs	r0, #2
 800be88:	f102 0c01 	add.w	ip, r2, #1
 800be8c:	fa5f fe87 	uxtb.w	lr, r7
 800be90:	fa5c f780 	uxtab	r7, ip, r0
 800be94:	eba7 0e0e 	sub.w	lr, r7, lr
 800be98:	45be      	cmp	lr, r7
 800be9a:	d019      	beq.n	800bed0 <acc_dll_dly_coarse_priority_sort+0x10c>
 800be9c:	4613      	mov	r3, r2
 800be9e:	2400      	movs	r4, #0
 800bea0:	7819      	ldrb	r1, [r3, #0]
 800bea2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800bea6:	ad04      	add	r5, sp, #16
 800bea8:	186e      	adds	r6, r5, r1
 800beaa:	4405      	add	r5, r0
 800beac:	f816 6c0c 	ldrb.w	r6, [r6, #-12]
 800beb0:	f815 5c0c 	ldrb.w	r5, [r5, #-12]
 800beb4:	42ae      	cmp	r6, r5
 800beb6:	d904      	bls.n	800bec2 <acc_dll_dly_coarse_priority_sort+0xfe>
 800beb8:	3401      	adds	r4, #1
 800beba:	b2e4      	uxtb	r4, r4
 800bebc:	f803 0c01 	strb.w	r0, [r3, #-1]
 800bec0:	7019      	strb	r1, [r3, #0]
 800bec2:	429f      	cmp	r7, r3
 800bec4:	d1ec      	bne.n	800bea0 <acc_dll_dly_coarse_priority_sort+0xdc>
 800bec6:	45bc      	cmp	ip, r7
 800bec8:	d002      	beq.n	800bed0 <acc_dll_dly_coarse_priority_sort+0x10c>
 800beca:	3f01      	subs	r7, #1
 800becc:	2c00      	cmp	r4, #0
 800bece:	d1e3      	bne.n	800be98 <acc_dll_dly_coarse_priority_sort+0xd4>
 800bed0:	b004      	add	sp, #16
 800bed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bed6:	f9b1 9000 	ldrsh.w	r9, [r1]
 800beda:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800bede:	4599      	cmp	r9, r3
 800bee0:	dd13      	ble.n	800bf0a <acc_dll_dly_coarse_priority_sort+0x146>
 800bee2:	45c1      	cmp	r9, r8
 800bee4:	dc11      	bgt.n	800bf0a <acc_dll_dly_coarse_priority_sort+0x146>
 800bee6:	eba3 0309 	sub.w	r3, r3, r9
 800beea:	ee07 3a90 	vmov	s15, r3
 800beee:	f9b5 3000 	ldrsh.w	r3, [r5]
 800bef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bef6:	eef4 7ac4 	vcmpe.f32	s15, s8
 800befa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800befe:	bf54      	ite	pl
 800bf00:	eef0 6a46 	vmovpl.f32	s13, s12
 800bf04:	eef0 6a64 	vmovmi.f32	s13, s9
 800bf08:	e7a0      	b.n	800be4c <acc_dll_dly_coarse_priority_sort+0x88>
 800bf0a:	f9b5 3000 	ldrsh.w	r3, [r5]
 800bf0e:	eef0 6a46 	vmov.f32	s13, s12
 800bf12:	e79b      	b.n	800be4c <acc_dll_dly_coarse_priority_sort+0x88>
 800bf14:	eba3 0909 	sub.w	r9, r3, r9
 800bf18:	ee07 9a90 	vmov	s15, r9
 800bf1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf20:	e7e9      	b.n	800bef6 <acc_dll_dly_coarse_priority_sort+0x132>
 800bf22:	4809      	ldr	r0, [pc, #36]	; (800bf48 <acc_dll_dly_coarse_priority_sort+0x184>)
 800bf24:	211f      	movs	r1, #31
 800bf26:	f7fd fdc9 	bl	8009abc <acc_assert_fail>
 800bf2a:	4807      	ldr	r0, [pc, #28]	; (800bf48 <acc_dll_dly_coarse_priority_sort+0x184>)
 800bf2c:	211a      	movs	r1, #26
 800bf2e:	f7fd fdc5 	bl	8009abc <acc_assert_fail>
 800bf32:	bf00      	nop
 800bf34:	c2c80000 	.word	0xc2c80000
 800bf38:	00000000 	.word	0x00000000
 800bf3c:	42480000 	.word	0x42480000
 800bf40:	447a0000 	.word	0x447a0000
 800bf44:	42c80000 	.word	0x42c80000
 800bf48:	08013600 	.word	0x08013600

0800bf4c <acc_dll_plateau_finder>:
 800bf4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf50:	b0af      	sub	sp, #188	; 0xbc
 800bf52:	2819      	cmp	r0, #25
 800bf54:	9104      	str	r1, [sp, #16]
 800bf56:	f200 8226 	bhi.w	800c3a6 <acc_dll_plateau_finder+0x45a>
 800bf5a:	2801      	cmp	r0, #1
 800bf5c:	4683      	mov	fp, r0
 800bf5e:	4615      	mov	r5, r2
 800bf60:	469a      	mov	sl, r3
 800bf62:	f240 8217 	bls.w	800c394 <acc_dll_plateau_finder+0x448>
 800bf66:	f1a0 0902 	sub.w	r9, r0, #2
 800bf6a:	2100      	movs	r1, #0
 800bf6c:	fa1f f989 	uxth.w	r9, r9
 800bf70:	2301      	movs	r3, #1
 800bf72:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 800c2bc <acc_dll_plateau_finder+0x370>
 800bf76:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bf7a:	9205      	str	r2, [sp, #20]
 800bf7c:	f109 0902 	add.w	r9, r9, #2
 800bf80:	460c      	mov	r4, r1
 800bf82:	460e      	mov	r6, r1
 800bf84:	461d      	mov	r5, r3
 800bf86:	e006      	b.n	800bf96 <acc_dll_plateau_finder+0x4a>
 800bf88:	f10b 32ff 	add.w	r2, fp, #4294967295
 800bf8c:	42aa      	cmp	r2, r5
 800bf8e:	d019      	beq.n	800bfc4 <acc_dll_plateau_finder+0x78>
 800bf90:	3501      	adds	r5, #1
 800bf92:	45a9      	cmp	r9, r5
 800bf94:	d04b      	beq.n	800c02e <acc_dll_plateau_finder+0xe2>
 800bf96:	f8b8 2000 	ldrh.w	r2, [r8]
 800bf9a:	f838 0f02 	ldrh.w	r0, [r8, #2]!
 800bf9e:	ee07 2a90 	vmov	s15, r2
 800bfa2:	4282      	cmp	r2, r0
 800bfa4:	bf34      	ite	cc
 800bfa6:	1a82      	subcc	r2, r0, r2
 800bfa8:	1a12      	subcs	r2, r2, r0
 800bfaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bfae:	b2af      	uxth	r7, r5
 800bfb0:	b292      	uxth	r2, r2
 800bfb2:	3401      	adds	r4, #1
 800bfb4:	4439      	add	r1, r7
 800bfb6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800bfba:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bfbe:	b2a4      	uxth	r4, r4
 800bfc0:	b289      	uxth	r1, r1
 800bfc2:	d9e1      	bls.n	800bf88 <acc_dll_plateau_finder+0x3c>
 800bfc4:	2c02      	cmp	r4, #2
 800bfc6:	f240 8191 	bls.w	800c2ec <acc_dll_plateau_finder+0x3a0>
 800bfca:	ee07 1a90 	vmov	s15, r1
 800bfce:	eef8 5a67 	vcvt.f32.u32	s11, s15
 800bfd2:	ee07 4a90 	vmov	s15, r4
 800bfd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfda:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800bfde:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 800bfe2:	ab2e      	add	r3, sp, #184	; 0xb8
 800bfe4:	eb03 0046 	add.w	r0, r3, r6, lsl #1
 800bfe8:	3501      	adds	r5, #1
 800bfea:	f106 0c01 	add.w	ip, r6, #1
 800bfee:	2100      	movs	r1, #0
 800bff0:	45a9      	cmp	r9, r5
 800bff2:	f820 4c34 	strh.w	r4, [r0, #-52]
 800bff6:	f820 7c9c 	strh.w	r7, [r0, #-156]
 800bffa:	460c      	mov	r4, r1
 800bffc:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800c000:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c004:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c008:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800c00c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c010:	ee16 3a90 	vmov	r3, s13
 800c014:	ee17 2a90 	vmov	r2, s15
 800c018:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800c01c:	f82a 2016 	strh.w	r2, [sl, r6, lsl #1]
 800c020:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800c2bc <acc_dll_plateau_finder+0x370>
 800c024:	f820 3c68 	strh.w	r3, [r0, #-104]
 800c028:	fa1f f68c 	uxth.w	r6, ip
 800c02c:	d1b3      	bne.n	800bf96 <acc_dll_plateau_finder+0x4a>
 800c02e:	9d05      	ldr	r5, [sp, #20]
 800c030:	f7fb fb20 	bl	8007674 <acc_rss_integration_log_level>
 800c034:	2803      	cmp	r0, #3
 800c036:	f200 817f 	bhi.w	800c338 <acc_dll_plateau_finder+0x3ec>
 800c03a:	b33e      	cbz	r6, 800c08c <acc_dll_plateau_finder+0x140>
 800c03c:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800c2dc <acc_dll_plateau_finder+0x390>
 800c040:	4c9f      	ldr	r4, [pc, #636]	; (800c2c0 <acc_dll_plateau_finder+0x374>)
 800c042:	4fa0      	ldr	r7, [pc, #640]	; (800c2c4 <acc_dll_plateau_finder+0x378>)
 800c044:	f04f 0b00 	mov.w	fp, #0
 800c048:	46a8      	mov	r8, r5
 800c04a:	f7fb fb13 	bl	8007674 <acc_rss_integration_log_level>
 800c04e:	2803      	cmp	r0, #3
 800c050:	d915      	bls.n	800c07e <acc_dll_plateau_finder+0x132>
 800c052:	a914      	add	r1, sp, #80	; 0x50
 800c054:	aa21      	add	r2, sp, #132	; 0x84
 800c056:	ab07      	add	r3, sp, #28
 800c058:	f831 001b 	ldrh.w	r0, [r1, fp, lsl #1]
 800c05c:	f832 101b 	ldrh.w	r1, [r2, fp, lsl #1]
 800c060:	f833 201b 	ldrh.w	r2, [r3, fp, lsl #1]
 800c064:	f83a 301b 	ldrh.w	r3, [sl, fp, lsl #1]
 800c068:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800c06c:	e9cd 2300 	strd	r2, r3, [sp]
 800c070:	4639      	mov	r1, r7
 800c072:	f8d9 5034 	ldr.w	r5, [r9, #52]	; 0x34
 800c076:	465b      	mov	r3, fp
 800c078:	4622      	mov	r2, r4
 800c07a:	2004      	movs	r0, #4
 800c07c:	47a8      	blx	r5
 800c07e:	f10b 0b01 	add.w	fp, fp, #1
 800c082:	fa1f f38b 	uxth.w	r3, fp
 800c086:	42b3      	cmp	r3, r6
 800c088:	d3df      	bcc.n	800c04a <acc_dll_plateau_finder+0xfe>
 800c08a:	4645      	mov	r5, r8
 800c08c:	9b04      	ldr	r3, [sp, #16]
 800c08e:	f8b3 b000 	ldrh.w	fp, [r3]
 800c092:	f248 73cf 	movw	r3, #34767	; 0x87cf
 800c096:	459b      	cmp	fp, r3
 800c098:	f240 8161 	bls.w	800c35e <acc_dll_plateau_finder+0x412>
 800c09c:	f5ab 4300 	sub.w	r3, fp, #32768	; 0x8000
 800c0a0:	ee07 3a90 	vmov	s15, r3
 800c0a4:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800c2c8 <acc_dll_plateau_finder+0x37c>
 800c0a8:	ed9f 5a88 	vldr	s10, [pc, #544]	; 800c2cc <acc_dll_plateau_finder+0x380>
 800c0ac:	eddf 6a88 	vldr	s13, [pc, #544]	; 800c2d0 <acc_dll_plateau_finder+0x384>
 800c0b0:	eddf 5a88 	vldr	s11, [pc, #544]	; 800c2d4 <acc_dll_plateau_finder+0x388>
 800c0b4:	ed9f 6a88 	vldr	s12, [pc, #544]	; 800c2d8 <acc_dll_plateau_finder+0x38c>
 800c0b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c0c0:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c0c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0c8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c0cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0d0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c0d4:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c0d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0dc:	ee17 3a90 	vmov	r3, s15
 800c0e0:	b29c      	uxth	r4, r3
 800c0e2:	f7fb fac7 	bl	8007674 <acc_rss_integration_log_level>
 800c0e6:	2803      	cmp	r0, #3
 800c0e8:	f200 812e 	bhi.w	800c348 <acc_dll_plateau_finder+0x3fc>
 800c0ec:	2e00      	cmp	r6, #0
 800c0ee:	f000 814b 	beq.w	800c388 <acc_dll_plateau_finder+0x43c>
 800c0f2:	f04f 0900 	mov.w	r9, #0
 800c0f6:	46c8      	mov	r8, r9
 800c0f8:	464b      	mov	r3, r9
 800c0fa:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800c0fe:	4627      	mov	r7, r4
 800c100:	e010      	b.n	800c124 <acc_dll_plateau_finder+0x1d8>
 800c102:	f5ab 62fa 	sub.w	r2, fp, #2000	; 0x7d0
 800c106:	4294      	cmp	r4, r2
 800c108:	f200 8109 	bhi.w	800c31e <acc_dll_plateau_finder+0x3d2>
 800c10c:	f108 0201 	add.w	r2, r8, #1
 800c110:	f825 3018 	strh.w	r3, [r5, r8, lsl #1]
 800c114:	fa1f f882 	uxth.w	r8, r2
 800c118:	f109 0901 	add.w	r9, r9, #1
 800c11c:	fa1f f389 	uxth.w	r3, r9
 800c120:	429e      	cmp	r6, r3
 800c122:	d916      	bls.n	800c152 <acc_dll_plateau_finder+0x206>
 800c124:	f83a 4b02 	ldrh.w	r4, [sl], #2
 800c128:	f241 3287 	movw	r2, #4999	; 0x1387
 800c12c:	4294      	cmp	r4, r2
 800c12e:	d8e8      	bhi.n	800c102 <acc_dll_plateau_finder+0x1b6>
 800c130:	f7fb faa0 	bl	8007674 <acc_rss_integration_log_level>
 800c134:	2803      	cmp	r0, #3
 800c136:	d9ef      	bls.n	800c118 <acc_dll_plateau_finder+0x1cc>
 800c138:	4a68      	ldr	r2, [pc, #416]	; (800c2dc <acc_dll_plateau_finder+0x390>)
 800c13a:	4962      	ldr	r1, [pc, #392]	; (800c2c4 <acc_dll_plateau_finder+0x378>)
 800c13c:	4623      	mov	r3, r4
 800c13e:	2004      	movs	r0, #4
 800c140:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800c142:	4a67      	ldr	r2, [pc, #412]	; (800c2e0 <acc_dll_plateau_finder+0x394>)
 800c144:	f109 0901 	add.w	r9, r9, #1
 800c148:	47a0      	blx	r4
 800c14a:	fa1f f389 	uxth.w	r3, r9
 800c14e:	429e      	cmp	r6, r3
 800c150:	d8e8      	bhi.n	800c124 <acc_dll_plateau_finder+0x1d8>
 800c152:	f1b8 0f01 	cmp.w	r8, #1
 800c156:	463c      	mov	r4, r7
 800c158:	f240 8112 	bls.w	800c380 <acc_dll_plateau_finder+0x434>
 800c15c:	f1a8 0a02 	sub.w	sl, r8, #2
 800c160:	fa0f fe8a 	sxth.w	lr, sl
 800c164:	f10e 0901 	add.w	r9, lr, #1
 800c168:	fa1f fa8a 	uxth.w	sl, sl
 800c16c:	eb05 0949 	add.w	r9, r5, r9, lsl #1
 800c170:	46ac      	mov	ip, r5
 800c172:	f1be 0f00 	cmp.w	lr, #0
 800c176:	db23      	blt.n	800c1c0 <acc_dll_plateau_finder+0x274>
 800c178:	4649      	mov	r1, r9
 800c17a:	4670      	mov	r0, lr
 800c17c:	2500      	movs	r5, #0
 800c17e:	f831 6d02 	ldrh.w	r6, [r1, #-2]!
 800c182:	ab2e      	add	r3, sp, #184	; 0xb8
 800c184:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800c188:	884f      	ldrh	r7, [r1, #2]
 800c18a:	f833 2c68 	ldrh.w	r2, [r3, #-104]
 800c18e:	ab2e      	add	r3, sp, #184	; 0xb8
 800c190:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 800c194:	42a2      	cmp	r2, r4
 800c196:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 800c19a:	bf8c      	ite	hi
 800c19c:	1b12      	subhi	r2, r2, r4
 800c19e:	1aa2      	subls	r2, r4, r2
 800c1a0:	42a3      	cmp	r3, r4
 800c1a2:	bf8c      	ite	hi
 800c1a4:	1b1b      	subhi	r3, r3, r4
 800c1a6:	1ae3      	subls	r3, r4, r3
 800c1a8:	b292      	uxth	r2, r2
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d902      	bls.n	800c1b6 <acc_dll_plateau_finder+0x26a>
 800c1b0:	800f      	strh	r7, [r1, #0]
 800c1b2:	804e      	strh	r6, [r1, #2]
 800c1b4:	2501      	movs	r5, #1
 800c1b6:	3801      	subs	r0, #1
 800c1b8:	0403      	lsls	r3, r0, #16
 800c1ba:	d5e0      	bpl.n	800c17e <acc_dll_plateau_finder+0x232>
 800c1bc:	2d00      	cmp	r5, #0
 800c1be:	d1d8      	bne.n	800c172 <acc_dll_plateau_finder+0x226>
 800c1c0:	f8bc 3000 	ldrh.w	r3, [ip]
 800c1c4:	aa2e      	add	r2, sp, #184	; 0xb8
 800c1c6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800c1ca:	4665      	mov	r5, ip
 800c1cc:	1ca8      	adds	r0, r5, #2
 800c1ce:	f833 1c68 	ldrh.w	r1, [r3, #-104]
 800c1d2:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 800c1d6:	4662      	mov	r2, ip
 800c1d8:	f04f 0a01 	mov.w	sl, #1
 800c1dc:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 800c1e0:	ac2e      	add	r4, sp, #184	; 0xb8
 800c1e2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800c1e6:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 800c1ea:	428b      	cmp	r3, r1
 800c1ec:	bf8c      	ite	hi
 800c1ee:	1a5b      	subhi	r3, r3, r1
 800c1f0:	1acb      	subls	r3, r1, r3
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c1f8:	bf3c      	itt	cc
 800c1fa:	f10a 0a01 	addcc.w	sl, sl, #1
 800c1fe:	fa1f fa8a 	uxthcc.w	sl, sl
 800c202:	4290      	cmp	r0, r2
 800c204:	d1ea      	bne.n	800c1dc <acc_dll_plateau_finder+0x290>
 800c206:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 800c2dc <acc_dll_plateau_finder+0x390>
 800c20a:	4f36      	ldr	r7, [pc, #216]	; (800c2e4 <acc_dll_plateau_finder+0x398>)
 800c20c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c210:	f1ba 0f00 	cmp.w	sl, #0
 800c214:	d031      	beq.n	800c27a <acc_dll_plateau_finder+0x32e>
 800c216:	2400      	movs	r4, #0
 800c218:	4e2a      	ldr	r6, [pc, #168]	; (800c2c4 <acc_dll_plateau_finder+0x378>)
 800c21a:	46a6      	mov	lr, r4
 800c21c:	4622      	mov	r2, r4
 800c21e:	e004      	b.n	800c22a <acc_dll_plateau_finder+0x2de>
 800c220:	3401      	adds	r4, #1
 800c222:	b2a4      	uxth	r4, r4
 800c224:	4554      	cmp	r4, sl
 800c226:	4622      	mov	r2, r4
 800c228:	d224      	bcs.n	800c274 <acc_dll_plateau_finder+0x328>
 800c22a:	0053      	lsls	r3, r2, #1
 800c22c:	3302      	adds	r3, #2
 800c22e:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
 800c232:	5ae8      	ldrh	r0, [r5, r3]
 800c234:	f10d 0cb8 	add.w	ip, sp, #184	; 0xb8
 800c238:	eb0c 0b41 	add.w	fp, ip, r1, lsl #1
 800c23c:	eb0c 0c40 	add.w	ip, ip, r0, lsl #1
 800c240:	f83b bc34 	ldrh.w	fp, [fp, #-52]
 800c244:	f83c cc34 	ldrh.w	ip, [ip, #-52]
 800c248:	45e3      	cmp	fp, ip
 800c24a:	d2e9      	bcs.n	800c220 <acc_dll_plateau_finder+0x2d4>
 800c24c:	f825 0012 	strh.w	r0, [r5, r2, lsl #1]
 800c250:	52e9      	strh	r1, [r5, r3]
 800c252:	f7fb fa0f 	bl	8007674 <acc_rss_integration_log_level>
 800c256:	2803      	cmp	r0, #3
 800c258:	d97e      	bls.n	800c358 <acc_dll_plateau_finder+0x40c>
 800c25a:	3401      	adds	r4, #1
 800c25c:	463a      	mov	r2, r7
 800c25e:	b2a4      	uxth	r4, r4
 800c260:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 800c264:	4631      	mov	r1, r6
 800c266:	2004      	movs	r0, #4
 800c268:	4798      	blx	r3
 800c26a:	4554      	cmp	r4, sl
 800c26c:	f04f 0e01 	mov.w	lr, #1
 800c270:	4622      	mov	r2, r4
 800c272:	d3da      	bcc.n	800c22a <acc_dll_plateau_finder+0x2de>
 800c274:	f1be 0f00 	cmp.w	lr, #0
 800c278:	d1ca      	bne.n	800c210 <acc_dll_plateau_finder+0x2c4>
 800c27a:	f8df a060 	ldr.w	sl, [pc, #96]	; 800c2dc <acc_dll_plateau_finder+0x390>
 800c27e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800c2e8 <acc_dll_plateau_finder+0x39c>
 800c282:	4f10      	ldr	r7, [pc, #64]	; (800c2c4 <acc_dll_plateau_finder+0x378>)
 800c284:	2400      	movs	r4, #0
 800c286:	f7fb f9f5 	bl	8007674 <acc_rss_integration_log_level>
 800c28a:	2803      	cmp	r0, #3
 800c28c:	d90d      	bls.n	800c2aa <acc_dll_plateau_finder+0x35e>
 800c28e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 800c292:	aa2e      	add	r2, sp, #184	; 0xb8
 800c294:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800c298:	4639      	mov	r1, r7
 800c29a:	f832 2c68 	ldrh.w	r2, [r2, #-104]
 800c29e:	9200      	str	r2, [sp, #0]
 800c2a0:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
 800c2a4:	464a      	mov	r2, r9
 800c2a6:	2004      	movs	r0, #4
 800c2a8:	47b0      	blx	r6
 800c2aa:	3401      	adds	r4, #1
 800c2ac:	b2a3      	uxth	r3, r4
 800c2ae:	4598      	cmp	r8, r3
 800c2b0:	d8e9      	bhi.n	800c286 <acc_dll_plateau_finder+0x33a>
 800c2b2:	4640      	mov	r0, r8
 800c2b4:	b02f      	add	sp, #188	; 0xbc
 800c2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ba:	bf00      	nop
 800c2bc:	00000000 	.word	0x00000000
 800c2c0:	0801369c 	.word	0x0801369c
 800c2c4:	08013620 	.word	0x08013620
 800c2c8:	3f99999a 	.word	0x3f99999a
 800c2cc:	37800000 	.word	0x37800000
 800c2d0:	3f866666 	.word	0x3f866666
 800c2d4:	47800000 	.word	0x47800000
 800c2d8:	47000000 	.word	0x47000000
 800c2dc:	2000082c 	.word	0x2000082c
 800c2e0:	08013718 	.word	0x08013718
 800c2e4:	08013778 	.word	0x08013778
 800c2e8:	080137ac 	.word	0x080137ac
 800c2ec:	f7fb f9c2 	bl	8007674 <acc_rss_integration_log_level>
 800c2f0:	2803      	cmp	r0, #3
 800c2f2:	d90f      	bls.n	800c314 <acc_dll_plateau_finder+0x3c8>
 800c2f4:	9401      	str	r4, [sp, #4]
 800c2f6:	f838 2c02 	ldrh.w	r2, [r8, #-2]
 800c2fa:	4b2d      	ldr	r3, [pc, #180]	; (800c3b0 <acc_dll_plateau_finder+0x464>)
 800c2fc:	9200      	str	r2, [sp, #0]
 800c2fe:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800c300:	492c      	ldr	r1, [pc, #176]	; (800c3b4 <acc_dll_plateau_finder+0x468>)
 800c302:	4a2d      	ldr	r2, [pc, #180]	; (800c3b8 <acc_dll_plateau_finder+0x46c>)
 800c304:	462b      	mov	r3, r5
 800c306:	2004      	movs	r0, #4
 800c308:	2400      	movs	r4, #0
 800c30a:	47b8      	blx	r7
 800c30c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800c3bc <acc_dll_plateau_finder+0x470>
 800c310:	4621      	mov	r1, r4
 800c312:	e63d      	b.n	800bf90 <acc_dll_plateau_finder+0x44>
 800c314:	2100      	movs	r1, #0
 800c316:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800c3bc <acc_dll_plateau_finder+0x470>
 800c31a:	460c      	mov	r4, r1
 800c31c:	e638      	b.n	800bf90 <acc_dll_plateau_finder+0x44>
 800c31e:	f7fb f9a9 	bl	8007674 <acc_rss_integration_log_level>
 800c322:	2803      	cmp	r0, #3
 800c324:	f67f aef8 	bls.w	800c118 <acc_dll_plateau_finder+0x1cc>
 800c328:	4a21      	ldr	r2, [pc, #132]	; (800c3b0 <acc_dll_plateau_finder+0x464>)
 800c32a:	4922      	ldr	r1, [pc, #136]	; (800c3b4 <acc_dll_plateau_finder+0x468>)
 800c32c:	4623      	mov	r3, r4
 800c32e:	2004      	movs	r0, #4
 800c330:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800c332:	4a23      	ldr	r2, [pc, #140]	; (800c3c0 <acc_dll_plateau_finder+0x474>)
 800c334:	47a0      	blx	r4
 800c336:	e6ef      	b.n	800c118 <acc_dll_plateau_finder+0x1cc>
 800c338:	4633      	mov	r3, r6
 800c33a:	491d      	ldr	r1, [pc, #116]	; (800c3b0 <acc_dll_plateau_finder+0x464>)
 800c33c:	4a21      	ldr	r2, [pc, #132]	; (800c3c4 <acc_dll_plateau_finder+0x478>)
 800c33e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800c340:	491c      	ldr	r1, [pc, #112]	; (800c3b4 <acc_dll_plateau_finder+0x468>)
 800c342:	2004      	movs	r0, #4
 800c344:	47a0      	blx	r4
 800c346:	e678      	b.n	800c03a <acc_dll_plateau_finder+0xee>
 800c348:	4b19      	ldr	r3, [pc, #100]	; (800c3b0 <acc_dll_plateau_finder+0x464>)
 800c34a:	4a1f      	ldr	r2, [pc, #124]	; (800c3c8 <acc_dll_plateau_finder+0x47c>)
 800c34c:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800c34e:	4919      	ldr	r1, [pc, #100]	; (800c3b4 <acc_dll_plateau_finder+0x468>)
 800c350:	4623      	mov	r3, r4
 800c352:	2004      	movs	r0, #4
 800c354:	47b8      	blx	r7
 800c356:	e6c9      	b.n	800c0ec <acc_dll_plateau_finder+0x1a0>
 800c358:	f04f 0e01 	mov.w	lr, #1
 800c35c:	e760      	b.n	800c220 <acc_dll_plateau_finder+0x2d4>
 800c35e:	f7fb f989 	bl	8007674 <acc_rss_integration_log_level>
 800c362:	2803      	cmp	r0, #3
 800c364:	d910      	bls.n	800c388 <acc_dll_plateau_finder+0x43c>
 800c366:	4b12      	ldr	r3, [pc, #72]	; (800c3b0 <acc_dll_plateau_finder+0x464>)
 800c368:	4a18      	ldr	r2, [pc, #96]	; (800c3cc <acc_dll_plateau_finder+0x480>)
 800c36a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800c36c:	4911      	ldr	r1, [pc, #68]	; (800c3b4 <acc_dll_plateau_finder+0x468>)
 800c36e:	465b      	mov	r3, fp
 800c370:	2004      	movs	r0, #4
 800c372:	47a0      	blx	r4
 800c374:	f04f 0800 	mov.w	r8, #0
 800c378:	4640      	mov	r0, r8
 800c37a:	b02f      	add	sp, #188	; 0xbc
 800c37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c380:	f1b8 0f00 	cmp.w	r8, #0
 800c384:	f47f af79 	bne.w	800c27a <acc_dll_plateau_finder+0x32e>
 800c388:	f04f 0800 	mov.w	r8, #0
 800c38c:	4640      	mov	r0, r8
 800c38e:	b02f      	add	sp, #188	; 0xbc
 800c390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c394:	f7fb f96e 	bl	8007674 <acc_rss_integration_log_level>
 800c398:	2803      	cmp	r0, #3
 800c39a:	d801      	bhi.n	800c3a0 <acc_dll_plateau_finder+0x454>
 800c39c:	2600      	movs	r6, #0
 800c39e:	e675      	b.n	800c08c <acc_dll_plateau_finder+0x140>
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	461e      	mov	r6, r3
 800c3a4:	e7c9      	b.n	800c33a <acc_dll_plateau_finder+0x3ee>
 800c3a6:	4803      	ldr	r0, [pc, #12]	; (800c3b4 <acc_dll_plateau_finder+0x468>)
 800c3a8:	2128      	movs	r1, #40	; 0x28
 800c3aa:	f7fd fb87 	bl	8009abc <acc_assert_fail>
 800c3ae:	bf00      	nop
 800c3b0:	2000082c 	.word	0x2000082c
 800c3b4:	08013620 	.word	0x08013620
 800c3b8:	08013634 	.word	0x08013634
 800c3bc:	00000000 	.word	0x00000000
 800c3c0:	08013748 	.word	0x08013748
 800c3c4:	08013688 	.word	0x08013688
 800c3c8:	08013708 	.word	0x08013708
 800c3cc:	080136e0 	.word	0x080136e0

0800c3d0 <acc_cpd_linear_sweep_load_program>:
 800c3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d4:	ed2d 8b04 	vpush	{d8-d9}
 800c3d8:	4614      	mov	r4, r2
 800c3da:	b08f      	sub	sp, #60	; 0x3c
 800c3dc:	461a      	mov	r2, r3
 800c3de:	4606      	mov	r6, r0
 800c3e0:	460d      	mov	r5, r1
 800c3e2:	ee08 0a90 	vmov	s17, r0
 800c3e6:	4601      	mov	r1, r0
 800c3e8:	469b      	mov	fp, r3
 800c3ea:	2016      	movs	r0, #22
 800c3ec:	23bc      	movs	r3, #188	; 0xbc
 800c3ee:	f7fd fca3 	bl	8009d38 <acc_probes_execute_struct>
 800c3f2:	ab0d      	add	r3, sp, #52	; 0x34
 800c3f4:	4622      	mov	r2, r4
 800c3f6:	9300      	str	r3, [sp, #0]
 800c3f8:	4629      	mov	r1, r5
 800c3fa:	4630      	mov	r0, r6
 800c3fc:	2400      	movs	r4, #0
 800c3fe:	ab0c      	add	r3, sp, #48	; 0x30
 800c400:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 800c404:	f7fc ff26 	bl	8009254 <acc_sensor_protocol_r2_prepare_load>
 800c408:	900b      	str	r0, [sp, #44]	; 0x2c
 800c40a:	b928      	cbnz	r0, 800c418 <acc_cpd_linear_sweep_load_program+0x48>
 800c40c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c40e:	b00f      	add	sp, #60	; 0x3c
 800c410:	ecbd 8b04 	vpop	{d8-d9}
 800c414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c418:	f7fb f92c 	bl	8007674 <acc_rss_integration_log_level>
 800c41c:	2803      	cmp	r0, #3
 800c41e:	ee09 5a10 	vmov	s18, r5
 800c422:	d905      	bls.n	800c430 <acc_cpd_linear_sweep_load_program+0x60>
 800c424:	4b05      	ldr	r3, [pc, #20]	; (800c43c <acc_cpd_linear_sweep_load_program+0x6c>)
 800c426:	4a06      	ldr	r2, [pc, #24]	; (800c440 <acc_cpd_linear_sweep_load_program+0x70>)
 800c428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c42a:	4906      	ldr	r1, [pc, #24]	; (800c444 <acc_cpd_linear_sweep_load_program+0x74>)
 800c42c:	2004      	movs	r0, #4
 800c42e:	4798      	blx	r3
 800c430:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c432:	ed9f 8a05 	vldr	s16, [pc, #20]	; 800c448 <acc_cpd_linear_sweep_load_program+0x78>
 800c436:	f04f 0a00 	mov.w	sl, #0
 800c43a:	e07b      	b.n	800c534 <acc_cpd_linear_sweep_load_program+0x164>
 800c43c:	2000082c 	.word	0x2000082c
 800c440:	080137d0 	.word	0x080137d0
 800c444:	080137f8 	.word	0x080137f8
 800c448:	3751b717 	.word	0x3751b717
 800c44c:	f002 f858 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c450:	2223      	movs	r2, #35	; 0x23
 800c452:	2103      	movs	r1, #3
 800c454:	4603      	mov	r3, r0
 800c456:	e9cd 2100 	strd	r2, r1, [sp]
 800c45a:	4620      	mov	r0, r4
 800c45c:	4632      	mov	r2, r6
 800c45e:	4629      	mov	r1, r5
 800c460:	f001 ff3e 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c464:	f002 f84c 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c468:	227d      	movs	r2, #125	; 0x7d
 800c46a:	2100      	movs	r1, #0
 800c46c:	4603      	mov	r3, r0
 800c46e:	e9cd 2100 	strd	r2, r1, [sp]
 800c472:	4620      	mov	r0, r4
 800c474:	4632      	mov	r2, r6
 800c476:	4629      	mov	r1, r5
 800c478:	f001 ff32 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c47c:	f002 f840 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c480:	2281      	movs	r2, #129	; 0x81
 800c482:	2101      	movs	r1, #1
 800c484:	4603      	mov	r3, r0
 800c486:	e9cd 2100 	strd	r2, r1, [sp]
 800c48a:	4620      	mov	r0, r4
 800c48c:	4632      	mov	r2, r6
 800c48e:	4629      	mov	r1, r5
 800c490:	f001 ff26 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c494:	f002 f834 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c498:	2102      	movs	r1, #2
 800c49a:	4603      	mov	r3, r0
 800c49c:	2275      	movs	r2, #117	; 0x75
 800c49e:	9101      	str	r1, [sp, #4]
 800c4a0:	4629      	mov	r1, r5
 800c4a2:	9200      	str	r2, [sp, #0]
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	4632      	mov	r2, r6
 800c4a8:	f001 ff1a 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c4ac:	f002 f828 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c4b0:	f89b 20ac 	ldrb.w	r2, [fp, #172]	; 0xac
 800c4b4:	9201      	str	r2, [sp, #4]
 800c4b6:	2252      	movs	r2, #82	; 0x52
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	4629      	mov	r1, r5
 800c4bc:	9200      	str	r2, [sp, #0]
 800c4be:	4620      	mov	r0, r4
 800c4c0:	4632      	mov	r2, r6
 800c4c2:	f001 ff0d 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c4c6:	eddb 7a2c 	vldr	s15, [fp, #176]	; 0xb0
 800c4ca:	ee67 7a88 	vmul.f32	s15, s15, s16
 800c4ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4d2:	ee17 7a90 	vmov	r7, s15
 800c4d6:	f002 f813 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c4da:	3f01      	subs	r7, #1
 800c4dc:	2268      	movs	r2, #104	; 0x68
 800c4de:	b2bf      	uxth	r7, r7
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	4629      	mov	r1, r5
 800c4e4:	e9cd 2700 	strd	r2, r7, [sp]
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	4632      	mov	r2, r6
 800c4ec:	f001 fef8 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c4f0:	f002 f806 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c4f4:	f8db 20b4 	ldr.w	r2, [fp, #180]	; 0xb4
 800c4f8:	9201      	str	r2, [sp, #4]
 800c4fa:	2253      	movs	r2, #83	; 0x53
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	9200      	str	r2, [sp, #0]
 800c500:	4629      	mov	r1, r5
 800c502:	4632      	mov	r2, r6
 800c504:	4620      	mov	r0, r4
 800c506:	f001 feeb 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c50a:	f8db 30b4 	ldr.w	r3, [fp, #180]	; 0xb4
 800c50e:	2b00      	cmp	r3, #0
 800c510:	f040 8465 	bne.w	800cdde <acc_cpd_linear_sweep_load_program+0xa0e>
 800c514:	ee19 2a10 	vmov	r2, s18
 800c518:	464b      	mov	r3, r9
 800c51a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800c51e:	ee18 0a90 	vmov	r0, s17
 800c522:	f7fc fba7 	bl	8008c74 <acc_sensor_r2_load_confmem>
 800c526:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c528:	f240 7211 	movw	r2, #1809	; 0x711
 800c52c:	449a      	add	sl, r3
 800c52e:	4592      	cmp	sl, r2
 800c530:	f200 8464 	bhi.w	800cdfc <acc_cpd_linear_sweep_load_program+0xa2c>
 800c534:	f5ca 62e2 	rsb	r2, sl, #1808	; 0x710
 800c538:	3202      	adds	r2, #2
 800c53a:	429a      	cmp	r2, r3
 800c53c:	bf28      	it	cs
 800c53e:	461a      	movcs	r2, r3
 800c540:	ea4f 035a 	mov.w	r3, sl, lsr #1
 800c544:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c546:	9302      	str	r3, [sp, #8]
 800c548:	461d      	mov	r5, r3
 800c54a:	4691      	mov	r9, r2
 800c54c:	f001 ffd4 	bl	800e4f8 <acc_image_a111_r2c_sweep_get>
 800c550:	ea4f 0259 	mov.w	r2, r9, lsr #1
 800c554:	4621      	mov	r1, r4
 800c556:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800c55a:	f001 ffaf 	bl	800e4bc <acc_confprogram_copy>
 800c55e:	f001 ffcf 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c562:	fa1f f689 	uxth.w	r6, r9
 800c566:	fa1f f58a 	uxth.w	r5, sl
 800c56a:	f8db 2000 	ldr.w	r2, [fp]
 800c56e:	9201      	str	r2, [sp, #4]
 800c570:	2750      	movs	r7, #80	; 0x50
 800c572:	4603      	mov	r3, r0
 800c574:	4632      	mov	r2, r6
 800c576:	4629      	mov	r1, r5
 800c578:	4620      	mov	r0, r4
 800c57a:	9700      	str	r7, [sp, #0]
 800c57c:	f001 feb0 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c580:	f001 ffbe 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c584:	274e      	movs	r7, #78	; 0x4e
 800c586:	f8db 2004 	ldr.w	r2, [fp, #4]
 800c58a:	9201      	str	r2, [sp, #4]
 800c58c:	4603      	mov	r3, r0
 800c58e:	4632      	mov	r2, r6
 800c590:	4629      	mov	r1, r5
 800c592:	4620      	mov	r0, r4
 800c594:	9700      	str	r7, [sp, #0]
 800c596:	f001 fea3 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c59a:	f001 ffb1 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c59e:	274f      	movs	r7, #79	; 0x4f
 800c5a0:	f8db 2008 	ldr.w	r2, [fp, #8]
 800c5a4:	9201      	str	r2, [sp, #4]
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	4632      	mov	r2, r6
 800c5aa:	4629      	mov	r1, r5
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	9700      	str	r7, [sp, #0]
 800c5b0:	f001 fe96 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c5b4:	f001 ffa4 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c5b8:	274c      	movs	r7, #76	; 0x4c
 800c5ba:	f8bb 200c 	ldrh.w	r2, [fp, #12]
 800c5be:	9201      	str	r2, [sp, #4]
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	4632      	mov	r2, r6
 800c5c4:	4629      	mov	r1, r5
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	9700      	str	r7, [sp, #0]
 800c5ca:	f001 fe89 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c5ce:	f001 ff97 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c5d2:	2726      	movs	r7, #38	; 0x26
 800c5d4:	f8db 2010 	ldr.w	r2, [fp, #16]
 800c5d8:	9201      	str	r2, [sp, #4]
 800c5da:	4603      	mov	r3, r0
 800c5dc:	4632      	mov	r2, r6
 800c5de:	4629      	mov	r1, r5
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	9700      	str	r7, [sp, #0]
 800c5e4:	f001 fe7c 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c5e8:	f001 ff8a 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c5ec:	2773      	movs	r7, #115	; 0x73
 800c5ee:	f8db 2014 	ldr.w	r2, [fp, #20]
 800c5f2:	9201      	str	r2, [sp, #4]
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	4632      	mov	r2, r6
 800c5f8:	4629      	mov	r1, r5
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	9700      	str	r7, [sp, #0]
 800c5fe:	f001 fe6f 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c602:	f001 ff7d 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c606:	2762      	movs	r7, #98	; 0x62
 800c608:	f8db 2018 	ldr.w	r2, [fp, #24]
 800c60c:	9201      	str	r2, [sp, #4]
 800c60e:	4603      	mov	r3, r0
 800c610:	4632      	mov	r2, r6
 800c612:	4629      	mov	r1, r5
 800c614:	4620      	mov	r0, r4
 800c616:	9700      	str	r7, [sp, #0]
 800c618:	f001 fe62 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c61c:	f001 ff70 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c620:	2737      	movs	r7, #55	; 0x37
 800c622:	f8db 201c 	ldr.w	r2, [fp, #28]
 800c626:	9201      	str	r2, [sp, #4]
 800c628:	4603      	mov	r3, r0
 800c62a:	4632      	mov	r2, r6
 800c62c:	4629      	mov	r1, r5
 800c62e:	4620      	mov	r0, r4
 800c630:	9700      	str	r7, [sp, #0]
 800c632:	f001 fe55 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c636:	f001 ff63 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c63a:	2776      	movs	r7, #118	; 0x76
 800c63c:	f8db 2020 	ldr.w	r2, [fp, #32]
 800c640:	9201      	str	r2, [sp, #4]
 800c642:	4603      	mov	r3, r0
 800c644:	4632      	mov	r2, r6
 800c646:	4629      	mov	r1, r5
 800c648:	4620      	mov	r0, r4
 800c64a:	9700      	str	r7, [sp, #0]
 800c64c:	f001 fe48 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c650:	f001 ff56 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c654:	2769      	movs	r7, #105	; 0x69
 800c656:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800c65a:	9201      	str	r2, [sp, #4]
 800c65c:	4603      	mov	r3, r0
 800c65e:	4632      	mov	r2, r6
 800c660:	4629      	mov	r1, r5
 800c662:	4620      	mov	r0, r4
 800c664:	9700      	str	r7, [sp, #0]
 800c666:	f001 fe3b 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c66a:	f001 ff49 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c66e:	276a      	movs	r7, #106	; 0x6a
 800c670:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800c674:	9201      	str	r2, [sp, #4]
 800c676:	4603      	mov	r3, r0
 800c678:	4632      	mov	r2, r6
 800c67a:	4629      	mov	r1, r5
 800c67c:	4620      	mov	r0, r4
 800c67e:	9700      	str	r7, [sp, #0]
 800c680:	f001 fe2e 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c684:	f001 ff3c 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c688:	2719      	movs	r7, #25
 800c68a:	f8db 2030 	ldr.w	r2, [fp, #48]	; 0x30
 800c68e:	9201      	str	r2, [sp, #4]
 800c690:	4603      	mov	r3, r0
 800c692:	4632      	mov	r2, r6
 800c694:	4629      	mov	r1, r5
 800c696:	4620      	mov	r0, r4
 800c698:	9700      	str	r7, [sp, #0]
 800c69a:	f001 fe21 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c69e:	f001 ff2f 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c6a2:	271a      	movs	r7, #26
 800c6a4:	f8db 2034 	ldr.w	r2, [fp, #52]	; 0x34
 800c6a8:	9201      	str	r2, [sp, #4]
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	4632      	mov	r2, r6
 800c6ae:	4629      	mov	r1, r5
 800c6b0:	4620      	mov	r0, r4
 800c6b2:	9700      	str	r7, [sp, #0]
 800c6b4:	f001 fe14 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c6b8:	f001 ff22 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c6bc:	271b      	movs	r7, #27
 800c6be:	f8db 2038 	ldr.w	r2, [fp, #56]	; 0x38
 800c6c2:	9201      	str	r2, [sp, #4]
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	4632      	mov	r2, r6
 800c6c8:	4629      	mov	r1, r5
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	9700      	str	r7, [sp, #0]
 800c6ce:	f001 fe07 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c6d2:	f001 ff15 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c6d6:	271c      	movs	r7, #28
 800c6d8:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
 800c6dc:	9201      	str	r2, [sp, #4]
 800c6de:	4603      	mov	r3, r0
 800c6e0:	4632      	mov	r2, r6
 800c6e2:	4629      	mov	r1, r5
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	9700      	str	r7, [sp, #0]
 800c6e8:	f001 fdfa 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c6ec:	f001 ff08 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c6f0:	271d      	movs	r7, #29
 800c6f2:	f8db 2040 	ldr.w	r2, [fp, #64]	; 0x40
 800c6f6:	9201      	str	r2, [sp, #4]
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	4632      	mov	r2, r6
 800c6fc:	4629      	mov	r1, r5
 800c6fe:	4620      	mov	r0, r4
 800c700:	9700      	str	r7, [sp, #0]
 800c702:	f001 fded 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c706:	f001 fefb 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c70a:	271e      	movs	r7, #30
 800c70c:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 800c710:	9201      	str	r2, [sp, #4]
 800c712:	4603      	mov	r3, r0
 800c714:	4632      	mov	r2, r6
 800c716:	4629      	mov	r1, r5
 800c718:	4620      	mov	r0, r4
 800c71a:	9700      	str	r7, [sp, #0]
 800c71c:	f001 fde0 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c720:	f001 feee 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c724:	2755      	movs	r7, #85	; 0x55
 800c726:	f8db 2048 	ldr.w	r2, [fp, #72]	; 0x48
 800c72a:	9201      	str	r2, [sp, #4]
 800c72c:	4603      	mov	r3, r0
 800c72e:	4632      	mov	r2, r6
 800c730:	4629      	mov	r1, r5
 800c732:	4620      	mov	r0, r4
 800c734:	9700      	str	r7, [sp, #0]
 800c736:	f001 fdd3 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c73a:	f001 fee1 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c73e:	2756      	movs	r7, #86	; 0x56
 800c740:	f8db 204c 	ldr.w	r2, [fp, #76]	; 0x4c
 800c744:	9201      	str	r2, [sp, #4]
 800c746:	4603      	mov	r3, r0
 800c748:	4632      	mov	r2, r6
 800c74a:	4629      	mov	r1, r5
 800c74c:	4620      	mov	r0, r4
 800c74e:	9700      	str	r7, [sp, #0]
 800c750:	f001 fdc6 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c754:	f001 fed4 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c758:	2758      	movs	r7, #88	; 0x58
 800c75a:	f8db 2050 	ldr.w	r2, [fp, #80]	; 0x50
 800c75e:	9201      	str	r2, [sp, #4]
 800c760:	4603      	mov	r3, r0
 800c762:	4632      	mov	r2, r6
 800c764:	4629      	mov	r1, r5
 800c766:	4620      	mov	r0, r4
 800c768:	9700      	str	r7, [sp, #0]
 800c76a:	f001 fdb9 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c76e:	f001 fec7 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c772:	276b      	movs	r7, #107	; 0x6b
 800c774:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
 800c778:	9201      	str	r2, [sp, #4]
 800c77a:	4603      	mov	r3, r0
 800c77c:	4632      	mov	r2, r6
 800c77e:	4629      	mov	r1, r5
 800c780:	4620      	mov	r0, r4
 800c782:	9700      	str	r7, [sp, #0]
 800c784:	f001 fdac 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c788:	f001 feba 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c78c:	2786      	movs	r7, #134	; 0x86
 800c78e:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 800c792:	9201      	str	r2, [sp, #4]
 800c794:	4603      	mov	r3, r0
 800c796:	4632      	mov	r2, r6
 800c798:	4629      	mov	r1, r5
 800c79a:	4620      	mov	r0, r4
 800c79c:	9700      	str	r7, [sp, #0]
 800c79e:	f001 fd9f 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c7a2:	f001 fead 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c7a6:	2764      	movs	r7, #100	; 0x64
 800c7a8:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 800c7ac:	9201      	str	r2, [sp, #4]
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	4632      	mov	r2, r6
 800c7b2:	4629      	mov	r1, r5
 800c7b4:	4620      	mov	r0, r4
 800c7b6:	9700      	str	r7, [sp, #0]
 800c7b8:	f001 fd92 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c7bc:	f001 fea0 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c7c0:	2765      	movs	r7, #101	; 0x65
 800c7c2:	f8db 2060 	ldr.w	r2, [fp, #96]	; 0x60
 800c7c6:	9201      	str	r2, [sp, #4]
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	4632      	mov	r2, r6
 800c7cc:	4629      	mov	r1, r5
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	9700      	str	r7, [sp, #0]
 800c7d2:	f001 fd85 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c7d6:	f001 fe93 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c7da:	2740      	movs	r7, #64	; 0x40
 800c7dc:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 800c7e0:	9201      	str	r2, [sp, #4]
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	4632      	mov	r2, r6
 800c7e6:	4629      	mov	r1, r5
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	9700      	str	r7, [sp, #0]
 800c7ec:	f001 fd78 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c7f0:	f001 fe86 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c7f4:	2741      	movs	r7, #65	; 0x41
 800c7f6:	f8db 2068 	ldr.w	r2, [fp, #104]	; 0x68
 800c7fa:	9201      	str	r2, [sp, #4]
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	4632      	mov	r2, r6
 800c800:	4629      	mov	r1, r5
 800c802:	4620      	mov	r0, r4
 800c804:	9700      	str	r7, [sp, #0]
 800c806:	f001 fd6b 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c80a:	f001 fe79 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c80e:	2772      	movs	r7, #114	; 0x72
 800c810:	f8db 206c 	ldr.w	r2, [fp, #108]	; 0x6c
 800c814:	9201      	str	r2, [sp, #4]
 800c816:	4603      	mov	r3, r0
 800c818:	4632      	mov	r2, r6
 800c81a:	4629      	mov	r1, r5
 800c81c:	4620      	mov	r0, r4
 800c81e:	9700      	str	r7, [sp, #0]
 800c820:	f001 fd5e 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c824:	f001 fe6c 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c828:	2754      	movs	r7, #84	; 0x54
 800c82a:	f8db 2070 	ldr.w	r2, [fp, #112]	; 0x70
 800c82e:	9201      	str	r2, [sp, #4]
 800c830:	4603      	mov	r3, r0
 800c832:	4632      	mov	r2, r6
 800c834:	4629      	mov	r1, r5
 800c836:	4620      	mov	r0, r4
 800c838:	9700      	str	r7, [sp, #0]
 800c83a:	f001 fd51 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c83e:	f001 fe5f 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c842:	2739      	movs	r7, #57	; 0x39
 800c844:	f8db 2074 	ldr.w	r2, [fp, #116]	; 0x74
 800c848:	9201      	str	r2, [sp, #4]
 800c84a:	4603      	mov	r3, r0
 800c84c:	4632      	mov	r2, r6
 800c84e:	4629      	mov	r1, r5
 800c850:	4620      	mov	r0, r4
 800c852:	9700      	str	r7, [sp, #0]
 800c854:	f001 fd44 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c858:	f8db 3074 	ldr.w	r3, [fp, #116]	; 0x74
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	f040 8239 	bne.w	800ccd4 <acc_cpd_linear_sweep_load_program+0x904>
 800c862:	f001 fe4d 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c866:	f8db 2078 	ldr.w	r2, [fp, #120]	; 0x78
 800c86a:	9201      	str	r2, [sp, #4]
 800c86c:	2251      	movs	r2, #81	; 0x51
 800c86e:	4603      	mov	r3, r0
 800c870:	4629      	mov	r1, r5
 800c872:	9200      	str	r2, [sp, #0]
 800c874:	4620      	mov	r0, r4
 800c876:	4632      	mov	r2, r6
 800c878:	f001 fd32 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c87c:	f001 fe40 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c880:	f8db 207c 	ldr.w	r2, [fp, #124]	; 0x7c
 800c884:	9201      	str	r2, [sp, #4]
 800c886:	2277      	movs	r2, #119	; 0x77
 800c888:	4603      	mov	r3, r0
 800c88a:	4629      	mov	r1, r5
 800c88c:	9200      	str	r2, [sp, #0]
 800c88e:	4620      	mov	r0, r4
 800c890:	4632      	mov	r2, r6
 800c892:	f001 fd25 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c896:	f001 fe33 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c89a:	f8db 2080 	ldr.w	r2, [fp, #128]	; 0x80
 800c89e:	9201      	str	r2, [sp, #4]
 800c8a0:	2244      	movs	r2, #68	; 0x44
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	4629      	mov	r1, r5
 800c8a6:	9200      	str	r2, [sp, #0]
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	4632      	mov	r2, r6
 800c8ac:	f001 fd18 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c8b0:	f001 fe26 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c8b4:	f8db 2084 	ldr.w	r2, [fp, #132]	; 0x84
 800c8b8:	9201      	str	r2, [sp, #4]
 800c8ba:	2243      	movs	r2, #67	; 0x43
 800c8bc:	4603      	mov	r3, r0
 800c8be:	9200      	str	r2, [sp, #0]
 800c8c0:	4629      	mov	r1, r5
 800c8c2:	4632      	mov	r2, r6
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	f001 fd0b 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c8ca:	f8db 7088 	ldr.w	r7, [fp, #136]	; 0x88
 800c8ce:	b2bb      	uxth	r3, r7
 800c8d0:	2b08      	cmp	r3, #8
 800c8d2:	f200 81e7 	bhi.w	800cca4 <acc_cpd_linear_sweep_load_program+0x8d4>
 800c8d6:	4698      	mov	r8, r3
 800c8d8:	2700      	movs	r7, #0
 800c8da:	f001 fe11 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c8de:	226c      	movs	r2, #108	; 0x6c
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	e9cd 2800 	strd	r2, r8, [sp]
 800c8e6:	4629      	mov	r1, r5
 800c8e8:	4632      	mov	r2, r6
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	f001 fcf8 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c8f0:	f001 fe06 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c8f4:	2259      	movs	r2, #89	; 0x59
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	e9cd 2800 	strd	r2, r8, [sp]
 800c8fc:	4629      	mov	r1, r5
 800c8fe:	4632      	mov	r2, r6
 800c900:	4620      	mov	r0, r4
 800c902:	f001 fced 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c906:	f001 fdfb 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c90a:	216e      	movs	r1, #110	; 0x6e
 800c90c:	f001 fdd2 	bl	800e4b4 <acc_confprogram_get_default_value>
 800c910:	900a      	str	r0, [sp, #40]	; 0x28
 800c912:	f001 fdf5 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c916:	2170      	movs	r1, #112	; 0x70
 800c918:	f001 fdcc 	bl	800e4b4 <acc_confprogram_get_default_value>
 800c91c:	9003      	str	r0, [sp, #12]
 800c91e:	f001 fdef 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c922:	216f      	movs	r1, #111	; 0x6f
 800c924:	f001 fdc6 	bl	800e4b4 <acc_confprogram_get_default_value>
 800c928:	9004      	str	r0, [sp, #16]
 800c92a:	f001 fde9 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c92e:	215b      	movs	r1, #91	; 0x5b
 800c930:	f001 fdc0 	bl	800e4b4 <acc_confprogram_get_default_value>
 800c934:	4680      	mov	r8, r0
 800c936:	f001 fde3 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c93a:	215d      	movs	r1, #93	; 0x5d
 800c93c:	f001 fdba 	bl	800e4b4 <acc_confprogram_get_default_value>
 800c940:	9005      	str	r0, [sp, #20]
 800c942:	f001 fddd 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c946:	215c      	movs	r1, #92	; 0x5c
 800c948:	f001 fdb4 	bl	800e4b4 <acc_confprogram_get_default_value>
 800c94c:	9006      	str	r0, [sp, #24]
 800c94e:	f001 fdd7 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c952:	214a      	movs	r1, #74	; 0x4a
 800c954:	f001 fdae 	bl	800e4b4 <acc_confprogram_get_default_value>
 800c958:	9007      	str	r0, [sp, #28]
 800c95a:	f001 fdd1 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c95e:	2145      	movs	r1, #69	; 0x45
 800c960:	f001 fda8 	bl	800e4b4 <acc_confprogram_get_default_value>
 800c964:	9008      	str	r0, [sp, #32]
 800c966:	f001 fdcb 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c96a:	2122      	movs	r1, #34	; 0x22
 800c96c:	f001 fda2 	bl	800e4b4 <acc_confprogram_get_default_value>
 800c970:	9009      	str	r0, [sp, #36]	; 0x24
 800c972:	f001 fdc5 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c976:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c978:	216e      	movs	r1, #110	; 0x6e
 800c97a:	433a      	orrs	r2, r7
 800c97c:	4603      	mov	r3, r0
 800c97e:	9201      	str	r2, [sp, #4]
 800c980:	9100      	str	r1, [sp, #0]
 800c982:	4632      	mov	r2, r6
 800c984:	4629      	mov	r1, r5
 800c986:	4620      	mov	r0, r4
 800c988:	f001 fcaa 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c98c:	f001 fdb8 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c990:	9a03      	ldr	r2, [sp, #12]
 800c992:	2170      	movs	r1, #112	; 0x70
 800c994:	433a      	orrs	r2, r7
 800c996:	4603      	mov	r3, r0
 800c998:	9201      	str	r2, [sp, #4]
 800c99a:	9100      	str	r1, [sp, #0]
 800c99c:	4632      	mov	r2, r6
 800c99e:	4629      	mov	r1, r5
 800c9a0:	4620      	mov	r0, r4
 800c9a2:	f001 fc9d 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c9a6:	f001 fdab 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c9aa:	9a04      	ldr	r2, [sp, #16]
 800c9ac:	216f      	movs	r1, #111	; 0x6f
 800c9ae:	433a      	orrs	r2, r7
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	e9cd 1200 	strd	r1, r2, [sp]
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	4632      	mov	r2, r6
 800c9ba:	4629      	mov	r1, r5
 800c9bc:	f001 fc90 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c9c0:	f001 fd9e 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c9c4:	ea48 0207 	orr.w	r2, r8, r7
 800c9c8:	215b      	movs	r1, #91	; 0x5b
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	e9cd 1200 	strd	r1, r2, [sp]
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	4632      	mov	r2, r6
 800c9d4:	4629      	mov	r1, r5
 800c9d6:	f001 fc83 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c9da:	f001 fd91 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c9de:	9a05      	ldr	r2, [sp, #20]
 800c9e0:	215d      	movs	r1, #93	; 0x5d
 800c9e2:	433a      	orrs	r2, r7
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	e9cd 1200 	strd	r1, r2, [sp]
 800c9ea:	4620      	mov	r0, r4
 800c9ec:	4632      	mov	r2, r6
 800c9ee:	4629      	mov	r1, r5
 800c9f0:	f001 fc76 	bl	800e2e0 <acc_confprogram_patch_offset>
 800c9f4:	f001 fd84 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800c9f8:	9a06      	ldr	r2, [sp, #24]
 800c9fa:	215c      	movs	r1, #92	; 0x5c
 800c9fc:	433a      	orrs	r2, r7
 800c9fe:	4603      	mov	r3, r0
 800ca00:	e9cd 1200 	strd	r1, r2, [sp]
 800ca04:	4620      	mov	r0, r4
 800ca06:	4632      	mov	r2, r6
 800ca08:	4629      	mov	r1, r5
 800ca0a:	f001 fc69 	bl	800e2e0 <acc_confprogram_patch_offset>
 800ca0e:	f001 fd77 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800ca12:	9a07      	ldr	r2, [sp, #28]
 800ca14:	214a      	movs	r1, #74	; 0x4a
 800ca16:	433a      	orrs	r2, r7
 800ca18:	4603      	mov	r3, r0
 800ca1a:	e9cd 1200 	strd	r1, r2, [sp]
 800ca1e:	4620      	mov	r0, r4
 800ca20:	4632      	mov	r2, r6
 800ca22:	4629      	mov	r1, r5
 800ca24:	f001 fc5c 	bl	800e2e0 <acc_confprogram_patch_offset>
 800ca28:	f001 fd6a 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800ca2c:	9a08      	ldr	r2, [sp, #32]
 800ca2e:	2145      	movs	r1, #69	; 0x45
 800ca30:	433a      	orrs	r2, r7
 800ca32:	4603      	mov	r3, r0
 800ca34:	e9cd 1200 	strd	r1, r2, [sp]
 800ca38:	4620      	mov	r0, r4
 800ca3a:	4632      	mov	r2, r6
 800ca3c:	4629      	mov	r1, r5
 800ca3e:	f001 fc4f 	bl	800e2e0 <acc_confprogram_patch_offset>
 800ca42:	f001 fd5d 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800ca46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca48:	433a      	orrs	r2, r7
 800ca4a:	4617      	mov	r7, r2
 800ca4c:	2222      	movs	r2, #34	; 0x22
 800ca4e:	4629      	mov	r1, r5
 800ca50:	4603      	mov	r3, r0
 800ca52:	e9cd 2700 	strd	r2, r7, [sp]
 800ca56:	4620      	mov	r0, r4
 800ca58:	4632      	mov	r2, r6
 800ca5a:	f001 fc41 	bl	800e2e0 <acc_confprogram_patch_offset>
 800ca5e:	f001 fd4f 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800ca62:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 800ca66:	2a05      	cmp	r2, #5
 800ca68:	bf8c      	ite	hi
 800ca6a:	2164      	movhi	r1, #100	; 0x64
 800ca6c:	2144      	movls	r1, #68	; 0x44
 800ca6e:	2205      	movs	r2, #5
 800ca70:	4603      	mov	r3, r0
 800ca72:	e9cd 2100 	strd	r2, r1, [sp]
 800ca76:	4620      	mov	r0, r4
 800ca78:	4632      	mov	r2, r6
 800ca7a:	4629      	mov	r1, r5
 800ca7c:	f001 fc30 	bl	800e2e0 <acc_confprogram_patch_offset>
 800ca80:	f001 fd3e 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800ca84:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 800ca88:	0152      	lsls	r2, r2, #5
 800ca8a:	3a03      	subs	r2, #3
 800ca8c:	2124      	movs	r1, #36	; 0x24
 800ca8e:	4603      	mov	r3, r0
 800ca90:	e9cd 1200 	strd	r1, r2, [sp]
 800ca94:	4620      	mov	r0, r4
 800ca96:	4632      	mov	r2, r6
 800ca98:	4629      	mov	r1, r5
 800ca9a:	f001 fc21 	bl	800e2e0 <acc_confprogram_patch_offset>
 800ca9e:	f001 fd2f 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800caa2:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 800caa6:	0152      	lsls	r2, r2, #5
 800caa8:	0852      	lsrs	r2, r2, #1
 800caaa:	3a03      	subs	r2, #3
 800caac:	2125      	movs	r1, #37	; 0x25
 800caae:	4603      	mov	r3, r0
 800cab0:	e9cd 1200 	strd	r1, r2, [sp]
 800cab4:	4620      	mov	r0, r4
 800cab6:	4632      	mov	r2, r6
 800cab8:	4629      	mov	r1, r5
 800caba:	f001 fc11 	bl	800e2e0 <acc_confprogram_patch_offset>
 800cabe:	f001 fd1f 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800cac2:	f8db 2094 	ldr.w	r2, [fp, #148]	; 0x94
 800cac6:	9201      	str	r2, [sp, #4]
 800cac8:	2236      	movs	r2, #54	; 0x36
 800caca:	4603      	mov	r3, r0
 800cacc:	4629      	mov	r1, r5
 800cace:	9200      	str	r2, [sp, #0]
 800cad0:	4620      	mov	r0, r4
 800cad2:	4632      	mov	r2, r6
 800cad4:	f001 fc04 	bl	800e2e0 <acc_confprogram_patch_offset>
 800cad8:	f001 fd12 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800cadc:	f8db 2098 	ldr.w	r2, [fp, #152]	; 0x98
 800cae0:	215e      	movs	r1, #94	; 0x5e
 800cae2:	320e      	adds	r2, #14
 800cae4:	4603      	mov	r3, r0
 800cae6:	e9cd 1200 	strd	r1, r2, [sp]
 800caea:	4620      	mov	r0, r4
 800caec:	4632      	mov	r2, r6
 800caee:	4629      	mov	r1, r5
 800caf0:	f001 fbf6 	bl	800e2e0 <acc_confprogram_patch_offset>
 800caf4:	f001 fd04 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800caf8:	2120      	movs	r1, #32
 800cafa:	f001 fcdb 	bl	800e4b4 <acc_confprogram_get_default_value>
 800cafe:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 800cb02:	2b05      	cmp	r3, #5
 800cb04:	bf98      	it	ls
 800cb06:	3002      	addls	r0, #2
 800cb08:	fbb0 f7f3 	udiv	r7, r0, r3
 800cb0c:	fb03 0717 	mls	r7, r3, r7, r0
 800cb10:	b107      	cbz	r7, 800cb14 <acc_cpd_linear_sweep_load_program+0x744>
 800cb12:	1bdf      	subs	r7, r3, r7
 800cb14:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 800cb18:	eb07 0803 	add.w	r8, r7, r3
 800cb1c:	f001 fcf0 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800cb20:	221f      	movs	r2, #31
 800cb22:	4603      	mov	r3, r0
 800cb24:	e9cd 2800 	strd	r2, r8, [sp]
 800cb28:	4629      	mov	r1, r5
 800cb2a:	4632      	mov	r2, r6
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	f001 fbd7 	bl	800e2e0 <acc_confprogram_patch_offset>
 800cb32:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	f040 809a 	bne.w	800cc70 <acc_cpd_linear_sweep_load_program+0x8a0>
 800cb3c:	f001 fce0 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800cb40:	213a      	movs	r1, #58	; 0x3a
 800cb42:	f001 fcb7 	bl	800e4b4 <acc_confprogram_get_default_value>
 800cb46:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 800cb4a:	2b05      	cmp	r3, #5
 800cb4c:	bf8c      	ite	hi
 800cb4e:	3007      	addhi	r0, #7
 800cb50:	3009      	addls	r0, #9
 800cb52:	fbb0 f7f3 	udiv	r7, r0, r3
 800cb56:	fb03 0717 	mls	r7, r3, r7, r0
 800cb5a:	b107      	cbz	r7, 800cb5e <acc_cpd_linear_sweep_load_program+0x78e>
 800cb5c:	1bdf      	subs	r7, r3, r7
 800cb5e:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 800cb62:	eb07 0803 	add.w	r8, r7, r3
 800cb66:	f001 fccb 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800cb6a:	2266      	movs	r2, #102	; 0x66
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	e9cd 2800 	strd	r2, r8, [sp]
 800cb72:	4629      	mov	r1, r5
 800cb74:	4632      	mov	r2, r6
 800cb76:	4620      	mov	r0, r4
 800cb78:	f001 fbb2 	bl	800e2e0 <acc_confprogram_patch_offset>
 800cb7c:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d15c      	bne.n	800cc3e <acc_cpd_linear_sweep_load_program+0x86e>
 800cb84:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d141      	bne.n	800cc10 <acc_cpd_linear_sweep_load_program+0x840>
 800cb8c:	f8db 70a4 	ldr.w	r7, [fp, #164]	; 0xa4
 800cb90:	f001 fcb6 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800cb94:	1e79      	subs	r1, r7, #1
 800cb96:	2206      	movs	r2, #6
 800cb98:	4603      	mov	r3, r0
 800cb9a:	e9cd 2100 	strd	r2, r1, [sp]
 800cb9e:	4620      	mov	r0, r4
 800cba0:	4632      	mov	r2, r6
 800cba2:	4629      	mov	r1, r5
 800cba4:	f001 fb9c 	bl	800e2e0 <acc_confprogram_patch_offset>
 800cba8:	f001 fcaa 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800cbac:	2204      	movs	r2, #4
 800cbae:	2163      	movs	r1, #99	; 0x63
 800cbb0:	fbb2 f7f7 	udiv	r7, r2, r7
 800cbb4:	3f01      	subs	r7, #1
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	e9cd 1700 	strd	r1, r7, [sp]
 800cbbc:	4632      	mov	r2, r6
 800cbbe:	4629      	mov	r1, r5
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	f001 fb8d 	bl	800e2e0 <acc_confprogram_patch_offset>
 800cbc6:	f001 fc9b 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800cbca:	f8db 20a8 	ldr.w	r2, [fp, #168]	; 0xa8
 800cbce:	9201      	str	r2, [sp, #4]
 800cbd0:	2261      	movs	r2, #97	; 0x61
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	4629      	mov	r1, r5
 800cbd6:	9200      	str	r2, [sp, #0]
 800cbd8:	4620      	mov	r0, r4
 800cbda:	4632      	mov	r2, r6
 800cbdc:	f001 fb80 	bl	800e2e0 <acc_confprogram_patch_offset>
 800cbe0:	f001 fc8e 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800cbe4:	f89b 20ad 	ldrb.w	r2, [fp, #173]	; 0xad
 800cbe8:	9201      	str	r2, [sp, #4]
 800cbea:	2246      	movs	r2, #70	; 0x46
 800cbec:	4603      	mov	r3, r0
 800cbee:	9200      	str	r2, [sp, #0]
 800cbf0:	4629      	mov	r1, r5
 800cbf2:	4632      	mov	r2, r6
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	f001 fb73 	bl	800e2e0 <acc_confprogram_patch_offset>
 800cbfa:	f89b 70ad 	ldrb.w	r7, [fp, #173]	; 0xad
 800cbfe:	2f00      	cmp	r7, #0
 800cc00:	f47f ac24 	bne.w	800c44c <acc_cpd_linear_sweep_load_program+0x7c>
 800cc04:	f001 fc7c 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800cc08:	2223      	movs	r2, #35	; 0x23
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	9701      	str	r7, [sp, #4]
 800cc0e:	e447      	b.n	800c4a0 <acc_cpd_linear_sweep_load_program+0xd0>
 800cc10:	f001 fc76 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800cc14:	223b      	movs	r2, #59	; 0x3b
 800cc16:	2100      	movs	r1, #0
 800cc18:	e9cd 2100 	strd	r2, r1, [sp]
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	4632      	mov	r2, r6
 800cc20:	4629      	mov	r1, r5
 800cc22:	4620      	mov	r0, r4
 800cc24:	f001 fb5c 	bl	800e2e0 <acc_confprogram_patch_offset>
 800cc28:	f7fa fd24 	bl	8007674 <acc_rss_integration_log_level>
 800cc2c:	2801      	cmp	r0, #1
 800cc2e:	d9ad      	bls.n	800cb8c <acc_cpd_linear_sweep_load_program+0x7bc>
 800cc30:	4b7b      	ldr	r3, [pc, #492]	; (800ce20 <acc_cpd_linear_sweep_load_program+0xa50>)
 800cc32:	4a7c      	ldr	r2, [pc, #496]	; (800ce24 <acc_cpd_linear_sweep_load_program+0xa54>)
 800cc34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc36:	497c      	ldr	r1, [pc, #496]	; (800ce28 <acc_cpd_linear_sweep_load_program+0xa58>)
 800cc38:	2002      	movs	r0, #2
 800cc3a:	4798      	blx	r3
 800cc3c:	e7a6      	b.n	800cb8c <acc_cpd_linear_sweep_load_program+0x7bc>
 800cc3e:	f7fa fd19 	bl	8007674 <acc_rss_integration_log_level>
 800cc42:	2801      	cmp	r0, #1
 800cc44:	d908      	bls.n	800cc58 <acc_cpd_linear_sweep_load_program+0x888>
 800cc46:	4b76      	ldr	r3, [pc, #472]	; (800ce20 <acc_cpd_linear_sweep_load_program+0xa50>)
 800cc48:	4a78      	ldr	r2, [pc, #480]	; (800ce2c <acc_cpd_linear_sweep_load_program+0xa5c>)
 800cc4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc4c:	9303      	str	r3, [sp, #12]
 800cc4e:	4976      	ldr	r1, [pc, #472]	; (800ce28 <acc_cpd_linear_sweep_load_program+0xa58>)
 800cc50:	463b      	mov	r3, r7
 800cc52:	2002      	movs	r0, #2
 800cc54:	9f03      	ldr	r7, [sp, #12]
 800cc56:	47b8      	blx	r7
 800cc58:	f7fa fd0c 	bl	8007674 <acc_rss_integration_log_level>
 800cc5c:	2801      	cmp	r0, #1
 800cc5e:	d991      	bls.n	800cb84 <acc_cpd_linear_sweep_load_program+0x7b4>
 800cc60:	4b6f      	ldr	r3, [pc, #444]	; (800ce20 <acc_cpd_linear_sweep_load_program+0xa50>)
 800cc62:	4a73      	ldr	r2, [pc, #460]	; (800ce30 <acc_cpd_linear_sweep_load_program+0xa60>)
 800cc64:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800cc66:	4970      	ldr	r1, [pc, #448]	; (800ce28 <acc_cpd_linear_sweep_load_program+0xa58>)
 800cc68:	4643      	mov	r3, r8
 800cc6a:	2002      	movs	r0, #2
 800cc6c:	47b8      	blx	r7
 800cc6e:	e789      	b.n	800cb84 <acc_cpd_linear_sweep_load_program+0x7b4>
 800cc70:	f7fa fd00 	bl	8007674 <acc_rss_integration_log_level>
 800cc74:	2801      	cmp	r0, #1
 800cc76:	d908      	bls.n	800cc8a <acc_cpd_linear_sweep_load_program+0x8ba>
 800cc78:	4b69      	ldr	r3, [pc, #420]	; (800ce20 <acc_cpd_linear_sweep_load_program+0xa50>)
 800cc7a:	4a6e      	ldr	r2, [pc, #440]	; (800ce34 <acc_cpd_linear_sweep_load_program+0xa64>)
 800cc7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc7e:	9303      	str	r3, [sp, #12]
 800cc80:	4969      	ldr	r1, [pc, #420]	; (800ce28 <acc_cpd_linear_sweep_load_program+0xa58>)
 800cc82:	463b      	mov	r3, r7
 800cc84:	2002      	movs	r0, #2
 800cc86:	9f03      	ldr	r7, [sp, #12]
 800cc88:	47b8      	blx	r7
 800cc8a:	f7fa fcf3 	bl	8007674 <acc_rss_integration_log_level>
 800cc8e:	2801      	cmp	r0, #1
 800cc90:	f67f af54 	bls.w	800cb3c <acc_cpd_linear_sweep_load_program+0x76c>
 800cc94:	4b62      	ldr	r3, [pc, #392]	; (800ce20 <acc_cpd_linear_sweep_load_program+0xa50>)
 800cc96:	4a68      	ldr	r2, [pc, #416]	; (800ce38 <acc_cpd_linear_sweep_load_program+0xa68>)
 800cc98:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800cc9a:	4963      	ldr	r1, [pc, #396]	; (800ce28 <acc_cpd_linear_sweep_load_program+0xa58>)
 800cc9c:	4643      	mov	r3, r8
 800cc9e:	2002      	movs	r0, #2
 800cca0:	47b8      	blx	r7
 800cca2:	e74b      	b.n	800cb3c <acc_cpd_linear_sweep_load_program+0x76c>
 800cca4:	f001 fc2c 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800cca8:	fa1f f887 	uxth.w	r8, r7
 800ccac:	2267      	movs	r2, #103	; 0x67
 800ccae:	2102      	movs	r1, #2
 800ccb0:	f1a8 0808 	sub.w	r8, r8, #8
 800ccb4:	27ff      	movs	r7, #255	; 0xff
 800ccb6:	e9cd 2100 	strd	r2, r1, [sp]
 800ccba:	4603      	mov	r3, r0
 800ccbc:	fa07 f708 	lsl.w	r7, r7, r8
 800ccc0:	4632      	mov	r2, r6
 800ccc2:	4629      	mov	r1, r5
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	f001 fb0b 	bl	800e2e0 <acc_confprogram_patch_offset>
 800ccca:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800ccce:	f04f 0808 	mov.w	r8, #8
 800ccd2:	e602      	b.n	800c8da <acc_cpd_linear_sweep_load_program+0x50a>
 800ccd4:	f001 fc14 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800ccd8:	2210      	movs	r2, #16
 800ccda:	2101      	movs	r1, #1
 800ccdc:	e9cd 2100 	strd	r2, r1, [sp]
 800cce0:	4603      	mov	r3, r0
 800cce2:	4632      	mov	r2, r6
 800cce4:	4629      	mov	r1, r5
 800cce6:	4620      	mov	r0, r4
 800cce8:	f001 fafa 	bl	800e2e0 <acc_confprogram_patch_offset>
 800ccec:	f001 fc08 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800ccf0:	f64f 7880 	movw	r8, #65408	; 0xff80
 800ccf4:	2212      	movs	r2, #18
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	4629      	mov	r1, r5
 800ccfa:	e9cd 2800 	strd	r2, r8, [sp]
 800ccfe:	4620      	mov	r0, r4
 800cd00:	4632      	mov	r2, r6
 800cd02:	f001 faed 	bl	800e2e0 <acc_confprogram_patch_offset>
 800cd06:	f001 fbfb 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800cd0a:	2707      	movs	r7, #7
 800cd0c:	2214      	movs	r2, #20
 800cd0e:	4603      	mov	r3, r0
 800cd10:	4629      	mov	r1, r5
 800cd12:	e9cd 2700 	strd	r2, r7, [sp]
 800cd16:	4620      	mov	r0, r4
 800cd18:	4632      	mov	r2, r6
 800cd1a:	f001 fae1 	bl	800e2e0 <acc_confprogram_patch_offset>
 800cd1e:	f001 fbef 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800cd22:	2211      	movs	r2, #17
 800cd24:	4603      	mov	r3, r0
 800cd26:	4629      	mov	r1, r5
 800cd28:	e9cd 2800 	strd	r2, r8, [sp]
 800cd2c:	4620      	mov	r0, r4
 800cd2e:	4632      	mov	r2, r6
 800cd30:	f001 fad6 	bl	800e2e0 <acc_confprogram_patch_offset>
 800cd34:	f001 fbe4 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800cd38:	2213      	movs	r2, #19
 800cd3a:	2100      	movs	r1, #0
 800cd3c:	e9cd 2100 	strd	r2, r1, [sp]
 800cd40:	4603      	mov	r3, r0
 800cd42:	4632      	mov	r2, r6
 800cd44:	4629      	mov	r1, r5
 800cd46:	4620      	mov	r0, r4
 800cd48:	f001 faca 	bl	800e2e0 <acc_confprogram_patch_offset>
 800cd4c:	f001 fbd8 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800cd50:	2215      	movs	r2, #21
 800cd52:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 800cd56:	e9cd 2100 	strd	r2, r1, [sp]
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	4632      	mov	r2, r6
 800cd5e:	4629      	mov	r1, r5
 800cd60:	4620      	mov	r0, r4
 800cd62:	f001 fabd 	bl	800e2e0 <acc_confprogram_patch_offset>
 800cd66:	f001 fbcb 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800cd6a:	2216      	movs	r2, #22
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	4629      	mov	r1, r5
 800cd70:	e9cd 2700 	strd	r2, r7, [sp]
 800cd74:	4620      	mov	r0, r4
 800cd76:	4632      	mov	r2, r6
 800cd78:	f001 fab2 	bl	800e2e0 <acc_confprogram_patch_offset>
 800cd7c:	f001 fbc0 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800cd80:	220e      	movs	r2, #14
 800cd82:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800cd86:	e9cd 2100 	strd	r2, r1, [sp]
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	4632      	mov	r2, r6
 800cd8e:	4629      	mov	r1, r5
 800cd90:	4620      	mov	r0, r4
 800cd92:	f001 faa5 	bl	800e2e0 <acc_confprogram_patch_offset>
 800cd96:	f001 fbb3 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800cd9a:	220f      	movs	r2, #15
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	4629      	mov	r1, r5
 800cda0:	e9cd 2700 	strd	r2, r7, [sp]
 800cda4:	4620      	mov	r0, r4
 800cda6:	4632      	mov	r2, r6
 800cda8:	f001 fa9a 	bl	800e2e0 <acc_confprogram_patch_offset>
 800cdac:	f001 fba8 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800cdb0:	2217      	movs	r2, #23
 800cdb2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cdb6:	e9cd 2100 	strd	r2, r1, [sp]
 800cdba:	4603      	mov	r3, r0
 800cdbc:	4632      	mov	r2, r6
 800cdbe:	4629      	mov	r1, r5
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	f001 fa8d 	bl	800e2e0 <acc_confprogram_patch_offset>
 800cdc6:	f001 fb9b 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800cdca:	2218      	movs	r2, #24
 800cdcc:	e9cd 2700 	strd	r2, r7, [sp]
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	4632      	mov	r2, r6
 800cdd4:	4629      	mov	r1, r5
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	f001 fa82 	bl	800e2e0 <acc_confprogram_patch_offset>
 800cddc:	e541      	b.n	800c862 <acc_cpd_linear_sweep_load_program+0x492>
 800cdde:	f001 fb8f 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800cde2:	2732      	movs	r7, #50	; 0x32
 800cde4:	f8db 20b8 	ldr.w	r2, [fp, #184]	; 0xb8
 800cde8:	9201      	str	r2, [sp, #4]
 800cdea:	4603      	mov	r3, r0
 800cdec:	4632      	mov	r2, r6
 800cdee:	4629      	mov	r1, r5
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	9700      	str	r7, [sp, #0]
 800cdf4:	f001 fa74 	bl	800e2e0 <acc_confprogram_patch_offset>
 800cdf8:	f7ff bb8c 	b.w	800c514 <acc_cpd_linear_sweep_load_program+0x144>
 800cdfc:	f7fa fc3a 	bl	8007674 <acc_rss_integration_log_level>
 800ce00:	2803      	cmp	r0, #3
 800ce02:	f67f ab03 	bls.w	800c40c <acc_cpd_linear_sweep_load_program+0x3c>
 800ce06:	4b06      	ldr	r3, [pc, #24]	; (800ce20 <acc_cpd_linear_sweep_load_program+0xa50>)
 800ce08:	4a0c      	ldr	r2, [pc, #48]	; (800ce3c <acc_cpd_linear_sweep_load_program+0xa6c>)
 800ce0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce0c:	4906      	ldr	r1, [pc, #24]	; (800ce28 <acc_cpd_linear_sweep_load_program+0xa58>)
 800ce0e:	2004      	movs	r0, #4
 800ce10:	4798      	blx	r3
 800ce12:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ce14:	b00f      	add	sp, #60	; 0x3c
 800ce16:	ecbd 8b04 	vpop	{d8-d9}
 800ce1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce1e:	bf00      	nop
 800ce20:	2000082c 	.word	0x2000082c
 800ce24:	080138cc 	.word	0x080138cc
 800ce28:	080137f8 	.word	0x080137f8
 800ce2c:	0801387c 	.word	0x0801387c
 800ce30:	080138a4 	.word	0x080138a4
 800ce34:	0801380c 	.word	0x0801380c
 800ce38:	08013844 	.word	0x08013844
 800ce3c:	080138e8 	.word	0x080138e8

0800ce40 <acc_cpd_linear_sweep_run_program>:
 800ce40:	f240 213b 	movw	r1, #571	; 0x23b
 800ce44:	f7fc ba6a 	b.w	800931c <acc_sensor_protocol_r2_run_program>

0800ce48 <acc_cpd_linear_sweep_update_program>:
 800ce48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce4c:	784b      	ldrb	r3, [r1, #1]
 800ce4e:	684f      	ldr	r7, [r1, #4]
 800ce50:	68ce      	ldr	r6, [r1, #12]
 800ce52:	b086      	sub	sp, #24
 800ce54:	460c      	mov	r4, r1
 800ce56:	4605      	mov	r5, r0
 800ce58:	b943      	cbnz	r3, 800ce6c <acc_cpd_linear_sweep_update_program+0x24>
 800ce5a:	7823      	ldrb	r3, [r4, #0]
 800ce5c:	b9eb      	cbnz	r3, 800ce9a <acc_cpd_linear_sweep_update_program+0x52>
 800ce5e:	78a3      	ldrb	r3, [r4, #2]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d12d      	bne.n	800cec0 <acc_cpd_linear_sweep_update_program+0x78>
 800ce64:	2001      	movs	r0, #1
 800ce66:	b006      	add	sp, #24
 800ce68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce6c:	f8d1 8008 	ldr.w	r8, [r1, #8]
 800ce70:	f001 fb42 	bl	800e4f8 <acc_image_a111_r2c_sweep_get>
 800ce74:	9005      	str	r0, [sp, #20]
 800ce76:	f001 fb43 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800ce7a:	f108 020e 	add.w	r2, r8, #14
 800ce7e:	4603      	mov	r3, r0
 800ce80:	9201      	str	r2, [sp, #4]
 800ce82:	4819      	ldr	r0, [pc, #100]	; (800cee8 <acc_cpd_linear_sweep_update_program+0xa0>)
 800ce84:	9002      	str	r0, [sp, #8]
 800ce86:	225e      	movs	r2, #94	; 0x5e
 800ce88:	9200      	str	r2, [sp, #0]
 800ce8a:	9905      	ldr	r1, [sp, #20]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	4628      	mov	r0, r5
 800ce90:	f001 fa9a 	bl	800e3c8 <acc_confprogram_live_patch>
 800ce94:	7823      	ldrb	r3, [r4, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d0e1      	beq.n	800ce5e <acc_cpd_linear_sweep_update_program+0x16>
 800ce9a:	f001 fb2d 	bl	800e4f8 <acc_image_a111_r2c_sweep_get>
 800ce9e:	9005      	str	r0, [sp, #20]
 800cea0:	f001 fb2e 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800cea4:	2236      	movs	r2, #54	; 0x36
 800cea6:	4603      	mov	r3, r0
 800cea8:	480f      	ldr	r0, [pc, #60]	; (800cee8 <acc_cpd_linear_sweep_update_program+0xa0>)
 800ceaa:	9002      	str	r0, [sp, #8]
 800ceac:	9200      	str	r2, [sp, #0]
 800ceae:	9905      	ldr	r1, [sp, #20]
 800ceb0:	9701      	str	r7, [sp, #4]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	4628      	mov	r0, r5
 800ceb6:	f001 fa87 	bl	800e3c8 <acc_confprogram_live_patch>
 800ceba:	78a3      	ldrb	r3, [r4, #2]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d0d1      	beq.n	800ce64 <acc_cpd_linear_sweep_update_program+0x1c>
 800cec0:	f001 fb1a 	bl	800e4f8 <acc_image_a111_r2c_sweep_get>
 800cec4:	9005      	str	r0, [sp, #20]
 800cec6:	f001 fb1b 	bl	800e500 <acc_image_a111_r2c_sweep_param_table_get>
 800ceca:	4c07      	ldr	r4, [pc, #28]	; (800cee8 <acc_cpd_linear_sweep_update_program+0xa0>)
 800cecc:	9905      	ldr	r1, [sp, #20]
 800cece:	9601      	str	r6, [sp, #4]
 800ced0:	2272      	movs	r2, #114	; 0x72
 800ced2:	4603      	mov	r3, r0
 800ced4:	9200      	str	r2, [sp, #0]
 800ced6:	4628      	mov	r0, r5
 800ced8:	9402      	str	r4, [sp, #8]
 800ceda:	2200      	movs	r2, #0
 800cedc:	f001 fa74 	bl	800e3c8 <acc_confprogram_live_patch>
 800cee0:	2001      	movs	r0, #1
 800cee2:	b006      	add	sp, #24
 800cee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cee8:	08008c19 	.word	0x08008c19

0800ceec <acc_cpd_linear_sweep_get_info>:
 800ceec:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 800cef0:	b16b      	cbz	r3, 800cf0e <acc_cpd_linear_sweep_get_info+0x22>
 800cef2:	b410      	push	{r4}
 800cef4:	2203      	movs	r2, #3
 800cef6:	2401      	movs	r4, #1
 800cef8:	2300      	movs	r3, #0
 800cefa:	2002      	movs	r0, #2
 800cefc:	e9c1 4003 	strd	r4, r0, [r1, #12]
 800cf00:	e9c1 3301 	strd	r3, r3, [r1, #4]
 800cf04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf08:	600a      	str	r2, [r1, #0]
 800cf0a:	614a      	str	r2, [r1, #20]
 800cf0c:	4770      	bx	lr
 800cf0e:	e9c1 3300 	strd	r3, r3, [r1]
 800cf12:	e9c1 3302 	strd	r3, r3, [r1, #8]
 800cf16:	e9c1 3304 	strd	r3, r3, [r1, #16]
 800cf1a:	4770      	bx	lr

0800cf1c <acc_cpd_linear_sweep_check>:
 800cf1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf20:	461e      	mov	r6, r3
 800cf22:	2300      	movs	r3, #0
 800cf24:	7033      	strb	r3, [r6, #0]
 800cf26:	460c      	mov	r4, r1
 800cf28:	f891 10ad 	ldrb.w	r1, [r1, #173]	; 0xad
 800cf2c:	b082      	sub	sp, #8
 800cf2e:	b911      	cbnz	r1, 800cf36 <acc_cpd_linear_sweep_check+0x1a>
 800cf30:	b002      	add	sp, #8
 800cf32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf36:	6813      	ldr	r3, [r2, #0]
 800cf38:	005b      	lsls	r3, r3, #1
 800cf3a:	f003 031f 	and.w	r3, r3, #31
 800cf3e:	6013      	str	r3, [r2, #0]
 800cf40:	4607      	mov	r7, r0
 800cf42:	4615      	mov	r5, r2
 800cf44:	f7fa fb96 	bl	8007674 <acc_rss_integration_log_level>
 800cf48:	2803      	cmp	r0, #3
 800cf4a:	d907      	bls.n	800cf5c <acc_cpd_linear_sweep_check+0x40>
 800cf4c:	4a16      	ldr	r2, [pc, #88]	; (800cfa8 <acc_cpd_linear_sweep_check+0x8c>)
 800cf4e:	682b      	ldr	r3, [r5, #0]
 800cf50:	f8d2 8034 	ldr.w	r8, [r2, #52]	; 0x34
 800cf54:	4915      	ldr	r1, [pc, #84]	; (800cfac <acc_cpd_linear_sweep_check+0x90>)
 800cf56:	4a16      	ldr	r2, [pc, #88]	; (800cfb0 <acc_cpd_linear_sweep_check+0x94>)
 800cf58:	2004      	movs	r0, #4
 800cf5a:	47c0      	blx	r8
 800cf5c:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
 800cf60:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 800cf64:	8c21      	ldrh	r1, [r4, #32]
 800cf66:	4638      	mov	r0, r7
 800cf68:	f000 f952 	bl	800d210 <acc_cpd_sweep_check_voffset_vslope>
 800cf6c:	b1b0      	cbz	r0, 800cf9c <acc_cpd_linear_sweep_check+0x80>
 800cf6e:	6828      	ldr	r0, [r5, #0]
 800cf70:	f000 f9b4 	bl	800d2dc <acc_cpd_sweep_check_count_bad_sweeps>
 800cf74:	2802      	cmp	r0, #2
 800cf76:	4604      	mov	r4, r0
 800cf78:	d9da      	bls.n	800cf30 <acc_cpd_linear_sweep_check+0x14>
 800cf7a:	f7fa fb7b 	bl	8007674 <acc_rss_integration_log_level>
 800cf7e:	b140      	cbz	r0, 800cf92 <acc_cpd_linear_sweep_check+0x76>
 800cf80:	4b09      	ldr	r3, [pc, #36]	; (800cfa8 <acc_cpd_linear_sweep_check+0x8c>)
 800cf82:	4a0c      	ldr	r2, [pc, #48]	; (800cfb4 <acc_cpd_linear_sweep_check+0x98>)
 800cf84:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800cf86:	4909      	ldr	r1, [pc, #36]	; (800cfac <acc_cpd_linear_sweep_check+0x90>)
 800cf88:	2005      	movs	r0, #5
 800cf8a:	9000      	str	r0, [sp, #0]
 800cf8c:	4623      	mov	r3, r4
 800cf8e:	2001      	movs	r0, #1
 800cf90:	47a8      	blx	r5
 800cf92:	2301      	movs	r3, #1
 800cf94:	7033      	strb	r3, [r6, #0]
 800cf96:	b002      	add	sp, #8
 800cf98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf9c:	6828      	ldr	r0, [r5, #0]
 800cf9e:	f040 0001 	orr.w	r0, r0, #1
 800cfa2:	6028      	str	r0, [r5, #0]
 800cfa4:	e7e4      	b.n	800cf70 <acc_cpd_linear_sweep_check+0x54>
 800cfa6:	bf00      	nop
 800cfa8:	2000082c 	.word	0x2000082c
 800cfac:	080137f8 	.word	0x080137f8
 800cfb0:	0801390c 	.word	0x0801390c
 800cfb4:	08013924 	.word	0x08013924

0800cfb8 <acc_cpd_rx_fine_dip_calibration>:
 800cfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfbc:	ed2d 8b02 	vpush	{d8}
 800cfc0:	f8d2 a000 	ldr.w	sl, [r2]
 800cfc4:	b087      	sub	sp, #28
 800cfc6:	4681      	mov	r9, r0
 800cfc8:	ad05      	add	r5, sp, #20
 800cfca:	461e      	mov	r6, r3
 800cfcc:	4614      	mov	r4, r2
 800cfce:	468b      	mov	fp, r1
 800cfd0:	460a      	mov	r2, r1
 800cfd2:	9500      	str	r5, [sp, #0]
 800cfd4:	4650      	mov	r0, sl
 800cfd6:	2500      	movs	r5, #0
 800cfd8:	4649      	mov	r1, r9
 800cfda:	ab04      	add	r3, sp, #16
 800cfdc:	e9cd 6503 	strd	r6, r5, [sp, #12]
 800cfe0:	9505      	str	r5, [sp, #20]
 800cfe2:	f7fc f937 	bl	8009254 <acc_sensor_protocol_r2_prepare_load>
 800cfe6:	2800      	cmp	r0, #0
 800cfe8:	f000 80af 	beq.w	800d14a <acc_cpd_rx_fine_dip_calibration+0x192>
 800cfec:	9b05      	ldr	r3, [sp, #20]
 800cfee:	ee08 aa10 	vmov	s16, sl
 800cff2:	ee08 ba90 	vmov	s17, fp
 800cff6:	46cb      	mov	fp, r9
 800cff8:	f5c5 68d5 	rsb	r8, r5, #1704	; 0x6a8
 800cffc:	f108 0806 	add.w	r8, r8, #6
 800d000:	4598      	cmp	r8, r3
 800d002:	bf28      	it	cs
 800d004:	4698      	movcs	r8, r3
 800d006:	9e04      	ldr	r6, [sp, #16]
 800d008:	f001 fa6e 	bl	800e4e8 <acc_image_a111_r2c_rx_fine_dip_calibration_get>
 800d00c:	ea4f 0955 	mov.w	r9, r5, lsr #1
 800d010:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800d014:	4631      	mov	r1, r6
 800d016:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 800d01a:	f001 fa4f 	bl	800e4bc <acc_confprogram_copy>
 800d01e:	f001 fa67 	bl	800e4f0 <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800d022:	6862      	ldr	r2, [r4, #4]
 800d024:	9201      	str	r2, [sp, #4]
 800d026:	b2af      	uxth	r7, r5
 800d028:	fa1f fa88 	uxth.w	sl, r8
 800d02c:	221b      	movs	r2, #27
 800d02e:	4603      	mov	r3, r0
 800d030:	4639      	mov	r1, r7
 800d032:	9200      	str	r2, [sp, #0]
 800d034:	4630      	mov	r0, r6
 800d036:	4652      	mov	r2, sl
 800d038:	f001 f952 	bl	800e2e0 <acc_confprogram_patch_offset>
 800d03c:	f001 fa58 	bl	800e4f0 <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800d040:	68a2      	ldr	r2, [r4, #8]
 800d042:	9201      	str	r2, [sp, #4]
 800d044:	2219      	movs	r2, #25
 800d046:	4603      	mov	r3, r0
 800d048:	4639      	mov	r1, r7
 800d04a:	9200      	str	r2, [sp, #0]
 800d04c:	4630      	mov	r0, r6
 800d04e:	4652      	mov	r2, sl
 800d050:	f001 f946 	bl	800e2e0 <acc_confprogram_patch_offset>
 800d054:	f001 fa4c 	bl	800e4f0 <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800d058:	68e2      	ldr	r2, [r4, #12]
 800d05a:	9201      	str	r2, [sp, #4]
 800d05c:	f04f 0c1a 	mov.w	ip, #26
 800d060:	4603      	mov	r3, r0
 800d062:	4652      	mov	r2, sl
 800d064:	4639      	mov	r1, r7
 800d066:	f8cd c000 	str.w	ip, [sp]
 800d06a:	4630      	mov	r0, r6
 800d06c:	f001 f938 	bl	800e2e0 <acc_confprogram_patch_offset>
 800d070:	f001 fa3e 	bl	800e4f0 <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800d074:	8a22      	ldrh	r2, [r4, #16]
 800d076:	9201      	str	r2, [sp, #4]
 800d078:	f04f 0c17 	mov.w	ip, #23
 800d07c:	4603      	mov	r3, r0
 800d07e:	4652      	mov	r2, sl
 800d080:	4639      	mov	r1, r7
 800d082:	f8cd c000 	str.w	ip, [sp]
 800d086:	4630      	mov	r0, r6
 800d088:	f001 f92a 	bl	800e2e0 <acc_confprogram_patch_offset>
 800d08c:	f001 fa30 	bl	800e4f0 <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800d090:	69e2      	ldr	r2, [r4, #28]
 800d092:	9201      	str	r2, [sp, #4]
 800d094:	f04f 0c0d 	mov.w	ip, #13
 800d098:	4603      	mov	r3, r0
 800d09a:	4652      	mov	r2, sl
 800d09c:	4639      	mov	r1, r7
 800d09e:	f8cd c000 	str.w	ip, [sp]
 800d0a2:	4630      	mov	r0, r6
 800d0a4:	f001 f91c 	bl	800e2e0 <acc_confprogram_patch_offset>
 800d0a8:	f001 fa22 	bl	800e4f0 <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800d0ac:	6a22      	ldr	r2, [r4, #32]
 800d0ae:	9201      	str	r2, [sp, #4]
 800d0b0:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	4652      	mov	r2, sl
 800d0b8:	4639      	mov	r1, r7
 800d0ba:	f8cd c000 	str.w	ip, [sp]
 800d0be:	4630      	mov	r0, r6
 800d0c0:	f001 f90e 	bl	800e2e0 <acc_confprogram_patch_offset>
 800d0c4:	f001 fa14 	bl	800e4f0 <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800d0c8:	69a2      	ldr	r2, [r4, #24]
 800d0ca:	9201      	str	r2, [sp, #4]
 800d0cc:	f04f 0c0f 	mov.w	ip, #15
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	4652      	mov	r2, sl
 800d0d4:	4639      	mov	r1, r7
 800d0d6:	f8cd c000 	str.w	ip, [sp]
 800d0da:	4630      	mov	r0, r6
 800d0dc:	f001 f900 	bl	800e2e0 <acc_confprogram_patch_offset>
 800d0e0:	f001 fa06 	bl	800e4f0 <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800d0e4:	6962      	ldr	r2, [r4, #20]
 800d0e6:	9201      	str	r2, [sp, #4]
 800d0e8:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	4652      	mov	r2, sl
 800d0f0:	4639      	mov	r1, r7
 800d0f2:	4630      	mov	r0, r6
 800d0f4:	f8cd c000 	str.w	ip, [sp]
 800d0f8:	f001 f8f2 	bl	800e2e0 <acc_confprogram_patch_offset>
 800d0fc:	4643      	mov	r3, r8
 800d0fe:	465a      	mov	r2, fp
 800d100:	6820      	ldr	r0, [r4, #0]
 800d102:	fa1f f189 	uxth.w	r1, r9
 800d106:	f7fb fdb5 	bl	8008c74 <acc_sensor_r2_load_confmem>
 800d10a:	9b05      	ldr	r3, [sp, #20]
 800d10c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d110:	441d      	add	r5, r3
 800d112:	4295      	cmp	r5, r2
 800d114:	f67f af70 	bls.w	800cff8 <acc_cpd_rx_fine_dip_calibration+0x40>
 800d118:	ee18 0a10 	vmov	r0, s16
 800d11c:	2119      	movs	r1, #25
 800d11e:	f7fc f8fd 	bl	800931c <acc_sensor_protocol_r2_run_program>
 800d122:	ee18 aa10 	vmov	sl, s16
 800d126:	4606      	mov	r6, r0
 800d128:	b1d8      	cbz	r0, 800d162 <acc_cpd_rx_fine_dip_calibration+0x1aa>
 800d12a:	ee18 0a10 	vmov	r0, s16
 800d12e:	2300      	movs	r3, #0
 800d130:	2208      	movs	r2, #8
 800d132:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800d136:	f7fc fa75 	bl	8009624 <acc_sensor_protocol_r2_wait_for_specific_event>
 800d13a:	b9e8      	cbnz	r0, 800d178 <acc_cpd_rx_fine_dip_calibration+0x1c0>
 800d13c:	2600      	movs	r6, #0
 800d13e:	4630      	mov	r0, r6
 800d140:	b007      	add	sp, #28
 800d142:	ecbd 8b02 	vpop	{d8}
 800d146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d14a:	4b2a      	ldr	r3, [pc, #168]	; (800d1f4 <acc_cpd_rx_fine_dip_calibration+0x23c>)
 800d14c:	4a2a      	ldr	r2, [pc, #168]	; (800d1f8 <acc_cpd_rx_fine_dip_calibration+0x240>)
 800d14e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d150:	492a      	ldr	r1, [pc, #168]	; (800d1fc <acc_cpd_rx_fine_dip_calibration+0x244>)
 800d152:	4606      	mov	r6, r0
 800d154:	4798      	blx	r3
 800d156:	4630      	mov	r0, r6
 800d158:	b007      	add	sp, #28
 800d15a:	ecbd 8b02 	vpop	{d8}
 800d15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d162:	4b24      	ldr	r3, [pc, #144]	; (800d1f4 <acc_cpd_rx_fine_dip_calibration+0x23c>)
 800d164:	4a26      	ldr	r2, [pc, #152]	; (800d200 <acc_cpd_rx_fine_dip_calibration+0x248>)
 800d166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d168:	4924      	ldr	r1, [pc, #144]	; (800d1fc <acc_cpd_rx_fine_dip_calibration+0x244>)
 800d16a:	4798      	blx	r3
 800d16c:	4630      	mov	r0, r6
 800d16e:	b007      	add	sp, #28
 800d170:	ecbd 8b02 	vpop	{d8}
 800d174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d178:	ee18 0a90 	vmov	r0, s17
 800d17c:	2119      	movs	r1, #25
 800d17e:	f7fb fdb1 	bl	8008ce4 <acc_sensor_r2_buffer_processed_verify_size>
 800d182:	4606      	mov	r6, r0
 800d184:	b928      	cbnz	r0, 800d192 <acc_cpd_rx_fine_dip_calibration+0x1da>
 800d186:	4b1b      	ldr	r3, [pc, #108]	; (800d1f4 <acc_cpd_rx_fine_dip_calibration+0x23c>)
 800d188:	4a1e      	ldr	r2, [pc, #120]	; (800d204 <acc_cpd_rx_fine_dip_calibration+0x24c>)
 800d18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d18c:	491b      	ldr	r1, [pc, #108]	; (800d1fc <acc_cpd_rx_fine_dip_calibration+0x244>)
 800d18e:	4798      	blx	r3
 800d190:	e7e1      	b.n	800d156 <acc_cpd_rx_fine_dip_calibration+0x19e>
 800d192:	4659      	mov	r1, fp
 800d194:	2319      	movs	r3, #25
 800d196:	2200      	movs	r2, #0
 800d198:	ee18 0a10 	vmov	r0, s16
 800d19c:	f7fb fdaa 	bl	8008cf4 <acc_sensor_r2_buffer_processed_read>
 800d1a0:	2319      	movs	r3, #25
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	ee18 1a10 	vmov	r1, s16
 800d1aa:	200a      	movs	r0, #10
 800d1ac:	f7fc fdae 	bl	8009d0c <acc_probes_execute_uint16>
 800d1b0:	9b03      	ldr	r3, [sp, #12]
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800d1b8:	6804      	ldr	r4, [r0, #0]
 800d1ba:	6841      	ldr	r1, [r0, #4]
 800d1bc:	6882      	ldr	r2, [r0, #8]
 800d1be:	68c5      	ldr	r5, [r0, #12]
 800d1c0:	60dd      	str	r5, [r3, #12]
 800d1c2:	3010      	adds	r0, #16
 800d1c4:	42b0      	cmp	r0, r6
 800d1c6:	601c      	str	r4, [r3, #0]
 800d1c8:	6059      	str	r1, [r3, #4]
 800d1ca:	609a      	str	r2, [r3, #8]
 800d1cc:	f103 0310 	add.w	r3, r3, #16
 800d1d0:	d1f2      	bne.n	800d1b8 <acc_cpd_rx_fine_dip_calibration+0x200>
 800d1d2:	8802      	ldrh	r2, [r0, #0]
 800d1d4:	801a      	strh	r2, [r3, #0]
 800d1d6:	4650      	mov	r0, sl
 800d1d8:	f7fc f92c 	bl	8009434 <acc_sensor_protocol_r2_ack_event>
 800d1dc:	4606      	mov	r6, r0
 800d1de:	2800      	cmp	r0, #0
 800d1e0:	d0ac      	beq.n	800d13c <acc_cpd_rx_fine_dip_calibration+0x184>
 800d1e2:	4909      	ldr	r1, [pc, #36]	; (800d208 <acc_cpd_rx_fine_dip_calibration+0x250>)
 800d1e4:	4809      	ldr	r0, [pc, #36]	; (800d20c <acc_cpd_rx_fine_dip_calibration+0x254>)
 800d1e6:	f7fc fc99 	bl	8009b1c <acc_diagnostic_log_array>
 800d1ea:	9803      	ldr	r0, [sp, #12]
 800d1ec:	2119      	movs	r1, #25
 800d1ee:	f7fc fca5 	bl	8009b3c <acc_diagnostic_log_data_u16>
 800d1f2:	e7b0      	b.n	800d156 <acc_cpd_rx_fine_dip_calibration+0x19e>
 800d1f4:	2000082c 	.word	0x2000082c
 800d1f8:	08013960 	.word	0x08013960
 800d1fc:	08013988 	.word	0x08013988
 800d200:	080139a4 	.word	0x080139a4
 800d204:	08013034 	.word	0x08013034
 800d208:	080131cc 	.word	0x080131cc
 800d20c:	080139d8 	.word	0x080139d8

0800d210 <acc_cpd_sweep_check_voffset_vslope>:
 800d210:	8802      	ldrh	r2, [r0, #0]
 800d212:	eddf 4a2e 	vldr	s9, [pc, #184]	; 800d2cc <acc_cpd_sweep_check_voffset_vslope+0xbc>
 800d216:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800d2d0 <acc_cpd_sweep_check_voffset_vslope+0xc0>
 800d21a:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800d2d4 <acc_cpd_sweep_check_voffset_vslope+0xc4>
 800d21e:	ee07 2a90 	vmov	s15, r2
 800d222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d226:	b410      	push	{r4}
 800d228:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800d22c:	4c2a      	ldr	r4, [pc, #168]	; (800d2d8 <acc_cpd_sweep_check_voffset_vslope+0xc8>)
 800d22e:	8842      	ldrh	r2, [r0, #2]
 800d230:	f934 1011 	ldrsh.w	r1, [r4, r1, lsl #1]
 800d234:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800d238:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800d23c:	ee07 1a10 	vmov	s14, r1
 800d240:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d244:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d248:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d24c:	b083      	sub	sp, #12
 800d24e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d252:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d256:	edcd 7a01 	vstr	s15, [sp, #4]
 800d25a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800d25e:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 800d262:	f2a0 24ee 	subw	r4, r0, #750	; 0x2ee
 800d266:	f5b4 7f06 	cmp.w	r4, #536	; 0x218
 800d26a:	d224      	bcs.n	800d2b6 <acc_cpd_sweep_check_voffset_vslope+0xa6>
 800d26c:	f5a0 7043 	sub.w	r0, r0, #780	; 0x30c
 800d270:	f5b0 7fe6 	cmp.w	r0, #460	; 0x1cc
 800d274:	d924      	bls.n	800d2c0 <acc_cpd_sweep_check_voffset_vslope+0xb0>
 800d276:	ee07 2a90 	vmov	s15, r2
 800d27a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d27e:	ee07 1a90 	vmov	s15, r1
 800d282:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d286:	ee67 7a24 	vmul.f32	s15, s14, s9
 800d28a:	3364      	adds	r3, #100	; 0x64
 800d28c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800d290:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d294:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d298:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d29c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d2a0:	ee17 2a90 	vmov	r2, s15
 800d2a4:	b210      	sxth	r0, r2
 800d2a6:	4298      	cmp	r0, r3
 800d2a8:	bfcc      	ite	gt
 800d2aa:	2000      	movgt	r0, #0
 800d2ac:	2001      	movle	r0, #1
 800d2ae:	b003      	add	sp, #12
 800d2b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2b4:	4770      	bx	lr
 800d2b6:	2000      	movs	r0, #0
 800d2b8:	b003      	add	sp, #12
 800d2ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2be:	4770      	bx	lr
 800d2c0:	2001      	movs	r0, #1
 800d2c2:	b003      	add	sp, #12
 800d2c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2c8:	4770      	bx	lr
 800d2ca:	bf00      	nop
 800d2cc:	37800000 	.word	0x37800000
 800d2d0:	3f99999a 	.word	0x3f99999a
 800d2d4:	447a0000 	.word	0x447a0000
 800d2d8:	08017234 	.word	0x08017234

0800d2dc <acc_cpd_sweep_check_count_bad_sweeps>:
 800d2dc:	b138      	cbz	r0, 800d2ee <acc_cpd_sweep_check_count_bad_sweeps+0x12>
 800d2de:	2200      	movs	r2, #0
 800d2e0:	1e43      	subs	r3, r0, #1
 800d2e2:	4018      	ands	r0, r3
 800d2e4:	f102 0201 	add.w	r2, r2, #1
 800d2e8:	d1fa      	bne.n	800d2e0 <acc_cpd_sweep_check_count_bad_sweeps+0x4>
 800d2ea:	4610      	mov	r0, r2
 800d2ec:	4770      	bx	lr
 800d2ee:	4602      	mov	r2, r0
 800d2f0:	4610      	mov	r0, r2
 800d2f2:	4770      	bx	lr

0800d2f4 <acc_radar_engine_check_asic_id>:
 800d2f4:	6800      	ldr	r0, [r0, #0]
 800d2f6:	2100      	movs	r1, #0
 800d2f8:	f7fc ba86 	b.w	8009808 <acc_sensor_protocol_r2_check_asic_id>

0800d2fc <acc_radar_engine_wait_for_radar_data>:
 800d2fc:	6800      	ldr	r0, [r0, #0]
 800d2fe:	f7fc b9f1 	b.w	80096e4 <acc_sensor_protocol_r2_wait_for_radar_data>
 800d302:	bf00      	nop

0800d304 <acc_radar_engine_measure>:
 800d304:	6800      	ldr	r0, [r0, #0]
 800d306:	f7fc b895 	b.w	8009434 <acc_sensor_protocol_r2_ack_event>
 800d30a:	bf00      	nop

0800d30c <acc_radar_engine_wait_for_hibernate_ready>:
 800d30c:	6800      	ldr	r0, [r0, #0]
 800d30e:	f7fc b9b3 	b.w	8009678 <acc_sensor_protocol_r2_wait_for_hibernate_ready>
 800d312:	bf00      	nop

0800d314 <acc_radar_engine_acquire_adc_data>:
 800d314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d318:	ed2d 8b02 	vpush	{d8}
 800d31c:	2600      	movs	r6, #0
 800d31e:	6016      	str	r6, [r2, #0]
 800d320:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
 800d324:	ed9f 8a45 	vldr	s16, [pc, #276]	; 800d43c <acc_radar_engine_acquire_adc_data+0x128>
 800d328:	7bc3      	ldrb	r3, [r0, #15]
 800d32a:	f890 800e 	ldrb.w	r8, [r0, #14]
 800d32e:	f8d0 b010 	ldr.w	fp, [r0, #16]
 800d332:	7316      	strb	r6, [r2, #12]
 800d334:	b089      	sub	sp, #36	; 0x24
 800d336:	460f      	mov	r7, r1
 800d338:	7116      	strb	r6, [r2, #4]
 800d33a:	f88d 600e 	strb.w	r6, [sp, #14]
 800d33e:	f88d 600f 	strb.w	r6, [sp, #15]
 800d342:	9301      	str	r3, [sp, #4]
 800d344:	ed82 8a02 	vstr	s16, [r2, #8]
 800d348:	f1ba 0f00 	cmp.w	sl, #0
 800d34c:	d05b      	beq.n	800d406 <acc_radar_engine_acquire_adc_data+0xf2>
 800d34e:	4647      	mov	r7, r8
 800d350:	4614      	mov	r4, r2
 800d352:	4605      	mov	r5, r0
 800d354:	4688      	mov	r8, r1
 800d356:	b927      	cbnz	r7, 800d362 <acc_radar_engine_acquire_adc_data+0x4e>
 800d358:	6828      	ldr	r0, [r5, #0]
 800d35a:	f7fc f86b 	bl	8009434 <acc_sensor_protocol_r2_ack_event>
 800d35e:	2800      	cmp	r0, #0
 800d360:	d05e      	beq.n	800d420 <acc_radar_engine_acquire_adc_data+0x10c>
 800d362:	6828      	ldr	r0, [r5, #0]
 800d364:	f10d 020e 	add.w	r2, sp, #14
 800d368:	4659      	mov	r1, fp
 800d36a:	f7fc f9bb 	bl	80096e4 <acc_sensor_protocol_r2_wait_for_radar_data>
 800d36e:	2800      	cmp	r0, #0
 800d370:	d056      	beq.n	800d420 <acc_radar_engine_acquire_adc_data+0x10c>
 800d372:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800d376:	b903      	cbnz	r3, 800d37a <acc_radar_engine_acquire_adc_data+0x66>
 800d378:	78a3      	ldrb	r3, [r4, #2]
 800d37a:	69aa      	ldr	r2, [r5, #24]
 800d37c:	70a3      	strb	r3, [r4, #2]
 800d37e:	4641      	mov	r1, r8
 800d380:	6953      	ldr	r3, [r2, #20]
 800d382:	4628      	mov	r0, r5
 800d384:	f10d 020f 	add.w	r2, sp, #15
 800d388:	4798      	blx	r3
 800d38a:	69aa      	ldr	r2, [r5, #24]
 800d38c:	9004      	str	r0, [sp, #16]
 800d38e:	2300      	movs	r3, #0
 800d390:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800d394:	f88d 3014 	strb.w	r3, [sp, #20]
 800d398:	f88d 301c 	strb.w	r3, [sp, #28]
 800d39c:	ed8d 8a06 	vstr	s16, [sp, #24]
 800d3a0:	ab05      	add	r3, sp, #20
 800d3a2:	aa04      	add	r2, sp, #16
 800d3a4:	4641      	mov	r1, r8
 800d3a6:	4628      	mov	r0, r5
 800d3a8:	47c8      	blx	r9
 800d3aa:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800d3ae:	b903      	cbnz	r3, 800d3b2 <acc_radar_engine_acquire_adc_data+0x9e>
 800d3b0:	7b23      	ldrb	r3, [r4, #12]
 800d3b2:	f89d 9014 	ldrb.w	r9, [sp, #20]
 800d3b6:	7323      	strb	r3, [r4, #12]
 800d3b8:	f1b9 0f00 	cmp.w	r9, #0
 800d3bc:	d129      	bne.n	800d412 <acc_radar_engine_acquire_adc_data+0xfe>
 800d3be:	7923      	ldrb	r3, [r4, #4]
 800d3c0:	edd4 0a02 	vldr	s1, [r4, #8]
 800d3c4:	ed9d 0a06 	vldr	s0, [sp, #24]
 800d3c8:	7123      	strb	r3, [r4, #4]
 800d3ca:	f004 f9b1 	bl	8011730 <fmaxf>
 800d3ce:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800d3d2:	ed84 0a02 	vstr	s0, [r4, #8]
 800d3d6:	b902      	cbnz	r2, 800d3da <acc_radar_engine_acquire_adc_data+0xc6>
 800d3d8:	78e2      	ldrb	r2, [r4, #3]
 800d3da:	8821      	ldrh	r1, [r4, #0]
 800d3dc:	9b04      	ldr	r3, [sp, #16]
 800d3de:	70e2      	strb	r2, [r4, #3]
 800d3e0:	69aa      	ldr	r2, [r5, #24]
 800d3e2:	440b      	add	r3, r1
 800d3e4:	8023      	strh	r3, [r4, #0]
 800d3e6:	4649      	mov	r1, r9
 800d3e8:	69d3      	ldr	r3, [r2, #28]
 800d3ea:	4628      	mov	r0, r5
 800d3ec:	4798      	blx	r3
 800d3ee:	9b01      	ldr	r3, [sp, #4]
 800d3f0:	b11b      	cbz	r3, 800d3fa <acc_radar_engine_acquire_adc_data+0xe6>
 800d3f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d3f6:	42b3      	cmp	r3, r6
 800d3f8:	d018      	beq.n	800d42c <acc_radar_engine_acquire_adc_data+0x118>
 800d3fa:	b967      	cbnz	r7, 800d416 <acc_radar_engine_acquire_adc_data+0x102>
 800d3fc:	3601      	adds	r6, #1
 800d3fe:	b2b3      	uxth	r3, r6
 800d400:	4553      	cmp	r3, sl
 800d402:	d3a8      	bcc.n	800d356 <acc_radar_engine_acquire_adc_data+0x42>
 800d404:	4647      	mov	r7, r8
 800d406:	6838      	ldr	r0, [r7, #0]
 800d408:	b009      	add	sp, #36	; 0x24
 800d40a:	ecbd 8b02 	vpop	{d8}
 800d40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d412:	464b      	mov	r3, r9
 800d414:	e7d4      	b.n	800d3c0 <acc_radar_engine_acquire_adc_data+0xac>
 800d416:	6828      	ldr	r0, [r5, #0]
 800d418:	f7fc f80c 	bl	8009434 <acc_sensor_protocol_r2_ack_event>
 800d41c:	2800      	cmp	r0, #0
 800d41e:	d1ed      	bne.n	800d3fc <acc_radar_engine_acquire_adc_data+0xe8>
 800d420:	2000      	movs	r0, #0
 800d422:	b009      	add	sp, #36	; 0x24
 800d424:	ecbd 8b02 	vpop	{d8}
 800d428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d42c:	f8d8 0000 	ldr.w	r0, [r8]
 800d430:	b009      	add	sp, #36	; 0x24
 800d432:	ecbd 8b02 	vpop	{d8}
 800d436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d43a:	bf00      	nop
 800d43c:	ff800000 	.word	0xff800000

0800d440 <acc_sensor_diagnostics_r2_sensor_status>:
 800d440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d444:	b094      	sub	sp, #80	; 0x50
 800d446:	4604      	mov	r4, r0
 800d448:	f7fa f914 	bl	8007674 <acc_rss_integration_log_level>
 800d44c:	2801      	cmp	r0, #1
 800d44e:	d905      	bls.n	800d45c <acc_sensor_diagnostics_r2_sensor_status+0x1c>
 800d450:	4b9c      	ldr	r3, [pc, #624]	; (800d6c4 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800d452:	4a9d      	ldr	r2, [pc, #628]	; (800d6c8 <acc_sensor_diagnostics_r2_sensor_status+0x288>)
 800d454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d456:	499d      	ldr	r1, [pc, #628]	; (800d6cc <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800d458:	2002      	movs	r0, #2
 800d45a:	4798      	blx	r3
 800d45c:	2201      	movs	r2, #1
 800d45e:	21b2      	movs	r1, #178	; 0xb2
 800d460:	4620      	mov	r0, r4
 800d462:	f7fc fcaf 	bl	8009dc4 <acc_sensor_reg_write>
 800d466:	2300      	movs	r3, #0
 800d468:	f8df a258 	ldr.w	sl, [pc, #600]	; 800d6c4 <acc_sensor_diagnostics_r2_sensor_status+0x284>
 800d46c:	f8df 9288 	ldr.w	r9, [pc, #648]	; 800d6f8 <acc_sensor_diagnostics_r2_sensor_status+0x2b8>
 800d470:	4f96      	ldr	r7, [pc, #600]	; (800d6cc <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800d472:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 800d476:	2564      	movs	r5, #100	; 0x64
 800d478:	e013      	b.n	800d4a2 <acc_sensor_diagnostics_r2_sensor_status+0x62>
 800d47a:	f7fa f8fb 	bl	8007674 <acc_rss_integration_log_level>
 800d47e:	2801      	cmp	r0, #1
 800d480:	4623      	mov	r3, r4
 800d482:	464a      	mov	r2, r9
 800d484:	4639      	mov	r1, r7
 800d486:	f04f 0002 	mov.w	r0, #2
 800d48a:	d907      	bls.n	800d49c <acc_sensor_diagnostics_r2_sensor_status+0x5c>
 800d48c:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 800d490:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d494:	9600      	str	r6, [sp, #0]
 800d496:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
 800d49a:	47b0      	blx	r6
 800d49c:	3d01      	subs	r5, #1
 800d49e:	b2ad      	uxth	r5, r5
 800d4a0:	b1c5      	cbz	r5, 800d4d4 <acc_sensor_diagnostics_r2_sensor_status+0x94>
 800d4a2:	aa0c      	add	r2, sp, #48	; 0x30
 800d4a4:	2111      	movs	r1, #17
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	f7fc fc76 	bl	8009d98 <acc_sensor_reg_read>
 800d4ac:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800d4b0:	055b      	lsls	r3, r3, #21
 800d4b2:	d4e2      	bmi.n	800d47a <acc_sensor_diagnostics_r2_sensor_status+0x3a>
 800d4b4:	f7fa f8de 	bl	8007674 <acc_rss_integration_log_level>
 800d4b8:	2801      	cmp	r0, #1
 800d4ba:	d90b      	bls.n	800d4d4 <acc_sensor_diagnostics_r2_sensor_status+0x94>
 800d4bc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800d4c0:	4980      	ldr	r1, [pc, #512]	; (800d6c4 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800d4c2:	4a83      	ldr	r2, [pc, #524]	; (800d6d0 <acc_sensor_diagnostics_r2_sensor_status+0x290>)
 800d4c4:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800d4c6:	4981      	ldr	r1, [pc, #516]	; (800d6cc <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800d4c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d4cc:	9300      	str	r3, [sp, #0]
 800d4ce:	2002      	movs	r0, #2
 800d4d0:	4623      	mov	r3, r4
 800d4d2:	47a8      	blx	r5
 800d4d4:	2600      	movs	r6, #0
 800d4d6:	4631      	mov	r1, r6
 800d4d8:	aa09      	add	r2, sp, #36	; 0x24
 800d4da:	4620      	mov	r0, r4
 800d4dc:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800d4e0:	4d7c      	ldr	r5, [pc, #496]	; (800d6d4 <acc_sensor_diagnostics_r2_sensor_status+0x294>)
 800d4e2:	f7fc fc59 	bl	8009d98 <acc_sensor_reg_read>
 800d4e6:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800d4ea:	212a      	movs	r1, #42	; 0x2a
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 800d4f2:	f7fc fc51 	bl	8009d98 <acc_sensor_reg_read>
 800d4f6:	2128      	movs	r1, #40	; 0x28
 800d4f8:	aa0a      	add	r2, sp, #40	; 0x28
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 800d500:	f105 071e 	add.w	r7, r5, #30
 800d504:	f7fc fc48 	bl	8009d98 <acc_sensor_reg_read>
 800d508:	ae0c      	add	r6, sp, #48	; 0x30
 800d50a:	2163      	movs	r1, #99	; 0x63
 800d50c:	e001      	b.n	800d512 <acc_sensor_diagnostics_r2_sensor_status+0xd2>
 800d50e:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 800d512:	4632      	mov	r2, r6
 800d514:	4620      	mov	r0, r4
 800d516:	f7fc fc3f 	bl	8009d98 <acc_sensor_reg_read>
 800d51a:	42af      	cmp	r7, r5
 800d51c:	f106 0602 	add.w	r6, r6, #2
 800d520:	d1f5      	bne.n	800d50e <acc_sensor_diagnostics_r2_sensor_status+0xce>
 800d522:	f7fa f8a7 	bl	8007674 <acc_rss_integration_log_level>
 800d526:	2801      	cmp	r0, #1
 800d528:	d91e      	bls.n	800d568 <acc_sensor_diagnostics_r2_sensor_status+0x128>
 800d52a:	4d66      	ldr	r5, [pc, #408]	; (800d6c4 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800d52c:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
 800d530:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800d534:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800d536:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800d53a:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800d53e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800d542:	9107      	str	r1, [sp, #28]
 800d544:	9206      	str	r2, [sp, #24]
 800d546:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800d54a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800d54e:	9305      	str	r3, [sp, #20]
 800d550:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800d554:	9300      	str	r3, [sp, #0]
 800d556:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800d55a:	e9cd 0603 	strd	r0, r6, [sp, #12]
 800d55e:	4a5e      	ldr	r2, [pc, #376]	; (800d6d8 <acc_sensor_diagnostics_r2_sensor_status+0x298>)
 800d560:	495a      	ldr	r1, [pc, #360]	; (800d6cc <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800d562:	4623      	mov	r3, r4
 800d564:	2002      	movs	r0, #2
 800d566:	47a8      	blx	r5
 800d568:	f7fa f884 	bl	8007674 <acc_rss_integration_log_level>
 800d56c:	2801      	cmp	r0, #1
 800d56e:	d91e      	bls.n	800d5ae <acc_sensor_diagnostics_r2_sensor_status+0x16e>
 800d570:	4d54      	ldr	r5, [pc, #336]	; (800d6c4 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800d572:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
 800d576:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 800d57a:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800d57c:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800d580:	f8bd 0046 	ldrh.w	r0, [sp, #70]	; 0x46
 800d584:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 800d588:	9107      	str	r1, [sp, #28]
 800d58a:	9206      	str	r2, [sp, #24]
 800d58c:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 800d590:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800d594:	9305      	str	r3, [sp, #20]
 800d596:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800d59a:	9300      	str	r3, [sp, #0]
 800d59c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800d5a0:	e9cd 0603 	strd	r0, r6, [sp, #12]
 800d5a4:	4a4d      	ldr	r2, [pc, #308]	; (800d6dc <acc_sensor_diagnostics_r2_sensor_status+0x29c>)
 800d5a6:	4949      	ldr	r1, [pc, #292]	; (800d6cc <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800d5a8:	4623      	mov	r3, r4
 800d5aa:	2002      	movs	r0, #2
 800d5ac:	47a8      	blx	r5
 800d5ae:	aa0c      	add	r2, sp, #48	; 0x30
 800d5b0:	2168      	movs	r1, #104	; 0x68
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	f7fc fbf0 	bl	8009d98 <acc_sensor_reg_read>
 800d5b8:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800d5bc:	2167      	movs	r1, #103	; 0x67
 800d5be:	4620      	mov	r0, r4
 800d5c0:	f7fc fbea 	bl	8009d98 <acc_sensor_reg_read>
 800d5c4:	aa0d      	add	r2, sp, #52	; 0x34
 800d5c6:	2166      	movs	r1, #102	; 0x66
 800d5c8:	4620      	mov	r0, r4
 800d5ca:	f7fc fbe5 	bl	8009d98 <acc_sensor_reg_read>
 800d5ce:	f10d 0236 	add.w	r2, sp, #54	; 0x36
 800d5d2:	2165      	movs	r1, #101	; 0x65
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	f7fc fbdf 	bl	8009d98 <acc_sensor_reg_read>
 800d5da:	f7fa f84b 	bl	8007674 <acc_rss_integration_log_level>
 800d5de:	2801      	cmp	r0, #1
 800d5e0:	d912      	bls.n	800d608 <acc_sensor_diagnostics_r2_sensor_status+0x1c8>
 800d5e2:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800d5e6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800d5ea:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800d5ee:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800d5f2:	4d34      	ldr	r5, [pc, #208]	; (800d6c4 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800d5f4:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800d5f6:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800d5fa:	e9cd 3200 	strd	r3, r2, [sp]
 800d5fe:	4933      	ldr	r1, [pc, #204]	; (800d6cc <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800d600:	4a37      	ldr	r2, [pc, #220]	; (800d6e0 <acc_sensor_diagnostics_r2_sensor_status+0x2a0>)
 800d602:	4623      	mov	r3, r4
 800d604:	2002      	movs	r0, #2
 800d606:	47a8      	blx	r5
 800d608:	2500      	movs	r5, #0
 800d60a:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
 800d60e:	2153      	movs	r1, #83	; 0x53
 800d610:	4620      	mov	r0, r4
 800d612:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
 800d616:	f7fc fbbf 	bl	8009d98 <acc_sensor_reg_read>
 800d61a:	aa0c      	add	r2, sp, #48	; 0x30
 800d61c:	2140      	movs	r1, #64	; 0x40
 800d61e:	4620      	mov	r0, r4
 800d620:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800d624:	f7fc fbb8 	bl	8009d98 <acc_sensor_reg_read>
 800d628:	f7fa f824 	bl	8007674 <acc_rss_integration_log_level>
 800d62c:	2801      	cmp	r0, #1
 800d62e:	d909      	bls.n	800d644 <acc_sensor_diagnostics_r2_sensor_status+0x204>
 800d630:	4a24      	ldr	r2, [pc, #144]	; (800d6c4 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800d632:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800d636:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800d638:	4924      	ldr	r1, [pc, #144]	; (800d6cc <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800d63a:	9300      	str	r3, [sp, #0]
 800d63c:	4a29      	ldr	r2, [pc, #164]	; (800d6e4 <acc_sensor_diagnostics_r2_sensor_status+0x2a4>)
 800d63e:	4623      	mov	r3, r4
 800d640:	2002      	movs	r0, #2
 800d642:	47a8      	blx	r5
 800d644:	f7fa f816 	bl	8007674 <acc_rss_integration_log_level>
 800d648:	2801      	cmp	r0, #1
 800d64a:	d90e      	bls.n	800d66a <acc_sensor_diagnostics_r2_sensor_status+0x22a>
 800d64c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800d650:	491c      	ldr	r1, [pc, #112]	; (800d6c4 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800d652:	4a25      	ldr	r2, [pc, #148]	; (800d6e8 <acc_sensor_diagnostics_r2_sensor_status+0x2a8>)
 800d654:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800d656:	491d      	ldr	r1, [pc, #116]	; (800d6cc <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800d658:	f003 0040 	and.w	r0, r3, #64	; 0x40
 800d65c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d660:	e9cd 3000 	strd	r3, r0, [sp]
 800d664:	4623      	mov	r3, r4
 800d666:	2002      	movs	r0, #2
 800d668:	47a8      	blx	r5
 800d66a:	f7fa f803 	bl	8007674 <acc_rss_integration_log_level>
 800d66e:	2801      	cmp	r0, #1
 800d670:	d90e      	bls.n	800d690 <acc_sensor_diagnostics_r2_sensor_status+0x250>
 800d672:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800d676:	4913      	ldr	r1, [pc, #76]	; (800d6c4 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800d678:	4a1c      	ldr	r2, [pc, #112]	; (800d6ec <acc_sensor_diagnostics_r2_sensor_status+0x2ac>)
 800d67a:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800d67c:	4913      	ldr	r1, [pc, #76]	; (800d6cc <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800d67e:	f003 0010 	and.w	r0, r3, #16
 800d682:	f003 0320 	and.w	r3, r3, #32
 800d686:	e9cd 3000 	strd	r3, r0, [sp]
 800d68a:	4623      	mov	r3, r4
 800d68c:	2002      	movs	r0, #2
 800d68e:	47a8      	blx	r5
 800d690:	f7f9 fff0 	bl	8007674 <acc_rss_integration_log_level>
 800d694:	2801      	cmp	r0, #1
 800d696:	d90e      	bls.n	800d6b6 <acc_sensor_diagnostics_r2_sensor_status+0x276>
 800d698:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800d69c:	4909      	ldr	r1, [pc, #36]	; (800d6c4 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800d69e:	4a14      	ldr	r2, [pc, #80]	; (800d6f0 <acc_sensor_diagnostics_r2_sensor_status+0x2b0>)
 800d6a0:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800d6a2:	490a      	ldr	r1, [pc, #40]	; (800d6cc <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800d6a4:	f003 0004 	and.w	r0, r3, #4
 800d6a8:	f003 0308 	and.w	r3, r3, #8
 800d6ac:	e9cd 3000 	strd	r3, r0, [sp]
 800d6b0:	4623      	mov	r3, r4
 800d6b2:	2002      	movs	r0, #2
 800d6b4:	47a8      	blx	r5
 800d6b6:	4d0f      	ldr	r5, [pc, #60]	; (800d6f4 <acc_sensor_diagnostics_r2_sensor_status+0x2b4>)
 800d6b8:	ae0c      	add	r6, sp, #48	; 0x30
 800d6ba:	f105 071e 	add.w	r7, r5, #30
 800d6be:	21f0      	movs	r1, #240	; 0xf0
 800d6c0:	e01e      	b.n	800d700 <acc_sensor_diagnostics_r2_sensor_status+0x2c0>
 800d6c2:	bf00      	nop
 800d6c4:	2000082c 	.word	0x2000082c
 800d6c8:	080139e8 	.word	0x080139e8
 800d6cc:	08013a28 	.word	0x08013a28
 800d6d0:	08013a60 	.word	0x08013a60
 800d6d4:	08013d70 	.word	0x08013d70
 800d6d8:	08013a80 	.word	0x08013a80
 800d6dc:	08013ac8 	.word	0x08013ac8
 800d6e0:	08013b14 	.word	0x08013b14
 800d6e4:	08013b48 	.word	0x08013b48
 800d6e8:	08013b68 	.word	0x08013b68
 800d6ec:	08013b94 	.word	0x08013b94
 800d6f0:	08013bc8 	.word	0x08013bc8
 800d6f4:	08013d90 	.word	0x08013d90
 800d6f8:	08013a40 	.word	0x08013a40
 800d6fc:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 800d700:	4632      	mov	r2, r6
 800d702:	4620      	mov	r0, r4
 800d704:	f7fc fb48 	bl	8009d98 <acc_sensor_reg_read>
 800d708:	42bd      	cmp	r5, r7
 800d70a:	f106 0602 	add.w	r6, r6, #2
 800d70e:	d1f5      	bne.n	800d6fc <acc_sensor_diagnostics_r2_sensor_status+0x2bc>
 800d710:	f7f9 ffb0 	bl	8007674 <acc_rss_integration_log_level>
 800d714:	2801      	cmp	r0, #1
 800d716:	f240 80b6 	bls.w	800d886 <acc_sensor_diagnostics_r2_sensor_status+0x446>
 800d71a:	4a5c      	ldr	r2, [pc, #368]	; (800d88c <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800d71c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800d720:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800d722:	495b      	ldr	r1, [pc, #364]	; (800d890 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800d724:	9300      	str	r3, [sp, #0]
 800d726:	4a5b      	ldr	r2, [pc, #364]	; (800d894 <acc_sensor_diagnostics_r2_sensor_status+0x454>)
 800d728:	4623      	mov	r3, r4
 800d72a:	2002      	movs	r0, #2
 800d72c:	47a8      	blx	r5
 800d72e:	2501      	movs	r5, #1
 800d730:	f7f9 ffa0 	bl	8007674 <acc_rss_integration_log_level>
 800d734:	2801      	cmp	r0, #1
 800d736:	d90e      	bls.n	800d756 <acc_sensor_diagnostics_r2_sensor_status+0x316>
 800d738:	ab14      	add	r3, sp, #80	; 0x50
 800d73a:	eb03 0245 	add.w	r2, r3, r5, lsl #1
 800d73e:	4b53      	ldr	r3, [pc, #332]	; (800d88c <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800d740:	f832 2c20 	ldrh.w	r2, [r2, #-32]
 800d744:	9200      	str	r2, [sp, #0]
 800d746:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800d748:	4a53      	ldr	r2, [pc, #332]	; (800d898 <acc_sensor_diagnostics_r2_sensor_status+0x458>)
 800d74a:	4951      	ldr	r1, [pc, #324]	; (800d890 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800d74c:	3501      	adds	r5, #1
 800d74e:	4623      	mov	r3, r4
 800d750:	2002      	movs	r0, #2
 800d752:	b2ed      	uxtb	r5, r5
 800d754:	47b0      	blx	r6
 800d756:	f8df a134 	ldr.w	sl, [pc, #308]	; 800d88c <acc_sensor_diagnostics_r2_sensor_status+0x44c>
 800d75a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800d8b4 <acc_sensor_diagnostics_r2_sensor_status+0x474>
 800d75e:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800d890 <acc_sensor_diagnostics_r2_sensor_status+0x450>
 800d762:	2601      	movs	r6, #1
 800d764:	f7f9 ff86 	bl	8007674 <acc_rss_integration_log_level>
 800d768:	ab14      	add	r3, sp, #80	; 0x50
 800d76a:	eb03 0c45 	add.w	ip, r3, r5, lsl #1
 800d76e:	2801      	cmp	r0, #1
 800d770:	4667      	mov	r7, ip
 800d772:	4623      	mov	r3, r4
 800d774:	464a      	mov	r2, r9
 800d776:	4641      	mov	r1, r8
 800d778:	f04f 0002 	mov.w	r0, #2
 800d77c:	d909      	bls.n	800d792 <acc_sensor_diagnostics_r2_sensor_status+0x352>
 800d77e:	f837 7c20 	ldrh.w	r7, [r7, #-32]
 800d782:	f83c cc1e 	ldrh.w	ip, [ip, #-30]
 800d786:	9600      	str	r6, [sp, #0]
 800d788:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 800d78c:	f8da 7034 	ldr.w	r7, [sl, #52]	; 0x34
 800d790:	47b8      	blx	r7
 800d792:	3601      	adds	r6, #1
 800d794:	3502      	adds	r5, #2
 800d796:	2e08      	cmp	r6, #8
 800d798:	b2ed      	uxtb	r5, r5
 800d79a:	d1e3      	bne.n	800d764 <acc_sensor_diagnostics_r2_sensor_status+0x324>
 800d79c:	2500      	movs	r5, #0
 800d79e:	aa0b      	add	r2, sp, #44	; 0x2c
 800d7a0:	219d      	movs	r1, #157	; 0x9d
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 800d7a8:	f7fc faf6 	bl	8009d98 <acc_sensor_reg_read>
 800d7ac:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 800d7b0:	2199      	movs	r1, #153	; 0x99
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
 800d7b8:	f7fc faee 	bl	8009d98 <acc_sensor_reg_read>
 800d7bc:	aa0c      	add	r2, sp, #48	; 0x30
 800d7be:	2196      	movs	r1, #150	; 0x96
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800d7c6:	f7fc fae7 	bl	8009d98 <acc_sensor_reg_read>
 800d7ca:	462a      	mov	r2, r5
 800d7cc:	21b2      	movs	r1, #178	; 0xb2
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	f7fc faf8 	bl	8009dc4 <acc_sensor_reg_write>
 800d7d4:	f7f9 ff4e 	bl	8007674 <acc_rss_integration_log_level>
 800d7d8:	2801      	cmp	r0, #1
 800d7da:	d90f      	bls.n	800d7fc <acc_sensor_diagnostics_r2_sensor_status+0x3bc>
 800d7dc:	482b      	ldr	r0, [pc, #172]	; (800d88c <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800d7de:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800d7e2:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800d7e6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800d7ea:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800d7ec:	9300      	str	r3, [sp, #0]
 800d7ee:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800d7f2:	4623      	mov	r3, r4
 800d7f4:	4a29      	ldr	r2, [pc, #164]	; (800d89c <acc_sensor_diagnostics_r2_sensor_status+0x45c>)
 800d7f6:	4926      	ldr	r1, [pc, #152]	; (800d890 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800d7f8:	2002      	movs	r0, #2
 800d7fa:	47a8      	blx	r5
 800d7fc:	f7f9 ff3a 	bl	8007674 <acc_rss_integration_log_level>
 800d800:	2801      	cmp	r0, #1
 800d802:	d909      	bls.n	800d818 <acc_sensor_diagnostics_r2_sensor_status+0x3d8>
 800d804:	4a21      	ldr	r2, [pc, #132]	; (800d88c <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800d806:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 800d80a:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800d80c:	4920      	ldr	r1, [pc, #128]	; (800d890 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800d80e:	9300      	str	r3, [sp, #0]
 800d810:	4a23      	ldr	r2, [pc, #140]	; (800d8a0 <acc_sensor_diagnostics_r2_sensor_status+0x460>)
 800d812:	4623      	mov	r3, r4
 800d814:	2002      	movs	r0, #2
 800d816:	47a8      	blx	r5
 800d818:	f7f9 ff2c 	bl	8007674 <acc_rss_integration_log_level>
 800d81c:	2801      	cmp	r0, #1
 800d81e:	d909      	bls.n	800d834 <acc_sensor_diagnostics_r2_sensor_status+0x3f4>
 800d820:	4a1a      	ldr	r2, [pc, #104]	; (800d88c <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800d822:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800d826:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800d828:	4919      	ldr	r1, [pc, #100]	; (800d890 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800d82a:	9300      	str	r3, [sp, #0]
 800d82c:	4a1d      	ldr	r2, [pc, #116]	; (800d8a4 <acc_sensor_diagnostics_r2_sensor_status+0x464>)
 800d82e:	4623      	mov	r3, r4
 800d830:	2002      	movs	r0, #2
 800d832:	47a8      	blx	r5
 800d834:	f7f9 ff1e 	bl	8007674 <acc_rss_integration_log_level>
 800d838:	2801      	cmp	r0, #1
 800d83a:	d909      	bls.n	800d850 <acc_sensor_diagnostics_r2_sensor_status+0x410>
 800d83c:	4a13      	ldr	r2, [pc, #76]	; (800d88c <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800d83e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800d842:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800d844:	4912      	ldr	r1, [pc, #72]	; (800d890 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800d846:	9300      	str	r3, [sp, #0]
 800d848:	4a17      	ldr	r2, [pc, #92]	; (800d8a8 <acc_sensor_diagnostics_r2_sensor_status+0x468>)
 800d84a:	4623      	mov	r3, r4
 800d84c:	2002      	movs	r0, #2
 800d84e:	47a8      	blx	r5
 800d850:	f7f9 ff10 	bl	8007674 <acc_rss_integration_log_level>
 800d854:	2801      	cmp	r0, #1
 800d856:	d909      	bls.n	800d86c <acc_sensor_diagnostics_r2_sensor_status+0x42c>
 800d858:	4a0c      	ldr	r2, [pc, #48]	; (800d88c <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800d85a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800d85e:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800d860:	490b      	ldr	r1, [pc, #44]	; (800d890 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800d862:	9300      	str	r3, [sp, #0]
 800d864:	4a11      	ldr	r2, [pc, #68]	; (800d8ac <acc_sensor_diagnostics_r2_sensor_status+0x46c>)
 800d866:	4623      	mov	r3, r4
 800d868:	2002      	movs	r0, #2
 800d86a:	47a8      	blx	r5
 800d86c:	f7f9 ff02 	bl	8007674 <acc_rss_integration_log_level>
 800d870:	2801      	cmp	r0, #1
 800d872:	d905      	bls.n	800d880 <acc_sensor_diagnostics_r2_sensor_status+0x440>
 800d874:	4b05      	ldr	r3, [pc, #20]	; (800d88c <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800d876:	4a0e      	ldr	r2, [pc, #56]	; (800d8b0 <acc_sensor_diagnostics_r2_sensor_status+0x470>)
 800d878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d87a:	4905      	ldr	r1, [pc, #20]	; (800d890 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800d87c:	2002      	movs	r0, #2
 800d87e:	4798      	blx	r3
 800d880:	b014      	add	sp, #80	; 0x50
 800d882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d886:	2500      	movs	r5, #0
 800d888:	e752      	b.n	800d730 <acc_sensor_diagnostics_r2_sensor_status+0x2f0>
 800d88a:	bf00      	nop
 800d88c:	2000082c 	.word	0x2000082c
 800d890:	08013a28 	.word	0x08013a28
 800d894:	08013bf8 	.word	0x08013bf8
 800d898:	08013c20 	.word	0x08013c20
 800d89c:	08013c68 	.word	0x08013c68
 800d8a0:	08013cbc 	.word	0x08013cbc
 800d8a4:	08013ce0 	.word	0x08013ce0
 800d8a8:	08013cfc 	.word	0x08013cfc
 800d8ac:	08013d14 	.word	0x08013d14
 800d8b0:	08013d30 	.word	0x08013d30
 800d8b4:	08013c40 	.word	0x08013c40

0800d8b8 <acc_alg_basic_saturation_check_u16>:
 800d8b8:	eddf 6a17 	vldr	s13, [pc, #92]	; 800d918 <acc_alg_basic_saturation_check_u16+0x60>
 800d8bc:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800d91c <acc_alg_basic_saturation_check_u16+0x64>
 800d8c0:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800d8c4:	ee80 7a26 	vdiv.f32	s14, s0, s13
 800d8c8:	0849      	lsrs	r1, r1, #1
 800d8ca:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 800d8ce:	ee27 7a06 	vmul.f32	s14, s14, s12
 800d8d2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d8d6:	d01c      	beq.n	800d912 <acc_alg_basic_saturation_check_u16+0x5a>
 800d8d8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800d8dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8e0:	ee17 3a10 	vmov	r3, s14
 800d8e4:	b430      	push	{r4, r5}
 800d8e6:	b29d      	uxth	r5, r3
 800d8e8:	ee17 3a90 	vmov	r3, s15
 800d8ec:	b29c      	uxth	r4, r3
 800d8ee:	1e83      	subs	r3, r0, #2
 800d8f0:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800d8f4:	e003      	b.n	800d8fe <acc_alg_basic_saturation_check_u16+0x46>
 800d8f6:	42aa      	cmp	r2, r5
 800d8f8:	d905      	bls.n	800d906 <acc_alg_basic_saturation_check_u16+0x4e>
 800d8fa:	428b      	cmp	r3, r1
 800d8fc:	d006      	beq.n	800d90c <acc_alg_basic_saturation_check_u16+0x54>
 800d8fe:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800d902:	42a2      	cmp	r2, r4
 800d904:	d3f7      	bcc.n	800d8f6 <acc_alg_basic_saturation_check_u16+0x3e>
 800d906:	2001      	movs	r0, #1
 800d908:	bc30      	pop	{r4, r5}
 800d90a:	4770      	bx	lr
 800d90c:	2000      	movs	r0, #0
 800d90e:	bc30      	pop	{r4, r5}
 800d910:	4770      	bx	lr
 800d912:	4608      	mov	r0, r1
 800d914:	4770      	bx	lr
 800d916:	bf00      	nop
 800d918:	42c80000 	.word	0x42c80000
 800d91c:	477fff00 	.word	0x477fff00

0800d920 <acc_alg_basic_saturation_check_i16>:
 800d920:	eddf 6a17 	vldr	s13, [pc, #92]	; 800d980 <acc_alg_basic_saturation_check_i16+0x60>
 800d924:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800d984 <acc_alg_basic_saturation_check_i16+0x64>
 800d928:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800d988 <acc_alg_basic_saturation_check_i16+0x68>
 800d92c:	ee36 0ac0 	vsub.f32	s0, s13, s0
 800d930:	0849      	lsrs	r1, r1, #1
 800d932:	eec0 7a26 	vdiv.f32	s15, s0, s13
 800d936:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d93a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d93e:	d01c      	beq.n	800d97a <acc_alg_basic_saturation_check_i16+0x5a>
 800d940:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800d944:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d948:	ee17 3a10 	vmov	r3, s14
 800d94c:	b430      	push	{r4, r5}
 800d94e:	b21d      	sxth	r5, r3
 800d950:	ee17 3a90 	vmov	r3, s15
 800d954:	b21c      	sxth	r4, r3
 800d956:	1e83      	subs	r3, r0, #2
 800d958:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800d95c:	e003      	b.n	800d966 <acc_alg_basic_saturation_check_i16+0x46>
 800d95e:	42aa      	cmp	r2, r5
 800d960:	dd05      	ble.n	800d96e <acc_alg_basic_saturation_check_i16+0x4e>
 800d962:	428b      	cmp	r3, r1
 800d964:	d006      	beq.n	800d974 <acc_alg_basic_saturation_check_i16+0x54>
 800d966:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 800d96a:	42a2      	cmp	r2, r4
 800d96c:	dbf7      	blt.n	800d95e <acc_alg_basic_saturation_check_i16+0x3e>
 800d96e:	2001      	movs	r0, #1
 800d970:	bc30      	pop	{r4, r5}
 800d972:	4770      	bx	lr
 800d974:	2000      	movs	r0, #0
 800d976:	bc30      	pop	{r4, r5}
 800d978:	4770      	bx	lr
 800d97a:	4608      	mov	r0, r1
 800d97c:	4770      	bx	lr
 800d97e:	bf00      	nop
 800d980:	42c80000 	.word	0x42c80000
 800d984:	c7000000 	.word	0xc7000000
 800d988:	46fffe00 	.word	0x46fffe00

0800d98c <acc_alg_basic_subtract_mean_uint16>:
 800d98c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800d990:	b570      	push	{r4, r5, r6, lr}
 800d992:	d13c      	bne.n	800da0e <acc_alg_basic_subtract_mean_uint16+0x82>
 800d994:	2900      	cmp	r1, #0
 800d996:	d036      	beq.n	800da06 <acc_alg_basic_subtract_mean_uint16+0x7a>
 800d998:	eb00 0641 	add.w	r6, r0, r1, lsl #1
 800d99c:	4604      	mov	r4, r0
 800d99e:	2500      	movs	r5, #0
 800d9a0:	f834 2b02 	ldrh.w	r2, [r4], #2
 800d9a4:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 800d9a8:	42a6      	cmp	r6, r4
 800d9aa:	4415      	add	r5, r2
 800d9ac:	d1f8      	bne.n	800d9a0 <acc_alg_basic_subtract_mean_uint16+0x14>
 800d9ae:	2d00      	cmp	r5, #0
 800d9b0:	bfac      	ite	ge
 800d9b2:	2401      	movge	r4, #1
 800d9b4:	f04f 34ff 	movlt.w	r4, #4294967295
 800d9b8:	084a      	lsrs	r2, r1, #1
 800d9ba:	fb04 5202 	mla	r2, r4, r2, r5
 800d9be:	fb92 f5f1 	sdiv	r5, r2, r1
 800d9c2:	b22c      	sxth	r4, r5
 800d9c4:	2c00      	cmp	r4, #0
 800d9c6:	dd0e      	ble.n	800d9e6 <acc_alg_basic_subtract_mean_uint16+0x5a>
 800d9c8:	b2ad      	uxth	r5, r5
 800d9ca:	f830 2b02 	ldrh.w	r2, [r0], #2
 800d9ce:	42aa      	cmp	r2, r5
 800d9d0:	bf26      	itte	cs
 800d9d2:	1b52      	subcs	r2, r2, r5
 800d9d4:	b292      	uxthcs	r2, r2
 800d9d6:	2200      	movcc	r2, #0
 800d9d8:	4286      	cmp	r6, r0
 800d9da:	f820 2c02 	strh.w	r2, [r0, #-2]
 800d9de:	d1f4      	bne.n	800d9ca <acc_alg_basic_subtract_mean_uint16+0x3e>
 800d9e0:	b103      	cbz	r3, 800d9e4 <acc_alg_basic_subtract_mean_uint16+0x58>
 800d9e2:	801c      	strh	r4, [r3, #0]
 800d9e4:	bd70      	pop	{r4, r5, r6, pc}
 800d9e6:	f504 417f 	add.w	r1, r4, #65280	; 0xff00
 800d9ea:	31ff      	adds	r1, #255	; 0xff
 800d9ec:	f830 2b02 	ldrh.w	r2, [r0], #2
 800d9f0:	4291      	cmp	r1, r2
 800d9f2:	bfa6      	itte	ge
 800d9f4:	1b52      	subge	r2, r2, r5
 800d9f6:	b292      	uxthge	r2, r2
 800d9f8:	f64f 72ff 	movwlt	r2, #65535	; 0xffff
 800d9fc:	42b0      	cmp	r0, r6
 800d9fe:	f820 2c02 	strh.w	r2, [r0, #-2]
 800da02:	d1f3      	bne.n	800d9ec <acc_alg_basic_subtract_mean_uint16+0x60>
 800da04:	e7ec      	b.n	800d9e0 <acc_alg_basic_subtract_mean_uint16+0x54>
 800da06:	2b00      	cmp	r3, #0
 800da08:	d0ec      	beq.n	800d9e4 <acc_alg_basic_subtract_mean_uint16+0x58>
 800da0a:	8019      	strh	r1, [r3, #0]
 800da0c:	bd70      	pop	{r4, r5, r6, pc}
 800da0e:	4802      	ldr	r0, [pc, #8]	; (800da18 <acc_alg_basic_subtract_mean_uint16+0x8c>)
 800da10:	211b      	movs	r1, #27
 800da12:	f7fc f853 	bl	8009abc <acc_assert_fail>
 800da16:	bf00      	nop
 800da18:	08013db0 	.word	0x08013db0

0800da1c <acc_alg_basic_subtract_section_mean_q12_4>:
 800da1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da20:	2a00      	cmp	r2, #0
 800da22:	bf14      	ite	ne
 800da24:	4690      	movne	r8, r2
 800da26:	4688      	moveq	r8, r1
 800da28:	b1b9      	cbz	r1, 800da5a <acc_alg_basic_subtract_section_mean_q12_4+0x3e>
 800da2a:	460f      	mov	r7, r1
 800da2c:	4681      	mov	r9, r0
 800da2e:	469a      	mov	sl, r3
 800da30:	460d      	mov	r5, r1
 800da32:	4646      	mov	r6, r8
 800da34:	2400      	movs	r4, #0
 800da36:	19a3      	adds	r3, r4, r6
 800da38:	42bb      	cmp	r3, r7
 800da3a:	bfc8      	it	gt
 800da3c:	462e      	movgt	r6, r5
 800da3e:	eb09 0044 	add.w	r0, r9, r4, lsl #1
 800da42:	4444      	add	r4, r8
 800da44:	4631      	mov	r1, r6
 800da46:	2300      	movs	r3, #0
 800da48:	4652      	mov	r2, sl
 800da4a:	b2a4      	uxth	r4, r4
 800da4c:	f7ff ff9e 	bl	800d98c <acc_alg_basic_subtract_mean_uint16>
 800da50:	eba5 0508 	sub.w	r5, r5, r8
 800da54:	42a7      	cmp	r7, r4
 800da56:	b2ad      	uxth	r5, r5
 800da58:	d8ed      	bhi.n	800da36 <acc_alg_basic_subtract_section_mean_q12_4+0x1a>
 800da5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da5e:	bf00      	nop

0800da60 <acc_alg_basic_exponential_smoothing_q3_12_complex>:
 800da60:	b33b      	cbz	r3, 800dab2 <acc_alg_basic_exponential_smoothing_q3_12_complex+0x52>
 800da62:	b4f0      	push	{r4, r5, r6, r7}
 800da64:	f100 0c02 	add.w	ip, r0, #2
 800da68:	2400      	movs	r4, #0
 800da6a:	1c8f      	adds	r7, r1, #2
 800da6c:	f931 6024 	ldrsh.w	r6, [r1, r4, lsl #2]
 800da70:	f930 5024 	ldrsh.w	r5, [r0, r4, lsl #2]
 800da74:	1bad      	subs	r5, r5, r6
 800da76:	fb02 f505 	mul.w	r5, r2, r5
 800da7a:	2d00      	cmp	r5, #0
 800da7c:	bfb8      	it	lt
 800da7e:	f605 75ff 	addwlt	r5, r5, #4095	; 0xfff
 800da82:	eb06 3525 	add.w	r5, r6, r5, asr #12
 800da86:	f821 5024 	strh.w	r5, [r1, r4, lsl #2]
 800da8a:	f93c 5024 	ldrsh.w	r5, [ip, r4, lsl #2]
 800da8e:	f937 6024 	ldrsh.w	r6, [r7, r4, lsl #2]
 800da92:	1bad      	subs	r5, r5, r6
 800da94:	fb02 f505 	mul.w	r5, r2, r5
 800da98:	2d00      	cmp	r5, #0
 800da9a:	bfb8      	it	lt
 800da9c:	f605 75ff 	addwlt	r5, r5, #4095	; 0xfff
 800daa0:	eb06 3525 	add.w	r5, r6, r5, asr #12
 800daa4:	f827 5024 	strh.w	r5, [r7, r4, lsl #2]
 800daa8:	3401      	adds	r4, #1
 800daaa:	42a3      	cmp	r3, r4
 800daac:	d1de      	bne.n	800da6c <acc_alg_basic_exponential_smoothing_q3_12_complex+0xc>
 800daae:	bcf0      	pop	{r4, r5, r6, r7}
 800dab0:	4770      	bx	lr
 800dab2:	4770      	bx	lr

0800dab4 <acc_alg_biquad_q3_12_lowpass_coeffs>:
 800dab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dab8:	eddf 7abd 	vldr	s15, [pc, #756]	; 800ddb0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2fc>
 800dabc:	eeb0 0ac0 	vabs.f32	s0, s0
 800dac0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800dac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dac8:	ed2d 8b02 	vpush	{d8}
 800dacc:	4680      	mov	r8, r0
 800dace:	4689      	mov	r9, r1
 800dad0:	4616      	mov	r6, r2
 800dad2:	461f      	mov	r7, r3
 800dad4:	f300 810a 	bgt.w	800dcec <acc_alg_biquad_q3_12_lowpass_coeffs+0x238>
 800dad8:	eddf 7ab6 	vldr	s15, [pc, #728]	; 800ddb4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x300>
 800dadc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800dae0:	f003 fe5e 	bl	80117a0 <roundf>
 800dae4:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 800ddb8 <acc_alg_biquad_q3_12_lowpass_coeffs+0x304>
 800dae8:	eddf 7ab4 	vldr	s15, [pc, #720]	; 800ddbc <acc_alg_biquad_q3_12_lowpass_coeffs+0x308>
 800daec:	ee20 0a07 	vmul.f32	s0, s0, s14
 800daf0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800daf4:	f1b8 0f00 	cmp.w	r8, #0
 800daf8:	d036      	beq.n	800db68 <acc_alg_biquad_q3_12_lowpass_coeffs+0xb4>
 800dafa:	f000 fd7d 	bl	800e5f8 <acc_alg_basic_math_restricted_tan_f32>
 800dafe:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800ddc0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x30c>
 800db02:	eddf 7ab0 	vldr	s15, [pc, #704]	; 800ddc4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x310>
 800db06:	ee20 0a07 	vmul.f32	s0, s0, s14
 800db0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db0e:	ee30 7a27 	vadd.f32	s14, s0, s15
 800db12:	ee60 7a27 	vmul.f32	s15, s0, s15
 800db16:	ee27 0a00 	vmul.f32	s0, s14, s0
 800db1a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800db1e:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800db22:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800db26:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800db2a:	eef4 7ac6 	vcmpe.f32	s15, s12
 800db2e:	ee37 7a26 	vadd.f32	s14, s14, s13
 800db32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db36:	eef1 5ac7 	vsqrt.f32	s11, s14
 800db3a:	ee86 7aa5 	vdiv.f32	s14, s13, s11
 800db3e:	d533      	bpl.n	800dba8 <acc_alg_biquad_q3_12_lowpass_coeffs+0xf4>
 800db40:	eef4 7ae6 	vcmpe.f32	s15, s13
 800db44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db48:	f340 80d3 	ble.w	800dcf2 <acc_alg_biquad_q3_12_lowpass_coeffs+0x23e>
 800db4c:	eddf 7a9e 	vldr	s15, [pc, #632]	; 800ddc8 <acc_alg_biquad_q3_12_lowpass_coeffs+0x314>
 800db50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db54:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800db58:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db60:	ee17 3a90 	vmov	r3, s15
 800db64:	005c      	lsls	r4, r3, #1
 800db66:	e0d0      	b.n	800dd0a <acc_alg_biquad_q3_12_lowpass_coeffs+0x256>
 800db68:	f000 fd46 	bl	800e5f8 <acc_alg_basic_math_restricted_tan_f32>
 800db6c:	eddf 7a95 	vldr	s15, [pc, #596]	; 800ddc4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x310>
 800db70:	ee30 7a27 	vadd.f32	s14, s0, s15
 800db74:	ee60 7a27 	vmul.f32	s15, s0, s15
 800db78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db7c:	ee27 0a00 	vmul.f32	s0, s14, s0
 800db80:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800db84:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800db88:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800db8c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800db90:	eef4 7ac6 	vcmpe.f32	s15, s12
 800db94:	ee37 7a26 	vadd.f32	s14, s14, s13
 800db98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db9c:	eef1 5ac7 	vsqrt.f32	s11, s14
 800dba0:	ee86 7aa5 	vdiv.f32	s14, s13, s11
 800dba4:	f100 80a5 	bmi.w	800dcf2 <acc_alg_biquad_q3_12_lowpass_coeffs+0x23e>
 800dba8:	eddf 6a88 	vldr	s13, [pc, #544]	; 800ddcc <acc_alg_biquad_q3_12_lowpass_coeffs+0x318>
 800dbac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dbb0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800dbb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dbb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dbbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dbc0:	ee17 5a90 	vmov	r5, s15
 800dbc4:	fb05 f305 	mul.w	r3, r5, r5
 800dbc8:	f1c3 6380 	rsb	r3, r3, #67108864	; 0x4000000
 800dbcc:	ee07 3a90 	vmov	s15, r3
 800dbd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dbd4:	eef1 7ac7 	vsqrt.f32	s15, s14
 800dbd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dbdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dbe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dbe4:	ee17 4a90 	vmov	r4, s15
 800dbe8:	2c00      	cmp	r4, #0
 800dbea:	f000 80a4 	beq.w	800dd36 <acc_alg_biquad_q3_12_lowpass_coeffs+0x282>
 800dbee:	f1b9 0f00 	cmp.w	r9, #0
 800dbf2:	d017      	beq.n	800dc24 <acc_alg_biquad_q3_12_lowpass_coeffs+0x170>
 800dbf4:	b2a3      	uxth	r3, r4
 800dbf6:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 800dbfa:	b208      	sxth	r0, r1
 800dbfc:	b2aa      	uxth	r2, r5
 800dbfe:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800dc02:	f8a9 0000 	strh.w	r0, [r9]
 800dc06:	f8a9 0004 	strh.w	r0, [r9, #4]
 800dc0a:	f5c4 50c0 	rsb	r0, r4, #6144	; 0x1800
 800dc0e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800dc12:	0049      	lsls	r1, r1, #1
 800dc14:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 800dc18:	f8a9 1002 	strh.w	r1, [r9, #2]
 800dc1c:	f8a9 3006 	strh.w	r3, [r9, #6]
 800dc20:	f8a9 2008 	strh.w	r2, [r9, #8]
 800dc24:	2d00      	cmp	r5, #0
 800dc26:	f000 80a1 	beq.w	800dd6c <acc_alg_biquad_q3_12_lowpass_coeffs+0x2b8>
 800dc2a:	2e00      	cmp	r6, #0
 800dc2c:	f000 80b8 	beq.w	800dda0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2ec>
 800dc30:	f5c4 5280 	rsb	r2, r4, #4096	; 0x1000
 800dc34:	fb05 f305 	mul.w	r3, r5, r5
 800dc38:	fb04 f404 	mul.w	r4, r4, r4
 800dc3c:	ebc5 0242 	rsb	r2, r5, r2, lsl #1
 800dc40:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dc44:	f104 447c 	add.w	r4, r4, #4227858432	; 0xfc000000
 800dc48:	fb02 f202 	mul.w	r2, r2, r2
 800dc4c:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
 800dc50:	ee07 2a90 	vmov	s15, r2
 800dc54:	0064      	lsls	r4, r4, #1
 800dc56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dc5a:	ee07 4a90 	vmov	s15, r4
 800dc5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc62:	ee87 8a87 	vdiv.f32	s16, s15, s14
 800dc66:	b356      	cbz	r6, 800dcbe <acc_alg_biquad_q3_12_lowpass_coeffs+0x20a>
 800dc68:	f1b8 0f00 	cmp.w	r8, #0
 800dc6c:	f040 8089 	bne.w	800dd82 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2ce>
 800dc70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dc74:	ee78 6a27 	vadd.f32	s13, s16, s15
 800dc78:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800dc7c:	ee76 7aa6 	vadd.f32	s15, s13, s13
 800dc80:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dc84:	ee77 7a86 	vadd.f32	s15, s15, s12
 800dc88:	eef1 6ae7 	vsqrt.f32	s13, s15
 800dc8c:	f5c5 5500 	rsb	r5, r5, #8192	; 0x2000
 800dc90:	006d      	lsls	r5, r5, #1
 800dc92:	eeb1 6ac7 	vsqrt.f32	s12, s14
 800dc96:	ee07 5a90 	vmov	s15, r5
 800dc9a:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800dc9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dca2:	eef1 6ac7 	vsqrt.f32	s13, s14
 800dca6:	ee86 0a27 	vdiv.f32	s0, s12, s15
 800dcaa:	ee20 0a26 	vmul.f32	s0, s0, s13
 800dcae:	f000 fcb3 	bl	800e618 <acc_alg_basic_math_restricted_atan_f32>
 800dcb2:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800ddbc <acc_alg_biquad_q3_12_lowpass_coeffs+0x308>
 800dcb6:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800dcba:	edc6 7a00 	vstr	s15, [r6]
 800dcbe:	2f00      	cmp	r7, #0
 800dcc0:	d071      	beq.n	800dda6 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2f2>
 800dcc2:	eddf 7a43 	vldr	s15, [pc, #268]	; 800ddd0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x31c>
 800dcc6:	eddf 6a43 	vldr	s13, [pc, #268]	; 800ddd4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x320>
 800dcca:	ee28 7a27 	vmul.f32	s14, s16, s15
 800dcce:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800dcd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dcd6:	2001      	movs	r0, #1
 800dcd8:	ee28 8a67 	vnmul.f32	s16, s16, s15
 800dcdc:	eec8 7a26 	vdiv.f32	s15, s16, s13
 800dce0:	ecbd 8b02 	vpop	{d8}
 800dce4:	edc7 7a00 	vstr	s15, [r7]
 800dce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcec:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800ddd8 <acc_alg_biquad_q3_12_lowpass_coeffs+0x324>
 800dcf0:	e700      	b.n	800daf4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x40>
 800dcf2:	eddf 7a3a 	vldr	s15, [pc, #232]	; 800dddc <acc_alg_biquad_q3_12_lowpass_coeffs+0x328>
 800dcf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcfa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dcfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dd02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd06:	ee17 4a90 	vmov	r4, s15
 800dd0a:	fb04 f304 	mul.w	r3, r4, r4
 800dd0e:	009b      	lsls	r3, r3, #2
 800dd10:	f1c3 6380 	rsb	r3, r3, #67108864	; 0x4000000
 800dd14:	ee07 3a90 	vmov	s15, r3
 800dd18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd1c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800dd20:	eeb1 7ae7 	vsqrt.f32	s14, s15
 800dd24:	ee77 7a26 	vadd.f32	s15, s14, s13
 800dd28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd2c:	ee17 5a90 	vmov	r5, s15
 800dd30:	2c00      	cmp	r4, #0
 800dd32:	f47f af5c 	bne.w	800dbee <acc_alg_biquad_q3_12_lowpass_coeffs+0x13a>
 800dd36:	f1b9 0f00 	cmp.w	r9, #0
 800dd3a:	d00b      	beq.n	800dd54 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2a0>
 800dd3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd40:	f8a9 4002 	strh.w	r4, [r9, #2]
 800dd44:	f8a9 4004 	strh.w	r4, [r9, #4]
 800dd48:	f8a9 4006 	strh.w	r4, [r9, #6]
 800dd4c:	f8a9 4008 	strh.w	r4, [r9, #8]
 800dd50:	f8a9 3000 	strh.w	r3, [r9]
 800dd54:	b116      	cbz	r6, 800dd5c <acc_alg_biquad_q3_12_lowpass_coeffs+0x2a8>
 800dd56:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800dd5a:	6033      	str	r3, [r6, #0]
 800dd5c:	b167      	cbz	r7, 800dd78 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2c4>
 800dd5e:	ecbd 8b02 	vpop	{d8}
 800dd62:	2300      	movs	r3, #0
 800dd64:	2000      	movs	r0, #0
 800dd66:	603b      	str	r3, [r7, #0]
 800dd68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd6c:	2e00      	cmp	r6, #0
 800dd6e:	d0f5      	beq.n	800dd5c <acc_alg_biquad_q3_12_lowpass_coeffs+0x2a8>
 800dd70:	2300      	movs	r3, #0
 800dd72:	6033      	str	r3, [r6, #0]
 800dd74:	2f00      	cmp	r7, #0
 800dd76:	d1f2      	bne.n	800dd5e <acc_alg_biquad_q3_12_lowpass_coeffs+0x2aa>
 800dd78:	ecbd 8b02 	vpop	{d8}
 800dd7c:	4638      	mov	r0, r7
 800dd7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd82:	eddf 6a17 	vldr	s13, [pc, #92]	; 800dde0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x32c>
 800dd86:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800ddc4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x310>
 800dd8a:	ed9f 6a16 	vldr	s12, [pc, #88]	; 800dde4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x330>
 800dd8e:	ee78 6a26 	vadd.f32	s13, s16, s13
 800dd92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dd96:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dd9a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800dd9e:	e773      	b.n	800dc88 <acc_alg_biquad_q3_12_lowpass_coeffs+0x1d4>
 800dda0:	2f00      	cmp	r7, #0
 800dda2:	f47f af45 	bne.w	800dc30 <acc_alg_biquad_q3_12_lowpass_coeffs+0x17c>
 800dda6:	ecbd 8b02 	vpop	{d8}
 800ddaa:	2001      	movs	r0, #1
 800ddac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddb0:	3effffde 	.word	0x3effffde
 800ddb4:	48800000 	.word	0x48800000
 800ddb8:	36800000 	.word	0x36800000
 800ddbc:	40490fdb 	.word	0x40490fdb
 800ddc0:	3f9f8d77 	.word	0x3f9f8d77
 800ddc4:	3fb504f3 	.word	0x3fb504f3
 800ddc8:	45000000 	.word	0x45000000
 800ddcc:	46000000 	.word	0x46000000
 800ddd0:	4113c6ef 	.word	0x4113c6ef
 800ddd4:	42a646e1 	.word	0x42a646e1
 800ddd8:	3fc90fdb 	.word	0x3fc90fdb
 800dddc:	45800000 	.word	0x45800000
 800dde0:	3f15f61a 	.word	0x3f15f61a
 800dde4:	3f95f61a 	.word	0x3f95f61a

0800dde8 <acc_alg_biquad_q3_12_complex_direct_form_1_filtfilt_reduced_edge_transients>:
 800dde8:	b570      	push	{r4, r5, r6, lr}
 800ddea:	2300      	movs	r3, #0
 800ddec:	b082      	sub	sp, #8
 800ddee:	4615      	mov	r5, r2
 800ddf0:	460c      	mov	r4, r1
 800ddf2:	4606      	mov	r6, r0
 800ddf4:	f7f2 f9f0 	bl	80001d8 <acc_alg_biquad_q3_12_complex_direct_form_1>
 800ddf8:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 800ddfc:	3b01      	subs	r3, #1
 800ddfe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800de02:	f834 3023 	ldrh.w	r3, [r4, r3, lsl #2]
 800de06:	8852      	ldrh	r2, [r2, #2]
 800de08:	f8ad 2006 	strh.w	r2, [sp, #6]
 800de0c:	f8ad 3004 	strh.w	r3, [sp, #4]
 800de10:	9b01      	ldr	r3, [sp, #4]
 800de12:	4630      	mov	r0, r6
 800de14:	462a      	mov	r2, r5
 800de16:	4621      	mov	r1, r4
 800de18:	b002      	add	sp, #8
 800de1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de1e:	f7f2 b9d7 	b.w	80001d0 <acc_alg_biquad_q3_12_complex_direct_form_1_reverse>
 800de22:	bf00      	nop

0800de24 <acc_alg_iq_demodulation_q3_12_real>:
 800de24:	ee20 1a01 	vmul.f32	s2, s0, s2
 800de28:	ee60 0a20 	vmul.f32	s1, s0, s1
 800de2c:	eefd 7ac1 	vcvt.s32.f32	s15, s2
 800de30:	eebd 0ae0 	vcvt.s32.f32	s0, s1
 800de34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de38:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800de3c:	ee31 1a67 	vsub.f32	s2, s2, s15
 800de40:	ee30 0ac0 	vsub.f32	s0, s1, s0
 800de44:	eddf 7a26 	vldr	s15, [pc, #152]	; 800dee0 <acc_alg_iq_demodulation_q3_12_real+0xbc>
 800de48:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800dee4 <acc_alg_iq_demodulation_q3_12_real+0xc0>
 800de4c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800de50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800de58:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800de5c:	bfb4      	ite	lt
 800de5e:	eeb0 6a66 	vmovlt.f32	s12, s13
 800de62:	eeb0 6a67 	vmovge.f32	s12, s15
 800de66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de6a:	bfb8      	it	lt
 800de6c:	eef0 7a66 	vmovlt.f32	s15, s13
 800de70:	ee31 1a06 	vadd.f32	s2, s2, s12
 800de74:	ee30 0a27 	vadd.f32	s0, s0, s15
 800de78:	ee21 1a07 	vmul.f32	s2, s2, s14
 800de7c:	ee20 0a07 	vmul.f32	s0, s0, s14
 800de80:	b36a      	cbz	r2, 800dede <acc_alg_iq_demodulation_q3_12_real+0xba>
 800de82:	eefc 7ac1 	vcvt.u32.f32	s15, s2
 800de86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de8a:	ee17 9a90 	vmov	r9, s15
 800de8e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800de92:	1e85      	subs	r5, r0, #2
 800de94:	ee17 7a90 	vmov	r7, s15
 800de98:	eb05 0842 	add.w	r8, r5, r2, lsl #1
 800de9c:	1c8e      	adds	r6, r1, #2
 800de9e:	4648      	mov	r0, r9
 800dea0:	f935 4f02 	ldrsh.w	r4, [r5, #2]!
 800dea4:	f000 fcc4 	bl	800e830 <acc_alg_basic_math_q3_12_cos>
 800dea8:	4603      	mov	r3, r0
 800deaa:	fb04 f303 	mul.w	r3, r4, r3
 800deae:	2b00      	cmp	r3, #0
 800deb0:	bfb8      	it	lt
 800deb2:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 800deb6:	131b      	asrs	r3, r3, #12
 800deb8:	4648      	mov	r0, r9
 800deba:	f826 3c02 	strh.w	r3, [r6, #-2]
 800debe:	f000 fca1 	bl	800e804 <acc_alg_basic_math_q3_12_sin>
 800dec2:	fb04 f000 	mul.w	r0, r4, r0
 800dec6:	2800      	cmp	r0, #0
 800dec8:	bfb8      	it	lt
 800deca:	f600 70ff 	addwlt	r0, r0, #4095	; 0xfff
 800dece:	1300      	asrs	r0, r0, #12
 800ded0:	45a8      	cmp	r8, r5
 800ded2:	f826 0b04 	strh.w	r0, [r6], #4
 800ded6:	44b9      	add	r9, r7
 800ded8:	d1e1      	bne.n	800de9e <acc_alg_iq_demodulation_q3_12_real+0x7a>
 800deda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dede:	4770      	bx	lr
 800dee0:	00000000 	.word	0x00000000
 800dee4:	4f800000 	.word	0x4f800000

0800dee8 <acc_alg_iq_demodulation_q3_12_complex>:
 800dee8:	ee20 1a01 	vmul.f32	s2, s0, s2
 800deec:	ee60 0a20 	vmul.f32	s1, s0, s1
 800def0:	eefd 7ac1 	vcvt.s32.f32	s15, s2
 800def4:	eebd 0ae0 	vcvt.s32.f32	s0, s1
 800def8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800defc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800df00:	ee31 1a67 	vsub.f32	s2, s2, s15
 800df04:	ee30 0ac0 	vsub.f32	s0, s1, s0
 800df08:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800dfc4 <acc_alg_iq_demodulation_q3_12_complex+0xdc>
 800df0c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800dfc8 <acc_alg_iq_demodulation_q3_12_complex+0xe0>
 800df10:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800df14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df1c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800df20:	bfb4      	ite	lt
 800df22:	eeb0 6a66 	vmovlt.f32	s12, s13
 800df26:	eeb0 6a67 	vmovge.f32	s12, s15
 800df2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df2e:	bfb8      	it	lt
 800df30:	eef0 7a66 	vmovlt.f32	s15, s13
 800df34:	ee31 1a06 	vadd.f32	s2, s2, s12
 800df38:	ee30 0a27 	vadd.f32	s0, s0, s15
 800df3c:	ee21 1a07 	vmul.f32	s2, s2, s14
 800df40:	ee20 0a07 	vmul.f32	s0, s0, s14
 800df44:	b3e9      	cbz	r1, 800dfc2 <acc_alg_iq_demodulation_q3_12_complex+0xda>
 800df46:	eefc 7ac1 	vcvt.u32.f32	s15, s2
 800df4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df4e:	ee17 8a90 	vmov	r8, s15
 800df52:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800df56:	4607      	mov	r7, r0
 800df58:	ee17 5a90 	vmov	r5, s15
 800df5c:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 800df60:	4640      	mov	r0, r8
 800df62:	f9b7 9000 	ldrsh.w	r9, [r7]
 800df66:	f9b7 a002 	ldrsh.w	sl, [r7, #2]
 800df6a:	f000 fc61 	bl	800e830 <acc_alg_basic_math_q3_12_cos>
 800df6e:	4604      	mov	r4, r0
 800df70:	4640      	mov	r0, r8
 800df72:	f000 fc47 	bl	800e804 <acc_alg_basic_math_q3_12_sin>
 800df76:	fb09 f204 	mul.w	r2, r9, r4
 800df7a:	fb0a f100 	mul.w	r1, sl, r0
 800df7e:	2a00      	cmp	r2, #0
 800df80:	fb04 f30a 	mul.w	r3, r4, sl
 800df84:	bfb8      	it	lt
 800df86:	f602 72ff 	addwlt	r2, r2, #4095	; 0xfff
 800df8a:	2900      	cmp	r1, #0
 800df8c:	fb09 f000 	mul.w	r0, r9, r0
 800df90:	bfb8      	it	lt
 800df92:	f601 71ff 	addwlt	r1, r1, #4095	; 0xfff
 800df96:	2b00      	cmp	r3, #0
 800df98:	bfb8      	it	lt
 800df9a:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	bfb8      	it	lt
 800dfa2:	f600 70ff 	addwlt	r0, r0, #4095	; 0xfff
 800dfa6:	1312      	asrs	r2, r2, #12
 800dfa8:	131b      	asrs	r3, r3, #12
 800dfaa:	eba2 3221 	sub.w	r2, r2, r1, asr #12
 800dfae:	eb03 3320 	add.w	r3, r3, r0, asr #12
 800dfb2:	803a      	strh	r2, [r7, #0]
 800dfb4:	807b      	strh	r3, [r7, #2]
 800dfb6:	3704      	adds	r7, #4
 800dfb8:	42be      	cmp	r6, r7
 800dfba:	44a8      	add	r8, r5
 800dfbc:	d1d0      	bne.n	800df60 <acc_alg_iq_demodulation_q3_12_complex+0x78>
 800dfbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfc2:	4770      	bx	lr
 800dfc4:	00000000 	.word	0x00000000
 800dfc8:	4f800000 	.word	0x4f800000

0800dfcc <acc_alg_phase_estimation_q3_12>:
 800dfcc:	2a01      	cmp	r2, #1
 800dfce:	b4f0      	push	{r4, r5, r6, r7}
 800dfd0:	d94c      	bls.n	800e06c <acc_alg_phase_estimation_q3_12+0xa0>
 800dfd2:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 800dfd6:	f1ac 0c04 	sub.w	ip, ip, #4
 800dfda:	4603      	mov	r3, r0
 800dfdc:	f9b3 7000 	ldrsh.w	r7, [r3]
 800dfe0:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 800dfe4:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 800dfe8:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800dfec:	1bed      	subs	r5, r5, r7
 800dfee:	fb01 f505 	mul.w	r5, r1, r5
 800dff2:	1ba4      	subs	r4, r4, r6
 800dff4:	2d00      	cmp	r5, #0
 800dff6:	fb01 f404 	mul.w	r4, r1, r4
 800dffa:	bfb8      	it	lt
 800dffc:	f605 75ff 	addwlt	r5, r5, #4095	; 0xfff
 800e000:	2c00      	cmp	r4, #0
 800e002:	bfb8      	it	lt
 800e004:	f604 74ff 	addwlt	r4, r4, #4095	; 0xfff
 800e008:	eb07 3525 	add.w	r5, r7, r5, asr #12
 800e00c:	eb06 3424 	add.w	r4, r6, r4, asr #12
 800e010:	809d      	strh	r5, [r3, #4]
 800e012:	80dc      	strh	r4, [r3, #6]
 800e014:	3304      	adds	r3, #4
 800e016:	4563      	cmp	r3, ip
 800e018:	d1e0      	bne.n	800dfdc <acc_alg_phase_estimation_q3_12+0x10>
 800e01a:	1e53      	subs	r3, r2, #1
 800e01c:	3a02      	subs	r2, #2
 800e01e:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 800e022:	f930 6023 	ldrsh.w	r6, [r0, r3, lsl #2]
 800e026:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 800e02a:	1c87      	adds	r7, r0, #2
 800e02c:	f930 4022 	ldrsh.w	r4, [r0, r2, lsl #2]
 800e030:	1ba4      	subs	r4, r4, r6
 800e032:	fb01 f404 	mul.w	r4, r1, r4
 800e036:	2c00      	cmp	r4, #0
 800e038:	bfb8      	it	lt
 800e03a:	f604 74ff 	addwlt	r4, r4, #4095	; 0xfff
 800e03e:	eb06 3624 	add.w	r6, r6, r4, asr #12
 800e042:	b236      	sxth	r6, r6
 800e044:	f820 6022 	strh.w	r6, [r0, r2, lsl #2]
 800e048:	f937 3022 	ldrsh.w	r3, [r7, r2, lsl #2]
 800e04c:	1b5b      	subs	r3, r3, r5
 800e04e:	fb01 f303 	mul.w	r3, r1, r3
 800e052:	2b00      	cmp	r3, #0
 800e054:	bfb8      	it	lt
 800e056:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 800e05a:	eb05 3523 	add.w	r5, r5, r3, asr #12
 800e05e:	b22d      	sxth	r5, r5
 800e060:	f827 5022 	strh.w	r5, [r7, r2, lsl #2]
 800e064:	3a01      	subs	r2, #1
 800e066:	d2e1      	bcs.n	800e02c <acc_alg_phase_estimation_q3_12+0x60>
 800e068:	bcf0      	pop	{r4, r5, r6, r7}
 800e06a:	4770      	bx	lr
 800e06c:	d0fc      	beq.n	800e068 <acc_alg_phase_estimation_q3_12+0x9c>
 800e06e:	f06f 0201 	mvn.w	r2, #1
 800e072:	f04f 33ff 	mov.w	r3, #4294967295
 800e076:	e7d2      	b.n	800e01e <acc_alg_phase_estimation_q3_12+0x52>

0800e078 <acc_alg_power_bins>:
 800e078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e07c:	2900      	cmp	r1, #0
 800e07e:	d03e      	beq.n	800e0fe <acc_alg_power_bins+0x86>
 800e080:	1e87      	subs	r7, r0, #2
 800e082:	eb07 0c41 	add.w	ip, r7, r1, lsl #1
 800e086:	463e      	mov	r6, r7
 800e088:	004d      	lsls	r5, r1, #1
 800e08a:	2400      	movs	r4, #0
 800e08c:	f836 ef02 	ldrh.w	lr, [r6, #2]!
 800e090:	4566      	cmp	r6, ip
 800e092:	4474      	add	r4, lr
 800e094:	d1fa      	bne.n	800e08c <acc_alg_power_bins+0x14>
 800e096:	fbb4 f4f1 	udiv	r4, r4, r1
 800e09a:	b2a6      	uxth	r6, r4
 800e09c:	f837 4f02 	ldrh.w	r4, [r7, #2]!
 800e0a0:	42b4      	cmp	r4, r6
 800e0a2:	bf8c      	ite	hi
 800e0a4:	1ba4      	subhi	r4, r4, r6
 800e0a6:	1b34      	subls	r4, r6, r4
 800e0a8:	b2a4      	uxth	r4, r4
 800e0aa:	4567      	cmp	r7, ip
 800e0ac:	803c      	strh	r4, [r7, #0]
 800e0ae:	d1f5      	bne.n	800e09c <acc_alg_power_bins+0x24>
 800e0b0:	b31b      	cbz	r3, 800e0fa <acc_alg_power_bins+0x82>
 800e0b2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800e0b6:	f04f 0800 	mov.w	r8, #0
 800e0ba:	e00c      	b.n	800e0d6 <acc_alg_power_bins+0x5e>
 800e0bc:	f8a2 8000 	strh.w	r8, [r2]
 800e0c0:	3b01      	subs	r3, #1
 800e0c2:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800e0c6:	eba1 0106 	sub.w	r1, r1, r6
 800e0ca:	f1ae 0e02 	sub.w	lr, lr, #2
 800e0ce:	f102 0202 	add.w	r2, r2, #2
 800e0d2:	d012      	beq.n	800e0fa <acc_alg_power_bins+0x82>
 800e0d4:	004d      	lsls	r5, r1, #1
 800e0d6:	441d      	add	r5, r3
 800e0d8:	4575      	cmp	r5, lr
 800e0da:	fbb5 f6fe 	udiv	r6, r5, lr
 800e0de:	d3ed      	bcc.n	800e0bc <acc_alg_power_bins+0x44>
 800e0e0:	2500      	movs	r5, #0
 800e0e2:	462c      	mov	r4, r5
 800e0e4:	1e87      	subs	r7, r0, #2
 800e0e6:	f837 cf02 	ldrh.w	ip, [r7, #2]!
 800e0ea:	3401      	adds	r4, #1
 800e0ec:	42a6      	cmp	r6, r4
 800e0ee:	4465      	add	r5, ip
 800e0f0:	d8f9      	bhi.n	800e0e6 <acc_alg_power_bins+0x6e>
 800e0f2:	fbb5 f5f6 	udiv	r5, r5, r6
 800e0f6:	8015      	strh	r5, [r2, #0]
 800e0f8:	e7e2      	b.n	800e0c0 <acc_alg_power_bins+0x48>
 800e0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0fe:	4802      	ldr	r0, [pc, #8]	; (800e108 <acc_alg_power_bins+0x90>)
 800e100:	2124      	movs	r1, #36	; 0x24
 800e102:	f7fb fcdb 	bl	8009abc <acc_assert_fail>
 800e106:	bf00      	nop
 800e108:	08013dc8 	.word	0x08013dc8

0800e10c <acc_confprogram_modify_bin_sensor>:
 800e10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e110:	b082      	sub	sp, #8
 800e112:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	; 0x28
 800e116:	2501      	movs	r5, #1
 800e118:	409d      	lsls	r5, r3
 800e11a:	42b5      	cmp	r5, r6
 800e11c:	461c      	mov	r4, r3
 800e11e:	4607      	mov	r7, r0
 800e120:	468a      	mov	sl, r1
 800e122:	4690      	mov	r8, r2
 800e124:	d809      	bhi.n	800e13a <acc_confprogram_modify_bin_sensor+0x2e>
 800e126:	4b10      	ldr	r3, [pc, #64]	; (800e168 <acc_confprogram_modify_bin_sensor+0x5c>)
 800e128:	9600      	str	r6, [sp, #0]
 800e12a:	3d01      	subs	r5, #1
 800e12c:	9501      	str	r5, [sp, #4]
 800e12e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800e130:	4a0e      	ldr	r2, [pc, #56]	; (800e16c <acc_confprogram_modify_bin_sensor+0x60>)
 800e132:	490f      	ldr	r1, [pc, #60]	; (800e170 <acc_confprogram_modify_bin_sensor+0x64>)
 800e134:	4653      	mov	r3, sl
 800e136:	2000      	movs	r0, #0
 800e138:	47a8      	blx	r5
 800e13a:	4651      	mov	r1, sl
 800e13c:	4638      	mov	r0, r7
 800e13e:	f7fb fe7f 	bl	8009e40 <acc_sensor_conf_read_instr>
 800e142:	f1c4 0420 	rsb	r4, r4, #32
 800e146:	f04f 35ff 	mov.w	r5, #4294967295
 800e14a:	40e5      	lsrs	r5, r4
 800e14c:	fa05 f408 	lsl.w	r4, r5, r8
 800e150:	ea20 0204 	bic.w	r2, r0, r4
 800e154:	fa06 f608 	lsl.w	r6, r6, r8
 800e158:	4651      	mov	r1, sl
 800e15a:	4638      	mov	r0, r7
 800e15c:	4332      	orrs	r2, r6
 800e15e:	464b      	mov	r3, r9
 800e160:	b002      	add	sp, #8
 800e162:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e166:	4718      	bx	r3
 800e168:	2000082c 	.word	0x2000082c
 800e16c:	08013dd8 	.word	0x08013dd8
 800e170:	08013e10 	.word	0x08013e10

0800e174 <acc_confprogram_modify_bin>:
 800e174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e178:	b085      	sub	sp, #20
 800e17a:	f04f 0c01 	mov.w	ip, #1
 800e17e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e180:	fa0c fc03 	lsl.w	ip, ip, r3
 800e184:	45b4      	cmp	ip, r6
 800e186:	461d      	mov	r5, r3
 800e188:	4680      	mov	r8, r0
 800e18a:	460c      	mov	r4, r1
 800e18c:	4617      	mov	r7, r2
 800e18e:	d80b      	bhi.n	800e1a8 <acc_confprogram_modify_bin+0x34>
 800e190:	4b13      	ldr	r3, [pc, #76]	; (800e1e0 <acc_confprogram_modify_bin+0x6c>)
 800e192:	9600      	str	r6, [sp, #0]
 800e194:	f10c 32ff 	add.w	r2, ip, #4294967295
 800e198:	9201      	str	r2, [sp, #4]
 800e19a:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 800e19e:	4a11      	ldr	r2, [pc, #68]	; (800e1e4 <acc_confprogram_modify_bin+0x70>)
 800e1a0:	4911      	ldr	r1, [pc, #68]	; (800e1e8 <acc_confprogram_modify_bin+0x74>)
 800e1a2:	4623      	mov	r3, r4
 800e1a4:	2000      	movs	r0, #0
 800e1a6:	47c8      	blx	r9
 800e1a8:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 800e1ac:	4620      	mov	r0, r4
 800e1ae:	a902      	add	r1, sp, #8
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	f7fb ff8d 	bl	800a0d0 <acc_utils_transfer_buffer_to_uint32>
 800e1b6:	f1c5 0520 	rsb	r5, r5, #32
 800e1ba:	f04f 33ff 	mov.w	r3, #4294967295
 800e1be:	9902      	ldr	r1, [sp, #8]
 800e1c0:	40eb      	lsrs	r3, r5
 800e1c2:	40bb      	lsls	r3, r7
 800e1c4:	fa06 f207 	lsl.w	r2, r6, r7
 800e1c8:	ea21 0303 	bic.w	r3, r1, r3
 800e1cc:	4313      	orrs	r3, r2
 800e1ce:	4621      	mov	r1, r4
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	a803      	add	r0, sp, #12
 800e1d4:	9303      	str	r3, [sp, #12]
 800e1d6:	f7fb ff6d 	bl	800a0b4 <acc_utils_uint32_to_transfer_buffer>
 800e1da:	b005      	add	sp, #20
 800e1dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1e0:	2000082c 	.word	0x2000082c
 800e1e4:	08013e1c 	.word	0x08013e1c
 800e1e8:	08013e10 	.word	0x08013e10

0800e1ec <acc_confprogram_modify_runif_sensor>:
 800e1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1f0:	4614      	mov	r4, r2
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 800e1f8:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800e1fc:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800e200:	f025 050f 	bic.w	r5, r5, #15
 800e204:	4606      	mov	r6, r0
 800e206:	b1b2      	cbz	r2, 800e236 <acc_confprogram_modify_runif_sensor+0x4a>
 800e208:	461f      	mov	r7, r3
 800e20a:	f7f9 fa33 	bl	8007674 <acc_rss_integration_log_level>
 800e20e:	2803      	cmp	r0, #3
 800e210:	ea45 0507 	orr.w	r5, r5, r7
 800e214:	d907      	bls.n	800e226 <acc_confprogram_modify_runif_sensor+0x3a>
 800e216:	4b0e      	ldr	r3, [pc, #56]	; (800e250 <acc_confprogram_modify_runif_sensor+0x64>)
 800e218:	9700      	str	r7, [sp, #0]
 800e21a:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800e21c:	4a0d      	ldr	r2, [pc, #52]	; (800e254 <acc_confprogram_modify_runif_sensor+0x68>)
 800e21e:	490e      	ldr	r1, [pc, #56]	; (800e258 <acc_confprogram_modify_runif_sensor+0x6c>)
 800e220:	4623      	mov	r3, r4
 800e222:	2004      	movs	r0, #4
 800e224:	47b8      	blx	r7
 800e226:	462a      	mov	r2, r5
 800e228:	4621      	mov	r1, r4
 800e22a:	4630      	mov	r0, r6
 800e22c:	4643      	mov	r3, r8
 800e22e:	b002      	add	sp, #8
 800e230:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e234:	4718      	bx	r3
 800e236:	f7f9 fa1d 	bl	8007674 <acc_rss_integration_log_level>
 800e23a:	2803      	cmp	r0, #3
 800e23c:	d9f3      	bls.n	800e226 <acc_confprogram_modify_runif_sensor+0x3a>
 800e23e:	4b04      	ldr	r3, [pc, #16]	; (800e250 <acc_confprogram_modify_runif_sensor+0x64>)
 800e240:	4a06      	ldr	r2, [pc, #24]	; (800e25c <acc_confprogram_modify_runif_sensor+0x70>)
 800e242:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800e244:	4904      	ldr	r1, [pc, #16]	; (800e258 <acc_confprogram_modify_runif_sensor+0x6c>)
 800e246:	4623      	mov	r3, r4
 800e248:	2004      	movs	r0, #4
 800e24a:	47b8      	blx	r7
 800e24c:	e7eb      	b.n	800e226 <acc_confprogram_modify_runif_sensor+0x3a>
 800e24e:	bf00      	nop
 800e250:	2000082c 	.word	0x2000082c
 800e254:	08013e54 	.word	0x08013e54
 800e258:	08013e10 	.word	0x08013e10
 800e25c:	08013e8c 	.word	0x08013e8c

0800e260 <acc_confprogram_modify_runif>:
 800e260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e264:	eb00 0542 	add.w	r5, r0, r2, lsl #1
 800e268:	b084      	sub	sp, #16
 800e26a:	4616      	mov	r6, r2
 800e26c:	460f      	mov	r7, r1
 800e26e:	4628      	mov	r0, r5
 800e270:	2201      	movs	r2, #1
 800e272:	a902      	add	r1, sp, #8
 800e274:	4698      	mov	r8, r3
 800e276:	f7fb ff2b 	bl	800a0d0 <acc_utils_transfer_buffer_to_uint32>
 800e27a:	9c02      	ldr	r4, [sp, #8]
 800e27c:	f024 040f 	bic.w	r4, r4, #15
 800e280:	9403      	str	r4, [sp, #12]
 800e282:	f1b8 0f00 	cmp.w	r8, #0
 800e286:	d015      	beq.n	800e2b4 <acc_confprogram_modify_runif+0x54>
 800e288:	433c      	orrs	r4, r7
 800e28a:	9403      	str	r4, [sp, #12]
 800e28c:	f7f9 f9f2 	bl	8007674 <acc_rss_integration_log_level>
 800e290:	2803      	cmp	r0, #3
 800e292:	d907      	bls.n	800e2a4 <acc_confprogram_modify_runif+0x44>
 800e294:	4a0e      	ldr	r2, [pc, #56]	; (800e2d0 <acc_confprogram_modify_runif+0x70>)
 800e296:	9700      	str	r7, [sp, #0]
 800e298:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800e29a:	490e      	ldr	r1, [pc, #56]	; (800e2d4 <acc_confprogram_modify_runif+0x74>)
 800e29c:	4a0e      	ldr	r2, [pc, #56]	; (800e2d8 <acc_confprogram_modify_runif+0x78>)
 800e29e:	0873      	lsrs	r3, r6, #1
 800e2a0:	2004      	movs	r0, #4
 800e2a2:	47a0      	blx	r4
 800e2a4:	4629      	mov	r1, r5
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	a803      	add	r0, sp, #12
 800e2aa:	f7fb ff03 	bl	800a0b4 <acc_utils_uint32_to_transfer_buffer>
 800e2ae:	b004      	add	sp, #16
 800e2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2b4:	f7f9 f9de 	bl	8007674 <acc_rss_integration_log_level>
 800e2b8:	2803      	cmp	r0, #3
 800e2ba:	d9f3      	bls.n	800e2a4 <acc_confprogram_modify_runif+0x44>
 800e2bc:	4a04      	ldr	r2, [pc, #16]	; (800e2d0 <acc_confprogram_modify_runif+0x70>)
 800e2be:	9700      	str	r7, [sp, #0]
 800e2c0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800e2c2:	4904      	ldr	r1, [pc, #16]	; (800e2d4 <acc_confprogram_modify_runif+0x74>)
 800e2c4:	4a05      	ldr	r2, [pc, #20]	; (800e2dc <acc_confprogram_modify_runif+0x7c>)
 800e2c6:	0873      	lsrs	r3, r6, #1
 800e2c8:	2004      	movs	r0, #4
 800e2ca:	47a0      	blx	r4
 800e2cc:	e7ea      	b.n	800e2a4 <acc_confprogram_modify_runif+0x44>
 800e2ce:	bf00      	nop
 800e2d0:	2000082c 	.word	0x2000082c
 800e2d4:	08013e10 	.word	0x08013e10
 800e2d8:	08013e54 	.word	0x08013e54
 800e2dc:	08013ebc 	.word	0x08013ebc

0800e2e0 <acc_confprogram_patch_offset>:
 800e2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e4:	b083      	sub	sp, #12
 800e2e6:	4680      	mov	r8, r0
 800e2e8:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800e2ec:	460d      	mov	r5, r1
 800e2ee:	4617      	mov	r7, r2
 800e2f0:	461e      	mov	r6, r3
 800e2f2:	f7f9 f9bf 	bl	8007674 <acc_rss_integration_log_level>
 800e2f6:	2803      	cmp	r0, #3
 800e2f8:	d909      	bls.n	800e30e <acc_confprogram_patch_offset+0x2e>
 800e2fa:	4b2f      	ldr	r3, [pc, #188]	; (800e3b8 <acc_confprogram_patch_offset+0xd8>)
 800e2fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e2fe:	9200      	str	r2, [sp, #0]
 800e300:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 800e304:	4a2d      	ldr	r2, [pc, #180]	; (800e3bc <acc_confprogram_patch_offset+0xdc>)
 800e306:	492e      	ldr	r1, [pc, #184]	; (800e3c0 <acc_confprogram_patch_offset+0xe0>)
 800e308:	4623      	mov	r3, r4
 800e30a:	2004      	movs	r0, #4
 800e30c:	47c8      	blx	r9
 800e30e:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 800e312:	8871      	ldrh	r1, [r6, #2]
 800e314:	b399      	cbz	r1, 800e37e <acc_confprogram_patch_offset+0x9e>
 800e316:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 800e3b8 <acc_confprogram_patch_offset+0xd8>
 800e31a:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800e3c4 <acc_confprogram_patch_offset+0xe4>
 800e31e:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800e3c0 <acc_confprogram_patch_offset+0xe0>
 800e322:	2400      	movs	r4, #0
 800e324:	e00b      	b.n	800e33e <acc_confprogram_patch_offset+0x5e>
 800e326:	2b00      	cmp	r3, #0
 800e328:	d039      	beq.n	800e39e <acc_confprogram_patch_offset+0xbe>
 800e32a:	4649      	mov	r1, r9
 800e32c:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800e330:	4652      	mov	r2, sl
 800e332:	2000      	movs	r0, #0
 800e334:	4798      	blx	r3
 800e336:	8871      	ldrh	r1, [r6, #2]
 800e338:	3401      	adds	r4, #1
 800e33a:	42a1      	cmp	r1, r4
 800e33c:	d91f      	bls.n	800e37e <acc_confprogram_patch_offset+0x9e>
 800e33e:	6873      	ldr	r3, [r6, #4]
 800e340:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e344:	0042      	lsls	r2, r0, #1
 800e346:	b292      	uxth	r2, r2
 800e348:	42aa      	cmp	r2, r5
 800e34a:	eb05 0c07 	add.w	ip, r5, r7
 800e34e:	f3c0 7301 	ubfx	r3, r0, #28, #2
 800e352:	d3f1      	bcc.n	800e338 <acc_confprogram_patch_offset+0x58>
 800e354:	4562      	cmp	r2, ip
 800e356:	daef      	bge.n	800e338 <acc_confprogram_patch_offset+0x58>
 800e358:	2b01      	cmp	r3, #1
 800e35a:	d013      	beq.n	800e384 <acc_confprogram_patch_offset+0xa4>
 800e35c:	2b02      	cmp	r3, #2
 800e35e:	d1e2      	bne.n	800e326 <acc_confprogram_patch_offset+0x46>
 800e360:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e362:	1b52      	subs	r2, r2, r5
 800e364:	fab3 f383 	clz	r3, r3
 800e368:	f3c0 4103 	ubfx	r1, r0, #16, #4
 800e36c:	b292      	uxth	r2, r2
 800e36e:	095b      	lsrs	r3, r3, #5
 800e370:	4640      	mov	r0, r8
 800e372:	f7ff ff75 	bl	800e260 <acc_confprogram_modify_runif>
 800e376:	8871      	ldrh	r1, [r6, #2]
 800e378:	3401      	adds	r4, #1
 800e37a:	42a1      	cmp	r1, r4
 800e37c:	d8df      	bhi.n	800e33e <acc_confprogram_patch_offset+0x5e>
 800e37e:	b003      	add	sp, #12
 800e380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e386:	1b52      	subs	r2, r2, r5
 800e388:	3b00      	subs	r3, #0
 800e38a:	f3c0 4103 	ubfx	r1, r0, #16, #4
 800e38e:	b292      	uxth	r2, r2
 800e390:	bf18      	it	ne
 800e392:	2301      	movne	r3, #1
 800e394:	4640      	mov	r0, r8
 800e396:	f7ff ff63 	bl	800e260 <acc_confprogram_modify_runif>
 800e39a:	8871      	ldrh	r1, [r6, #2]
 800e39c:	e7cc      	b.n	800e338 <acc_confprogram_patch_offset+0x58>
 800e39e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e3a0:	9300      	str	r3, [sp, #0]
 800e3a2:	1b52      	subs	r2, r2, r5
 800e3a4:	b291      	uxth	r1, r2
 800e3a6:	f3c0 5344 	ubfx	r3, r0, #21, #5
 800e3aa:	f3c0 4204 	ubfx	r2, r0, #16, #5
 800e3ae:	4640      	mov	r0, r8
 800e3b0:	f7ff fee0 	bl	800e174 <acc_confprogram_modify_bin>
 800e3b4:	8871      	ldrh	r1, [r6, #2]
 800e3b6:	e7bf      	b.n	800e338 <acc_confprogram_patch_offset+0x58>
 800e3b8:	2000082c 	.word	0x2000082c
 800e3bc:	08013f18 	.word	0x08013f18
 800e3c0:	08013e10 	.word	0x08013e10
 800e3c4:	08013ef0 	.word	0x08013ef0

0800e3c8 <acc_confprogram_live_patch>:
 800e3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3cc:	b083      	sub	sp, #12
 800e3ce:	4606      	mov	r6, r0
 800e3d0:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800e3d4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800e3d8:	468b      	mov	fp, r1
 800e3da:	4617      	mov	r7, r2
 800e3dc:	461d      	mov	r5, r3
 800e3de:	f7f9 f949 	bl	8007674 <acc_rss_integration_log_level>
 800e3e2:	2803      	cmp	r0, #3
 800e3e4:	d909      	bls.n	800e3fa <acc_confprogram_live_patch+0x32>
 800e3e6:	4b2f      	ldr	r3, [pc, #188]	; (800e4a4 <acc_confprogram_live_patch+0xdc>)
 800e3e8:	f8cd a000 	str.w	sl, [sp]
 800e3ec:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 800e3f0:	4a2d      	ldr	r2, [pc, #180]	; (800e4a8 <acc_confprogram_live_patch+0xe0>)
 800e3f2:	492e      	ldr	r1, [pc, #184]	; (800e4ac <acc_confprogram_live_patch+0xe4>)
 800e3f4:	4623      	mov	r3, r4
 800e3f6:	2004      	movs	r0, #4
 800e3f8:	47c0      	blx	r8
 800e3fa:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800e3fe:	886b      	ldrh	r3, [r5, #2]
 800e400:	b373      	cbz	r3, 800e460 <acc_confprogram_live_patch+0x98>
 800e402:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800e4b0 <acc_confprogram_live_patch+0xe8>
 800e406:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800e4ac <acc_confprogram_live_patch+0xe4>
 800e40a:	2400      	movs	r4, #0
 800e40c:	e008      	b.n	800e420 <acc_confprogram_live_patch+0x58>
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d03a      	beq.n	800e488 <acc_confprogram_live_patch+0xc0>
 800e412:	4b24      	ldr	r3, [pc, #144]	; (800e4a4 <acc_confprogram_live_patch+0xdc>)
 800e414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e416:	4798      	blx	r3
 800e418:	886b      	ldrh	r3, [r5, #2]
 800e41a:	3401      	adds	r4, #1
 800e41c:	42a3      	cmp	r3, r4
 800e41e:	d91f      	bls.n	800e460 <acc_confprogram_live_patch+0x98>
 800e420:	686b      	ldr	r3, [r5, #4]
 800e422:	f853 c024 	ldr.w	ip, [r3, r4, lsl #2]
 800e426:	f3cc 7301 	ubfx	r3, ip, #28, #2
 800e42a:	2b01      	cmp	r3, #1
 800e42c:	d01b      	beq.n	800e466 <acc_confprogram_live_patch+0x9e>
 800e42e:	2b02      	cmp	r3, #2
 800e430:	464a      	mov	r2, r9
 800e432:	4641      	mov	r1, r8
 800e434:	f04f 0000 	mov.w	r0, #0
 800e438:	d1e9      	bne.n	800e40e <acc_confprogram_live_patch+0x46>
 800e43a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e43c:	faba f38a 	clz	r3, sl
 800e440:	095b      	lsrs	r3, r3, #5
 800e442:	eb07 020c 	add.w	r2, r7, ip
 800e446:	e9cd 3100 	strd	r3, r1, [sp]
 800e44a:	b292      	uxth	r2, r2
 800e44c:	f3cc 4303 	ubfx	r3, ip, #16, #4
 800e450:	4659      	mov	r1, fp
 800e452:	4630      	mov	r0, r6
 800e454:	f7ff feca 	bl	800e1ec <acc_confprogram_modify_runif_sensor>
 800e458:	886b      	ldrh	r3, [r5, #2]
 800e45a:	3401      	adds	r4, #1
 800e45c:	42a3      	cmp	r3, r4
 800e45e:	d8df      	bhi.n	800e420 <acc_confprogram_live_patch+0x58>
 800e460:	b003      	add	sp, #12
 800e462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e466:	f1ba 0100 	subs.w	r1, sl, #0
 800e46a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e46c:	9301      	str	r3, [sp, #4]
 800e46e:	bf18      	it	ne
 800e470:	2101      	movne	r1, #1
 800e472:	eb07 020c 	add.w	r2, r7, ip
 800e476:	9100      	str	r1, [sp, #0]
 800e478:	b292      	uxth	r2, r2
 800e47a:	f3cc 4303 	ubfx	r3, ip, #16, #4
 800e47e:	4659      	mov	r1, fp
 800e480:	4630      	mov	r0, r6
 800e482:	f7ff feb3 	bl	800e1ec <acc_confprogram_modify_runif_sensor>
 800e486:	e7c7      	b.n	800e418 <acc_confprogram_live_patch+0x50>
 800e488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e48a:	eb07 010c 	add.w	r1, r7, ip
 800e48e:	e9cd a300 	strd	sl, r3, [sp]
 800e492:	b289      	uxth	r1, r1
 800e494:	f3cc 5344 	ubfx	r3, ip, #21, #5
 800e498:	f3cc 4204 	ubfx	r2, ip, #16, #5
 800e49c:	4630      	mov	r0, r6
 800e49e:	f7ff fe35 	bl	800e10c <acc_confprogram_modify_bin_sensor>
 800e4a2:	e7b9      	b.n	800e418 <acc_confprogram_live_patch+0x50>
 800e4a4:	2000082c 	.word	0x2000082c
 800e4a8:	08013f14 	.word	0x08013f14
 800e4ac:	08013e10 	.word	0x08013e10
 800e4b0:	08013f38 	.word	0x08013f38

0800e4b4 <acc_confprogram_get_default_value>:
 800e4b4:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
 800e4b8:	4770      	bx	lr
 800e4ba:	bf00      	nop

0800e4bc <acc_confprogram_copy>:
 800e4bc:	b152      	cbz	r2, 800e4d4 <acc_confprogram_copy+0x18>
 800e4be:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800e4c2:	3804      	subs	r0, #4
 800e4c4:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800e4c8:	804b      	strh	r3, [r1, #2]
 800e4ca:	0c1b      	lsrs	r3, r3, #16
 800e4cc:	800b      	strh	r3, [r1, #0]
 800e4ce:	3104      	adds	r1, #4
 800e4d0:	4291      	cmp	r1, r2
 800e4d2:	d1f7      	bne.n	800e4c4 <acc_confprogram_copy+0x8>
 800e4d4:	4770      	bx	lr
 800e4d6:	bf00      	nop

0800e4d8 <acc_image_a111_r2c_cbank_and_vana_calibration_get>:
 800e4d8:	4800      	ldr	r0, [pc, #0]	; (800e4dc <acc_image_a111_r2c_cbank_and_vana_calibration_get+0x4>)
 800e4da:	4770      	bx	lr
 800e4dc:	08014018 	.word	0x08014018

0800e4e0 <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>:
 800e4e0:	4800      	ldr	r0, [pc, #0]	; (800e4e4 <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get+0x4>)
 800e4e2:	4770      	bx	lr
 800e4e4:	08014670 	.word	0x08014670

0800e4e8 <acc_image_a111_r2c_rx_fine_dip_calibration_get>:
 800e4e8:	4800      	ldr	r0, [pc, #0]	; (800e4ec <acc_image_a111_r2c_rx_fine_dip_calibration_get+0x4>)
 800e4ea:	4770      	bx	lr
 800e4ec:	08014a00 	.word	0x08014a00

0800e4f0 <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>:
 800e4f0:	4800      	ldr	r0, [pc, #0]	; (800e4f4 <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get+0x4>)
 800e4f2:	4770      	bx	lr
 800e4f4:	0801575c 	.word	0x0801575c

0800e4f8 <acc_image_a111_r2c_sweep_get>:
 800e4f8:	4800      	ldr	r0, [pc, #0]	; (800e4fc <acc_image_a111_r2c_sweep_get+0x4>)
 800e4fa:	4770      	bx	lr
 800e4fc:	08015ce0 	.word	0x08015ce0

0800e500 <acc_image_a111_r2c_sweep_param_table_get>:
 800e500:	4800      	ldr	r0, [pc, #0]	; (800e504 <acc_image_a111_r2c_sweep_param_table_get+0x4>)
 800e502:	4770      	bx	lr
 800e504:	08016b04 	.word	0x08016b04

0800e508 <quarter_pi_cos_sin_f32>:
 800e508:	eddf 7a26 	vldr	s15, [pc, #152]	; 800e5a4 <quarter_pi_cos_sin_f32+0x9c>
 800e50c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e514:	d442      	bmi.n	800e59c <quarter_pi_cos_sin_f32+0x94>
 800e516:	b310      	cbz	r0, 800e55e <quarter_pi_cos_sin_f32+0x56>
 800e518:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e51c:	eddf 7a22 	vldr	s15, [pc, #136]	; 800e5a8 <quarter_pi_cos_sin_f32+0xa0>
 800e520:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800e5ac <quarter_pi_cos_sin_f32+0xa4>
 800e524:	eddf 5a22 	vldr	s11, [pc, #136]	; 800e5b0 <quarter_pi_cos_sin_f32+0xa8>
 800e528:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800e5b4 <quarter_pi_cos_sin_f32+0xac>
 800e52c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e530:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e534:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e538:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e53c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e540:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800e544:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e548:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e54c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e550:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e554:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e558:	ee30 0a07 	vadd.f32	s0, s0, s14
 800e55c:	4770      	bx	lr
 800e55e:	ee60 7a00 	vmul.f32	s15, s0, s0
 800e562:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800e5a8 <quarter_pi_cos_sin_f32+0xa0>
 800e566:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800e5b8 <quarter_pi_cos_sin_f32+0xb0>
 800e56a:	eddf 5a14 	vldr	s11, [pc, #80]	; 800e5bc <quarter_pi_cos_sin_f32+0xb4>
 800e56e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800e5c0 <quarter_pi_cos_sin_f32+0xb8>
 800e572:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e57a:	ee37 7a45 	vsub.f32	s14, s14, s10
 800e57e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e582:	ee37 7a25 	vadd.f32	s14, s14, s11
 800e586:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e58a:	ee37 7a46 	vsub.f32	s14, s14, s12
 800e58e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e596:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e59a:	4770      	bx	lr
 800e59c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800e5c4 <quarter_pi_cos_sin_f32+0xbc>
 800e5a0:	4770      	bx	lr
 800e5a2:	bf00      	nop
 800e5a4:	bf490fdb 	.word	0xbf490fdb
 800e5a8:	00000000 	.word	0x00000000
 800e5ac:	37cd1800 	.word	0x37cd1800
 800e5b0:	3ab606a0 	.word	0x3ab606a0
 800e5b4:	3d2aaaa6 	.word	0x3d2aaaa6
 800e5b8:	394c909b 	.word	0x394c909b
 800e5bc:	3c088366 	.word	0x3c088366
 800e5c0:	3e2aaaa2 	.word	0x3e2aaaa2
 800e5c4:	7fc00000 	.word	0x7fc00000

0800e5c8 <restricted_cos_sin_f32>:
 800e5c8:	eddf 7a09 	vldr	s15, [pc, #36]	; 800e5f0 <restricted_cos_sin_f32+0x28>
 800e5cc:	eddf 6a09 	vldr	s13, [pc, #36]	; 800e5f4 <restricted_cos_sin_f32+0x2c>
 800e5d0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e5d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e5d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e5dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5e0:	bf5c      	itt	pl
 800e5e2:	f080 0001 	eorpl.w	r0, r0, #1
 800e5e6:	eeb0 0a67 	vmovpl.f32	s0, s15
 800e5ea:	f7ff bf8d 	b.w	800e508 <quarter_pi_cos_sin_f32>
 800e5ee:	bf00      	nop
 800e5f0:	3fc90fdb 	.word	0x3fc90fdb
 800e5f4:	333bbd2e 	.word	0x333bbd2e

0800e5f8 <acc_alg_basic_math_restricted_tan_f32>:
 800e5f8:	b508      	push	{r3, lr}
 800e5fa:	2000      	movs	r0, #0
 800e5fc:	eeb0 4a40 	vmov.f32	s8, s0
 800e600:	f7ff ffe2 	bl	800e5c8 <restricted_cos_sin_f32>
 800e604:	2001      	movs	r0, #1
 800e606:	eef0 4a40 	vmov.f32	s9, s0
 800e60a:	eeb0 0a44 	vmov.f32	s0, s8
 800e60e:	f7ff ffdb 	bl	800e5c8 <restricted_cos_sin_f32>
 800e612:	ee84 0a80 	vdiv.f32	s0, s9, s0
 800e616:	bd08      	pop	{r3, pc}

0800e618 <acc_alg_basic_math_restricted_atan_f32>:
 800e618:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800e61c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e624:	d434      	bmi.n	800e690 <acc_alg_basic_math_restricted_atan_f32+0x78>
 800e626:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e62a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e632:	dd1b      	ble.n	800e66c <acc_alg_basic_math_restricted_atan_f32+0x54>
 800e634:	ee87 6a80 	vdiv.f32	s12, s15, s0
 800e638:	4b17      	ldr	r3, [pc, #92]	; (800e698 <acc_alg_basic_math_restricted_atan_f32+0x80>)
 800e63a:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800e63e:	eddf 7a17 	vldr	s15, [pc, #92]	; 800e69c <acc_alg_basic_math_restricted_atan_f32+0x84>
 800e642:	ee66 6a06 	vmul.f32	s13, s12, s12
 800e646:	ed33 7a01 	vldmdb	r3!, {s14}
 800e64a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e64e:	429a      	cmp	r2, r3
 800e650:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e654:	d1f7      	bne.n	800e646 <acc_alg_basic_math_restricted_atan_f32+0x2e>
 800e656:	ee66 7a27 	vmul.f32	s15, s12, s15
 800e65a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800e6a0 <acc_alg_basic_math_restricted_atan_f32+0x88>
 800e65e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800e6a4 <acc_alg_basic_math_restricted_atan_f32+0x8c>
 800e662:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e666:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e66a:	4770      	bx	lr
 800e66c:	4b0a      	ldr	r3, [pc, #40]	; (800e698 <acc_alg_basic_math_restricted_atan_f32+0x80>)
 800e66e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800e69c <acc_alg_basic_math_restricted_atan_f32+0x84>
 800e672:	ee60 6a00 	vmul.f32	s13, s0, s0
 800e676:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800e67a:	ed33 7a01 	vldmdb	r3!, {s14}
 800e67e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e682:	429a      	cmp	r2, r3
 800e684:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e688:	d1f7      	bne.n	800e67a <acc_alg_basic_math_restricted_atan_f32+0x62>
 800e68a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e68e:	4770      	bx	lr
 800e690:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800e6a8 <acc_alg_basic_math_restricted_atan_f32+0x90>
 800e694:	4770      	bx	lr
 800e696:	bf00      	nop
 800e698:	08017028 	.word	0x08017028
 800e69c:	00000000 	.word	0x00000000
 800e6a0:	3fc90fdb 	.word	0x3fc90fdb
 800e6a4:	333bbd2e 	.word	0x333bbd2e
 800e6a8:	7fc00000 	.word	0x7fc00000

0800e6ac <acc_alg_basic_math_q3_12_complex_mul>:
 800e6ac:	b302      	cbz	r2, 800e6f0 <acc_alg_basic_math_q3_12_complex_mul+0x44>
 800e6ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	1c87      	adds	r7, r0, #2
 800e6b4:	f101 0c02 	add.w	ip, r1, #2
 800e6b8:	f930 e023 	ldrsh.w	lr, [r0, r3, lsl #2]
 800e6bc:	f831 4023 	ldrh.w	r4, [r1, r3, lsl #2]
 800e6c0:	f937 5023 	ldrsh.w	r5, [r7, r3, lsl #2]
 800e6c4:	f93c 6023 	ldrsh.w	r6, [ip, r3, lsl #2]
 800e6c8:	fb14 f40e 	smulbb	r4, r4, lr
 800e6cc:	fb05 4416 	mls	r4, r5, r6, r4
 800e6d0:	1324      	asrs	r4, r4, #12
 800e6d2:	f820 4023 	strh.w	r4, [r0, r3, lsl #2]
 800e6d6:	f831 4023 	ldrh.w	r4, [r1, r3, lsl #2]
 800e6da:	fb06 f60e 	mul.w	r6, r6, lr
 800e6de:	fb15 6504 	smlabb	r5, r5, r4, r6
 800e6e2:	132d      	asrs	r5, r5, #12
 800e6e4:	f827 5023 	strh.w	r5, [r7, r3, lsl #2]
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d1e4      	bne.n	800e6b8 <acc_alg_basic_math_q3_12_complex_mul+0xc>
 800e6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6f0:	4770      	bx	lr
 800e6f2:	bf00      	nop

0800e6f4 <acc_alg_basic_math_q3_12_complex_scalar_abs>:
 800e6f4:	b203      	sxth	r3, r0
 800e6f6:	1400      	asrs	r0, r0, #16
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
 800e6fe:	bfb8      	it	lt
 800e700:	425b      	neglt	r3, r3
 800e702:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
 800e706:	b218      	sxth	r0, r3
 800e708:	b213      	sxth	r3, r2
 800e70a:	4298      	cmp	r0, r3
 800e70c:	b082      	sub	sp, #8
 800e70e:	da02      	bge.n	800e716 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x22>
 800e710:	4602      	mov	r2, r0
 800e712:	4618      	mov	r0, r3
 800e714:	4613      	mov	r3, r2
 800e716:	f240 62a1 	movw	r2, #1697	; 0x6a1
 800e71a:	fb10 f202 	smulbb	r2, r0, r2
 800e71e:	2a00      	cmp	r2, #0
 800e720:	bfb8      	it	lt
 800e722:	f602 72ff 	addwlt	r2, r2, #4095	; 0xfff
 800e726:	ebb3 3f22 	cmp.w	r3, r2, asr #12
 800e72a:	da0b      	bge.n	800e744 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x50>
 800e72c:	f240 3227 	movw	r2, #807	; 0x327
 800e730:	fb13 f302 	smulbb	r3, r3, r2
 800e734:	f640 72d7 	movw	r2, #4055	; 0xfd7
 800e738:	fb10 3002 	smlabb	r0, r0, r2, r3
 800e73c:	f340 300f 	sbfx	r0, r0, #12, #16
 800e740:	b002      	add	sp, #8
 800e742:	4770      	bx	lr
 800e744:	f640 02fa 	movw	r2, #2298	; 0x8fa
 800e748:	fb13 f302 	smulbb	r3, r3, r2
 800e74c:	f640 5271 	movw	r2, #3441	; 0xd71
 800e750:	fb10 3002 	smlabb	r0, r0, r2, r3
 800e754:	f340 300f 	sbfx	r0, r0, #12, #16
 800e758:	b002      	add	sp, #8
 800e75a:	4770      	bx	lr

0800e75c <acc_alg_basic_math_q3_12_complex_conj_normalize>:
 800e75c:	2900      	cmp	r1, #0
 800e75e:	d04f      	beq.n	800e800 <acc_alg_basic_math_q3_12_complex_conj_normalize+0xa4>
 800e760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e764:	f240 6ca1 	movw	ip, #1697	; 0x6a1
 800e768:	2400      	movs	r4, #0
 800e76a:	1c87      	adds	r7, r0, #2
 800e76c:	f640 0afa 	movw	sl, #2298	; 0x8fa
 800e770:	f640 5971 	movw	r9, #3441	; 0xd71
 800e774:	f240 3827 	movw	r8, #807	; 0x327
 800e778:	f640 7ed7 	movw	lr, #4055	; 0xfd7
 800e77c:	e006      	b.n	800e78c <acc_alg_basic_math_q3_12_complex_conj_normalize+0x30>
 800e77e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 800e782:	f827 3024 	strh.w	r3, [r7, r4, lsl #2]
 800e786:	3401      	adds	r4, #1
 800e788:	42a1      	cmp	r1, r4
 800e78a:	d037      	beq.n	800e7fc <acc_alg_basic_math_q3_12_complex_conj_normalize+0xa0>
 800e78c:	f930 6024 	ldrsh.w	r6, [r0, r4, lsl #2]
 800e790:	f937 5024 	ldrsh.w	r5, [r7, r4, lsl #2]
 800e794:	ea86 73e6 	eor.w	r3, r6, r6, asr #31
 800e798:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 800e79c:	eba3 73e6 	sub.w	r3, r3, r6, asr #31
 800e7a0:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 800e7a4:	b21b      	sxth	r3, r3
 800e7a6:	b212      	sxth	r2, r2
 800e7a8:	4293      	cmp	r3, r2
 800e7aa:	da02      	bge.n	800e7b2 <acc_alg_basic_math_q3_12_complex_conj_normalize+0x56>
 800e7ac:	469b      	mov	fp, r3
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	465a      	mov	r2, fp
 800e7b2:	fb13 fb0c 	smulbb	fp, r3, ip
 800e7b6:	f1bb 0f00 	cmp.w	fp, #0
 800e7ba:	bfb8      	it	lt
 800e7bc:	f60b 7bff 	addwlt	fp, fp, #4095	; 0xfff
 800e7c0:	ebb2 3f2b 	cmp.w	r2, fp, asr #12
 800e7c4:	bfb5      	itete	lt
 800e7c6:	fb12 f208 	smulbblt	r2, r2, r8
 800e7ca:	fb12 f20a 	smulbbge	r2, r2, sl
 800e7ce:	fb13 230e 	smlabblt	r3, r3, lr, r2
 800e7d2:	fb13 2309 	smlabbge	r3, r3, r9, r2
 800e7d6:	f343 330f 	sbfx	r3, r3, #12, #16
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d0cf      	beq.n	800e77e <acc_alg_basic_math_q3_12_complex_conj_normalize+0x22>
 800e7de:	ebc5 5505 	rsb	r5, r5, r5, lsl #20
 800e7e2:	032d      	lsls	r5, r5, #12
 800e7e4:	0336      	lsls	r6, r6, #12
 800e7e6:	fb95 f5f3 	sdiv	r5, r5, r3
 800e7ea:	fb96 f3f3 	sdiv	r3, r6, r3
 800e7ee:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 800e7f2:	f827 5024 	strh.w	r5, [r7, r4, lsl #2]
 800e7f6:	3401      	adds	r4, #1
 800e7f8:	42a1      	cmp	r1, r4
 800e7fa:	d1c7      	bne.n	800e78c <acc_alg_basic_math_q3_12_complex_conj_normalize+0x30>
 800e7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e800:	4770      	bx	lr
 800e802:	bf00      	nop

0800e804 <acc_alg_basic_math_q3_12_sin>:
 800e804:	0043      	lsls	r3, r0, #1
 800e806:	bf4c      	ite	mi
 800e808:	43c3      	mvnmi	r3, r0
 800e80a:	4603      	movpl	r3, r0
 800e80c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e810:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e814:	4a05      	ldr	r2, [pc, #20]	; (800e82c <acc_alg_basic_math_q3_12_sin+0x28>)
 800e816:	0d9b      	lsrs	r3, r3, #22
 800e818:	2800      	cmp	r0, #0
 800e81a:	bfbd      	ittte	lt
 800e81c:	f832 0013 	ldrhlt.w	r0, [r2, r3, lsl #1]
 800e820:	4240      	neglt	r0, r0
 800e822:	b200      	sxthlt	r0, r0
 800e824:	f932 0013 	ldrshge.w	r0, [r2, r3, lsl #1]
 800e828:	4770      	bx	lr
 800e82a:	bf00      	nop
 800e82c:	08017028 	.word	0x08017028

0800e830 <acc_alg_basic_math_q3_12_cos>:
 800e830:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800e834:	0043      	lsls	r3, r0, #1
 800e836:	bf54      	ite	pl
 800e838:	43d3      	mvnpl	r3, r2
 800e83a:	4613      	movmi	r3, r2
 800e83c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e840:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e844:	2a00      	cmp	r2, #0
 800e846:	ea4f 5393 	mov.w	r3, r3, lsr #22
 800e84a:	4a04      	ldr	r2, [pc, #16]	; (800e85c <acc_alg_basic_math_q3_12_cos+0x2c>)
 800e84c:	bfbd      	ittte	lt
 800e84e:	f832 0013 	ldrhlt.w	r0, [r2, r3, lsl #1]
 800e852:	4240      	neglt	r0, r0
 800e854:	b200      	sxthlt	r0, r0
 800e856:	f932 0013 	ldrshge.w	r0, [r2, r3, lsl #1]
 800e85a:	4770      	bx	lr
 800e85c:	08017028 	.word	0x08017028

0800e860 <_calloc_r>:
 800e860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e862:	fba1 2402 	umull	r2, r4, r1, r2
 800e866:	b94c      	cbnz	r4, 800e87c <_calloc_r+0x1c>
 800e868:	4611      	mov	r1, r2
 800e86a:	9201      	str	r2, [sp, #4]
 800e86c:	f000 f83e 	bl	800e8ec <_malloc_r>
 800e870:	9a01      	ldr	r2, [sp, #4]
 800e872:	4605      	mov	r5, r0
 800e874:	b930      	cbnz	r0, 800e884 <_calloc_r+0x24>
 800e876:	4628      	mov	r0, r5
 800e878:	b003      	add	sp, #12
 800e87a:	bd30      	pop	{r4, r5, pc}
 800e87c:	220c      	movs	r2, #12
 800e87e:	6002      	str	r2, [r0, #0]
 800e880:	2500      	movs	r5, #0
 800e882:	e7f8      	b.n	800e876 <_calloc_r+0x16>
 800e884:	4621      	mov	r1, r4
 800e886:	f001 f84f 	bl	800f928 <memset>
 800e88a:	e7f4      	b.n	800e876 <_calloc_r+0x16>

0800e88c <malloc>:
 800e88c:	4b02      	ldr	r3, [pc, #8]	; (800e898 <malloc+0xc>)
 800e88e:	4601      	mov	r1, r0
 800e890:	6818      	ldr	r0, [r3, #0]
 800e892:	f000 b82b 	b.w	800e8ec <_malloc_r>
 800e896:	bf00      	nop
 800e898:	200001fc 	.word	0x200001fc

0800e89c <free>:
 800e89c:	4b02      	ldr	r3, [pc, #8]	; (800e8a8 <free+0xc>)
 800e89e:	4601      	mov	r1, r0
 800e8a0:	6818      	ldr	r0, [r3, #0]
 800e8a2:	f001 bf57 	b.w	8010754 <_free_r>
 800e8a6:	bf00      	nop
 800e8a8:	200001fc 	.word	0x200001fc

0800e8ac <sbrk_aligned>:
 800e8ac:	b570      	push	{r4, r5, r6, lr}
 800e8ae:	4e0e      	ldr	r6, [pc, #56]	; (800e8e8 <sbrk_aligned+0x3c>)
 800e8b0:	460c      	mov	r4, r1
 800e8b2:	6831      	ldr	r1, [r6, #0]
 800e8b4:	4605      	mov	r5, r0
 800e8b6:	b911      	cbnz	r1, 800e8be <sbrk_aligned+0x12>
 800e8b8:	f001 f876 	bl	800f9a8 <_sbrk_r>
 800e8bc:	6030      	str	r0, [r6, #0]
 800e8be:	4621      	mov	r1, r4
 800e8c0:	4628      	mov	r0, r5
 800e8c2:	f001 f871 	bl	800f9a8 <_sbrk_r>
 800e8c6:	1c43      	adds	r3, r0, #1
 800e8c8:	d00a      	beq.n	800e8e0 <sbrk_aligned+0x34>
 800e8ca:	1cc4      	adds	r4, r0, #3
 800e8cc:	f024 0403 	bic.w	r4, r4, #3
 800e8d0:	42a0      	cmp	r0, r4
 800e8d2:	d007      	beq.n	800e8e4 <sbrk_aligned+0x38>
 800e8d4:	1a21      	subs	r1, r4, r0
 800e8d6:	4628      	mov	r0, r5
 800e8d8:	f001 f866 	bl	800f9a8 <_sbrk_r>
 800e8dc:	3001      	adds	r0, #1
 800e8de:	d101      	bne.n	800e8e4 <sbrk_aligned+0x38>
 800e8e0:	f04f 34ff 	mov.w	r4, #4294967295
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	bd70      	pop	{r4, r5, r6, pc}
 800e8e8:	200006e4 	.word	0x200006e4

0800e8ec <_malloc_r>:
 800e8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8f0:	1ccd      	adds	r5, r1, #3
 800e8f2:	f025 0503 	bic.w	r5, r5, #3
 800e8f6:	3508      	adds	r5, #8
 800e8f8:	2d0c      	cmp	r5, #12
 800e8fa:	bf38      	it	cc
 800e8fc:	250c      	movcc	r5, #12
 800e8fe:	2d00      	cmp	r5, #0
 800e900:	4607      	mov	r7, r0
 800e902:	db01      	blt.n	800e908 <_malloc_r+0x1c>
 800e904:	42a9      	cmp	r1, r5
 800e906:	d905      	bls.n	800e914 <_malloc_r+0x28>
 800e908:	230c      	movs	r3, #12
 800e90a:	603b      	str	r3, [r7, #0]
 800e90c:	2600      	movs	r6, #0
 800e90e:	4630      	mov	r0, r6
 800e910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e914:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e9e8 <_malloc_r+0xfc>
 800e918:	f000 f868 	bl	800e9ec <__malloc_lock>
 800e91c:	f8d8 3000 	ldr.w	r3, [r8]
 800e920:	461c      	mov	r4, r3
 800e922:	bb5c      	cbnz	r4, 800e97c <_malloc_r+0x90>
 800e924:	4629      	mov	r1, r5
 800e926:	4638      	mov	r0, r7
 800e928:	f7ff ffc0 	bl	800e8ac <sbrk_aligned>
 800e92c:	1c43      	adds	r3, r0, #1
 800e92e:	4604      	mov	r4, r0
 800e930:	d155      	bne.n	800e9de <_malloc_r+0xf2>
 800e932:	f8d8 4000 	ldr.w	r4, [r8]
 800e936:	4626      	mov	r6, r4
 800e938:	2e00      	cmp	r6, #0
 800e93a:	d145      	bne.n	800e9c8 <_malloc_r+0xdc>
 800e93c:	2c00      	cmp	r4, #0
 800e93e:	d048      	beq.n	800e9d2 <_malloc_r+0xe6>
 800e940:	6823      	ldr	r3, [r4, #0]
 800e942:	4631      	mov	r1, r6
 800e944:	4638      	mov	r0, r7
 800e946:	eb04 0903 	add.w	r9, r4, r3
 800e94a:	f001 f82d 	bl	800f9a8 <_sbrk_r>
 800e94e:	4581      	cmp	r9, r0
 800e950:	d13f      	bne.n	800e9d2 <_malloc_r+0xe6>
 800e952:	6821      	ldr	r1, [r4, #0]
 800e954:	1a6d      	subs	r5, r5, r1
 800e956:	4629      	mov	r1, r5
 800e958:	4638      	mov	r0, r7
 800e95a:	f7ff ffa7 	bl	800e8ac <sbrk_aligned>
 800e95e:	3001      	adds	r0, #1
 800e960:	d037      	beq.n	800e9d2 <_malloc_r+0xe6>
 800e962:	6823      	ldr	r3, [r4, #0]
 800e964:	442b      	add	r3, r5
 800e966:	6023      	str	r3, [r4, #0]
 800e968:	f8d8 3000 	ldr.w	r3, [r8]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d038      	beq.n	800e9e2 <_malloc_r+0xf6>
 800e970:	685a      	ldr	r2, [r3, #4]
 800e972:	42a2      	cmp	r2, r4
 800e974:	d12b      	bne.n	800e9ce <_malloc_r+0xe2>
 800e976:	2200      	movs	r2, #0
 800e978:	605a      	str	r2, [r3, #4]
 800e97a:	e00f      	b.n	800e99c <_malloc_r+0xb0>
 800e97c:	6822      	ldr	r2, [r4, #0]
 800e97e:	1b52      	subs	r2, r2, r5
 800e980:	d41f      	bmi.n	800e9c2 <_malloc_r+0xd6>
 800e982:	2a0b      	cmp	r2, #11
 800e984:	d917      	bls.n	800e9b6 <_malloc_r+0xca>
 800e986:	1961      	adds	r1, r4, r5
 800e988:	42a3      	cmp	r3, r4
 800e98a:	6025      	str	r5, [r4, #0]
 800e98c:	bf18      	it	ne
 800e98e:	6059      	strne	r1, [r3, #4]
 800e990:	6863      	ldr	r3, [r4, #4]
 800e992:	bf08      	it	eq
 800e994:	f8c8 1000 	streq.w	r1, [r8]
 800e998:	5162      	str	r2, [r4, r5]
 800e99a:	604b      	str	r3, [r1, #4]
 800e99c:	4638      	mov	r0, r7
 800e99e:	f104 060b 	add.w	r6, r4, #11
 800e9a2:	f000 f829 	bl	800e9f8 <__malloc_unlock>
 800e9a6:	f026 0607 	bic.w	r6, r6, #7
 800e9aa:	1d23      	adds	r3, r4, #4
 800e9ac:	1af2      	subs	r2, r6, r3
 800e9ae:	d0ae      	beq.n	800e90e <_malloc_r+0x22>
 800e9b0:	1b9b      	subs	r3, r3, r6
 800e9b2:	50a3      	str	r3, [r4, r2]
 800e9b4:	e7ab      	b.n	800e90e <_malloc_r+0x22>
 800e9b6:	42a3      	cmp	r3, r4
 800e9b8:	6862      	ldr	r2, [r4, #4]
 800e9ba:	d1dd      	bne.n	800e978 <_malloc_r+0x8c>
 800e9bc:	f8c8 2000 	str.w	r2, [r8]
 800e9c0:	e7ec      	b.n	800e99c <_malloc_r+0xb0>
 800e9c2:	4623      	mov	r3, r4
 800e9c4:	6864      	ldr	r4, [r4, #4]
 800e9c6:	e7ac      	b.n	800e922 <_malloc_r+0x36>
 800e9c8:	4634      	mov	r4, r6
 800e9ca:	6876      	ldr	r6, [r6, #4]
 800e9cc:	e7b4      	b.n	800e938 <_malloc_r+0x4c>
 800e9ce:	4613      	mov	r3, r2
 800e9d0:	e7cc      	b.n	800e96c <_malloc_r+0x80>
 800e9d2:	230c      	movs	r3, #12
 800e9d4:	603b      	str	r3, [r7, #0]
 800e9d6:	4638      	mov	r0, r7
 800e9d8:	f000 f80e 	bl	800e9f8 <__malloc_unlock>
 800e9dc:	e797      	b.n	800e90e <_malloc_r+0x22>
 800e9de:	6025      	str	r5, [r4, #0]
 800e9e0:	e7dc      	b.n	800e99c <_malloc_r+0xb0>
 800e9e2:	605b      	str	r3, [r3, #4]
 800e9e4:	deff      	udf	#255	; 0xff
 800e9e6:	bf00      	nop
 800e9e8:	200006e0 	.word	0x200006e0

0800e9ec <__malloc_lock>:
 800e9ec:	4801      	ldr	r0, [pc, #4]	; (800e9f4 <__malloc_lock+0x8>)
 800e9ee:	f001 b827 	b.w	800fa40 <__retarget_lock_acquire_recursive>
 800e9f2:	bf00      	nop
 800e9f4:	20000828 	.word	0x20000828

0800e9f8 <__malloc_unlock>:
 800e9f8:	4801      	ldr	r0, [pc, #4]	; (800ea00 <__malloc_unlock+0x8>)
 800e9fa:	f001 b822 	b.w	800fa42 <__retarget_lock_release_recursive>
 800e9fe:	bf00      	nop
 800ea00:	20000828 	.word	0x20000828

0800ea04 <__cvt>:
 800ea04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea08:	ec55 4b10 	vmov	r4, r5, d0
 800ea0c:	2d00      	cmp	r5, #0
 800ea0e:	460e      	mov	r6, r1
 800ea10:	4619      	mov	r1, r3
 800ea12:	462b      	mov	r3, r5
 800ea14:	bfbb      	ittet	lt
 800ea16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ea1a:	461d      	movlt	r5, r3
 800ea1c:	2300      	movge	r3, #0
 800ea1e:	232d      	movlt	r3, #45	; 0x2d
 800ea20:	700b      	strb	r3, [r1, #0]
 800ea22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ea28:	4691      	mov	r9, r2
 800ea2a:	f023 0820 	bic.w	r8, r3, #32
 800ea2e:	bfbc      	itt	lt
 800ea30:	4622      	movlt	r2, r4
 800ea32:	4614      	movlt	r4, r2
 800ea34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ea38:	d005      	beq.n	800ea46 <__cvt+0x42>
 800ea3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ea3e:	d100      	bne.n	800ea42 <__cvt+0x3e>
 800ea40:	3601      	adds	r6, #1
 800ea42:	2102      	movs	r1, #2
 800ea44:	e000      	b.n	800ea48 <__cvt+0x44>
 800ea46:	2103      	movs	r1, #3
 800ea48:	ab03      	add	r3, sp, #12
 800ea4a:	9301      	str	r3, [sp, #4]
 800ea4c:	ab02      	add	r3, sp, #8
 800ea4e:	9300      	str	r3, [sp, #0]
 800ea50:	ec45 4b10 	vmov	d0, r4, r5
 800ea54:	4653      	mov	r3, sl
 800ea56:	4632      	mov	r2, r6
 800ea58:	f001 f88a 	bl	800fb70 <_dtoa_r>
 800ea5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ea60:	4607      	mov	r7, r0
 800ea62:	d102      	bne.n	800ea6a <__cvt+0x66>
 800ea64:	f019 0f01 	tst.w	r9, #1
 800ea68:	d022      	beq.n	800eab0 <__cvt+0xac>
 800ea6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ea6e:	eb07 0906 	add.w	r9, r7, r6
 800ea72:	d110      	bne.n	800ea96 <__cvt+0x92>
 800ea74:	783b      	ldrb	r3, [r7, #0]
 800ea76:	2b30      	cmp	r3, #48	; 0x30
 800ea78:	d10a      	bne.n	800ea90 <__cvt+0x8c>
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	4620      	mov	r0, r4
 800ea80:	4629      	mov	r1, r5
 800ea82:	f7f2 f899 	bl	8000bb8 <__aeabi_dcmpeq>
 800ea86:	b918      	cbnz	r0, 800ea90 <__cvt+0x8c>
 800ea88:	f1c6 0601 	rsb	r6, r6, #1
 800ea8c:	f8ca 6000 	str.w	r6, [sl]
 800ea90:	f8da 3000 	ldr.w	r3, [sl]
 800ea94:	4499      	add	r9, r3
 800ea96:	2200      	movs	r2, #0
 800ea98:	2300      	movs	r3, #0
 800ea9a:	4620      	mov	r0, r4
 800ea9c:	4629      	mov	r1, r5
 800ea9e:	f7f2 f88b 	bl	8000bb8 <__aeabi_dcmpeq>
 800eaa2:	b108      	cbz	r0, 800eaa8 <__cvt+0xa4>
 800eaa4:	f8cd 900c 	str.w	r9, [sp, #12]
 800eaa8:	2230      	movs	r2, #48	; 0x30
 800eaaa:	9b03      	ldr	r3, [sp, #12]
 800eaac:	454b      	cmp	r3, r9
 800eaae:	d307      	bcc.n	800eac0 <__cvt+0xbc>
 800eab0:	9b03      	ldr	r3, [sp, #12]
 800eab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eab4:	1bdb      	subs	r3, r3, r7
 800eab6:	4638      	mov	r0, r7
 800eab8:	6013      	str	r3, [r2, #0]
 800eaba:	b004      	add	sp, #16
 800eabc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eac0:	1c59      	adds	r1, r3, #1
 800eac2:	9103      	str	r1, [sp, #12]
 800eac4:	701a      	strb	r2, [r3, #0]
 800eac6:	e7f0      	b.n	800eaaa <__cvt+0xa6>

0800eac8 <__exponent>:
 800eac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eaca:	4603      	mov	r3, r0
 800eacc:	2900      	cmp	r1, #0
 800eace:	bfb8      	it	lt
 800ead0:	4249      	neglt	r1, r1
 800ead2:	f803 2b02 	strb.w	r2, [r3], #2
 800ead6:	bfb4      	ite	lt
 800ead8:	222d      	movlt	r2, #45	; 0x2d
 800eada:	222b      	movge	r2, #43	; 0x2b
 800eadc:	2909      	cmp	r1, #9
 800eade:	7042      	strb	r2, [r0, #1]
 800eae0:	dd2a      	ble.n	800eb38 <__exponent+0x70>
 800eae2:	f10d 0207 	add.w	r2, sp, #7
 800eae6:	4617      	mov	r7, r2
 800eae8:	260a      	movs	r6, #10
 800eaea:	4694      	mov	ip, r2
 800eaec:	fb91 f5f6 	sdiv	r5, r1, r6
 800eaf0:	fb06 1415 	mls	r4, r6, r5, r1
 800eaf4:	3430      	adds	r4, #48	; 0x30
 800eaf6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800eafa:	460c      	mov	r4, r1
 800eafc:	2c63      	cmp	r4, #99	; 0x63
 800eafe:	f102 32ff 	add.w	r2, r2, #4294967295
 800eb02:	4629      	mov	r1, r5
 800eb04:	dcf1      	bgt.n	800eaea <__exponent+0x22>
 800eb06:	3130      	adds	r1, #48	; 0x30
 800eb08:	f1ac 0402 	sub.w	r4, ip, #2
 800eb0c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800eb10:	1c41      	adds	r1, r0, #1
 800eb12:	4622      	mov	r2, r4
 800eb14:	42ba      	cmp	r2, r7
 800eb16:	d30a      	bcc.n	800eb2e <__exponent+0x66>
 800eb18:	f10d 0209 	add.w	r2, sp, #9
 800eb1c:	eba2 020c 	sub.w	r2, r2, ip
 800eb20:	42bc      	cmp	r4, r7
 800eb22:	bf88      	it	hi
 800eb24:	2200      	movhi	r2, #0
 800eb26:	4413      	add	r3, r2
 800eb28:	1a18      	subs	r0, r3, r0
 800eb2a:	b003      	add	sp, #12
 800eb2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb2e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800eb32:	f801 5f01 	strb.w	r5, [r1, #1]!
 800eb36:	e7ed      	b.n	800eb14 <__exponent+0x4c>
 800eb38:	2330      	movs	r3, #48	; 0x30
 800eb3a:	3130      	adds	r1, #48	; 0x30
 800eb3c:	7083      	strb	r3, [r0, #2]
 800eb3e:	70c1      	strb	r1, [r0, #3]
 800eb40:	1d03      	adds	r3, r0, #4
 800eb42:	e7f1      	b.n	800eb28 <__exponent+0x60>

0800eb44 <_printf_float>:
 800eb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb48:	ed2d 8b02 	vpush	{d8}
 800eb4c:	b08d      	sub	sp, #52	; 0x34
 800eb4e:	460c      	mov	r4, r1
 800eb50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800eb54:	4616      	mov	r6, r2
 800eb56:	461f      	mov	r7, r3
 800eb58:	4605      	mov	r5, r0
 800eb5a:	f000 feed 	bl	800f938 <_localeconv_r>
 800eb5e:	f8d0 a000 	ldr.w	sl, [r0]
 800eb62:	4650      	mov	r0, sl
 800eb64:	f7f1 fbfc 	bl	8000360 <strlen>
 800eb68:	2300      	movs	r3, #0
 800eb6a:	930a      	str	r3, [sp, #40]	; 0x28
 800eb6c:	6823      	ldr	r3, [r4, #0]
 800eb6e:	9305      	str	r3, [sp, #20]
 800eb70:	f8d8 3000 	ldr.w	r3, [r8]
 800eb74:	f894 b018 	ldrb.w	fp, [r4, #24]
 800eb78:	3307      	adds	r3, #7
 800eb7a:	f023 0307 	bic.w	r3, r3, #7
 800eb7e:	f103 0208 	add.w	r2, r3, #8
 800eb82:	f8c8 2000 	str.w	r2, [r8]
 800eb86:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eb8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800eb8e:	9307      	str	r3, [sp, #28]
 800eb90:	f8cd 8018 	str.w	r8, [sp, #24]
 800eb94:	ee08 0a10 	vmov	s16, r0
 800eb98:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800eb9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eba0:	4b9e      	ldr	r3, [pc, #632]	; (800ee1c <_printf_float+0x2d8>)
 800eba2:	f04f 32ff 	mov.w	r2, #4294967295
 800eba6:	f7f2 f839 	bl	8000c1c <__aeabi_dcmpun>
 800ebaa:	bb88      	cbnz	r0, 800ec10 <_printf_float+0xcc>
 800ebac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ebb0:	4b9a      	ldr	r3, [pc, #616]	; (800ee1c <_printf_float+0x2d8>)
 800ebb2:	f04f 32ff 	mov.w	r2, #4294967295
 800ebb6:	f7f2 f813 	bl	8000be0 <__aeabi_dcmple>
 800ebba:	bb48      	cbnz	r0, 800ec10 <_printf_float+0xcc>
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	4640      	mov	r0, r8
 800ebc2:	4649      	mov	r1, r9
 800ebc4:	f7f2 f802 	bl	8000bcc <__aeabi_dcmplt>
 800ebc8:	b110      	cbz	r0, 800ebd0 <_printf_float+0x8c>
 800ebca:	232d      	movs	r3, #45	; 0x2d
 800ebcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebd0:	4a93      	ldr	r2, [pc, #588]	; (800ee20 <_printf_float+0x2dc>)
 800ebd2:	4b94      	ldr	r3, [pc, #592]	; (800ee24 <_printf_float+0x2e0>)
 800ebd4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ebd8:	bf94      	ite	ls
 800ebda:	4690      	movls	r8, r2
 800ebdc:	4698      	movhi	r8, r3
 800ebde:	2303      	movs	r3, #3
 800ebe0:	6123      	str	r3, [r4, #16]
 800ebe2:	9b05      	ldr	r3, [sp, #20]
 800ebe4:	f023 0304 	bic.w	r3, r3, #4
 800ebe8:	6023      	str	r3, [r4, #0]
 800ebea:	f04f 0900 	mov.w	r9, #0
 800ebee:	9700      	str	r7, [sp, #0]
 800ebf0:	4633      	mov	r3, r6
 800ebf2:	aa0b      	add	r2, sp, #44	; 0x2c
 800ebf4:	4621      	mov	r1, r4
 800ebf6:	4628      	mov	r0, r5
 800ebf8:	f000 f9da 	bl	800efb0 <_printf_common>
 800ebfc:	3001      	adds	r0, #1
 800ebfe:	f040 8090 	bne.w	800ed22 <_printf_float+0x1de>
 800ec02:	f04f 30ff 	mov.w	r0, #4294967295
 800ec06:	b00d      	add	sp, #52	; 0x34
 800ec08:	ecbd 8b02 	vpop	{d8}
 800ec0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec10:	4642      	mov	r2, r8
 800ec12:	464b      	mov	r3, r9
 800ec14:	4640      	mov	r0, r8
 800ec16:	4649      	mov	r1, r9
 800ec18:	f7f2 f800 	bl	8000c1c <__aeabi_dcmpun>
 800ec1c:	b140      	cbz	r0, 800ec30 <_printf_float+0xec>
 800ec1e:	464b      	mov	r3, r9
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	bfbc      	itt	lt
 800ec24:	232d      	movlt	r3, #45	; 0x2d
 800ec26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ec2a:	4a7f      	ldr	r2, [pc, #508]	; (800ee28 <_printf_float+0x2e4>)
 800ec2c:	4b7f      	ldr	r3, [pc, #508]	; (800ee2c <_printf_float+0x2e8>)
 800ec2e:	e7d1      	b.n	800ebd4 <_printf_float+0x90>
 800ec30:	6863      	ldr	r3, [r4, #4]
 800ec32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ec36:	9206      	str	r2, [sp, #24]
 800ec38:	1c5a      	adds	r2, r3, #1
 800ec3a:	d13f      	bne.n	800ecbc <_printf_float+0x178>
 800ec3c:	2306      	movs	r3, #6
 800ec3e:	6063      	str	r3, [r4, #4]
 800ec40:	9b05      	ldr	r3, [sp, #20]
 800ec42:	6861      	ldr	r1, [r4, #4]
 800ec44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ec48:	2300      	movs	r3, #0
 800ec4a:	9303      	str	r3, [sp, #12]
 800ec4c:	ab0a      	add	r3, sp, #40	; 0x28
 800ec4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ec52:	ab09      	add	r3, sp, #36	; 0x24
 800ec54:	ec49 8b10 	vmov	d0, r8, r9
 800ec58:	9300      	str	r3, [sp, #0]
 800ec5a:	6022      	str	r2, [r4, #0]
 800ec5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ec60:	4628      	mov	r0, r5
 800ec62:	f7ff fecf 	bl	800ea04 <__cvt>
 800ec66:	9b06      	ldr	r3, [sp, #24]
 800ec68:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec6a:	2b47      	cmp	r3, #71	; 0x47
 800ec6c:	4680      	mov	r8, r0
 800ec6e:	d108      	bne.n	800ec82 <_printf_float+0x13e>
 800ec70:	1cc8      	adds	r0, r1, #3
 800ec72:	db02      	blt.n	800ec7a <_printf_float+0x136>
 800ec74:	6863      	ldr	r3, [r4, #4]
 800ec76:	4299      	cmp	r1, r3
 800ec78:	dd41      	ble.n	800ecfe <_printf_float+0x1ba>
 800ec7a:	f1ab 0302 	sub.w	r3, fp, #2
 800ec7e:	fa5f fb83 	uxtb.w	fp, r3
 800ec82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ec86:	d820      	bhi.n	800ecca <_printf_float+0x186>
 800ec88:	3901      	subs	r1, #1
 800ec8a:	465a      	mov	r2, fp
 800ec8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ec90:	9109      	str	r1, [sp, #36]	; 0x24
 800ec92:	f7ff ff19 	bl	800eac8 <__exponent>
 800ec96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec98:	1813      	adds	r3, r2, r0
 800ec9a:	2a01      	cmp	r2, #1
 800ec9c:	4681      	mov	r9, r0
 800ec9e:	6123      	str	r3, [r4, #16]
 800eca0:	dc02      	bgt.n	800eca8 <_printf_float+0x164>
 800eca2:	6822      	ldr	r2, [r4, #0]
 800eca4:	07d2      	lsls	r2, r2, #31
 800eca6:	d501      	bpl.n	800ecac <_printf_float+0x168>
 800eca8:	3301      	adds	r3, #1
 800ecaa:	6123      	str	r3, [r4, #16]
 800ecac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d09c      	beq.n	800ebee <_printf_float+0xaa>
 800ecb4:	232d      	movs	r3, #45	; 0x2d
 800ecb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ecba:	e798      	b.n	800ebee <_printf_float+0xaa>
 800ecbc:	9a06      	ldr	r2, [sp, #24]
 800ecbe:	2a47      	cmp	r2, #71	; 0x47
 800ecc0:	d1be      	bne.n	800ec40 <_printf_float+0xfc>
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d1bc      	bne.n	800ec40 <_printf_float+0xfc>
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	e7b9      	b.n	800ec3e <_printf_float+0xfa>
 800ecca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ecce:	d118      	bne.n	800ed02 <_printf_float+0x1be>
 800ecd0:	2900      	cmp	r1, #0
 800ecd2:	6863      	ldr	r3, [r4, #4]
 800ecd4:	dd0b      	ble.n	800ecee <_printf_float+0x1aa>
 800ecd6:	6121      	str	r1, [r4, #16]
 800ecd8:	b913      	cbnz	r3, 800ece0 <_printf_float+0x19c>
 800ecda:	6822      	ldr	r2, [r4, #0]
 800ecdc:	07d0      	lsls	r0, r2, #31
 800ecde:	d502      	bpl.n	800ece6 <_printf_float+0x1a2>
 800ece0:	3301      	adds	r3, #1
 800ece2:	440b      	add	r3, r1
 800ece4:	6123      	str	r3, [r4, #16]
 800ece6:	65a1      	str	r1, [r4, #88]	; 0x58
 800ece8:	f04f 0900 	mov.w	r9, #0
 800ecec:	e7de      	b.n	800ecac <_printf_float+0x168>
 800ecee:	b913      	cbnz	r3, 800ecf6 <_printf_float+0x1b2>
 800ecf0:	6822      	ldr	r2, [r4, #0]
 800ecf2:	07d2      	lsls	r2, r2, #31
 800ecf4:	d501      	bpl.n	800ecfa <_printf_float+0x1b6>
 800ecf6:	3302      	adds	r3, #2
 800ecf8:	e7f4      	b.n	800ece4 <_printf_float+0x1a0>
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	e7f2      	b.n	800ece4 <_printf_float+0x1a0>
 800ecfe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ed02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed04:	4299      	cmp	r1, r3
 800ed06:	db05      	blt.n	800ed14 <_printf_float+0x1d0>
 800ed08:	6823      	ldr	r3, [r4, #0]
 800ed0a:	6121      	str	r1, [r4, #16]
 800ed0c:	07d8      	lsls	r0, r3, #31
 800ed0e:	d5ea      	bpl.n	800ece6 <_printf_float+0x1a2>
 800ed10:	1c4b      	adds	r3, r1, #1
 800ed12:	e7e7      	b.n	800ece4 <_printf_float+0x1a0>
 800ed14:	2900      	cmp	r1, #0
 800ed16:	bfd4      	ite	le
 800ed18:	f1c1 0202 	rsble	r2, r1, #2
 800ed1c:	2201      	movgt	r2, #1
 800ed1e:	4413      	add	r3, r2
 800ed20:	e7e0      	b.n	800ece4 <_printf_float+0x1a0>
 800ed22:	6823      	ldr	r3, [r4, #0]
 800ed24:	055a      	lsls	r2, r3, #21
 800ed26:	d407      	bmi.n	800ed38 <_printf_float+0x1f4>
 800ed28:	6923      	ldr	r3, [r4, #16]
 800ed2a:	4642      	mov	r2, r8
 800ed2c:	4631      	mov	r1, r6
 800ed2e:	4628      	mov	r0, r5
 800ed30:	47b8      	blx	r7
 800ed32:	3001      	adds	r0, #1
 800ed34:	d12c      	bne.n	800ed90 <_printf_float+0x24c>
 800ed36:	e764      	b.n	800ec02 <_printf_float+0xbe>
 800ed38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ed3c:	f240 80e0 	bls.w	800ef00 <_printf_float+0x3bc>
 800ed40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ed44:	2200      	movs	r2, #0
 800ed46:	2300      	movs	r3, #0
 800ed48:	f7f1 ff36 	bl	8000bb8 <__aeabi_dcmpeq>
 800ed4c:	2800      	cmp	r0, #0
 800ed4e:	d034      	beq.n	800edba <_printf_float+0x276>
 800ed50:	4a37      	ldr	r2, [pc, #220]	; (800ee30 <_printf_float+0x2ec>)
 800ed52:	2301      	movs	r3, #1
 800ed54:	4631      	mov	r1, r6
 800ed56:	4628      	mov	r0, r5
 800ed58:	47b8      	blx	r7
 800ed5a:	3001      	adds	r0, #1
 800ed5c:	f43f af51 	beq.w	800ec02 <_printf_float+0xbe>
 800ed60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed64:	429a      	cmp	r2, r3
 800ed66:	db02      	blt.n	800ed6e <_printf_float+0x22a>
 800ed68:	6823      	ldr	r3, [r4, #0]
 800ed6a:	07d8      	lsls	r0, r3, #31
 800ed6c:	d510      	bpl.n	800ed90 <_printf_float+0x24c>
 800ed6e:	ee18 3a10 	vmov	r3, s16
 800ed72:	4652      	mov	r2, sl
 800ed74:	4631      	mov	r1, r6
 800ed76:	4628      	mov	r0, r5
 800ed78:	47b8      	blx	r7
 800ed7a:	3001      	adds	r0, #1
 800ed7c:	f43f af41 	beq.w	800ec02 <_printf_float+0xbe>
 800ed80:	f04f 0800 	mov.w	r8, #0
 800ed84:	f104 091a 	add.w	r9, r4, #26
 800ed88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed8a:	3b01      	subs	r3, #1
 800ed8c:	4543      	cmp	r3, r8
 800ed8e:	dc09      	bgt.n	800eda4 <_printf_float+0x260>
 800ed90:	6823      	ldr	r3, [r4, #0]
 800ed92:	079b      	lsls	r3, r3, #30
 800ed94:	f100 8107 	bmi.w	800efa6 <_printf_float+0x462>
 800ed98:	68e0      	ldr	r0, [r4, #12]
 800ed9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed9c:	4298      	cmp	r0, r3
 800ed9e:	bfb8      	it	lt
 800eda0:	4618      	movlt	r0, r3
 800eda2:	e730      	b.n	800ec06 <_printf_float+0xc2>
 800eda4:	2301      	movs	r3, #1
 800eda6:	464a      	mov	r2, r9
 800eda8:	4631      	mov	r1, r6
 800edaa:	4628      	mov	r0, r5
 800edac:	47b8      	blx	r7
 800edae:	3001      	adds	r0, #1
 800edb0:	f43f af27 	beq.w	800ec02 <_printf_float+0xbe>
 800edb4:	f108 0801 	add.w	r8, r8, #1
 800edb8:	e7e6      	b.n	800ed88 <_printf_float+0x244>
 800edba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	dc39      	bgt.n	800ee34 <_printf_float+0x2f0>
 800edc0:	4a1b      	ldr	r2, [pc, #108]	; (800ee30 <_printf_float+0x2ec>)
 800edc2:	2301      	movs	r3, #1
 800edc4:	4631      	mov	r1, r6
 800edc6:	4628      	mov	r0, r5
 800edc8:	47b8      	blx	r7
 800edca:	3001      	adds	r0, #1
 800edcc:	f43f af19 	beq.w	800ec02 <_printf_float+0xbe>
 800edd0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800edd4:	4313      	orrs	r3, r2
 800edd6:	d102      	bne.n	800edde <_printf_float+0x29a>
 800edd8:	6823      	ldr	r3, [r4, #0]
 800edda:	07d9      	lsls	r1, r3, #31
 800eddc:	d5d8      	bpl.n	800ed90 <_printf_float+0x24c>
 800edde:	ee18 3a10 	vmov	r3, s16
 800ede2:	4652      	mov	r2, sl
 800ede4:	4631      	mov	r1, r6
 800ede6:	4628      	mov	r0, r5
 800ede8:	47b8      	blx	r7
 800edea:	3001      	adds	r0, #1
 800edec:	f43f af09 	beq.w	800ec02 <_printf_float+0xbe>
 800edf0:	f04f 0900 	mov.w	r9, #0
 800edf4:	f104 0a1a 	add.w	sl, r4, #26
 800edf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edfa:	425b      	negs	r3, r3
 800edfc:	454b      	cmp	r3, r9
 800edfe:	dc01      	bgt.n	800ee04 <_printf_float+0x2c0>
 800ee00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee02:	e792      	b.n	800ed2a <_printf_float+0x1e6>
 800ee04:	2301      	movs	r3, #1
 800ee06:	4652      	mov	r2, sl
 800ee08:	4631      	mov	r1, r6
 800ee0a:	4628      	mov	r0, r5
 800ee0c:	47b8      	blx	r7
 800ee0e:	3001      	adds	r0, #1
 800ee10:	f43f aef7 	beq.w	800ec02 <_printf_float+0xbe>
 800ee14:	f109 0901 	add.w	r9, r9, #1
 800ee18:	e7ee      	b.n	800edf8 <_printf_float+0x2b4>
 800ee1a:	bf00      	nop
 800ee1c:	7fefffff 	.word	0x7fefffff
 800ee20:	0801723c 	.word	0x0801723c
 800ee24:	08017240 	.word	0x08017240
 800ee28:	08017244 	.word	0x08017244
 800ee2c:	08017248 	.word	0x08017248
 800ee30:	0801724c 	.word	0x0801724c
 800ee34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	bfa8      	it	ge
 800ee3c:	461a      	movge	r2, r3
 800ee3e:	2a00      	cmp	r2, #0
 800ee40:	4691      	mov	r9, r2
 800ee42:	dc37      	bgt.n	800eeb4 <_printf_float+0x370>
 800ee44:	f04f 0b00 	mov.w	fp, #0
 800ee48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ee4c:	f104 021a 	add.w	r2, r4, #26
 800ee50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ee52:	9305      	str	r3, [sp, #20]
 800ee54:	eba3 0309 	sub.w	r3, r3, r9
 800ee58:	455b      	cmp	r3, fp
 800ee5a:	dc33      	bgt.n	800eec4 <_printf_float+0x380>
 800ee5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ee60:	429a      	cmp	r2, r3
 800ee62:	db3b      	blt.n	800eedc <_printf_float+0x398>
 800ee64:	6823      	ldr	r3, [r4, #0]
 800ee66:	07da      	lsls	r2, r3, #31
 800ee68:	d438      	bmi.n	800eedc <_printf_float+0x398>
 800ee6a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ee6e:	eba2 0903 	sub.w	r9, r2, r3
 800ee72:	9b05      	ldr	r3, [sp, #20]
 800ee74:	1ad2      	subs	r2, r2, r3
 800ee76:	4591      	cmp	r9, r2
 800ee78:	bfa8      	it	ge
 800ee7a:	4691      	movge	r9, r2
 800ee7c:	f1b9 0f00 	cmp.w	r9, #0
 800ee80:	dc35      	bgt.n	800eeee <_printf_float+0x3aa>
 800ee82:	f04f 0800 	mov.w	r8, #0
 800ee86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ee8a:	f104 0a1a 	add.w	sl, r4, #26
 800ee8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ee92:	1a9b      	subs	r3, r3, r2
 800ee94:	eba3 0309 	sub.w	r3, r3, r9
 800ee98:	4543      	cmp	r3, r8
 800ee9a:	f77f af79 	ble.w	800ed90 <_printf_float+0x24c>
 800ee9e:	2301      	movs	r3, #1
 800eea0:	4652      	mov	r2, sl
 800eea2:	4631      	mov	r1, r6
 800eea4:	4628      	mov	r0, r5
 800eea6:	47b8      	blx	r7
 800eea8:	3001      	adds	r0, #1
 800eeaa:	f43f aeaa 	beq.w	800ec02 <_printf_float+0xbe>
 800eeae:	f108 0801 	add.w	r8, r8, #1
 800eeb2:	e7ec      	b.n	800ee8e <_printf_float+0x34a>
 800eeb4:	4613      	mov	r3, r2
 800eeb6:	4631      	mov	r1, r6
 800eeb8:	4642      	mov	r2, r8
 800eeba:	4628      	mov	r0, r5
 800eebc:	47b8      	blx	r7
 800eebe:	3001      	adds	r0, #1
 800eec0:	d1c0      	bne.n	800ee44 <_printf_float+0x300>
 800eec2:	e69e      	b.n	800ec02 <_printf_float+0xbe>
 800eec4:	2301      	movs	r3, #1
 800eec6:	4631      	mov	r1, r6
 800eec8:	4628      	mov	r0, r5
 800eeca:	9205      	str	r2, [sp, #20]
 800eecc:	47b8      	blx	r7
 800eece:	3001      	adds	r0, #1
 800eed0:	f43f ae97 	beq.w	800ec02 <_printf_float+0xbe>
 800eed4:	9a05      	ldr	r2, [sp, #20]
 800eed6:	f10b 0b01 	add.w	fp, fp, #1
 800eeda:	e7b9      	b.n	800ee50 <_printf_float+0x30c>
 800eedc:	ee18 3a10 	vmov	r3, s16
 800eee0:	4652      	mov	r2, sl
 800eee2:	4631      	mov	r1, r6
 800eee4:	4628      	mov	r0, r5
 800eee6:	47b8      	blx	r7
 800eee8:	3001      	adds	r0, #1
 800eeea:	d1be      	bne.n	800ee6a <_printf_float+0x326>
 800eeec:	e689      	b.n	800ec02 <_printf_float+0xbe>
 800eeee:	9a05      	ldr	r2, [sp, #20]
 800eef0:	464b      	mov	r3, r9
 800eef2:	4442      	add	r2, r8
 800eef4:	4631      	mov	r1, r6
 800eef6:	4628      	mov	r0, r5
 800eef8:	47b8      	blx	r7
 800eefa:	3001      	adds	r0, #1
 800eefc:	d1c1      	bne.n	800ee82 <_printf_float+0x33e>
 800eefe:	e680      	b.n	800ec02 <_printf_float+0xbe>
 800ef00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef02:	2a01      	cmp	r2, #1
 800ef04:	dc01      	bgt.n	800ef0a <_printf_float+0x3c6>
 800ef06:	07db      	lsls	r3, r3, #31
 800ef08:	d53a      	bpl.n	800ef80 <_printf_float+0x43c>
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	4642      	mov	r2, r8
 800ef0e:	4631      	mov	r1, r6
 800ef10:	4628      	mov	r0, r5
 800ef12:	47b8      	blx	r7
 800ef14:	3001      	adds	r0, #1
 800ef16:	f43f ae74 	beq.w	800ec02 <_printf_float+0xbe>
 800ef1a:	ee18 3a10 	vmov	r3, s16
 800ef1e:	4652      	mov	r2, sl
 800ef20:	4631      	mov	r1, r6
 800ef22:	4628      	mov	r0, r5
 800ef24:	47b8      	blx	r7
 800ef26:	3001      	adds	r0, #1
 800ef28:	f43f ae6b 	beq.w	800ec02 <_printf_float+0xbe>
 800ef2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ef30:	2200      	movs	r2, #0
 800ef32:	2300      	movs	r3, #0
 800ef34:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ef38:	f7f1 fe3e 	bl	8000bb8 <__aeabi_dcmpeq>
 800ef3c:	b9d8      	cbnz	r0, 800ef76 <_printf_float+0x432>
 800ef3e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ef42:	f108 0201 	add.w	r2, r8, #1
 800ef46:	4631      	mov	r1, r6
 800ef48:	4628      	mov	r0, r5
 800ef4a:	47b8      	blx	r7
 800ef4c:	3001      	adds	r0, #1
 800ef4e:	d10e      	bne.n	800ef6e <_printf_float+0x42a>
 800ef50:	e657      	b.n	800ec02 <_printf_float+0xbe>
 800ef52:	2301      	movs	r3, #1
 800ef54:	4652      	mov	r2, sl
 800ef56:	4631      	mov	r1, r6
 800ef58:	4628      	mov	r0, r5
 800ef5a:	47b8      	blx	r7
 800ef5c:	3001      	adds	r0, #1
 800ef5e:	f43f ae50 	beq.w	800ec02 <_printf_float+0xbe>
 800ef62:	f108 0801 	add.w	r8, r8, #1
 800ef66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef68:	3b01      	subs	r3, #1
 800ef6a:	4543      	cmp	r3, r8
 800ef6c:	dcf1      	bgt.n	800ef52 <_printf_float+0x40e>
 800ef6e:	464b      	mov	r3, r9
 800ef70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ef74:	e6da      	b.n	800ed2c <_printf_float+0x1e8>
 800ef76:	f04f 0800 	mov.w	r8, #0
 800ef7a:	f104 0a1a 	add.w	sl, r4, #26
 800ef7e:	e7f2      	b.n	800ef66 <_printf_float+0x422>
 800ef80:	2301      	movs	r3, #1
 800ef82:	4642      	mov	r2, r8
 800ef84:	e7df      	b.n	800ef46 <_printf_float+0x402>
 800ef86:	2301      	movs	r3, #1
 800ef88:	464a      	mov	r2, r9
 800ef8a:	4631      	mov	r1, r6
 800ef8c:	4628      	mov	r0, r5
 800ef8e:	47b8      	blx	r7
 800ef90:	3001      	adds	r0, #1
 800ef92:	f43f ae36 	beq.w	800ec02 <_printf_float+0xbe>
 800ef96:	f108 0801 	add.w	r8, r8, #1
 800ef9a:	68e3      	ldr	r3, [r4, #12]
 800ef9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ef9e:	1a5b      	subs	r3, r3, r1
 800efa0:	4543      	cmp	r3, r8
 800efa2:	dcf0      	bgt.n	800ef86 <_printf_float+0x442>
 800efa4:	e6f8      	b.n	800ed98 <_printf_float+0x254>
 800efa6:	f04f 0800 	mov.w	r8, #0
 800efaa:	f104 0919 	add.w	r9, r4, #25
 800efae:	e7f4      	b.n	800ef9a <_printf_float+0x456>

0800efb0 <_printf_common>:
 800efb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efb4:	4616      	mov	r6, r2
 800efb6:	4699      	mov	r9, r3
 800efb8:	688a      	ldr	r2, [r1, #8]
 800efba:	690b      	ldr	r3, [r1, #16]
 800efbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800efc0:	4293      	cmp	r3, r2
 800efc2:	bfb8      	it	lt
 800efc4:	4613      	movlt	r3, r2
 800efc6:	6033      	str	r3, [r6, #0]
 800efc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800efcc:	4607      	mov	r7, r0
 800efce:	460c      	mov	r4, r1
 800efd0:	b10a      	cbz	r2, 800efd6 <_printf_common+0x26>
 800efd2:	3301      	adds	r3, #1
 800efd4:	6033      	str	r3, [r6, #0]
 800efd6:	6823      	ldr	r3, [r4, #0]
 800efd8:	0699      	lsls	r1, r3, #26
 800efda:	bf42      	ittt	mi
 800efdc:	6833      	ldrmi	r3, [r6, #0]
 800efde:	3302      	addmi	r3, #2
 800efe0:	6033      	strmi	r3, [r6, #0]
 800efe2:	6825      	ldr	r5, [r4, #0]
 800efe4:	f015 0506 	ands.w	r5, r5, #6
 800efe8:	d106      	bne.n	800eff8 <_printf_common+0x48>
 800efea:	f104 0a19 	add.w	sl, r4, #25
 800efee:	68e3      	ldr	r3, [r4, #12]
 800eff0:	6832      	ldr	r2, [r6, #0]
 800eff2:	1a9b      	subs	r3, r3, r2
 800eff4:	42ab      	cmp	r3, r5
 800eff6:	dc26      	bgt.n	800f046 <_printf_common+0x96>
 800eff8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800effc:	1e13      	subs	r3, r2, #0
 800effe:	6822      	ldr	r2, [r4, #0]
 800f000:	bf18      	it	ne
 800f002:	2301      	movne	r3, #1
 800f004:	0692      	lsls	r2, r2, #26
 800f006:	d42b      	bmi.n	800f060 <_printf_common+0xb0>
 800f008:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f00c:	4649      	mov	r1, r9
 800f00e:	4638      	mov	r0, r7
 800f010:	47c0      	blx	r8
 800f012:	3001      	adds	r0, #1
 800f014:	d01e      	beq.n	800f054 <_printf_common+0xa4>
 800f016:	6823      	ldr	r3, [r4, #0]
 800f018:	6922      	ldr	r2, [r4, #16]
 800f01a:	f003 0306 	and.w	r3, r3, #6
 800f01e:	2b04      	cmp	r3, #4
 800f020:	bf02      	ittt	eq
 800f022:	68e5      	ldreq	r5, [r4, #12]
 800f024:	6833      	ldreq	r3, [r6, #0]
 800f026:	1aed      	subeq	r5, r5, r3
 800f028:	68a3      	ldr	r3, [r4, #8]
 800f02a:	bf0c      	ite	eq
 800f02c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f030:	2500      	movne	r5, #0
 800f032:	4293      	cmp	r3, r2
 800f034:	bfc4      	itt	gt
 800f036:	1a9b      	subgt	r3, r3, r2
 800f038:	18ed      	addgt	r5, r5, r3
 800f03a:	2600      	movs	r6, #0
 800f03c:	341a      	adds	r4, #26
 800f03e:	42b5      	cmp	r5, r6
 800f040:	d11a      	bne.n	800f078 <_printf_common+0xc8>
 800f042:	2000      	movs	r0, #0
 800f044:	e008      	b.n	800f058 <_printf_common+0xa8>
 800f046:	2301      	movs	r3, #1
 800f048:	4652      	mov	r2, sl
 800f04a:	4649      	mov	r1, r9
 800f04c:	4638      	mov	r0, r7
 800f04e:	47c0      	blx	r8
 800f050:	3001      	adds	r0, #1
 800f052:	d103      	bne.n	800f05c <_printf_common+0xac>
 800f054:	f04f 30ff 	mov.w	r0, #4294967295
 800f058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f05c:	3501      	adds	r5, #1
 800f05e:	e7c6      	b.n	800efee <_printf_common+0x3e>
 800f060:	18e1      	adds	r1, r4, r3
 800f062:	1c5a      	adds	r2, r3, #1
 800f064:	2030      	movs	r0, #48	; 0x30
 800f066:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f06a:	4422      	add	r2, r4
 800f06c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f070:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f074:	3302      	adds	r3, #2
 800f076:	e7c7      	b.n	800f008 <_printf_common+0x58>
 800f078:	2301      	movs	r3, #1
 800f07a:	4622      	mov	r2, r4
 800f07c:	4649      	mov	r1, r9
 800f07e:	4638      	mov	r0, r7
 800f080:	47c0      	blx	r8
 800f082:	3001      	adds	r0, #1
 800f084:	d0e6      	beq.n	800f054 <_printf_common+0xa4>
 800f086:	3601      	adds	r6, #1
 800f088:	e7d9      	b.n	800f03e <_printf_common+0x8e>
	...

0800f08c <_printf_i>:
 800f08c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f090:	7e0f      	ldrb	r7, [r1, #24]
 800f092:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f094:	2f78      	cmp	r7, #120	; 0x78
 800f096:	4691      	mov	r9, r2
 800f098:	4680      	mov	r8, r0
 800f09a:	460c      	mov	r4, r1
 800f09c:	469a      	mov	sl, r3
 800f09e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f0a2:	d807      	bhi.n	800f0b4 <_printf_i+0x28>
 800f0a4:	2f62      	cmp	r7, #98	; 0x62
 800f0a6:	d80a      	bhi.n	800f0be <_printf_i+0x32>
 800f0a8:	2f00      	cmp	r7, #0
 800f0aa:	f000 80d4 	beq.w	800f256 <_printf_i+0x1ca>
 800f0ae:	2f58      	cmp	r7, #88	; 0x58
 800f0b0:	f000 80c0 	beq.w	800f234 <_printf_i+0x1a8>
 800f0b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f0b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f0bc:	e03a      	b.n	800f134 <_printf_i+0xa8>
 800f0be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f0c2:	2b15      	cmp	r3, #21
 800f0c4:	d8f6      	bhi.n	800f0b4 <_printf_i+0x28>
 800f0c6:	a101      	add	r1, pc, #4	; (adr r1, 800f0cc <_printf_i+0x40>)
 800f0c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f0cc:	0800f125 	.word	0x0800f125
 800f0d0:	0800f139 	.word	0x0800f139
 800f0d4:	0800f0b5 	.word	0x0800f0b5
 800f0d8:	0800f0b5 	.word	0x0800f0b5
 800f0dc:	0800f0b5 	.word	0x0800f0b5
 800f0e0:	0800f0b5 	.word	0x0800f0b5
 800f0e4:	0800f139 	.word	0x0800f139
 800f0e8:	0800f0b5 	.word	0x0800f0b5
 800f0ec:	0800f0b5 	.word	0x0800f0b5
 800f0f0:	0800f0b5 	.word	0x0800f0b5
 800f0f4:	0800f0b5 	.word	0x0800f0b5
 800f0f8:	0800f23d 	.word	0x0800f23d
 800f0fc:	0800f165 	.word	0x0800f165
 800f100:	0800f1f7 	.word	0x0800f1f7
 800f104:	0800f0b5 	.word	0x0800f0b5
 800f108:	0800f0b5 	.word	0x0800f0b5
 800f10c:	0800f25f 	.word	0x0800f25f
 800f110:	0800f0b5 	.word	0x0800f0b5
 800f114:	0800f165 	.word	0x0800f165
 800f118:	0800f0b5 	.word	0x0800f0b5
 800f11c:	0800f0b5 	.word	0x0800f0b5
 800f120:	0800f1ff 	.word	0x0800f1ff
 800f124:	682b      	ldr	r3, [r5, #0]
 800f126:	1d1a      	adds	r2, r3, #4
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	602a      	str	r2, [r5, #0]
 800f12c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f134:	2301      	movs	r3, #1
 800f136:	e09f      	b.n	800f278 <_printf_i+0x1ec>
 800f138:	6820      	ldr	r0, [r4, #0]
 800f13a:	682b      	ldr	r3, [r5, #0]
 800f13c:	0607      	lsls	r7, r0, #24
 800f13e:	f103 0104 	add.w	r1, r3, #4
 800f142:	6029      	str	r1, [r5, #0]
 800f144:	d501      	bpl.n	800f14a <_printf_i+0xbe>
 800f146:	681e      	ldr	r6, [r3, #0]
 800f148:	e003      	b.n	800f152 <_printf_i+0xc6>
 800f14a:	0646      	lsls	r6, r0, #25
 800f14c:	d5fb      	bpl.n	800f146 <_printf_i+0xba>
 800f14e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f152:	2e00      	cmp	r6, #0
 800f154:	da03      	bge.n	800f15e <_printf_i+0xd2>
 800f156:	232d      	movs	r3, #45	; 0x2d
 800f158:	4276      	negs	r6, r6
 800f15a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f15e:	485a      	ldr	r0, [pc, #360]	; (800f2c8 <_printf_i+0x23c>)
 800f160:	230a      	movs	r3, #10
 800f162:	e012      	b.n	800f18a <_printf_i+0xfe>
 800f164:	682b      	ldr	r3, [r5, #0]
 800f166:	6820      	ldr	r0, [r4, #0]
 800f168:	1d19      	adds	r1, r3, #4
 800f16a:	6029      	str	r1, [r5, #0]
 800f16c:	0605      	lsls	r5, r0, #24
 800f16e:	d501      	bpl.n	800f174 <_printf_i+0xe8>
 800f170:	681e      	ldr	r6, [r3, #0]
 800f172:	e002      	b.n	800f17a <_printf_i+0xee>
 800f174:	0641      	lsls	r1, r0, #25
 800f176:	d5fb      	bpl.n	800f170 <_printf_i+0xe4>
 800f178:	881e      	ldrh	r6, [r3, #0]
 800f17a:	4853      	ldr	r0, [pc, #332]	; (800f2c8 <_printf_i+0x23c>)
 800f17c:	2f6f      	cmp	r7, #111	; 0x6f
 800f17e:	bf0c      	ite	eq
 800f180:	2308      	moveq	r3, #8
 800f182:	230a      	movne	r3, #10
 800f184:	2100      	movs	r1, #0
 800f186:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f18a:	6865      	ldr	r5, [r4, #4]
 800f18c:	60a5      	str	r5, [r4, #8]
 800f18e:	2d00      	cmp	r5, #0
 800f190:	bfa2      	ittt	ge
 800f192:	6821      	ldrge	r1, [r4, #0]
 800f194:	f021 0104 	bicge.w	r1, r1, #4
 800f198:	6021      	strge	r1, [r4, #0]
 800f19a:	b90e      	cbnz	r6, 800f1a0 <_printf_i+0x114>
 800f19c:	2d00      	cmp	r5, #0
 800f19e:	d04b      	beq.n	800f238 <_printf_i+0x1ac>
 800f1a0:	4615      	mov	r5, r2
 800f1a2:	fbb6 f1f3 	udiv	r1, r6, r3
 800f1a6:	fb03 6711 	mls	r7, r3, r1, r6
 800f1aa:	5dc7      	ldrb	r7, [r0, r7]
 800f1ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f1b0:	4637      	mov	r7, r6
 800f1b2:	42bb      	cmp	r3, r7
 800f1b4:	460e      	mov	r6, r1
 800f1b6:	d9f4      	bls.n	800f1a2 <_printf_i+0x116>
 800f1b8:	2b08      	cmp	r3, #8
 800f1ba:	d10b      	bne.n	800f1d4 <_printf_i+0x148>
 800f1bc:	6823      	ldr	r3, [r4, #0]
 800f1be:	07de      	lsls	r6, r3, #31
 800f1c0:	d508      	bpl.n	800f1d4 <_printf_i+0x148>
 800f1c2:	6923      	ldr	r3, [r4, #16]
 800f1c4:	6861      	ldr	r1, [r4, #4]
 800f1c6:	4299      	cmp	r1, r3
 800f1c8:	bfde      	ittt	le
 800f1ca:	2330      	movle	r3, #48	; 0x30
 800f1cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f1d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f1d4:	1b52      	subs	r2, r2, r5
 800f1d6:	6122      	str	r2, [r4, #16]
 800f1d8:	f8cd a000 	str.w	sl, [sp]
 800f1dc:	464b      	mov	r3, r9
 800f1de:	aa03      	add	r2, sp, #12
 800f1e0:	4621      	mov	r1, r4
 800f1e2:	4640      	mov	r0, r8
 800f1e4:	f7ff fee4 	bl	800efb0 <_printf_common>
 800f1e8:	3001      	adds	r0, #1
 800f1ea:	d14a      	bne.n	800f282 <_printf_i+0x1f6>
 800f1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f1f0:	b004      	add	sp, #16
 800f1f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1f6:	6823      	ldr	r3, [r4, #0]
 800f1f8:	f043 0320 	orr.w	r3, r3, #32
 800f1fc:	6023      	str	r3, [r4, #0]
 800f1fe:	4833      	ldr	r0, [pc, #204]	; (800f2cc <_printf_i+0x240>)
 800f200:	2778      	movs	r7, #120	; 0x78
 800f202:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f206:	6823      	ldr	r3, [r4, #0]
 800f208:	6829      	ldr	r1, [r5, #0]
 800f20a:	061f      	lsls	r7, r3, #24
 800f20c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f210:	d402      	bmi.n	800f218 <_printf_i+0x18c>
 800f212:	065f      	lsls	r7, r3, #25
 800f214:	bf48      	it	mi
 800f216:	b2b6      	uxthmi	r6, r6
 800f218:	07df      	lsls	r7, r3, #31
 800f21a:	bf48      	it	mi
 800f21c:	f043 0320 	orrmi.w	r3, r3, #32
 800f220:	6029      	str	r1, [r5, #0]
 800f222:	bf48      	it	mi
 800f224:	6023      	strmi	r3, [r4, #0]
 800f226:	b91e      	cbnz	r6, 800f230 <_printf_i+0x1a4>
 800f228:	6823      	ldr	r3, [r4, #0]
 800f22a:	f023 0320 	bic.w	r3, r3, #32
 800f22e:	6023      	str	r3, [r4, #0]
 800f230:	2310      	movs	r3, #16
 800f232:	e7a7      	b.n	800f184 <_printf_i+0xf8>
 800f234:	4824      	ldr	r0, [pc, #144]	; (800f2c8 <_printf_i+0x23c>)
 800f236:	e7e4      	b.n	800f202 <_printf_i+0x176>
 800f238:	4615      	mov	r5, r2
 800f23a:	e7bd      	b.n	800f1b8 <_printf_i+0x12c>
 800f23c:	682b      	ldr	r3, [r5, #0]
 800f23e:	6826      	ldr	r6, [r4, #0]
 800f240:	6961      	ldr	r1, [r4, #20]
 800f242:	1d18      	adds	r0, r3, #4
 800f244:	6028      	str	r0, [r5, #0]
 800f246:	0635      	lsls	r5, r6, #24
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	d501      	bpl.n	800f250 <_printf_i+0x1c4>
 800f24c:	6019      	str	r1, [r3, #0]
 800f24e:	e002      	b.n	800f256 <_printf_i+0x1ca>
 800f250:	0670      	lsls	r0, r6, #25
 800f252:	d5fb      	bpl.n	800f24c <_printf_i+0x1c0>
 800f254:	8019      	strh	r1, [r3, #0]
 800f256:	2300      	movs	r3, #0
 800f258:	6123      	str	r3, [r4, #16]
 800f25a:	4615      	mov	r5, r2
 800f25c:	e7bc      	b.n	800f1d8 <_printf_i+0x14c>
 800f25e:	682b      	ldr	r3, [r5, #0]
 800f260:	1d1a      	adds	r2, r3, #4
 800f262:	602a      	str	r2, [r5, #0]
 800f264:	681d      	ldr	r5, [r3, #0]
 800f266:	6862      	ldr	r2, [r4, #4]
 800f268:	2100      	movs	r1, #0
 800f26a:	4628      	mov	r0, r5
 800f26c:	f7f1 f828 	bl	80002c0 <memchr>
 800f270:	b108      	cbz	r0, 800f276 <_printf_i+0x1ea>
 800f272:	1b40      	subs	r0, r0, r5
 800f274:	6060      	str	r0, [r4, #4]
 800f276:	6863      	ldr	r3, [r4, #4]
 800f278:	6123      	str	r3, [r4, #16]
 800f27a:	2300      	movs	r3, #0
 800f27c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f280:	e7aa      	b.n	800f1d8 <_printf_i+0x14c>
 800f282:	6923      	ldr	r3, [r4, #16]
 800f284:	462a      	mov	r2, r5
 800f286:	4649      	mov	r1, r9
 800f288:	4640      	mov	r0, r8
 800f28a:	47d0      	blx	sl
 800f28c:	3001      	adds	r0, #1
 800f28e:	d0ad      	beq.n	800f1ec <_printf_i+0x160>
 800f290:	6823      	ldr	r3, [r4, #0]
 800f292:	079b      	lsls	r3, r3, #30
 800f294:	d413      	bmi.n	800f2be <_printf_i+0x232>
 800f296:	68e0      	ldr	r0, [r4, #12]
 800f298:	9b03      	ldr	r3, [sp, #12]
 800f29a:	4298      	cmp	r0, r3
 800f29c:	bfb8      	it	lt
 800f29e:	4618      	movlt	r0, r3
 800f2a0:	e7a6      	b.n	800f1f0 <_printf_i+0x164>
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	4632      	mov	r2, r6
 800f2a6:	4649      	mov	r1, r9
 800f2a8:	4640      	mov	r0, r8
 800f2aa:	47d0      	blx	sl
 800f2ac:	3001      	adds	r0, #1
 800f2ae:	d09d      	beq.n	800f1ec <_printf_i+0x160>
 800f2b0:	3501      	adds	r5, #1
 800f2b2:	68e3      	ldr	r3, [r4, #12]
 800f2b4:	9903      	ldr	r1, [sp, #12]
 800f2b6:	1a5b      	subs	r3, r3, r1
 800f2b8:	42ab      	cmp	r3, r5
 800f2ba:	dcf2      	bgt.n	800f2a2 <_printf_i+0x216>
 800f2bc:	e7eb      	b.n	800f296 <_printf_i+0x20a>
 800f2be:	2500      	movs	r5, #0
 800f2c0:	f104 0619 	add.w	r6, r4, #25
 800f2c4:	e7f5      	b.n	800f2b2 <_printf_i+0x226>
 800f2c6:	bf00      	nop
 800f2c8:	0801724e 	.word	0x0801724e
 800f2cc:	0801725f 	.word	0x0801725f

0800f2d0 <__sflush_r>:
 800f2d0:	898a      	ldrh	r2, [r1, #12]
 800f2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2d6:	4605      	mov	r5, r0
 800f2d8:	0710      	lsls	r0, r2, #28
 800f2da:	460c      	mov	r4, r1
 800f2dc:	d458      	bmi.n	800f390 <__sflush_r+0xc0>
 800f2de:	684b      	ldr	r3, [r1, #4]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	dc05      	bgt.n	800f2f0 <__sflush_r+0x20>
 800f2e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	dc02      	bgt.n	800f2f0 <__sflush_r+0x20>
 800f2ea:	2000      	movs	r0, #0
 800f2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2f2:	2e00      	cmp	r6, #0
 800f2f4:	d0f9      	beq.n	800f2ea <__sflush_r+0x1a>
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f2fc:	682f      	ldr	r7, [r5, #0]
 800f2fe:	6a21      	ldr	r1, [r4, #32]
 800f300:	602b      	str	r3, [r5, #0]
 800f302:	d032      	beq.n	800f36a <__sflush_r+0x9a>
 800f304:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f306:	89a3      	ldrh	r3, [r4, #12]
 800f308:	075a      	lsls	r2, r3, #29
 800f30a:	d505      	bpl.n	800f318 <__sflush_r+0x48>
 800f30c:	6863      	ldr	r3, [r4, #4]
 800f30e:	1ac0      	subs	r0, r0, r3
 800f310:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f312:	b10b      	cbz	r3, 800f318 <__sflush_r+0x48>
 800f314:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f316:	1ac0      	subs	r0, r0, r3
 800f318:	2300      	movs	r3, #0
 800f31a:	4602      	mov	r2, r0
 800f31c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f31e:	6a21      	ldr	r1, [r4, #32]
 800f320:	4628      	mov	r0, r5
 800f322:	47b0      	blx	r6
 800f324:	1c43      	adds	r3, r0, #1
 800f326:	89a3      	ldrh	r3, [r4, #12]
 800f328:	d106      	bne.n	800f338 <__sflush_r+0x68>
 800f32a:	6829      	ldr	r1, [r5, #0]
 800f32c:	291d      	cmp	r1, #29
 800f32e:	d82b      	bhi.n	800f388 <__sflush_r+0xb8>
 800f330:	4a29      	ldr	r2, [pc, #164]	; (800f3d8 <__sflush_r+0x108>)
 800f332:	410a      	asrs	r2, r1
 800f334:	07d6      	lsls	r6, r2, #31
 800f336:	d427      	bmi.n	800f388 <__sflush_r+0xb8>
 800f338:	2200      	movs	r2, #0
 800f33a:	6062      	str	r2, [r4, #4]
 800f33c:	04d9      	lsls	r1, r3, #19
 800f33e:	6922      	ldr	r2, [r4, #16]
 800f340:	6022      	str	r2, [r4, #0]
 800f342:	d504      	bpl.n	800f34e <__sflush_r+0x7e>
 800f344:	1c42      	adds	r2, r0, #1
 800f346:	d101      	bne.n	800f34c <__sflush_r+0x7c>
 800f348:	682b      	ldr	r3, [r5, #0]
 800f34a:	b903      	cbnz	r3, 800f34e <__sflush_r+0x7e>
 800f34c:	6560      	str	r0, [r4, #84]	; 0x54
 800f34e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f350:	602f      	str	r7, [r5, #0]
 800f352:	2900      	cmp	r1, #0
 800f354:	d0c9      	beq.n	800f2ea <__sflush_r+0x1a>
 800f356:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f35a:	4299      	cmp	r1, r3
 800f35c:	d002      	beq.n	800f364 <__sflush_r+0x94>
 800f35e:	4628      	mov	r0, r5
 800f360:	f001 f9f8 	bl	8010754 <_free_r>
 800f364:	2000      	movs	r0, #0
 800f366:	6360      	str	r0, [r4, #52]	; 0x34
 800f368:	e7c0      	b.n	800f2ec <__sflush_r+0x1c>
 800f36a:	2301      	movs	r3, #1
 800f36c:	4628      	mov	r0, r5
 800f36e:	47b0      	blx	r6
 800f370:	1c41      	adds	r1, r0, #1
 800f372:	d1c8      	bne.n	800f306 <__sflush_r+0x36>
 800f374:	682b      	ldr	r3, [r5, #0]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d0c5      	beq.n	800f306 <__sflush_r+0x36>
 800f37a:	2b1d      	cmp	r3, #29
 800f37c:	d001      	beq.n	800f382 <__sflush_r+0xb2>
 800f37e:	2b16      	cmp	r3, #22
 800f380:	d101      	bne.n	800f386 <__sflush_r+0xb6>
 800f382:	602f      	str	r7, [r5, #0]
 800f384:	e7b1      	b.n	800f2ea <__sflush_r+0x1a>
 800f386:	89a3      	ldrh	r3, [r4, #12]
 800f388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f38c:	81a3      	strh	r3, [r4, #12]
 800f38e:	e7ad      	b.n	800f2ec <__sflush_r+0x1c>
 800f390:	690f      	ldr	r7, [r1, #16]
 800f392:	2f00      	cmp	r7, #0
 800f394:	d0a9      	beq.n	800f2ea <__sflush_r+0x1a>
 800f396:	0793      	lsls	r3, r2, #30
 800f398:	680e      	ldr	r6, [r1, #0]
 800f39a:	bf08      	it	eq
 800f39c:	694b      	ldreq	r3, [r1, #20]
 800f39e:	600f      	str	r7, [r1, #0]
 800f3a0:	bf18      	it	ne
 800f3a2:	2300      	movne	r3, #0
 800f3a4:	eba6 0807 	sub.w	r8, r6, r7
 800f3a8:	608b      	str	r3, [r1, #8]
 800f3aa:	f1b8 0f00 	cmp.w	r8, #0
 800f3ae:	dd9c      	ble.n	800f2ea <__sflush_r+0x1a>
 800f3b0:	6a21      	ldr	r1, [r4, #32]
 800f3b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f3b4:	4643      	mov	r3, r8
 800f3b6:	463a      	mov	r2, r7
 800f3b8:	4628      	mov	r0, r5
 800f3ba:	47b0      	blx	r6
 800f3bc:	2800      	cmp	r0, #0
 800f3be:	dc06      	bgt.n	800f3ce <__sflush_r+0xfe>
 800f3c0:	89a3      	ldrh	r3, [r4, #12]
 800f3c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3c6:	81a3      	strh	r3, [r4, #12]
 800f3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800f3cc:	e78e      	b.n	800f2ec <__sflush_r+0x1c>
 800f3ce:	4407      	add	r7, r0
 800f3d0:	eba8 0800 	sub.w	r8, r8, r0
 800f3d4:	e7e9      	b.n	800f3aa <__sflush_r+0xda>
 800f3d6:	bf00      	nop
 800f3d8:	dfbffffe 	.word	0xdfbffffe

0800f3dc <_fflush_r>:
 800f3dc:	b538      	push	{r3, r4, r5, lr}
 800f3de:	690b      	ldr	r3, [r1, #16]
 800f3e0:	4605      	mov	r5, r0
 800f3e2:	460c      	mov	r4, r1
 800f3e4:	b913      	cbnz	r3, 800f3ec <_fflush_r+0x10>
 800f3e6:	2500      	movs	r5, #0
 800f3e8:	4628      	mov	r0, r5
 800f3ea:	bd38      	pop	{r3, r4, r5, pc}
 800f3ec:	b118      	cbz	r0, 800f3f6 <_fflush_r+0x1a>
 800f3ee:	6a03      	ldr	r3, [r0, #32]
 800f3f0:	b90b      	cbnz	r3, 800f3f6 <_fflush_r+0x1a>
 800f3f2:	f000 f8a9 	bl	800f548 <__sinit>
 800f3f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d0f3      	beq.n	800f3e6 <_fflush_r+0xa>
 800f3fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f400:	07d0      	lsls	r0, r2, #31
 800f402:	d404      	bmi.n	800f40e <_fflush_r+0x32>
 800f404:	0599      	lsls	r1, r3, #22
 800f406:	d402      	bmi.n	800f40e <_fflush_r+0x32>
 800f408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f40a:	f000 fb19 	bl	800fa40 <__retarget_lock_acquire_recursive>
 800f40e:	4628      	mov	r0, r5
 800f410:	4621      	mov	r1, r4
 800f412:	f7ff ff5d 	bl	800f2d0 <__sflush_r>
 800f416:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f418:	07da      	lsls	r2, r3, #31
 800f41a:	4605      	mov	r5, r0
 800f41c:	d4e4      	bmi.n	800f3e8 <_fflush_r+0xc>
 800f41e:	89a3      	ldrh	r3, [r4, #12]
 800f420:	059b      	lsls	r3, r3, #22
 800f422:	d4e1      	bmi.n	800f3e8 <_fflush_r+0xc>
 800f424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f426:	f000 fb0c 	bl	800fa42 <__retarget_lock_release_recursive>
 800f42a:	e7dd      	b.n	800f3e8 <_fflush_r+0xc>

0800f42c <fflush>:
 800f42c:	4601      	mov	r1, r0
 800f42e:	b920      	cbnz	r0, 800f43a <fflush+0xe>
 800f430:	4a04      	ldr	r2, [pc, #16]	; (800f444 <fflush+0x18>)
 800f432:	4905      	ldr	r1, [pc, #20]	; (800f448 <fflush+0x1c>)
 800f434:	4805      	ldr	r0, [pc, #20]	; (800f44c <fflush+0x20>)
 800f436:	f000 b89f 	b.w	800f578 <_fwalk_sglue>
 800f43a:	4b05      	ldr	r3, [pc, #20]	; (800f450 <fflush+0x24>)
 800f43c:	6818      	ldr	r0, [r3, #0]
 800f43e:	f7ff bfcd 	b.w	800f3dc <_fflush_r>
 800f442:	bf00      	nop
 800f444:	200001a4 	.word	0x200001a4
 800f448:	0800f3dd 	.word	0x0800f3dd
 800f44c:	200001b0 	.word	0x200001b0
 800f450:	200001fc 	.word	0x200001fc

0800f454 <std>:
 800f454:	2300      	movs	r3, #0
 800f456:	b510      	push	{r4, lr}
 800f458:	4604      	mov	r4, r0
 800f45a:	e9c0 3300 	strd	r3, r3, [r0]
 800f45e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f462:	6083      	str	r3, [r0, #8]
 800f464:	8181      	strh	r1, [r0, #12]
 800f466:	6643      	str	r3, [r0, #100]	; 0x64
 800f468:	81c2      	strh	r2, [r0, #14]
 800f46a:	6183      	str	r3, [r0, #24]
 800f46c:	4619      	mov	r1, r3
 800f46e:	2208      	movs	r2, #8
 800f470:	305c      	adds	r0, #92	; 0x5c
 800f472:	f000 fa59 	bl	800f928 <memset>
 800f476:	4b05      	ldr	r3, [pc, #20]	; (800f48c <std+0x38>)
 800f478:	6263      	str	r3, [r4, #36]	; 0x24
 800f47a:	4b05      	ldr	r3, [pc, #20]	; (800f490 <std+0x3c>)
 800f47c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f47e:	4b05      	ldr	r3, [pc, #20]	; (800f494 <std+0x40>)
 800f480:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f482:	4b05      	ldr	r3, [pc, #20]	; (800f498 <std+0x44>)
 800f484:	6224      	str	r4, [r4, #32]
 800f486:	6323      	str	r3, [r4, #48]	; 0x30
 800f488:	bd10      	pop	{r4, pc}
 800f48a:	bf00      	nop
 800f48c:	0800f6d1 	.word	0x0800f6d1
 800f490:	0800f6f3 	.word	0x0800f6f3
 800f494:	0800f72b 	.word	0x0800f72b
 800f498:	0800f74f 	.word	0x0800f74f

0800f49c <stdio_exit_handler>:
 800f49c:	4a02      	ldr	r2, [pc, #8]	; (800f4a8 <stdio_exit_handler+0xc>)
 800f49e:	4903      	ldr	r1, [pc, #12]	; (800f4ac <stdio_exit_handler+0x10>)
 800f4a0:	4803      	ldr	r0, [pc, #12]	; (800f4b0 <stdio_exit_handler+0x14>)
 800f4a2:	f000 b869 	b.w	800f578 <_fwalk_sglue>
 800f4a6:	bf00      	nop
 800f4a8:	200001a4 	.word	0x200001a4
 800f4ac:	0800f3dd 	.word	0x0800f3dd
 800f4b0:	200001b0 	.word	0x200001b0

0800f4b4 <cleanup_stdio>:
 800f4b4:	6841      	ldr	r1, [r0, #4]
 800f4b6:	4b0c      	ldr	r3, [pc, #48]	; (800f4e8 <cleanup_stdio+0x34>)
 800f4b8:	4299      	cmp	r1, r3
 800f4ba:	b510      	push	{r4, lr}
 800f4bc:	4604      	mov	r4, r0
 800f4be:	d001      	beq.n	800f4c4 <cleanup_stdio+0x10>
 800f4c0:	f7ff ff8c 	bl	800f3dc <_fflush_r>
 800f4c4:	68a1      	ldr	r1, [r4, #8]
 800f4c6:	4b09      	ldr	r3, [pc, #36]	; (800f4ec <cleanup_stdio+0x38>)
 800f4c8:	4299      	cmp	r1, r3
 800f4ca:	d002      	beq.n	800f4d2 <cleanup_stdio+0x1e>
 800f4cc:	4620      	mov	r0, r4
 800f4ce:	f7ff ff85 	bl	800f3dc <_fflush_r>
 800f4d2:	68e1      	ldr	r1, [r4, #12]
 800f4d4:	4b06      	ldr	r3, [pc, #24]	; (800f4f0 <cleanup_stdio+0x3c>)
 800f4d6:	4299      	cmp	r1, r3
 800f4d8:	d004      	beq.n	800f4e4 <cleanup_stdio+0x30>
 800f4da:	4620      	mov	r0, r4
 800f4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4e0:	f7ff bf7c 	b.w	800f3dc <_fflush_r>
 800f4e4:	bd10      	pop	{r4, pc}
 800f4e6:	bf00      	nop
 800f4e8:	200006e8 	.word	0x200006e8
 800f4ec:	20000750 	.word	0x20000750
 800f4f0:	200007b8 	.word	0x200007b8

0800f4f4 <global_stdio_init.part.0>:
 800f4f4:	b510      	push	{r4, lr}
 800f4f6:	4b0b      	ldr	r3, [pc, #44]	; (800f524 <global_stdio_init.part.0+0x30>)
 800f4f8:	4c0b      	ldr	r4, [pc, #44]	; (800f528 <global_stdio_init.part.0+0x34>)
 800f4fa:	4a0c      	ldr	r2, [pc, #48]	; (800f52c <global_stdio_init.part.0+0x38>)
 800f4fc:	601a      	str	r2, [r3, #0]
 800f4fe:	4620      	mov	r0, r4
 800f500:	2200      	movs	r2, #0
 800f502:	2104      	movs	r1, #4
 800f504:	f7ff ffa6 	bl	800f454 <std>
 800f508:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f50c:	2201      	movs	r2, #1
 800f50e:	2109      	movs	r1, #9
 800f510:	f7ff ffa0 	bl	800f454 <std>
 800f514:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f518:	2202      	movs	r2, #2
 800f51a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f51e:	2112      	movs	r1, #18
 800f520:	f7ff bf98 	b.w	800f454 <std>
 800f524:	20000820 	.word	0x20000820
 800f528:	200006e8 	.word	0x200006e8
 800f52c:	0800f49d 	.word	0x0800f49d

0800f530 <__sfp_lock_acquire>:
 800f530:	4801      	ldr	r0, [pc, #4]	; (800f538 <__sfp_lock_acquire+0x8>)
 800f532:	f000 ba85 	b.w	800fa40 <__retarget_lock_acquire_recursive>
 800f536:	bf00      	nop
 800f538:	20000829 	.word	0x20000829

0800f53c <__sfp_lock_release>:
 800f53c:	4801      	ldr	r0, [pc, #4]	; (800f544 <__sfp_lock_release+0x8>)
 800f53e:	f000 ba80 	b.w	800fa42 <__retarget_lock_release_recursive>
 800f542:	bf00      	nop
 800f544:	20000829 	.word	0x20000829

0800f548 <__sinit>:
 800f548:	b510      	push	{r4, lr}
 800f54a:	4604      	mov	r4, r0
 800f54c:	f7ff fff0 	bl	800f530 <__sfp_lock_acquire>
 800f550:	6a23      	ldr	r3, [r4, #32]
 800f552:	b11b      	cbz	r3, 800f55c <__sinit+0x14>
 800f554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f558:	f7ff bff0 	b.w	800f53c <__sfp_lock_release>
 800f55c:	4b04      	ldr	r3, [pc, #16]	; (800f570 <__sinit+0x28>)
 800f55e:	6223      	str	r3, [r4, #32]
 800f560:	4b04      	ldr	r3, [pc, #16]	; (800f574 <__sinit+0x2c>)
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d1f5      	bne.n	800f554 <__sinit+0xc>
 800f568:	f7ff ffc4 	bl	800f4f4 <global_stdio_init.part.0>
 800f56c:	e7f2      	b.n	800f554 <__sinit+0xc>
 800f56e:	bf00      	nop
 800f570:	0800f4b5 	.word	0x0800f4b5
 800f574:	20000820 	.word	0x20000820

0800f578 <_fwalk_sglue>:
 800f578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f57c:	4607      	mov	r7, r0
 800f57e:	4688      	mov	r8, r1
 800f580:	4614      	mov	r4, r2
 800f582:	2600      	movs	r6, #0
 800f584:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f588:	f1b9 0901 	subs.w	r9, r9, #1
 800f58c:	d505      	bpl.n	800f59a <_fwalk_sglue+0x22>
 800f58e:	6824      	ldr	r4, [r4, #0]
 800f590:	2c00      	cmp	r4, #0
 800f592:	d1f7      	bne.n	800f584 <_fwalk_sglue+0xc>
 800f594:	4630      	mov	r0, r6
 800f596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f59a:	89ab      	ldrh	r3, [r5, #12]
 800f59c:	2b01      	cmp	r3, #1
 800f59e:	d907      	bls.n	800f5b0 <_fwalk_sglue+0x38>
 800f5a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f5a4:	3301      	adds	r3, #1
 800f5a6:	d003      	beq.n	800f5b0 <_fwalk_sglue+0x38>
 800f5a8:	4629      	mov	r1, r5
 800f5aa:	4638      	mov	r0, r7
 800f5ac:	47c0      	blx	r8
 800f5ae:	4306      	orrs	r6, r0
 800f5b0:	3568      	adds	r5, #104	; 0x68
 800f5b2:	e7e9      	b.n	800f588 <_fwalk_sglue+0x10>

0800f5b4 <iprintf>:
 800f5b4:	b40f      	push	{r0, r1, r2, r3}
 800f5b6:	b507      	push	{r0, r1, r2, lr}
 800f5b8:	4906      	ldr	r1, [pc, #24]	; (800f5d4 <iprintf+0x20>)
 800f5ba:	ab04      	add	r3, sp, #16
 800f5bc:	6808      	ldr	r0, [r1, #0]
 800f5be:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5c2:	6881      	ldr	r1, [r0, #8]
 800f5c4:	9301      	str	r3, [sp, #4]
 800f5c6:	f001 fe0f 	bl	80111e8 <_vfiprintf_r>
 800f5ca:	b003      	add	sp, #12
 800f5cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5d0:	b004      	add	sp, #16
 800f5d2:	4770      	bx	lr
 800f5d4:	200001fc 	.word	0x200001fc

0800f5d8 <_puts_r>:
 800f5d8:	6a03      	ldr	r3, [r0, #32]
 800f5da:	b570      	push	{r4, r5, r6, lr}
 800f5dc:	6884      	ldr	r4, [r0, #8]
 800f5de:	4605      	mov	r5, r0
 800f5e0:	460e      	mov	r6, r1
 800f5e2:	b90b      	cbnz	r3, 800f5e8 <_puts_r+0x10>
 800f5e4:	f7ff ffb0 	bl	800f548 <__sinit>
 800f5e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5ea:	07db      	lsls	r3, r3, #31
 800f5ec:	d405      	bmi.n	800f5fa <_puts_r+0x22>
 800f5ee:	89a3      	ldrh	r3, [r4, #12]
 800f5f0:	0598      	lsls	r0, r3, #22
 800f5f2:	d402      	bmi.n	800f5fa <_puts_r+0x22>
 800f5f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5f6:	f000 fa23 	bl	800fa40 <__retarget_lock_acquire_recursive>
 800f5fa:	89a3      	ldrh	r3, [r4, #12]
 800f5fc:	0719      	lsls	r1, r3, #28
 800f5fe:	d513      	bpl.n	800f628 <_puts_r+0x50>
 800f600:	6923      	ldr	r3, [r4, #16]
 800f602:	b18b      	cbz	r3, 800f628 <_puts_r+0x50>
 800f604:	3e01      	subs	r6, #1
 800f606:	68a3      	ldr	r3, [r4, #8]
 800f608:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f60c:	3b01      	subs	r3, #1
 800f60e:	60a3      	str	r3, [r4, #8]
 800f610:	b9e9      	cbnz	r1, 800f64e <_puts_r+0x76>
 800f612:	2b00      	cmp	r3, #0
 800f614:	da2e      	bge.n	800f674 <_puts_r+0x9c>
 800f616:	4622      	mov	r2, r4
 800f618:	210a      	movs	r1, #10
 800f61a:	4628      	mov	r0, r5
 800f61c:	f000 f8d4 	bl	800f7c8 <__swbuf_r>
 800f620:	3001      	adds	r0, #1
 800f622:	d007      	beq.n	800f634 <_puts_r+0x5c>
 800f624:	250a      	movs	r5, #10
 800f626:	e007      	b.n	800f638 <_puts_r+0x60>
 800f628:	4621      	mov	r1, r4
 800f62a:	4628      	mov	r0, r5
 800f62c:	f000 f90a 	bl	800f844 <__swsetup_r>
 800f630:	2800      	cmp	r0, #0
 800f632:	d0e7      	beq.n	800f604 <_puts_r+0x2c>
 800f634:	f04f 35ff 	mov.w	r5, #4294967295
 800f638:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f63a:	07da      	lsls	r2, r3, #31
 800f63c:	d405      	bmi.n	800f64a <_puts_r+0x72>
 800f63e:	89a3      	ldrh	r3, [r4, #12]
 800f640:	059b      	lsls	r3, r3, #22
 800f642:	d402      	bmi.n	800f64a <_puts_r+0x72>
 800f644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f646:	f000 f9fc 	bl	800fa42 <__retarget_lock_release_recursive>
 800f64a:	4628      	mov	r0, r5
 800f64c:	bd70      	pop	{r4, r5, r6, pc}
 800f64e:	2b00      	cmp	r3, #0
 800f650:	da04      	bge.n	800f65c <_puts_r+0x84>
 800f652:	69a2      	ldr	r2, [r4, #24]
 800f654:	429a      	cmp	r2, r3
 800f656:	dc06      	bgt.n	800f666 <_puts_r+0x8e>
 800f658:	290a      	cmp	r1, #10
 800f65a:	d004      	beq.n	800f666 <_puts_r+0x8e>
 800f65c:	6823      	ldr	r3, [r4, #0]
 800f65e:	1c5a      	adds	r2, r3, #1
 800f660:	6022      	str	r2, [r4, #0]
 800f662:	7019      	strb	r1, [r3, #0]
 800f664:	e7cf      	b.n	800f606 <_puts_r+0x2e>
 800f666:	4622      	mov	r2, r4
 800f668:	4628      	mov	r0, r5
 800f66a:	f000 f8ad 	bl	800f7c8 <__swbuf_r>
 800f66e:	3001      	adds	r0, #1
 800f670:	d1c9      	bne.n	800f606 <_puts_r+0x2e>
 800f672:	e7df      	b.n	800f634 <_puts_r+0x5c>
 800f674:	6823      	ldr	r3, [r4, #0]
 800f676:	250a      	movs	r5, #10
 800f678:	1c5a      	adds	r2, r3, #1
 800f67a:	6022      	str	r2, [r4, #0]
 800f67c:	701d      	strb	r5, [r3, #0]
 800f67e:	e7db      	b.n	800f638 <_puts_r+0x60>

0800f680 <puts>:
 800f680:	4b02      	ldr	r3, [pc, #8]	; (800f68c <puts+0xc>)
 800f682:	4601      	mov	r1, r0
 800f684:	6818      	ldr	r0, [r3, #0]
 800f686:	f7ff bfa7 	b.w	800f5d8 <_puts_r>
 800f68a:	bf00      	nop
 800f68c:	200001fc 	.word	0x200001fc

0800f690 <siprintf>:
 800f690:	b40e      	push	{r1, r2, r3}
 800f692:	b500      	push	{lr}
 800f694:	b09c      	sub	sp, #112	; 0x70
 800f696:	ab1d      	add	r3, sp, #116	; 0x74
 800f698:	9002      	str	r0, [sp, #8]
 800f69a:	9006      	str	r0, [sp, #24]
 800f69c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f6a0:	4809      	ldr	r0, [pc, #36]	; (800f6c8 <siprintf+0x38>)
 800f6a2:	9107      	str	r1, [sp, #28]
 800f6a4:	9104      	str	r1, [sp, #16]
 800f6a6:	4909      	ldr	r1, [pc, #36]	; (800f6cc <siprintf+0x3c>)
 800f6a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6ac:	9105      	str	r1, [sp, #20]
 800f6ae:	6800      	ldr	r0, [r0, #0]
 800f6b0:	9301      	str	r3, [sp, #4]
 800f6b2:	a902      	add	r1, sp, #8
 800f6b4:	f001 fc70 	bl	8010f98 <_svfiprintf_r>
 800f6b8:	9b02      	ldr	r3, [sp, #8]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	701a      	strb	r2, [r3, #0]
 800f6be:	b01c      	add	sp, #112	; 0x70
 800f6c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6c4:	b003      	add	sp, #12
 800f6c6:	4770      	bx	lr
 800f6c8:	200001fc 	.word	0x200001fc
 800f6cc:	ffff0208 	.word	0xffff0208

0800f6d0 <__sread>:
 800f6d0:	b510      	push	{r4, lr}
 800f6d2:	460c      	mov	r4, r1
 800f6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6d8:	f000 f954 	bl	800f984 <_read_r>
 800f6dc:	2800      	cmp	r0, #0
 800f6de:	bfab      	itete	ge
 800f6e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f6e2:	89a3      	ldrhlt	r3, [r4, #12]
 800f6e4:	181b      	addge	r3, r3, r0
 800f6e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f6ea:	bfac      	ite	ge
 800f6ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800f6ee:	81a3      	strhlt	r3, [r4, #12]
 800f6f0:	bd10      	pop	{r4, pc}

0800f6f2 <__swrite>:
 800f6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6f6:	461f      	mov	r7, r3
 800f6f8:	898b      	ldrh	r3, [r1, #12]
 800f6fa:	05db      	lsls	r3, r3, #23
 800f6fc:	4605      	mov	r5, r0
 800f6fe:	460c      	mov	r4, r1
 800f700:	4616      	mov	r6, r2
 800f702:	d505      	bpl.n	800f710 <__swrite+0x1e>
 800f704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f708:	2302      	movs	r3, #2
 800f70a:	2200      	movs	r2, #0
 800f70c:	f000 f928 	bl	800f960 <_lseek_r>
 800f710:	89a3      	ldrh	r3, [r4, #12]
 800f712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f71a:	81a3      	strh	r3, [r4, #12]
 800f71c:	4632      	mov	r2, r6
 800f71e:	463b      	mov	r3, r7
 800f720:	4628      	mov	r0, r5
 800f722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f726:	f000 b94f 	b.w	800f9c8 <_write_r>

0800f72a <__sseek>:
 800f72a:	b510      	push	{r4, lr}
 800f72c:	460c      	mov	r4, r1
 800f72e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f732:	f000 f915 	bl	800f960 <_lseek_r>
 800f736:	1c43      	adds	r3, r0, #1
 800f738:	89a3      	ldrh	r3, [r4, #12]
 800f73a:	bf15      	itete	ne
 800f73c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f73e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f746:	81a3      	strheq	r3, [r4, #12]
 800f748:	bf18      	it	ne
 800f74a:	81a3      	strhne	r3, [r4, #12]
 800f74c:	bd10      	pop	{r4, pc}

0800f74e <__sclose>:
 800f74e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f752:	f000 b8f5 	b.w	800f940 <_close_r>

0800f756 <_vsniprintf_r>:
 800f756:	b530      	push	{r4, r5, lr}
 800f758:	4614      	mov	r4, r2
 800f75a:	2c00      	cmp	r4, #0
 800f75c:	b09b      	sub	sp, #108	; 0x6c
 800f75e:	4605      	mov	r5, r0
 800f760:	461a      	mov	r2, r3
 800f762:	da05      	bge.n	800f770 <_vsniprintf_r+0x1a>
 800f764:	238b      	movs	r3, #139	; 0x8b
 800f766:	6003      	str	r3, [r0, #0]
 800f768:	f04f 30ff 	mov.w	r0, #4294967295
 800f76c:	b01b      	add	sp, #108	; 0x6c
 800f76e:	bd30      	pop	{r4, r5, pc}
 800f770:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f774:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f778:	bf14      	ite	ne
 800f77a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f77e:	4623      	moveq	r3, r4
 800f780:	9302      	str	r3, [sp, #8]
 800f782:	9305      	str	r3, [sp, #20]
 800f784:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f788:	9100      	str	r1, [sp, #0]
 800f78a:	9104      	str	r1, [sp, #16]
 800f78c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f790:	4669      	mov	r1, sp
 800f792:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f794:	f001 fc00 	bl	8010f98 <_svfiprintf_r>
 800f798:	1c43      	adds	r3, r0, #1
 800f79a:	bfbc      	itt	lt
 800f79c:	238b      	movlt	r3, #139	; 0x8b
 800f79e:	602b      	strlt	r3, [r5, #0]
 800f7a0:	2c00      	cmp	r4, #0
 800f7a2:	d0e3      	beq.n	800f76c <_vsniprintf_r+0x16>
 800f7a4:	9b00      	ldr	r3, [sp, #0]
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	701a      	strb	r2, [r3, #0]
 800f7aa:	e7df      	b.n	800f76c <_vsniprintf_r+0x16>

0800f7ac <vsniprintf>:
 800f7ac:	b507      	push	{r0, r1, r2, lr}
 800f7ae:	9300      	str	r3, [sp, #0]
 800f7b0:	4613      	mov	r3, r2
 800f7b2:	460a      	mov	r2, r1
 800f7b4:	4601      	mov	r1, r0
 800f7b6:	4803      	ldr	r0, [pc, #12]	; (800f7c4 <vsniprintf+0x18>)
 800f7b8:	6800      	ldr	r0, [r0, #0]
 800f7ba:	f7ff ffcc 	bl	800f756 <_vsniprintf_r>
 800f7be:	b003      	add	sp, #12
 800f7c0:	f85d fb04 	ldr.w	pc, [sp], #4
 800f7c4:	200001fc 	.word	0x200001fc

0800f7c8 <__swbuf_r>:
 800f7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ca:	460e      	mov	r6, r1
 800f7cc:	4614      	mov	r4, r2
 800f7ce:	4605      	mov	r5, r0
 800f7d0:	b118      	cbz	r0, 800f7da <__swbuf_r+0x12>
 800f7d2:	6a03      	ldr	r3, [r0, #32]
 800f7d4:	b90b      	cbnz	r3, 800f7da <__swbuf_r+0x12>
 800f7d6:	f7ff feb7 	bl	800f548 <__sinit>
 800f7da:	69a3      	ldr	r3, [r4, #24]
 800f7dc:	60a3      	str	r3, [r4, #8]
 800f7de:	89a3      	ldrh	r3, [r4, #12]
 800f7e0:	071a      	lsls	r2, r3, #28
 800f7e2:	d525      	bpl.n	800f830 <__swbuf_r+0x68>
 800f7e4:	6923      	ldr	r3, [r4, #16]
 800f7e6:	b31b      	cbz	r3, 800f830 <__swbuf_r+0x68>
 800f7e8:	6823      	ldr	r3, [r4, #0]
 800f7ea:	6922      	ldr	r2, [r4, #16]
 800f7ec:	1a98      	subs	r0, r3, r2
 800f7ee:	6963      	ldr	r3, [r4, #20]
 800f7f0:	b2f6      	uxtb	r6, r6
 800f7f2:	4283      	cmp	r3, r0
 800f7f4:	4637      	mov	r7, r6
 800f7f6:	dc04      	bgt.n	800f802 <__swbuf_r+0x3a>
 800f7f8:	4621      	mov	r1, r4
 800f7fa:	4628      	mov	r0, r5
 800f7fc:	f7ff fdee 	bl	800f3dc <_fflush_r>
 800f800:	b9e0      	cbnz	r0, 800f83c <__swbuf_r+0x74>
 800f802:	68a3      	ldr	r3, [r4, #8]
 800f804:	3b01      	subs	r3, #1
 800f806:	60a3      	str	r3, [r4, #8]
 800f808:	6823      	ldr	r3, [r4, #0]
 800f80a:	1c5a      	adds	r2, r3, #1
 800f80c:	6022      	str	r2, [r4, #0]
 800f80e:	701e      	strb	r6, [r3, #0]
 800f810:	6962      	ldr	r2, [r4, #20]
 800f812:	1c43      	adds	r3, r0, #1
 800f814:	429a      	cmp	r2, r3
 800f816:	d004      	beq.n	800f822 <__swbuf_r+0x5a>
 800f818:	89a3      	ldrh	r3, [r4, #12]
 800f81a:	07db      	lsls	r3, r3, #31
 800f81c:	d506      	bpl.n	800f82c <__swbuf_r+0x64>
 800f81e:	2e0a      	cmp	r6, #10
 800f820:	d104      	bne.n	800f82c <__swbuf_r+0x64>
 800f822:	4621      	mov	r1, r4
 800f824:	4628      	mov	r0, r5
 800f826:	f7ff fdd9 	bl	800f3dc <_fflush_r>
 800f82a:	b938      	cbnz	r0, 800f83c <__swbuf_r+0x74>
 800f82c:	4638      	mov	r0, r7
 800f82e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f830:	4621      	mov	r1, r4
 800f832:	4628      	mov	r0, r5
 800f834:	f000 f806 	bl	800f844 <__swsetup_r>
 800f838:	2800      	cmp	r0, #0
 800f83a:	d0d5      	beq.n	800f7e8 <__swbuf_r+0x20>
 800f83c:	f04f 37ff 	mov.w	r7, #4294967295
 800f840:	e7f4      	b.n	800f82c <__swbuf_r+0x64>
	...

0800f844 <__swsetup_r>:
 800f844:	b538      	push	{r3, r4, r5, lr}
 800f846:	4b2a      	ldr	r3, [pc, #168]	; (800f8f0 <__swsetup_r+0xac>)
 800f848:	4605      	mov	r5, r0
 800f84a:	6818      	ldr	r0, [r3, #0]
 800f84c:	460c      	mov	r4, r1
 800f84e:	b118      	cbz	r0, 800f858 <__swsetup_r+0x14>
 800f850:	6a03      	ldr	r3, [r0, #32]
 800f852:	b90b      	cbnz	r3, 800f858 <__swsetup_r+0x14>
 800f854:	f7ff fe78 	bl	800f548 <__sinit>
 800f858:	89a3      	ldrh	r3, [r4, #12]
 800f85a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f85e:	0718      	lsls	r0, r3, #28
 800f860:	d422      	bmi.n	800f8a8 <__swsetup_r+0x64>
 800f862:	06d9      	lsls	r1, r3, #27
 800f864:	d407      	bmi.n	800f876 <__swsetup_r+0x32>
 800f866:	2309      	movs	r3, #9
 800f868:	602b      	str	r3, [r5, #0]
 800f86a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f86e:	81a3      	strh	r3, [r4, #12]
 800f870:	f04f 30ff 	mov.w	r0, #4294967295
 800f874:	e034      	b.n	800f8e0 <__swsetup_r+0x9c>
 800f876:	0758      	lsls	r0, r3, #29
 800f878:	d512      	bpl.n	800f8a0 <__swsetup_r+0x5c>
 800f87a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f87c:	b141      	cbz	r1, 800f890 <__swsetup_r+0x4c>
 800f87e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f882:	4299      	cmp	r1, r3
 800f884:	d002      	beq.n	800f88c <__swsetup_r+0x48>
 800f886:	4628      	mov	r0, r5
 800f888:	f000 ff64 	bl	8010754 <_free_r>
 800f88c:	2300      	movs	r3, #0
 800f88e:	6363      	str	r3, [r4, #52]	; 0x34
 800f890:	89a3      	ldrh	r3, [r4, #12]
 800f892:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f896:	81a3      	strh	r3, [r4, #12]
 800f898:	2300      	movs	r3, #0
 800f89a:	6063      	str	r3, [r4, #4]
 800f89c:	6923      	ldr	r3, [r4, #16]
 800f89e:	6023      	str	r3, [r4, #0]
 800f8a0:	89a3      	ldrh	r3, [r4, #12]
 800f8a2:	f043 0308 	orr.w	r3, r3, #8
 800f8a6:	81a3      	strh	r3, [r4, #12]
 800f8a8:	6923      	ldr	r3, [r4, #16]
 800f8aa:	b94b      	cbnz	r3, 800f8c0 <__swsetup_r+0x7c>
 800f8ac:	89a3      	ldrh	r3, [r4, #12]
 800f8ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f8b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8b6:	d003      	beq.n	800f8c0 <__swsetup_r+0x7c>
 800f8b8:	4621      	mov	r1, r4
 800f8ba:	4628      	mov	r0, r5
 800f8bc:	f001 fdd4 	bl	8011468 <__smakebuf_r>
 800f8c0:	89a0      	ldrh	r0, [r4, #12]
 800f8c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f8c6:	f010 0301 	ands.w	r3, r0, #1
 800f8ca:	d00a      	beq.n	800f8e2 <__swsetup_r+0x9e>
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	60a3      	str	r3, [r4, #8]
 800f8d0:	6963      	ldr	r3, [r4, #20]
 800f8d2:	425b      	negs	r3, r3
 800f8d4:	61a3      	str	r3, [r4, #24]
 800f8d6:	6923      	ldr	r3, [r4, #16]
 800f8d8:	b943      	cbnz	r3, 800f8ec <__swsetup_r+0xa8>
 800f8da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f8de:	d1c4      	bne.n	800f86a <__swsetup_r+0x26>
 800f8e0:	bd38      	pop	{r3, r4, r5, pc}
 800f8e2:	0781      	lsls	r1, r0, #30
 800f8e4:	bf58      	it	pl
 800f8e6:	6963      	ldrpl	r3, [r4, #20]
 800f8e8:	60a3      	str	r3, [r4, #8]
 800f8ea:	e7f4      	b.n	800f8d6 <__swsetup_r+0x92>
 800f8ec:	2000      	movs	r0, #0
 800f8ee:	e7f7      	b.n	800f8e0 <__swsetup_r+0x9c>
 800f8f0:	200001fc 	.word	0x200001fc

0800f8f4 <memmove>:
 800f8f4:	4288      	cmp	r0, r1
 800f8f6:	b510      	push	{r4, lr}
 800f8f8:	eb01 0402 	add.w	r4, r1, r2
 800f8fc:	d902      	bls.n	800f904 <memmove+0x10>
 800f8fe:	4284      	cmp	r4, r0
 800f900:	4623      	mov	r3, r4
 800f902:	d807      	bhi.n	800f914 <memmove+0x20>
 800f904:	1e43      	subs	r3, r0, #1
 800f906:	42a1      	cmp	r1, r4
 800f908:	d008      	beq.n	800f91c <memmove+0x28>
 800f90a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f90e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f912:	e7f8      	b.n	800f906 <memmove+0x12>
 800f914:	4402      	add	r2, r0
 800f916:	4601      	mov	r1, r0
 800f918:	428a      	cmp	r2, r1
 800f91a:	d100      	bne.n	800f91e <memmove+0x2a>
 800f91c:	bd10      	pop	{r4, pc}
 800f91e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f922:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f926:	e7f7      	b.n	800f918 <memmove+0x24>

0800f928 <memset>:
 800f928:	4402      	add	r2, r0
 800f92a:	4603      	mov	r3, r0
 800f92c:	4293      	cmp	r3, r2
 800f92e:	d100      	bne.n	800f932 <memset+0xa>
 800f930:	4770      	bx	lr
 800f932:	f803 1b01 	strb.w	r1, [r3], #1
 800f936:	e7f9      	b.n	800f92c <memset+0x4>

0800f938 <_localeconv_r>:
 800f938:	4800      	ldr	r0, [pc, #0]	; (800f93c <_localeconv_r+0x4>)
 800f93a:	4770      	bx	lr
 800f93c:	200002f0 	.word	0x200002f0

0800f940 <_close_r>:
 800f940:	b538      	push	{r3, r4, r5, lr}
 800f942:	4d06      	ldr	r5, [pc, #24]	; (800f95c <_close_r+0x1c>)
 800f944:	2300      	movs	r3, #0
 800f946:	4604      	mov	r4, r0
 800f948:	4608      	mov	r0, r1
 800f94a:	602b      	str	r3, [r5, #0]
 800f94c:	f7f6 fbde 	bl	800610c <_close>
 800f950:	1c43      	adds	r3, r0, #1
 800f952:	d102      	bne.n	800f95a <_close_r+0x1a>
 800f954:	682b      	ldr	r3, [r5, #0]
 800f956:	b103      	cbz	r3, 800f95a <_close_r+0x1a>
 800f958:	6023      	str	r3, [r4, #0]
 800f95a:	bd38      	pop	{r3, r4, r5, pc}
 800f95c:	20000824 	.word	0x20000824

0800f960 <_lseek_r>:
 800f960:	b538      	push	{r3, r4, r5, lr}
 800f962:	4d07      	ldr	r5, [pc, #28]	; (800f980 <_lseek_r+0x20>)
 800f964:	4604      	mov	r4, r0
 800f966:	4608      	mov	r0, r1
 800f968:	4611      	mov	r1, r2
 800f96a:	2200      	movs	r2, #0
 800f96c:	602a      	str	r2, [r5, #0]
 800f96e:	461a      	mov	r2, r3
 800f970:	f7f6 fbeb 	bl	800614a <_lseek>
 800f974:	1c43      	adds	r3, r0, #1
 800f976:	d102      	bne.n	800f97e <_lseek_r+0x1e>
 800f978:	682b      	ldr	r3, [r5, #0]
 800f97a:	b103      	cbz	r3, 800f97e <_lseek_r+0x1e>
 800f97c:	6023      	str	r3, [r4, #0]
 800f97e:	bd38      	pop	{r3, r4, r5, pc}
 800f980:	20000824 	.word	0x20000824

0800f984 <_read_r>:
 800f984:	b538      	push	{r3, r4, r5, lr}
 800f986:	4d07      	ldr	r5, [pc, #28]	; (800f9a4 <_read_r+0x20>)
 800f988:	4604      	mov	r4, r0
 800f98a:	4608      	mov	r0, r1
 800f98c:	4611      	mov	r1, r2
 800f98e:	2200      	movs	r2, #0
 800f990:	602a      	str	r2, [r5, #0]
 800f992:	461a      	mov	r2, r3
 800f994:	f7f6 fbf6 	bl	8006184 <_read>
 800f998:	1c43      	adds	r3, r0, #1
 800f99a:	d102      	bne.n	800f9a2 <_read_r+0x1e>
 800f99c:	682b      	ldr	r3, [r5, #0]
 800f99e:	b103      	cbz	r3, 800f9a2 <_read_r+0x1e>
 800f9a0:	6023      	str	r3, [r4, #0]
 800f9a2:	bd38      	pop	{r3, r4, r5, pc}
 800f9a4:	20000824 	.word	0x20000824

0800f9a8 <_sbrk_r>:
 800f9a8:	b538      	push	{r3, r4, r5, lr}
 800f9aa:	4d06      	ldr	r5, [pc, #24]	; (800f9c4 <_sbrk_r+0x1c>)
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	4604      	mov	r4, r0
 800f9b0:	4608      	mov	r0, r1
 800f9b2:	602b      	str	r3, [r5, #0]
 800f9b4:	f7f6 fc0a 	bl	80061cc <_sbrk>
 800f9b8:	1c43      	adds	r3, r0, #1
 800f9ba:	d102      	bne.n	800f9c2 <_sbrk_r+0x1a>
 800f9bc:	682b      	ldr	r3, [r5, #0]
 800f9be:	b103      	cbz	r3, 800f9c2 <_sbrk_r+0x1a>
 800f9c0:	6023      	str	r3, [r4, #0]
 800f9c2:	bd38      	pop	{r3, r4, r5, pc}
 800f9c4:	20000824 	.word	0x20000824

0800f9c8 <_write_r>:
 800f9c8:	b538      	push	{r3, r4, r5, lr}
 800f9ca:	4d07      	ldr	r5, [pc, #28]	; (800f9e8 <_write_r+0x20>)
 800f9cc:	4604      	mov	r4, r0
 800f9ce:	4608      	mov	r0, r1
 800f9d0:	4611      	mov	r1, r2
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	602a      	str	r2, [r5, #0]
 800f9d6:	461a      	mov	r2, r3
 800f9d8:	f7f6 fbe2 	bl	80061a0 <_write>
 800f9dc:	1c43      	adds	r3, r0, #1
 800f9de:	d102      	bne.n	800f9e6 <_write_r+0x1e>
 800f9e0:	682b      	ldr	r3, [r5, #0]
 800f9e2:	b103      	cbz	r3, 800f9e6 <_write_r+0x1e>
 800f9e4:	6023      	str	r3, [r4, #0]
 800f9e6:	bd38      	pop	{r3, r4, r5, pc}
 800f9e8:	20000824 	.word	0x20000824

0800f9ec <__errno>:
 800f9ec:	4b01      	ldr	r3, [pc, #4]	; (800f9f4 <__errno+0x8>)
 800f9ee:	6818      	ldr	r0, [r3, #0]
 800f9f0:	4770      	bx	lr
 800f9f2:	bf00      	nop
 800f9f4:	200001fc 	.word	0x200001fc

0800f9f8 <__libc_init_array>:
 800f9f8:	b570      	push	{r4, r5, r6, lr}
 800f9fa:	4d0d      	ldr	r5, [pc, #52]	; (800fa30 <__libc_init_array+0x38>)
 800f9fc:	4c0d      	ldr	r4, [pc, #52]	; (800fa34 <__libc_init_array+0x3c>)
 800f9fe:	1b64      	subs	r4, r4, r5
 800fa00:	10a4      	asrs	r4, r4, #2
 800fa02:	2600      	movs	r6, #0
 800fa04:	42a6      	cmp	r6, r4
 800fa06:	d109      	bne.n	800fa1c <__libc_init_array+0x24>
 800fa08:	4d0b      	ldr	r5, [pc, #44]	; (800fa38 <__libc_init_array+0x40>)
 800fa0a:	4c0c      	ldr	r4, [pc, #48]	; (800fa3c <__libc_init_array+0x44>)
 800fa0c:	f002 f838 	bl	8011a80 <_init>
 800fa10:	1b64      	subs	r4, r4, r5
 800fa12:	10a4      	asrs	r4, r4, #2
 800fa14:	2600      	movs	r6, #0
 800fa16:	42a6      	cmp	r6, r4
 800fa18:	d105      	bne.n	800fa26 <__libc_init_array+0x2e>
 800fa1a:	bd70      	pop	{r4, r5, r6, pc}
 800fa1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa20:	4798      	blx	r3
 800fa22:	3601      	adds	r6, #1
 800fa24:	e7ee      	b.n	800fa04 <__libc_init_array+0xc>
 800fa26:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa2a:	4798      	blx	r3
 800fa2c:	3601      	adds	r6, #1
 800fa2e:	e7f2      	b.n	800fa16 <__libc_init_array+0x1e>
 800fa30:	080175b4 	.word	0x080175b4
 800fa34:	080175b4 	.word	0x080175b4
 800fa38:	080175b4 	.word	0x080175b4
 800fa3c:	080175b8 	.word	0x080175b8

0800fa40 <__retarget_lock_acquire_recursive>:
 800fa40:	4770      	bx	lr

0800fa42 <__retarget_lock_release_recursive>:
 800fa42:	4770      	bx	lr

0800fa44 <memcpy>:
 800fa44:	440a      	add	r2, r1
 800fa46:	4291      	cmp	r1, r2
 800fa48:	f100 33ff 	add.w	r3, r0, #4294967295
 800fa4c:	d100      	bne.n	800fa50 <memcpy+0xc>
 800fa4e:	4770      	bx	lr
 800fa50:	b510      	push	{r4, lr}
 800fa52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fa5a:	4291      	cmp	r1, r2
 800fa5c:	d1f9      	bne.n	800fa52 <memcpy+0xe>
 800fa5e:	bd10      	pop	{r4, pc}

0800fa60 <quorem>:
 800fa60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa64:	6903      	ldr	r3, [r0, #16]
 800fa66:	690c      	ldr	r4, [r1, #16]
 800fa68:	42a3      	cmp	r3, r4
 800fa6a:	4607      	mov	r7, r0
 800fa6c:	db7e      	blt.n	800fb6c <quorem+0x10c>
 800fa6e:	3c01      	subs	r4, #1
 800fa70:	f101 0814 	add.w	r8, r1, #20
 800fa74:	f100 0514 	add.w	r5, r0, #20
 800fa78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa7c:	9301      	str	r3, [sp, #4]
 800fa7e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fa82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa86:	3301      	adds	r3, #1
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fa8e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fa92:	fbb2 f6f3 	udiv	r6, r2, r3
 800fa96:	d331      	bcc.n	800fafc <quorem+0x9c>
 800fa98:	f04f 0e00 	mov.w	lr, #0
 800fa9c:	4640      	mov	r0, r8
 800fa9e:	46ac      	mov	ip, r5
 800faa0:	46f2      	mov	sl, lr
 800faa2:	f850 2b04 	ldr.w	r2, [r0], #4
 800faa6:	b293      	uxth	r3, r2
 800faa8:	fb06 e303 	mla	r3, r6, r3, lr
 800faac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fab0:	0c1a      	lsrs	r2, r3, #16
 800fab2:	b29b      	uxth	r3, r3
 800fab4:	ebaa 0303 	sub.w	r3, sl, r3
 800fab8:	f8dc a000 	ldr.w	sl, [ip]
 800fabc:	fa13 f38a 	uxtah	r3, r3, sl
 800fac0:	fb06 220e 	mla	r2, r6, lr, r2
 800fac4:	9300      	str	r3, [sp, #0]
 800fac6:	9b00      	ldr	r3, [sp, #0]
 800fac8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800facc:	b292      	uxth	r2, r2
 800face:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fad2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fad6:	f8bd 3000 	ldrh.w	r3, [sp]
 800fada:	4581      	cmp	r9, r0
 800fadc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fae0:	f84c 3b04 	str.w	r3, [ip], #4
 800fae4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fae8:	d2db      	bcs.n	800faa2 <quorem+0x42>
 800faea:	f855 300b 	ldr.w	r3, [r5, fp]
 800faee:	b92b      	cbnz	r3, 800fafc <quorem+0x9c>
 800faf0:	9b01      	ldr	r3, [sp, #4]
 800faf2:	3b04      	subs	r3, #4
 800faf4:	429d      	cmp	r5, r3
 800faf6:	461a      	mov	r2, r3
 800faf8:	d32c      	bcc.n	800fb54 <quorem+0xf4>
 800fafa:	613c      	str	r4, [r7, #16]
 800fafc:	4638      	mov	r0, r7
 800fafe:	f001 f8f1 	bl	8010ce4 <__mcmp>
 800fb02:	2800      	cmp	r0, #0
 800fb04:	db22      	blt.n	800fb4c <quorem+0xec>
 800fb06:	3601      	adds	r6, #1
 800fb08:	4629      	mov	r1, r5
 800fb0a:	2000      	movs	r0, #0
 800fb0c:	f858 2b04 	ldr.w	r2, [r8], #4
 800fb10:	f8d1 c000 	ldr.w	ip, [r1]
 800fb14:	b293      	uxth	r3, r2
 800fb16:	1ac3      	subs	r3, r0, r3
 800fb18:	0c12      	lsrs	r2, r2, #16
 800fb1a:	fa13 f38c 	uxtah	r3, r3, ip
 800fb1e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800fb22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fb26:	b29b      	uxth	r3, r3
 800fb28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb2c:	45c1      	cmp	r9, r8
 800fb2e:	f841 3b04 	str.w	r3, [r1], #4
 800fb32:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fb36:	d2e9      	bcs.n	800fb0c <quorem+0xac>
 800fb38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb40:	b922      	cbnz	r2, 800fb4c <quorem+0xec>
 800fb42:	3b04      	subs	r3, #4
 800fb44:	429d      	cmp	r5, r3
 800fb46:	461a      	mov	r2, r3
 800fb48:	d30a      	bcc.n	800fb60 <quorem+0x100>
 800fb4a:	613c      	str	r4, [r7, #16]
 800fb4c:	4630      	mov	r0, r6
 800fb4e:	b003      	add	sp, #12
 800fb50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb54:	6812      	ldr	r2, [r2, #0]
 800fb56:	3b04      	subs	r3, #4
 800fb58:	2a00      	cmp	r2, #0
 800fb5a:	d1ce      	bne.n	800fafa <quorem+0x9a>
 800fb5c:	3c01      	subs	r4, #1
 800fb5e:	e7c9      	b.n	800faf4 <quorem+0x94>
 800fb60:	6812      	ldr	r2, [r2, #0]
 800fb62:	3b04      	subs	r3, #4
 800fb64:	2a00      	cmp	r2, #0
 800fb66:	d1f0      	bne.n	800fb4a <quorem+0xea>
 800fb68:	3c01      	subs	r4, #1
 800fb6a:	e7eb      	b.n	800fb44 <quorem+0xe4>
 800fb6c:	2000      	movs	r0, #0
 800fb6e:	e7ee      	b.n	800fb4e <quorem+0xee>

0800fb70 <_dtoa_r>:
 800fb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb74:	ed2d 8b04 	vpush	{d8-d9}
 800fb78:	69c5      	ldr	r5, [r0, #28]
 800fb7a:	b093      	sub	sp, #76	; 0x4c
 800fb7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fb80:	ec57 6b10 	vmov	r6, r7, d0
 800fb84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fb88:	9107      	str	r1, [sp, #28]
 800fb8a:	4604      	mov	r4, r0
 800fb8c:	920a      	str	r2, [sp, #40]	; 0x28
 800fb8e:	930d      	str	r3, [sp, #52]	; 0x34
 800fb90:	b975      	cbnz	r5, 800fbb0 <_dtoa_r+0x40>
 800fb92:	2010      	movs	r0, #16
 800fb94:	f7fe fe7a 	bl	800e88c <malloc>
 800fb98:	4602      	mov	r2, r0
 800fb9a:	61e0      	str	r0, [r4, #28]
 800fb9c:	b920      	cbnz	r0, 800fba8 <_dtoa_r+0x38>
 800fb9e:	4bae      	ldr	r3, [pc, #696]	; (800fe58 <_dtoa_r+0x2e8>)
 800fba0:	21ef      	movs	r1, #239	; 0xef
 800fba2:	48ae      	ldr	r0, [pc, #696]	; (800fe5c <_dtoa_r+0x2ec>)
 800fba4:	f001 fcbe 	bl	8011524 <__assert_func>
 800fba8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fbac:	6005      	str	r5, [r0, #0]
 800fbae:	60c5      	str	r5, [r0, #12]
 800fbb0:	69e3      	ldr	r3, [r4, #28]
 800fbb2:	6819      	ldr	r1, [r3, #0]
 800fbb4:	b151      	cbz	r1, 800fbcc <_dtoa_r+0x5c>
 800fbb6:	685a      	ldr	r2, [r3, #4]
 800fbb8:	604a      	str	r2, [r1, #4]
 800fbba:	2301      	movs	r3, #1
 800fbbc:	4093      	lsls	r3, r2
 800fbbe:	608b      	str	r3, [r1, #8]
 800fbc0:	4620      	mov	r0, r4
 800fbc2:	f000 fe53 	bl	801086c <_Bfree>
 800fbc6:	69e3      	ldr	r3, [r4, #28]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	601a      	str	r2, [r3, #0]
 800fbcc:	1e3b      	subs	r3, r7, #0
 800fbce:	bfbb      	ittet	lt
 800fbd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fbd4:	9303      	strlt	r3, [sp, #12]
 800fbd6:	2300      	movge	r3, #0
 800fbd8:	2201      	movlt	r2, #1
 800fbda:	bfac      	ite	ge
 800fbdc:	f8c8 3000 	strge.w	r3, [r8]
 800fbe0:	f8c8 2000 	strlt.w	r2, [r8]
 800fbe4:	4b9e      	ldr	r3, [pc, #632]	; (800fe60 <_dtoa_r+0x2f0>)
 800fbe6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800fbea:	ea33 0308 	bics.w	r3, r3, r8
 800fbee:	d11b      	bne.n	800fc28 <_dtoa_r+0xb8>
 800fbf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fbf2:	f242 730f 	movw	r3, #9999	; 0x270f
 800fbf6:	6013      	str	r3, [r2, #0]
 800fbf8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800fbfc:	4333      	orrs	r3, r6
 800fbfe:	f000 8593 	beq.w	8010728 <_dtoa_r+0xbb8>
 800fc02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc04:	b963      	cbnz	r3, 800fc20 <_dtoa_r+0xb0>
 800fc06:	4b97      	ldr	r3, [pc, #604]	; (800fe64 <_dtoa_r+0x2f4>)
 800fc08:	e027      	b.n	800fc5a <_dtoa_r+0xea>
 800fc0a:	4b97      	ldr	r3, [pc, #604]	; (800fe68 <_dtoa_r+0x2f8>)
 800fc0c:	9300      	str	r3, [sp, #0]
 800fc0e:	3308      	adds	r3, #8
 800fc10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fc12:	6013      	str	r3, [r2, #0]
 800fc14:	9800      	ldr	r0, [sp, #0]
 800fc16:	b013      	add	sp, #76	; 0x4c
 800fc18:	ecbd 8b04 	vpop	{d8-d9}
 800fc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc20:	4b90      	ldr	r3, [pc, #576]	; (800fe64 <_dtoa_r+0x2f4>)
 800fc22:	9300      	str	r3, [sp, #0]
 800fc24:	3303      	adds	r3, #3
 800fc26:	e7f3      	b.n	800fc10 <_dtoa_r+0xa0>
 800fc28:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	ec51 0b17 	vmov	r0, r1, d7
 800fc32:	eeb0 8a47 	vmov.f32	s16, s14
 800fc36:	eef0 8a67 	vmov.f32	s17, s15
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	f7f0 ffbc 	bl	8000bb8 <__aeabi_dcmpeq>
 800fc40:	4681      	mov	r9, r0
 800fc42:	b160      	cbz	r0, 800fc5e <_dtoa_r+0xee>
 800fc44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fc46:	2301      	movs	r3, #1
 800fc48:	6013      	str	r3, [r2, #0]
 800fc4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	f000 8568 	beq.w	8010722 <_dtoa_r+0xbb2>
 800fc52:	4b86      	ldr	r3, [pc, #536]	; (800fe6c <_dtoa_r+0x2fc>)
 800fc54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fc56:	6013      	str	r3, [r2, #0]
 800fc58:	3b01      	subs	r3, #1
 800fc5a:	9300      	str	r3, [sp, #0]
 800fc5c:	e7da      	b.n	800fc14 <_dtoa_r+0xa4>
 800fc5e:	aa10      	add	r2, sp, #64	; 0x40
 800fc60:	a911      	add	r1, sp, #68	; 0x44
 800fc62:	4620      	mov	r0, r4
 800fc64:	eeb0 0a48 	vmov.f32	s0, s16
 800fc68:	eef0 0a68 	vmov.f32	s1, s17
 800fc6c:	f001 f8e0 	bl	8010e30 <__d2b>
 800fc70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fc74:	4682      	mov	sl, r0
 800fc76:	2d00      	cmp	r5, #0
 800fc78:	d07f      	beq.n	800fd7a <_dtoa_r+0x20a>
 800fc7a:	ee18 3a90 	vmov	r3, s17
 800fc7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc82:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fc86:	ec51 0b18 	vmov	r0, r1, d8
 800fc8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fc8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fc92:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800fc96:	4619      	mov	r1, r3
 800fc98:	2200      	movs	r2, #0
 800fc9a:	4b75      	ldr	r3, [pc, #468]	; (800fe70 <_dtoa_r+0x300>)
 800fc9c:	f7f0 fb6c 	bl	8000378 <__aeabi_dsub>
 800fca0:	a367      	add	r3, pc, #412	; (adr r3, 800fe40 <_dtoa_r+0x2d0>)
 800fca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca6:	f7f0 fd1f 	bl	80006e8 <__aeabi_dmul>
 800fcaa:	a367      	add	r3, pc, #412	; (adr r3, 800fe48 <_dtoa_r+0x2d8>)
 800fcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcb0:	f7f0 fb64 	bl	800037c <__adddf3>
 800fcb4:	4606      	mov	r6, r0
 800fcb6:	4628      	mov	r0, r5
 800fcb8:	460f      	mov	r7, r1
 800fcba:	f7f0 fcab 	bl	8000614 <__aeabi_i2d>
 800fcbe:	a364      	add	r3, pc, #400	; (adr r3, 800fe50 <_dtoa_r+0x2e0>)
 800fcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc4:	f7f0 fd10 	bl	80006e8 <__aeabi_dmul>
 800fcc8:	4602      	mov	r2, r0
 800fcca:	460b      	mov	r3, r1
 800fccc:	4630      	mov	r0, r6
 800fcce:	4639      	mov	r1, r7
 800fcd0:	f7f0 fb54 	bl	800037c <__adddf3>
 800fcd4:	4606      	mov	r6, r0
 800fcd6:	460f      	mov	r7, r1
 800fcd8:	f7f0 ffb6 	bl	8000c48 <__aeabi_d2iz>
 800fcdc:	2200      	movs	r2, #0
 800fcde:	4683      	mov	fp, r0
 800fce0:	2300      	movs	r3, #0
 800fce2:	4630      	mov	r0, r6
 800fce4:	4639      	mov	r1, r7
 800fce6:	f7f0 ff71 	bl	8000bcc <__aeabi_dcmplt>
 800fcea:	b148      	cbz	r0, 800fd00 <_dtoa_r+0x190>
 800fcec:	4658      	mov	r0, fp
 800fcee:	f7f0 fc91 	bl	8000614 <__aeabi_i2d>
 800fcf2:	4632      	mov	r2, r6
 800fcf4:	463b      	mov	r3, r7
 800fcf6:	f7f0 ff5f 	bl	8000bb8 <__aeabi_dcmpeq>
 800fcfa:	b908      	cbnz	r0, 800fd00 <_dtoa_r+0x190>
 800fcfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fd00:	f1bb 0f16 	cmp.w	fp, #22
 800fd04:	d857      	bhi.n	800fdb6 <_dtoa_r+0x246>
 800fd06:	4b5b      	ldr	r3, [pc, #364]	; (800fe74 <_dtoa_r+0x304>)
 800fd08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd10:	ec51 0b18 	vmov	r0, r1, d8
 800fd14:	f7f0 ff5a 	bl	8000bcc <__aeabi_dcmplt>
 800fd18:	2800      	cmp	r0, #0
 800fd1a:	d04e      	beq.n	800fdba <_dtoa_r+0x24a>
 800fd1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fd20:	2300      	movs	r3, #0
 800fd22:	930c      	str	r3, [sp, #48]	; 0x30
 800fd24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fd26:	1b5b      	subs	r3, r3, r5
 800fd28:	1e5a      	subs	r2, r3, #1
 800fd2a:	bf45      	ittet	mi
 800fd2c:	f1c3 0301 	rsbmi	r3, r3, #1
 800fd30:	9305      	strmi	r3, [sp, #20]
 800fd32:	2300      	movpl	r3, #0
 800fd34:	2300      	movmi	r3, #0
 800fd36:	9206      	str	r2, [sp, #24]
 800fd38:	bf54      	ite	pl
 800fd3a:	9305      	strpl	r3, [sp, #20]
 800fd3c:	9306      	strmi	r3, [sp, #24]
 800fd3e:	f1bb 0f00 	cmp.w	fp, #0
 800fd42:	db3c      	blt.n	800fdbe <_dtoa_r+0x24e>
 800fd44:	9b06      	ldr	r3, [sp, #24]
 800fd46:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800fd4a:	445b      	add	r3, fp
 800fd4c:	9306      	str	r3, [sp, #24]
 800fd4e:	2300      	movs	r3, #0
 800fd50:	9308      	str	r3, [sp, #32]
 800fd52:	9b07      	ldr	r3, [sp, #28]
 800fd54:	2b09      	cmp	r3, #9
 800fd56:	d868      	bhi.n	800fe2a <_dtoa_r+0x2ba>
 800fd58:	2b05      	cmp	r3, #5
 800fd5a:	bfc4      	itt	gt
 800fd5c:	3b04      	subgt	r3, #4
 800fd5e:	9307      	strgt	r3, [sp, #28]
 800fd60:	9b07      	ldr	r3, [sp, #28]
 800fd62:	f1a3 0302 	sub.w	r3, r3, #2
 800fd66:	bfcc      	ite	gt
 800fd68:	2500      	movgt	r5, #0
 800fd6a:	2501      	movle	r5, #1
 800fd6c:	2b03      	cmp	r3, #3
 800fd6e:	f200 8085 	bhi.w	800fe7c <_dtoa_r+0x30c>
 800fd72:	e8df f003 	tbb	[pc, r3]
 800fd76:	3b2e      	.short	0x3b2e
 800fd78:	5839      	.short	0x5839
 800fd7a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fd7e:	441d      	add	r5, r3
 800fd80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fd84:	2b20      	cmp	r3, #32
 800fd86:	bfc1      	itttt	gt
 800fd88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fd8c:	fa08 f803 	lslgt.w	r8, r8, r3
 800fd90:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800fd94:	fa26 f303 	lsrgt.w	r3, r6, r3
 800fd98:	bfd6      	itet	le
 800fd9a:	f1c3 0320 	rsble	r3, r3, #32
 800fd9e:	ea48 0003 	orrgt.w	r0, r8, r3
 800fda2:	fa06 f003 	lslle.w	r0, r6, r3
 800fda6:	f7f0 fc25 	bl	80005f4 <__aeabi_ui2d>
 800fdaa:	2201      	movs	r2, #1
 800fdac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800fdb0:	3d01      	subs	r5, #1
 800fdb2:	920e      	str	r2, [sp, #56]	; 0x38
 800fdb4:	e76f      	b.n	800fc96 <_dtoa_r+0x126>
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	e7b3      	b.n	800fd22 <_dtoa_r+0x1b2>
 800fdba:	900c      	str	r0, [sp, #48]	; 0x30
 800fdbc:	e7b2      	b.n	800fd24 <_dtoa_r+0x1b4>
 800fdbe:	9b05      	ldr	r3, [sp, #20]
 800fdc0:	eba3 030b 	sub.w	r3, r3, fp
 800fdc4:	9305      	str	r3, [sp, #20]
 800fdc6:	f1cb 0300 	rsb	r3, fp, #0
 800fdca:	9308      	str	r3, [sp, #32]
 800fdcc:	2300      	movs	r3, #0
 800fdce:	930b      	str	r3, [sp, #44]	; 0x2c
 800fdd0:	e7bf      	b.n	800fd52 <_dtoa_r+0x1e2>
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	9309      	str	r3, [sp, #36]	; 0x24
 800fdd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	dc52      	bgt.n	800fe82 <_dtoa_r+0x312>
 800fddc:	2301      	movs	r3, #1
 800fdde:	9301      	str	r3, [sp, #4]
 800fde0:	9304      	str	r3, [sp, #16]
 800fde2:	461a      	mov	r2, r3
 800fde4:	920a      	str	r2, [sp, #40]	; 0x28
 800fde6:	e00b      	b.n	800fe00 <_dtoa_r+0x290>
 800fde8:	2301      	movs	r3, #1
 800fdea:	e7f3      	b.n	800fdd4 <_dtoa_r+0x264>
 800fdec:	2300      	movs	r3, #0
 800fdee:	9309      	str	r3, [sp, #36]	; 0x24
 800fdf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdf2:	445b      	add	r3, fp
 800fdf4:	9301      	str	r3, [sp, #4]
 800fdf6:	3301      	adds	r3, #1
 800fdf8:	2b01      	cmp	r3, #1
 800fdfa:	9304      	str	r3, [sp, #16]
 800fdfc:	bfb8      	it	lt
 800fdfe:	2301      	movlt	r3, #1
 800fe00:	69e0      	ldr	r0, [r4, #28]
 800fe02:	2100      	movs	r1, #0
 800fe04:	2204      	movs	r2, #4
 800fe06:	f102 0614 	add.w	r6, r2, #20
 800fe0a:	429e      	cmp	r6, r3
 800fe0c:	d93d      	bls.n	800fe8a <_dtoa_r+0x31a>
 800fe0e:	6041      	str	r1, [r0, #4]
 800fe10:	4620      	mov	r0, r4
 800fe12:	f000 fceb 	bl	80107ec <_Balloc>
 800fe16:	9000      	str	r0, [sp, #0]
 800fe18:	2800      	cmp	r0, #0
 800fe1a:	d139      	bne.n	800fe90 <_dtoa_r+0x320>
 800fe1c:	4b16      	ldr	r3, [pc, #88]	; (800fe78 <_dtoa_r+0x308>)
 800fe1e:	4602      	mov	r2, r0
 800fe20:	f240 11af 	movw	r1, #431	; 0x1af
 800fe24:	e6bd      	b.n	800fba2 <_dtoa_r+0x32>
 800fe26:	2301      	movs	r3, #1
 800fe28:	e7e1      	b.n	800fdee <_dtoa_r+0x27e>
 800fe2a:	2501      	movs	r5, #1
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	9307      	str	r3, [sp, #28]
 800fe30:	9509      	str	r5, [sp, #36]	; 0x24
 800fe32:	f04f 33ff 	mov.w	r3, #4294967295
 800fe36:	9301      	str	r3, [sp, #4]
 800fe38:	9304      	str	r3, [sp, #16]
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	2312      	movs	r3, #18
 800fe3e:	e7d1      	b.n	800fde4 <_dtoa_r+0x274>
 800fe40:	636f4361 	.word	0x636f4361
 800fe44:	3fd287a7 	.word	0x3fd287a7
 800fe48:	8b60c8b3 	.word	0x8b60c8b3
 800fe4c:	3fc68a28 	.word	0x3fc68a28
 800fe50:	509f79fb 	.word	0x509f79fb
 800fe54:	3fd34413 	.word	0x3fd34413
 800fe58:	0801727d 	.word	0x0801727d
 800fe5c:	08017294 	.word	0x08017294
 800fe60:	7ff00000 	.word	0x7ff00000
 800fe64:	08017279 	.word	0x08017279
 800fe68:	08017270 	.word	0x08017270
 800fe6c:	0801724d 	.word	0x0801724d
 800fe70:	3ff80000 	.word	0x3ff80000
 800fe74:	08017380 	.word	0x08017380
 800fe78:	080172ec 	.word	0x080172ec
 800fe7c:	2301      	movs	r3, #1
 800fe7e:	9309      	str	r3, [sp, #36]	; 0x24
 800fe80:	e7d7      	b.n	800fe32 <_dtoa_r+0x2c2>
 800fe82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe84:	9301      	str	r3, [sp, #4]
 800fe86:	9304      	str	r3, [sp, #16]
 800fe88:	e7ba      	b.n	800fe00 <_dtoa_r+0x290>
 800fe8a:	3101      	adds	r1, #1
 800fe8c:	0052      	lsls	r2, r2, #1
 800fe8e:	e7ba      	b.n	800fe06 <_dtoa_r+0x296>
 800fe90:	69e3      	ldr	r3, [r4, #28]
 800fe92:	9a00      	ldr	r2, [sp, #0]
 800fe94:	601a      	str	r2, [r3, #0]
 800fe96:	9b04      	ldr	r3, [sp, #16]
 800fe98:	2b0e      	cmp	r3, #14
 800fe9a:	f200 80a8 	bhi.w	800ffee <_dtoa_r+0x47e>
 800fe9e:	2d00      	cmp	r5, #0
 800fea0:	f000 80a5 	beq.w	800ffee <_dtoa_r+0x47e>
 800fea4:	f1bb 0f00 	cmp.w	fp, #0
 800fea8:	dd38      	ble.n	800ff1c <_dtoa_r+0x3ac>
 800feaa:	4bc0      	ldr	r3, [pc, #768]	; (80101ac <_dtoa_r+0x63c>)
 800feac:	f00b 020f 	and.w	r2, fp, #15
 800feb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800feb4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800feb8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800febc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800fec0:	d019      	beq.n	800fef6 <_dtoa_r+0x386>
 800fec2:	4bbb      	ldr	r3, [pc, #748]	; (80101b0 <_dtoa_r+0x640>)
 800fec4:	ec51 0b18 	vmov	r0, r1, d8
 800fec8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fecc:	f7f0 fd36 	bl	800093c <__aeabi_ddiv>
 800fed0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fed4:	f008 080f 	and.w	r8, r8, #15
 800fed8:	2503      	movs	r5, #3
 800feda:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80101b0 <_dtoa_r+0x640>
 800fede:	f1b8 0f00 	cmp.w	r8, #0
 800fee2:	d10a      	bne.n	800fefa <_dtoa_r+0x38a>
 800fee4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fee8:	4632      	mov	r2, r6
 800feea:	463b      	mov	r3, r7
 800feec:	f7f0 fd26 	bl	800093c <__aeabi_ddiv>
 800fef0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fef4:	e02b      	b.n	800ff4e <_dtoa_r+0x3de>
 800fef6:	2502      	movs	r5, #2
 800fef8:	e7ef      	b.n	800feda <_dtoa_r+0x36a>
 800fefa:	f018 0f01 	tst.w	r8, #1
 800fefe:	d008      	beq.n	800ff12 <_dtoa_r+0x3a2>
 800ff00:	4630      	mov	r0, r6
 800ff02:	4639      	mov	r1, r7
 800ff04:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ff08:	f7f0 fbee 	bl	80006e8 <__aeabi_dmul>
 800ff0c:	3501      	adds	r5, #1
 800ff0e:	4606      	mov	r6, r0
 800ff10:	460f      	mov	r7, r1
 800ff12:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ff16:	f109 0908 	add.w	r9, r9, #8
 800ff1a:	e7e0      	b.n	800fede <_dtoa_r+0x36e>
 800ff1c:	f000 809f 	beq.w	801005e <_dtoa_r+0x4ee>
 800ff20:	f1cb 0600 	rsb	r6, fp, #0
 800ff24:	4ba1      	ldr	r3, [pc, #644]	; (80101ac <_dtoa_r+0x63c>)
 800ff26:	4fa2      	ldr	r7, [pc, #648]	; (80101b0 <_dtoa_r+0x640>)
 800ff28:	f006 020f 	and.w	r2, r6, #15
 800ff2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff34:	ec51 0b18 	vmov	r0, r1, d8
 800ff38:	f7f0 fbd6 	bl	80006e8 <__aeabi_dmul>
 800ff3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff40:	1136      	asrs	r6, r6, #4
 800ff42:	2300      	movs	r3, #0
 800ff44:	2502      	movs	r5, #2
 800ff46:	2e00      	cmp	r6, #0
 800ff48:	d17e      	bne.n	8010048 <_dtoa_r+0x4d8>
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d1d0      	bne.n	800fef0 <_dtoa_r+0x380>
 800ff4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff50:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	f000 8084 	beq.w	8010062 <_dtoa_r+0x4f2>
 800ff5a:	4b96      	ldr	r3, [pc, #600]	; (80101b4 <_dtoa_r+0x644>)
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	4640      	mov	r0, r8
 800ff60:	4649      	mov	r1, r9
 800ff62:	f7f0 fe33 	bl	8000bcc <__aeabi_dcmplt>
 800ff66:	2800      	cmp	r0, #0
 800ff68:	d07b      	beq.n	8010062 <_dtoa_r+0x4f2>
 800ff6a:	9b04      	ldr	r3, [sp, #16]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d078      	beq.n	8010062 <_dtoa_r+0x4f2>
 800ff70:	9b01      	ldr	r3, [sp, #4]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	dd39      	ble.n	800ffea <_dtoa_r+0x47a>
 800ff76:	4b90      	ldr	r3, [pc, #576]	; (80101b8 <_dtoa_r+0x648>)
 800ff78:	2200      	movs	r2, #0
 800ff7a:	4640      	mov	r0, r8
 800ff7c:	4649      	mov	r1, r9
 800ff7e:	f7f0 fbb3 	bl	80006e8 <__aeabi_dmul>
 800ff82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff86:	9e01      	ldr	r6, [sp, #4]
 800ff88:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ff8c:	3501      	adds	r5, #1
 800ff8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ff92:	4628      	mov	r0, r5
 800ff94:	f7f0 fb3e 	bl	8000614 <__aeabi_i2d>
 800ff98:	4642      	mov	r2, r8
 800ff9a:	464b      	mov	r3, r9
 800ff9c:	f7f0 fba4 	bl	80006e8 <__aeabi_dmul>
 800ffa0:	4b86      	ldr	r3, [pc, #536]	; (80101bc <_dtoa_r+0x64c>)
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	f7f0 f9ea 	bl	800037c <__adddf3>
 800ffa8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ffac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffb0:	9303      	str	r3, [sp, #12]
 800ffb2:	2e00      	cmp	r6, #0
 800ffb4:	d158      	bne.n	8010068 <_dtoa_r+0x4f8>
 800ffb6:	4b82      	ldr	r3, [pc, #520]	; (80101c0 <_dtoa_r+0x650>)
 800ffb8:	2200      	movs	r2, #0
 800ffba:	4640      	mov	r0, r8
 800ffbc:	4649      	mov	r1, r9
 800ffbe:	f7f0 f9db 	bl	8000378 <__aeabi_dsub>
 800ffc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ffc6:	4680      	mov	r8, r0
 800ffc8:	4689      	mov	r9, r1
 800ffca:	f7f0 fe1d 	bl	8000c08 <__aeabi_dcmpgt>
 800ffce:	2800      	cmp	r0, #0
 800ffd0:	f040 8296 	bne.w	8010500 <_dtoa_r+0x990>
 800ffd4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ffd8:	4640      	mov	r0, r8
 800ffda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ffde:	4649      	mov	r1, r9
 800ffe0:	f7f0 fdf4 	bl	8000bcc <__aeabi_dcmplt>
 800ffe4:	2800      	cmp	r0, #0
 800ffe6:	f040 8289 	bne.w	80104fc <_dtoa_r+0x98c>
 800ffea:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ffee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	f2c0 814e 	blt.w	8010292 <_dtoa_r+0x722>
 800fff6:	f1bb 0f0e 	cmp.w	fp, #14
 800fffa:	f300 814a 	bgt.w	8010292 <_dtoa_r+0x722>
 800fffe:	4b6b      	ldr	r3, [pc, #428]	; (80101ac <_dtoa_r+0x63c>)
 8010000:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010004:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801000a:	2b00      	cmp	r3, #0
 801000c:	f280 80dc 	bge.w	80101c8 <_dtoa_r+0x658>
 8010010:	9b04      	ldr	r3, [sp, #16]
 8010012:	2b00      	cmp	r3, #0
 8010014:	f300 80d8 	bgt.w	80101c8 <_dtoa_r+0x658>
 8010018:	f040 826f 	bne.w	80104fa <_dtoa_r+0x98a>
 801001c:	4b68      	ldr	r3, [pc, #416]	; (80101c0 <_dtoa_r+0x650>)
 801001e:	2200      	movs	r2, #0
 8010020:	4640      	mov	r0, r8
 8010022:	4649      	mov	r1, r9
 8010024:	f7f0 fb60 	bl	80006e8 <__aeabi_dmul>
 8010028:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801002c:	f7f0 fde2 	bl	8000bf4 <__aeabi_dcmpge>
 8010030:	9e04      	ldr	r6, [sp, #16]
 8010032:	4637      	mov	r7, r6
 8010034:	2800      	cmp	r0, #0
 8010036:	f040 8245 	bne.w	80104c4 <_dtoa_r+0x954>
 801003a:	9d00      	ldr	r5, [sp, #0]
 801003c:	2331      	movs	r3, #49	; 0x31
 801003e:	f805 3b01 	strb.w	r3, [r5], #1
 8010042:	f10b 0b01 	add.w	fp, fp, #1
 8010046:	e241      	b.n	80104cc <_dtoa_r+0x95c>
 8010048:	07f2      	lsls	r2, r6, #31
 801004a:	d505      	bpl.n	8010058 <_dtoa_r+0x4e8>
 801004c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010050:	f7f0 fb4a 	bl	80006e8 <__aeabi_dmul>
 8010054:	3501      	adds	r5, #1
 8010056:	2301      	movs	r3, #1
 8010058:	1076      	asrs	r6, r6, #1
 801005a:	3708      	adds	r7, #8
 801005c:	e773      	b.n	800ff46 <_dtoa_r+0x3d6>
 801005e:	2502      	movs	r5, #2
 8010060:	e775      	b.n	800ff4e <_dtoa_r+0x3de>
 8010062:	9e04      	ldr	r6, [sp, #16]
 8010064:	465f      	mov	r7, fp
 8010066:	e792      	b.n	800ff8e <_dtoa_r+0x41e>
 8010068:	9900      	ldr	r1, [sp, #0]
 801006a:	4b50      	ldr	r3, [pc, #320]	; (80101ac <_dtoa_r+0x63c>)
 801006c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010070:	4431      	add	r1, r6
 8010072:	9102      	str	r1, [sp, #8]
 8010074:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010076:	eeb0 9a47 	vmov.f32	s18, s14
 801007a:	eef0 9a67 	vmov.f32	s19, s15
 801007e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010082:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010086:	2900      	cmp	r1, #0
 8010088:	d044      	beq.n	8010114 <_dtoa_r+0x5a4>
 801008a:	494e      	ldr	r1, [pc, #312]	; (80101c4 <_dtoa_r+0x654>)
 801008c:	2000      	movs	r0, #0
 801008e:	f7f0 fc55 	bl	800093c <__aeabi_ddiv>
 8010092:	ec53 2b19 	vmov	r2, r3, d9
 8010096:	f7f0 f96f 	bl	8000378 <__aeabi_dsub>
 801009a:	9d00      	ldr	r5, [sp, #0]
 801009c:	ec41 0b19 	vmov	d9, r0, r1
 80100a0:	4649      	mov	r1, r9
 80100a2:	4640      	mov	r0, r8
 80100a4:	f7f0 fdd0 	bl	8000c48 <__aeabi_d2iz>
 80100a8:	4606      	mov	r6, r0
 80100aa:	f7f0 fab3 	bl	8000614 <__aeabi_i2d>
 80100ae:	4602      	mov	r2, r0
 80100b0:	460b      	mov	r3, r1
 80100b2:	4640      	mov	r0, r8
 80100b4:	4649      	mov	r1, r9
 80100b6:	f7f0 f95f 	bl	8000378 <__aeabi_dsub>
 80100ba:	3630      	adds	r6, #48	; 0x30
 80100bc:	f805 6b01 	strb.w	r6, [r5], #1
 80100c0:	ec53 2b19 	vmov	r2, r3, d9
 80100c4:	4680      	mov	r8, r0
 80100c6:	4689      	mov	r9, r1
 80100c8:	f7f0 fd80 	bl	8000bcc <__aeabi_dcmplt>
 80100cc:	2800      	cmp	r0, #0
 80100ce:	d164      	bne.n	801019a <_dtoa_r+0x62a>
 80100d0:	4642      	mov	r2, r8
 80100d2:	464b      	mov	r3, r9
 80100d4:	4937      	ldr	r1, [pc, #220]	; (80101b4 <_dtoa_r+0x644>)
 80100d6:	2000      	movs	r0, #0
 80100d8:	f7f0 f94e 	bl	8000378 <__aeabi_dsub>
 80100dc:	ec53 2b19 	vmov	r2, r3, d9
 80100e0:	f7f0 fd74 	bl	8000bcc <__aeabi_dcmplt>
 80100e4:	2800      	cmp	r0, #0
 80100e6:	f040 80b6 	bne.w	8010256 <_dtoa_r+0x6e6>
 80100ea:	9b02      	ldr	r3, [sp, #8]
 80100ec:	429d      	cmp	r5, r3
 80100ee:	f43f af7c 	beq.w	800ffea <_dtoa_r+0x47a>
 80100f2:	4b31      	ldr	r3, [pc, #196]	; (80101b8 <_dtoa_r+0x648>)
 80100f4:	ec51 0b19 	vmov	r0, r1, d9
 80100f8:	2200      	movs	r2, #0
 80100fa:	f7f0 faf5 	bl	80006e8 <__aeabi_dmul>
 80100fe:	4b2e      	ldr	r3, [pc, #184]	; (80101b8 <_dtoa_r+0x648>)
 8010100:	ec41 0b19 	vmov	d9, r0, r1
 8010104:	2200      	movs	r2, #0
 8010106:	4640      	mov	r0, r8
 8010108:	4649      	mov	r1, r9
 801010a:	f7f0 faed 	bl	80006e8 <__aeabi_dmul>
 801010e:	4680      	mov	r8, r0
 8010110:	4689      	mov	r9, r1
 8010112:	e7c5      	b.n	80100a0 <_dtoa_r+0x530>
 8010114:	ec51 0b17 	vmov	r0, r1, d7
 8010118:	f7f0 fae6 	bl	80006e8 <__aeabi_dmul>
 801011c:	9b02      	ldr	r3, [sp, #8]
 801011e:	9d00      	ldr	r5, [sp, #0]
 8010120:	930f      	str	r3, [sp, #60]	; 0x3c
 8010122:	ec41 0b19 	vmov	d9, r0, r1
 8010126:	4649      	mov	r1, r9
 8010128:	4640      	mov	r0, r8
 801012a:	f7f0 fd8d 	bl	8000c48 <__aeabi_d2iz>
 801012e:	4606      	mov	r6, r0
 8010130:	f7f0 fa70 	bl	8000614 <__aeabi_i2d>
 8010134:	3630      	adds	r6, #48	; 0x30
 8010136:	4602      	mov	r2, r0
 8010138:	460b      	mov	r3, r1
 801013a:	4640      	mov	r0, r8
 801013c:	4649      	mov	r1, r9
 801013e:	f7f0 f91b 	bl	8000378 <__aeabi_dsub>
 8010142:	f805 6b01 	strb.w	r6, [r5], #1
 8010146:	9b02      	ldr	r3, [sp, #8]
 8010148:	429d      	cmp	r5, r3
 801014a:	4680      	mov	r8, r0
 801014c:	4689      	mov	r9, r1
 801014e:	f04f 0200 	mov.w	r2, #0
 8010152:	d124      	bne.n	801019e <_dtoa_r+0x62e>
 8010154:	4b1b      	ldr	r3, [pc, #108]	; (80101c4 <_dtoa_r+0x654>)
 8010156:	ec51 0b19 	vmov	r0, r1, d9
 801015a:	f7f0 f90f 	bl	800037c <__adddf3>
 801015e:	4602      	mov	r2, r0
 8010160:	460b      	mov	r3, r1
 8010162:	4640      	mov	r0, r8
 8010164:	4649      	mov	r1, r9
 8010166:	f7f0 fd4f 	bl	8000c08 <__aeabi_dcmpgt>
 801016a:	2800      	cmp	r0, #0
 801016c:	d173      	bne.n	8010256 <_dtoa_r+0x6e6>
 801016e:	ec53 2b19 	vmov	r2, r3, d9
 8010172:	4914      	ldr	r1, [pc, #80]	; (80101c4 <_dtoa_r+0x654>)
 8010174:	2000      	movs	r0, #0
 8010176:	f7f0 f8ff 	bl	8000378 <__aeabi_dsub>
 801017a:	4602      	mov	r2, r0
 801017c:	460b      	mov	r3, r1
 801017e:	4640      	mov	r0, r8
 8010180:	4649      	mov	r1, r9
 8010182:	f7f0 fd23 	bl	8000bcc <__aeabi_dcmplt>
 8010186:	2800      	cmp	r0, #0
 8010188:	f43f af2f 	beq.w	800ffea <_dtoa_r+0x47a>
 801018c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801018e:	1e6b      	subs	r3, r5, #1
 8010190:	930f      	str	r3, [sp, #60]	; 0x3c
 8010192:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010196:	2b30      	cmp	r3, #48	; 0x30
 8010198:	d0f8      	beq.n	801018c <_dtoa_r+0x61c>
 801019a:	46bb      	mov	fp, r7
 801019c:	e04a      	b.n	8010234 <_dtoa_r+0x6c4>
 801019e:	4b06      	ldr	r3, [pc, #24]	; (80101b8 <_dtoa_r+0x648>)
 80101a0:	f7f0 faa2 	bl	80006e8 <__aeabi_dmul>
 80101a4:	4680      	mov	r8, r0
 80101a6:	4689      	mov	r9, r1
 80101a8:	e7bd      	b.n	8010126 <_dtoa_r+0x5b6>
 80101aa:	bf00      	nop
 80101ac:	08017380 	.word	0x08017380
 80101b0:	08017358 	.word	0x08017358
 80101b4:	3ff00000 	.word	0x3ff00000
 80101b8:	40240000 	.word	0x40240000
 80101bc:	401c0000 	.word	0x401c0000
 80101c0:	40140000 	.word	0x40140000
 80101c4:	3fe00000 	.word	0x3fe00000
 80101c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80101cc:	9d00      	ldr	r5, [sp, #0]
 80101ce:	4642      	mov	r2, r8
 80101d0:	464b      	mov	r3, r9
 80101d2:	4630      	mov	r0, r6
 80101d4:	4639      	mov	r1, r7
 80101d6:	f7f0 fbb1 	bl	800093c <__aeabi_ddiv>
 80101da:	f7f0 fd35 	bl	8000c48 <__aeabi_d2iz>
 80101de:	9001      	str	r0, [sp, #4]
 80101e0:	f7f0 fa18 	bl	8000614 <__aeabi_i2d>
 80101e4:	4642      	mov	r2, r8
 80101e6:	464b      	mov	r3, r9
 80101e8:	f7f0 fa7e 	bl	80006e8 <__aeabi_dmul>
 80101ec:	4602      	mov	r2, r0
 80101ee:	460b      	mov	r3, r1
 80101f0:	4630      	mov	r0, r6
 80101f2:	4639      	mov	r1, r7
 80101f4:	f7f0 f8c0 	bl	8000378 <__aeabi_dsub>
 80101f8:	9e01      	ldr	r6, [sp, #4]
 80101fa:	9f04      	ldr	r7, [sp, #16]
 80101fc:	3630      	adds	r6, #48	; 0x30
 80101fe:	f805 6b01 	strb.w	r6, [r5], #1
 8010202:	9e00      	ldr	r6, [sp, #0]
 8010204:	1bae      	subs	r6, r5, r6
 8010206:	42b7      	cmp	r7, r6
 8010208:	4602      	mov	r2, r0
 801020a:	460b      	mov	r3, r1
 801020c:	d134      	bne.n	8010278 <_dtoa_r+0x708>
 801020e:	f7f0 f8b5 	bl	800037c <__adddf3>
 8010212:	4642      	mov	r2, r8
 8010214:	464b      	mov	r3, r9
 8010216:	4606      	mov	r6, r0
 8010218:	460f      	mov	r7, r1
 801021a:	f7f0 fcf5 	bl	8000c08 <__aeabi_dcmpgt>
 801021e:	b9c8      	cbnz	r0, 8010254 <_dtoa_r+0x6e4>
 8010220:	4642      	mov	r2, r8
 8010222:	464b      	mov	r3, r9
 8010224:	4630      	mov	r0, r6
 8010226:	4639      	mov	r1, r7
 8010228:	f7f0 fcc6 	bl	8000bb8 <__aeabi_dcmpeq>
 801022c:	b110      	cbz	r0, 8010234 <_dtoa_r+0x6c4>
 801022e:	9b01      	ldr	r3, [sp, #4]
 8010230:	07db      	lsls	r3, r3, #31
 8010232:	d40f      	bmi.n	8010254 <_dtoa_r+0x6e4>
 8010234:	4651      	mov	r1, sl
 8010236:	4620      	mov	r0, r4
 8010238:	f000 fb18 	bl	801086c <_Bfree>
 801023c:	2300      	movs	r3, #0
 801023e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010240:	702b      	strb	r3, [r5, #0]
 8010242:	f10b 0301 	add.w	r3, fp, #1
 8010246:	6013      	str	r3, [r2, #0]
 8010248:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801024a:	2b00      	cmp	r3, #0
 801024c:	f43f ace2 	beq.w	800fc14 <_dtoa_r+0xa4>
 8010250:	601d      	str	r5, [r3, #0]
 8010252:	e4df      	b.n	800fc14 <_dtoa_r+0xa4>
 8010254:	465f      	mov	r7, fp
 8010256:	462b      	mov	r3, r5
 8010258:	461d      	mov	r5, r3
 801025a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801025e:	2a39      	cmp	r2, #57	; 0x39
 8010260:	d106      	bne.n	8010270 <_dtoa_r+0x700>
 8010262:	9a00      	ldr	r2, [sp, #0]
 8010264:	429a      	cmp	r2, r3
 8010266:	d1f7      	bne.n	8010258 <_dtoa_r+0x6e8>
 8010268:	9900      	ldr	r1, [sp, #0]
 801026a:	2230      	movs	r2, #48	; 0x30
 801026c:	3701      	adds	r7, #1
 801026e:	700a      	strb	r2, [r1, #0]
 8010270:	781a      	ldrb	r2, [r3, #0]
 8010272:	3201      	adds	r2, #1
 8010274:	701a      	strb	r2, [r3, #0]
 8010276:	e790      	b.n	801019a <_dtoa_r+0x62a>
 8010278:	4ba3      	ldr	r3, [pc, #652]	; (8010508 <_dtoa_r+0x998>)
 801027a:	2200      	movs	r2, #0
 801027c:	f7f0 fa34 	bl	80006e8 <__aeabi_dmul>
 8010280:	2200      	movs	r2, #0
 8010282:	2300      	movs	r3, #0
 8010284:	4606      	mov	r6, r0
 8010286:	460f      	mov	r7, r1
 8010288:	f7f0 fc96 	bl	8000bb8 <__aeabi_dcmpeq>
 801028c:	2800      	cmp	r0, #0
 801028e:	d09e      	beq.n	80101ce <_dtoa_r+0x65e>
 8010290:	e7d0      	b.n	8010234 <_dtoa_r+0x6c4>
 8010292:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010294:	2a00      	cmp	r2, #0
 8010296:	f000 80ca 	beq.w	801042e <_dtoa_r+0x8be>
 801029a:	9a07      	ldr	r2, [sp, #28]
 801029c:	2a01      	cmp	r2, #1
 801029e:	f300 80ad 	bgt.w	80103fc <_dtoa_r+0x88c>
 80102a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80102a4:	2a00      	cmp	r2, #0
 80102a6:	f000 80a5 	beq.w	80103f4 <_dtoa_r+0x884>
 80102aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80102ae:	9e08      	ldr	r6, [sp, #32]
 80102b0:	9d05      	ldr	r5, [sp, #20]
 80102b2:	9a05      	ldr	r2, [sp, #20]
 80102b4:	441a      	add	r2, r3
 80102b6:	9205      	str	r2, [sp, #20]
 80102b8:	9a06      	ldr	r2, [sp, #24]
 80102ba:	2101      	movs	r1, #1
 80102bc:	441a      	add	r2, r3
 80102be:	4620      	mov	r0, r4
 80102c0:	9206      	str	r2, [sp, #24]
 80102c2:	f000 fb89 	bl	80109d8 <__i2b>
 80102c6:	4607      	mov	r7, r0
 80102c8:	b165      	cbz	r5, 80102e4 <_dtoa_r+0x774>
 80102ca:	9b06      	ldr	r3, [sp, #24]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	dd09      	ble.n	80102e4 <_dtoa_r+0x774>
 80102d0:	42ab      	cmp	r3, r5
 80102d2:	9a05      	ldr	r2, [sp, #20]
 80102d4:	bfa8      	it	ge
 80102d6:	462b      	movge	r3, r5
 80102d8:	1ad2      	subs	r2, r2, r3
 80102da:	9205      	str	r2, [sp, #20]
 80102dc:	9a06      	ldr	r2, [sp, #24]
 80102de:	1aed      	subs	r5, r5, r3
 80102e0:	1ad3      	subs	r3, r2, r3
 80102e2:	9306      	str	r3, [sp, #24]
 80102e4:	9b08      	ldr	r3, [sp, #32]
 80102e6:	b1f3      	cbz	r3, 8010326 <_dtoa_r+0x7b6>
 80102e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	f000 80a3 	beq.w	8010436 <_dtoa_r+0x8c6>
 80102f0:	2e00      	cmp	r6, #0
 80102f2:	dd10      	ble.n	8010316 <_dtoa_r+0x7a6>
 80102f4:	4639      	mov	r1, r7
 80102f6:	4632      	mov	r2, r6
 80102f8:	4620      	mov	r0, r4
 80102fa:	f000 fc2d 	bl	8010b58 <__pow5mult>
 80102fe:	4652      	mov	r2, sl
 8010300:	4601      	mov	r1, r0
 8010302:	4607      	mov	r7, r0
 8010304:	4620      	mov	r0, r4
 8010306:	f000 fb7d 	bl	8010a04 <__multiply>
 801030a:	4651      	mov	r1, sl
 801030c:	4680      	mov	r8, r0
 801030e:	4620      	mov	r0, r4
 8010310:	f000 faac 	bl	801086c <_Bfree>
 8010314:	46c2      	mov	sl, r8
 8010316:	9b08      	ldr	r3, [sp, #32]
 8010318:	1b9a      	subs	r2, r3, r6
 801031a:	d004      	beq.n	8010326 <_dtoa_r+0x7b6>
 801031c:	4651      	mov	r1, sl
 801031e:	4620      	mov	r0, r4
 8010320:	f000 fc1a 	bl	8010b58 <__pow5mult>
 8010324:	4682      	mov	sl, r0
 8010326:	2101      	movs	r1, #1
 8010328:	4620      	mov	r0, r4
 801032a:	f000 fb55 	bl	80109d8 <__i2b>
 801032e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010330:	2b00      	cmp	r3, #0
 8010332:	4606      	mov	r6, r0
 8010334:	f340 8081 	ble.w	801043a <_dtoa_r+0x8ca>
 8010338:	461a      	mov	r2, r3
 801033a:	4601      	mov	r1, r0
 801033c:	4620      	mov	r0, r4
 801033e:	f000 fc0b 	bl	8010b58 <__pow5mult>
 8010342:	9b07      	ldr	r3, [sp, #28]
 8010344:	2b01      	cmp	r3, #1
 8010346:	4606      	mov	r6, r0
 8010348:	dd7a      	ble.n	8010440 <_dtoa_r+0x8d0>
 801034a:	f04f 0800 	mov.w	r8, #0
 801034e:	6933      	ldr	r3, [r6, #16]
 8010350:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010354:	6918      	ldr	r0, [r3, #16]
 8010356:	f000 faf1 	bl	801093c <__hi0bits>
 801035a:	f1c0 0020 	rsb	r0, r0, #32
 801035e:	9b06      	ldr	r3, [sp, #24]
 8010360:	4418      	add	r0, r3
 8010362:	f010 001f 	ands.w	r0, r0, #31
 8010366:	f000 8094 	beq.w	8010492 <_dtoa_r+0x922>
 801036a:	f1c0 0320 	rsb	r3, r0, #32
 801036e:	2b04      	cmp	r3, #4
 8010370:	f340 8085 	ble.w	801047e <_dtoa_r+0x90e>
 8010374:	9b05      	ldr	r3, [sp, #20]
 8010376:	f1c0 001c 	rsb	r0, r0, #28
 801037a:	4403      	add	r3, r0
 801037c:	9305      	str	r3, [sp, #20]
 801037e:	9b06      	ldr	r3, [sp, #24]
 8010380:	4403      	add	r3, r0
 8010382:	4405      	add	r5, r0
 8010384:	9306      	str	r3, [sp, #24]
 8010386:	9b05      	ldr	r3, [sp, #20]
 8010388:	2b00      	cmp	r3, #0
 801038a:	dd05      	ble.n	8010398 <_dtoa_r+0x828>
 801038c:	4651      	mov	r1, sl
 801038e:	461a      	mov	r2, r3
 8010390:	4620      	mov	r0, r4
 8010392:	f000 fc3b 	bl	8010c0c <__lshift>
 8010396:	4682      	mov	sl, r0
 8010398:	9b06      	ldr	r3, [sp, #24]
 801039a:	2b00      	cmp	r3, #0
 801039c:	dd05      	ble.n	80103aa <_dtoa_r+0x83a>
 801039e:	4631      	mov	r1, r6
 80103a0:	461a      	mov	r2, r3
 80103a2:	4620      	mov	r0, r4
 80103a4:	f000 fc32 	bl	8010c0c <__lshift>
 80103a8:	4606      	mov	r6, r0
 80103aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d072      	beq.n	8010496 <_dtoa_r+0x926>
 80103b0:	4631      	mov	r1, r6
 80103b2:	4650      	mov	r0, sl
 80103b4:	f000 fc96 	bl	8010ce4 <__mcmp>
 80103b8:	2800      	cmp	r0, #0
 80103ba:	da6c      	bge.n	8010496 <_dtoa_r+0x926>
 80103bc:	2300      	movs	r3, #0
 80103be:	4651      	mov	r1, sl
 80103c0:	220a      	movs	r2, #10
 80103c2:	4620      	mov	r0, r4
 80103c4:	f000 fa74 	bl	80108b0 <__multadd>
 80103c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80103ce:	4682      	mov	sl, r0
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	f000 81b0 	beq.w	8010736 <_dtoa_r+0xbc6>
 80103d6:	2300      	movs	r3, #0
 80103d8:	4639      	mov	r1, r7
 80103da:	220a      	movs	r2, #10
 80103dc:	4620      	mov	r0, r4
 80103de:	f000 fa67 	bl	80108b0 <__multadd>
 80103e2:	9b01      	ldr	r3, [sp, #4]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	4607      	mov	r7, r0
 80103e8:	f300 8096 	bgt.w	8010518 <_dtoa_r+0x9a8>
 80103ec:	9b07      	ldr	r3, [sp, #28]
 80103ee:	2b02      	cmp	r3, #2
 80103f0:	dc59      	bgt.n	80104a6 <_dtoa_r+0x936>
 80103f2:	e091      	b.n	8010518 <_dtoa_r+0x9a8>
 80103f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80103f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80103fa:	e758      	b.n	80102ae <_dtoa_r+0x73e>
 80103fc:	9b04      	ldr	r3, [sp, #16]
 80103fe:	1e5e      	subs	r6, r3, #1
 8010400:	9b08      	ldr	r3, [sp, #32]
 8010402:	42b3      	cmp	r3, r6
 8010404:	bfbf      	itttt	lt
 8010406:	9b08      	ldrlt	r3, [sp, #32]
 8010408:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801040a:	9608      	strlt	r6, [sp, #32]
 801040c:	1af3      	sublt	r3, r6, r3
 801040e:	bfb4      	ite	lt
 8010410:	18d2      	addlt	r2, r2, r3
 8010412:	1b9e      	subge	r6, r3, r6
 8010414:	9b04      	ldr	r3, [sp, #16]
 8010416:	bfbc      	itt	lt
 8010418:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801041a:	2600      	movlt	r6, #0
 801041c:	2b00      	cmp	r3, #0
 801041e:	bfb7      	itett	lt
 8010420:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010424:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010428:	1a9d      	sublt	r5, r3, r2
 801042a:	2300      	movlt	r3, #0
 801042c:	e741      	b.n	80102b2 <_dtoa_r+0x742>
 801042e:	9e08      	ldr	r6, [sp, #32]
 8010430:	9d05      	ldr	r5, [sp, #20]
 8010432:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010434:	e748      	b.n	80102c8 <_dtoa_r+0x758>
 8010436:	9a08      	ldr	r2, [sp, #32]
 8010438:	e770      	b.n	801031c <_dtoa_r+0x7ac>
 801043a:	9b07      	ldr	r3, [sp, #28]
 801043c:	2b01      	cmp	r3, #1
 801043e:	dc19      	bgt.n	8010474 <_dtoa_r+0x904>
 8010440:	9b02      	ldr	r3, [sp, #8]
 8010442:	b9bb      	cbnz	r3, 8010474 <_dtoa_r+0x904>
 8010444:	9b03      	ldr	r3, [sp, #12]
 8010446:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801044a:	b99b      	cbnz	r3, 8010474 <_dtoa_r+0x904>
 801044c:	9b03      	ldr	r3, [sp, #12]
 801044e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010452:	0d1b      	lsrs	r3, r3, #20
 8010454:	051b      	lsls	r3, r3, #20
 8010456:	b183      	cbz	r3, 801047a <_dtoa_r+0x90a>
 8010458:	9b05      	ldr	r3, [sp, #20]
 801045a:	3301      	adds	r3, #1
 801045c:	9305      	str	r3, [sp, #20]
 801045e:	9b06      	ldr	r3, [sp, #24]
 8010460:	3301      	adds	r3, #1
 8010462:	9306      	str	r3, [sp, #24]
 8010464:	f04f 0801 	mov.w	r8, #1
 8010468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801046a:	2b00      	cmp	r3, #0
 801046c:	f47f af6f 	bne.w	801034e <_dtoa_r+0x7de>
 8010470:	2001      	movs	r0, #1
 8010472:	e774      	b.n	801035e <_dtoa_r+0x7ee>
 8010474:	f04f 0800 	mov.w	r8, #0
 8010478:	e7f6      	b.n	8010468 <_dtoa_r+0x8f8>
 801047a:	4698      	mov	r8, r3
 801047c:	e7f4      	b.n	8010468 <_dtoa_r+0x8f8>
 801047e:	d082      	beq.n	8010386 <_dtoa_r+0x816>
 8010480:	9a05      	ldr	r2, [sp, #20]
 8010482:	331c      	adds	r3, #28
 8010484:	441a      	add	r2, r3
 8010486:	9205      	str	r2, [sp, #20]
 8010488:	9a06      	ldr	r2, [sp, #24]
 801048a:	441a      	add	r2, r3
 801048c:	441d      	add	r5, r3
 801048e:	9206      	str	r2, [sp, #24]
 8010490:	e779      	b.n	8010386 <_dtoa_r+0x816>
 8010492:	4603      	mov	r3, r0
 8010494:	e7f4      	b.n	8010480 <_dtoa_r+0x910>
 8010496:	9b04      	ldr	r3, [sp, #16]
 8010498:	2b00      	cmp	r3, #0
 801049a:	dc37      	bgt.n	801050c <_dtoa_r+0x99c>
 801049c:	9b07      	ldr	r3, [sp, #28]
 801049e:	2b02      	cmp	r3, #2
 80104a0:	dd34      	ble.n	801050c <_dtoa_r+0x99c>
 80104a2:	9b04      	ldr	r3, [sp, #16]
 80104a4:	9301      	str	r3, [sp, #4]
 80104a6:	9b01      	ldr	r3, [sp, #4]
 80104a8:	b963      	cbnz	r3, 80104c4 <_dtoa_r+0x954>
 80104aa:	4631      	mov	r1, r6
 80104ac:	2205      	movs	r2, #5
 80104ae:	4620      	mov	r0, r4
 80104b0:	f000 f9fe 	bl	80108b0 <__multadd>
 80104b4:	4601      	mov	r1, r0
 80104b6:	4606      	mov	r6, r0
 80104b8:	4650      	mov	r0, sl
 80104ba:	f000 fc13 	bl	8010ce4 <__mcmp>
 80104be:	2800      	cmp	r0, #0
 80104c0:	f73f adbb 	bgt.w	801003a <_dtoa_r+0x4ca>
 80104c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104c6:	9d00      	ldr	r5, [sp, #0]
 80104c8:	ea6f 0b03 	mvn.w	fp, r3
 80104cc:	f04f 0800 	mov.w	r8, #0
 80104d0:	4631      	mov	r1, r6
 80104d2:	4620      	mov	r0, r4
 80104d4:	f000 f9ca 	bl	801086c <_Bfree>
 80104d8:	2f00      	cmp	r7, #0
 80104da:	f43f aeab 	beq.w	8010234 <_dtoa_r+0x6c4>
 80104de:	f1b8 0f00 	cmp.w	r8, #0
 80104e2:	d005      	beq.n	80104f0 <_dtoa_r+0x980>
 80104e4:	45b8      	cmp	r8, r7
 80104e6:	d003      	beq.n	80104f0 <_dtoa_r+0x980>
 80104e8:	4641      	mov	r1, r8
 80104ea:	4620      	mov	r0, r4
 80104ec:	f000 f9be 	bl	801086c <_Bfree>
 80104f0:	4639      	mov	r1, r7
 80104f2:	4620      	mov	r0, r4
 80104f4:	f000 f9ba 	bl	801086c <_Bfree>
 80104f8:	e69c      	b.n	8010234 <_dtoa_r+0x6c4>
 80104fa:	2600      	movs	r6, #0
 80104fc:	4637      	mov	r7, r6
 80104fe:	e7e1      	b.n	80104c4 <_dtoa_r+0x954>
 8010500:	46bb      	mov	fp, r7
 8010502:	4637      	mov	r7, r6
 8010504:	e599      	b.n	801003a <_dtoa_r+0x4ca>
 8010506:	bf00      	nop
 8010508:	40240000 	.word	0x40240000
 801050c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801050e:	2b00      	cmp	r3, #0
 8010510:	f000 80c8 	beq.w	80106a4 <_dtoa_r+0xb34>
 8010514:	9b04      	ldr	r3, [sp, #16]
 8010516:	9301      	str	r3, [sp, #4]
 8010518:	2d00      	cmp	r5, #0
 801051a:	dd05      	ble.n	8010528 <_dtoa_r+0x9b8>
 801051c:	4639      	mov	r1, r7
 801051e:	462a      	mov	r2, r5
 8010520:	4620      	mov	r0, r4
 8010522:	f000 fb73 	bl	8010c0c <__lshift>
 8010526:	4607      	mov	r7, r0
 8010528:	f1b8 0f00 	cmp.w	r8, #0
 801052c:	d05b      	beq.n	80105e6 <_dtoa_r+0xa76>
 801052e:	6879      	ldr	r1, [r7, #4]
 8010530:	4620      	mov	r0, r4
 8010532:	f000 f95b 	bl	80107ec <_Balloc>
 8010536:	4605      	mov	r5, r0
 8010538:	b928      	cbnz	r0, 8010546 <_dtoa_r+0x9d6>
 801053a:	4b83      	ldr	r3, [pc, #524]	; (8010748 <_dtoa_r+0xbd8>)
 801053c:	4602      	mov	r2, r0
 801053e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010542:	f7ff bb2e 	b.w	800fba2 <_dtoa_r+0x32>
 8010546:	693a      	ldr	r2, [r7, #16]
 8010548:	3202      	adds	r2, #2
 801054a:	0092      	lsls	r2, r2, #2
 801054c:	f107 010c 	add.w	r1, r7, #12
 8010550:	300c      	adds	r0, #12
 8010552:	f7ff fa77 	bl	800fa44 <memcpy>
 8010556:	2201      	movs	r2, #1
 8010558:	4629      	mov	r1, r5
 801055a:	4620      	mov	r0, r4
 801055c:	f000 fb56 	bl	8010c0c <__lshift>
 8010560:	9b00      	ldr	r3, [sp, #0]
 8010562:	3301      	adds	r3, #1
 8010564:	9304      	str	r3, [sp, #16]
 8010566:	e9dd 2300 	ldrd	r2, r3, [sp]
 801056a:	4413      	add	r3, r2
 801056c:	9308      	str	r3, [sp, #32]
 801056e:	9b02      	ldr	r3, [sp, #8]
 8010570:	f003 0301 	and.w	r3, r3, #1
 8010574:	46b8      	mov	r8, r7
 8010576:	9306      	str	r3, [sp, #24]
 8010578:	4607      	mov	r7, r0
 801057a:	9b04      	ldr	r3, [sp, #16]
 801057c:	4631      	mov	r1, r6
 801057e:	3b01      	subs	r3, #1
 8010580:	4650      	mov	r0, sl
 8010582:	9301      	str	r3, [sp, #4]
 8010584:	f7ff fa6c 	bl	800fa60 <quorem>
 8010588:	4641      	mov	r1, r8
 801058a:	9002      	str	r0, [sp, #8]
 801058c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010590:	4650      	mov	r0, sl
 8010592:	f000 fba7 	bl	8010ce4 <__mcmp>
 8010596:	463a      	mov	r2, r7
 8010598:	9005      	str	r0, [sp, #20]
 801059a:	4631      	mov	r1, r6
 801059c:	4620      	mov	r0, r4
 801059e:	f000 fbbd 	bl	8010d1c <__mdiff>
 80105a2:	68c2      	ldr	r2, [r0, #12]
 80105a4:	4605      	mov	r5, r0
 80105a6:	bb02      	cbnz	r2, 80105ea <_dtoa_r+0xa7a>
 80105a8:	4601      	mov	r1, r0
 80105aa:	4650      	mov	r0, sl
 80105ac:	f000 fb9a 	bl	8010ce4 <__mcmp>
 80105b0:	4602      	mov	r2, r0
 80105b2:	4629      	mov	r1, r5
 80105b4:	4620      	mov	r0, r4
 80105b6:	9209      	str	r2, [sp, #36]	; 0x24
 80105b8:	f000 f958 	bl	801086c <_Bfree>
 80105bc:	9b07      	ldr	r3, [sp, #28]
 80105be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80105c0:	9d04      	ldr	r5, [sp, #16]
 80105c2:	ea43 0102 	orr.w	r1, r3, r2
 80105c6:	9b06      	ldr	r3, [sp, #24]
 80105c8:	4319      	orrs	r1, r3
 80105ca:	d110      	bne.n	80105ee <_dtoa_r+0xa7e>
 80105cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80105d0:	d029      	beq.n	8010626 <_dtoa_r+0xab6>
 80105d2:	9b05      	ldr	r3, [sp, #20]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	dd02      	ble.n	80105de <_dtoa_r+0xa6e>
 80105d8:	9b02      	ldr	r3, [sp, #8]
 80105da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80105de:	9b01      	ldr	r3, [sp, #4]
 80105e0:	f883 9000 	strb.w	r9, [r3]
 80105e4:	e774      	b.n	80104d0 <_dtoa_r+0x960>
 80105e6:	4638      	mov	r0, r7
 80105e8:	e7ba      	b.n	8010560 <_dtoa_r+0x9f0>
 80105ea:	2201      	movs	r2, #1
 80105ec:	e7e1      	b.n	80105b2 <_dtoa_r+0xa42>
 80105ee:	9b05      	ldr	r3, [sp, #20]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	db04      	blt.n	80105fe <_dtoa_r+0xa8e>
 80105f4:	9907      	ldr	r1, [sp, #28]
 80105f6:	430b      	orrs	r3, r1
 80105f8:	9906      	ldr	r1, [sp, #24]
 80105fa:	430b      	orrs	r3, r1
 80105fc:	d120      	bne.n	8010640 <_dtoa_r+0xad0>
 80105fe:	2a00      	cmp	r2, #0
 8010600:	dded      	ble.n	80105de <_dtoa_r+0xa6e>
 8010602:	4651      	mov	r1, sl
 8010604:	2201      	movs	r2, #1
 8010606:	4620      	mov	r0, r4
 8010608:	f000 fb00 	bl	8010c0c <__lshift>
 801060c:	4631      	mov	r1, r6
 801060e:	4682      	mov	sl, r0
 8010610:	f000 fb68 	bl	8010ce4 <__mcmp>
 8010614:	2800      	cmp	r0, #0
 8010616:	dc03      	bgt.n	8010620 <_dtoa_r+0xab0>
 8010618:	d1e1      	bne.n	80105de <_dtoa_r+0xa6e>
 801061a:	f019 0f01 	tst.w	r9, #1
 801061e:	d0de      	beq.n	80105de <_dtoa_r+0xa6e>
 8010620:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010624:	d1d8      	bne.n	80105d8 <_dtoa_r+0xa68>
 8010626:	9a01      	ldr	r2, [sp, #4]
 8010628:	2339      	movs	r3, #57	; 0x39
 801062a:	7013      	strb	r3, [r2, #0]
 801062c:	462b      	mov	r3, r5
 801062e:	461d      	mov	r5, r3
 8010630:	3b01      	subs	r3, #1
 8010632:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010636:	2a39      	cmp	r2, #57	; 0x39
 8010638:	d06c      	beq.n	8010714 <_dtoa_r+0xba4>
 801063a:	3201      	adds	r2, #1
 801063c:	701a      	strb	r2, [r3, #0]
 801063e:	e747      	b.n	80104d0 <_dtoa_r+0x960>
 8010640:	2a00      	cmp	r2, #0
 8010642:	dd07      	ble.n	8010654 <_dtoa_r+0xae4>
 8010644:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010648:	d0ed      	beq.n	8010626 <_dtoa_r+0xab6>
 801064a:	9a01      	ldr	r2, [sp, #4]
 801064c:	f109 0301 	add.w	r3, r9, #1
 8010650:	7013      	strb	r3, [r2, #0]
 8010652:	e73d      	b.n	80104d0 <_dtoa_r+0x960>
 8010654:	9b04      	ldr	r3, [sp, #16]
 8010656:	9a08      	ldr	r2, [sp, #32]
 8010658:	f803 9c01 	strb.w	r9, [r3, #-1]
 801065c:	4293      	cmp	r3, r2
 801065e:	d043      	beq.n	80106e8 <_dtoa_r+0xb78>
 8010660:	4651      	mov	r1, sl
 8010662:	2300      	movs	r3, #0
 8010664:	220a      	movs	r2, #10
 8010666:	4620      	mov	r0, r4
 8010668:	f000 f922 	bl	80108b0 <__multadd>
 801066c:	45b8      	cmp	r8, r7
 801066e:	4682      	mov	sl, r0
 8010670:	f04f 0300 	mov.w	r3, #0
 8010674:	f04f 020a 	mov.w	r2, #10
 8010678:	4641      	mov	r1, r8
 801067a:	4620      	mov	r0, r4
 801067c:	d107      	bne.n	801068e <_dtoa_r+0xb1e>
 801067e:	f000 f917 	bl	80108b0 <__multadd>
 8010682:	4680      	mov	r8, r0
 8010684:	4607      	mov	r7, r0
 8010686:	9b04      	ldr	r3, [sp, #16]
 8010688:	3301      	adds	r3, #1
 801068a:	9304      	str	r3, [sp, #16]
 801068c:	e775      	b.n	801057a <_dtoa_r+0xa0a>
 801068e:	f000 f90f 	bl	80108b0 <__multadd>
 8010692:	4639      	mov	r1, r7
 8010694:	4680      	mov	r8, r0
 8010696:	2300      	movs	r3, #0
 8010698:	220a      	movs	r2, #10
 801069a:	4620      	mov	r0, r4
 801069c:	f000 f908 	bl	80108b0 <__multadd>
 80106a0:	4607      	mov	r7, r0
 80106a2:	e7f0      	b.n	8010686 <_dtoa_r+0xb16>
 80106a4:	9b04      	ldr	r3, [sp, #16]
 80106a6:	9301      	str	r3, [sp, #4]
 80106a8:	9d00      	ldr	r5, [sp, #0]
 80106aa:	4631      	mov	r1, r6
 80106ac:	4650      	mov	r0, sl
 80106ae:	f7ff f9d7 	bl	800fa60 <quorem>
 80106b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80106b6:	9b00      	ldr	r3, [sp, #0]
 80106b8:	f805 9b01 	strb.w	r9, [r5], #1
 80106bc:	1aea      	subs	r2, r5, r3
 80106be:	9b01      	ldr	r3, [sp, #4]
 80106c0:	4293      	cmp	r3, r2
 80106c2:	dd07      	ble.n	80106d4 <_dtoa_r+0xb64>
 80106c4:	4651      	mov	r1, sl
 80106c6:	2300      	movs	r3, #0
 80106c8:	220a      	movs	r2, #10
 80106ca:	4620      	mov	r0, r4
 80106cc:	f000 f8f0 	bl	80108b0 <__multadd>
 80106d0:	4682      	mov	sl, r0
 80106d2:	e7ea      	b.n	80106aa <_dtoa_r+0xb3a>
 80106d4:	9b01      	ldr	r3, [sp, #4]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	bfc8      	it	gt
 80106da:	461d      	movgt	r5, r3
 80106dc:	9b00      	ldr	r3, [sp, #0]
 80106de:	bfd8      	it	le
 80106e0:	2501      	movle	r5, #1
 80106e2:	441d      	add	r5, r3
 80106e4:	f04f 0800 	mov.w	r8, #0
 80106e8:	4651      	mov	r1, sl
 80106ea:	2201      	movs	r2, #1
 80106ec:	4620      	mov	r0, r4
 80106ee:	f000 fa8d 	bl	8010c0c <__lshift>
 80106f2:	4631      	mov	r1, r6
 80106f4:	4682      	mov	sl, r0
 80106f6:	f000 faf5 	bl	8010ce4 <__mcmp>
 80106fa:	2800      	cmp	r0, #0
 80106fc:	dc96      	bgt.n	801062c <_dtoa_r+0xabc>
 80106fe:	d102      	bne.n	8010706 <_dtoa_r+0xb96>
 8010700:	f019 0f01 	tst.w	r9, #1
 8010704:	d192      	bne.n	801062c <_dtoa_r+0xabc>
 8010706:	462b      	mov	r3, r5
 8010708:	461d      	mov	r5, r3
 801070a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801070e:	2a30      	cmp	r2, #48	; 0x30
 8010710:	d0fa      	beq.n	8010708 <_dtoa_r+0xb98>
 8010712:	e6dd      	b.n	80104d0 <_dtoa_r+0x960>
 8010714:	9a00      	ldr	r2, [sp, #0]
 8010716:	429a      	cmp	r2, r3
 8010718:	d189      	bne.n	801062e <_dtoa_r+0xabe>
 801071a:	f10b 0b01 	add.w	fp, fp, #1
 801071e:	2331      	movs	r3, #49	; 0x31
 8010720:	e796      	b.n	8010650 <_dtoa_r+0xae0>
 8010722:	4b0a      	ldr	r3, [pc, #40]	; (801074c <_dtoa_r+0xbdc>)
 8010724:	f7ff ba99 	b.w	800fc5a <_dtoa_r+0xea>
 8010728:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801072a:	2b00      	cmp	r3, #0
 801072c:	f47f aa6d 	bne.w	800fc0a <_dtoa_r+0x9a>
 8010730:	4b07      	ldr	r3, [pc, #28]	; (8010750 <_dtoa_r+0xbe0>)
 8010732:	f7ff ba92 	b.w	800fc5a <_dtoa_r+0xea>
 8010736:	9b01      	ldr	r3, [sp, #4]
 8010738:	2b00      	cmp	r3, #0
 801073a:	dcb5      	bgt.n	80106a8 <_dtoa_r+0xb38>
 801073c:	9b07      	ldr	r3, [sp, #28]
 801073e:	2b02      	cmp	r3, #2
 8010740:	f73f aeb1 	bgt.w	80104a6 <_dtoa_r+0x936>
 8010744:	e7b0      	b.n	80106a8 <_dtoa_r+0xb38>
 8010746:	bf00      	nop
 8010748:	080172ec 	.word	0x080172ec
 801074c:	0801724c 	.word	0x0801724c
 8010750:	08017270 	.word	0x08017270

08010754 <_free_r>:
 8010754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010756:	2900      	cmp	r1, #0
 8010758:	d044      	beq.n	80107e4 <_free_r+0x90>
 801075a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801075e:	9001      	str	r0, [sp, #4]
 8010760:	2b00      	cmp	r3, #0
 8010762:	f1a1 0404 	sub.w	r4, r1, #4
 8010766:	bfb8      	it	lt
 8010768:	18e4      	addlt	r4, r4, r3
 801076a:	f7fe f93f 	bl	800e9ec <__malloc_lock>
 801076e:	4a1e      	ldr	r2, [pc, #120]	; (80107e8 <_free_r+0x94>)
 8010770:	9801      	ldr	r0, [sp, #4]
 8010772:	6813      	ldr	r3, [r2, #0]
 8010774:	b933      	cbnz	r3, 8010784 <_free_r+0x30>
 8010776:	6063      	str	r3, [r4, #4]
 8010778:	6014      	str	r4, [r2, #0]
 801077a:	b003      	add	sp, #12
 801077c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010780:	f7fe b93a 	b.w	800e9f8 <__malloc_unlock>
 8010784:	42a3      	cmp	r3, r4
 8010786:	d908      	bls.n	801079a <_free_r+0x46>
 8010788:	6825      	ldr	r5, [r4, #0]
 801078a:	1961      	adds	r1, r4, r5
 801078c:	428b      	cmp	r3, r1
 801078e:	bf01      	itttt	eq
 8010790:	6819      	ldreq	r1, [r3, #0]
 8010792:	685b      	ldreq	r3, [r3, #4]
 8010794:	1949      	addeq	r1, r1, r5
 8010796:	6021      	streq	r1, [r4, #0]
 8010798:	e7ed      	b.n	8010776 <_free_r+0x22>
 801079a:	461a      	mov	r2, r3
 801079c:	685b      	ldr	r3, [r3, #4]
 801079e:	b10b      	cbz	r3, 80107a4 <_free_r+0x50>
 80107a0:	42a3      	cmp	r3, r4
 80107a2:	d9fa      	bls.n	801079a <_free_r+0x46>
 80107a4:	6811      	ldr	r1, [r2, #0]
 80107a6:	1855      	adds	r5, r2, r1
 80107a8:	42a5      	cmp	r5, r4
 80107aa:	d10b      	bne.n	80107c4 <_free_r+0x70>
 80107ac:	6824      	ldr	r4, [r4, #0]
 80107ae:	4421      	add	r1, r4
 80107b0:	1854      	adds	r4, r2, r1
 80107b2:	42a3      	cmp	r3, r4
 80107b4:	6011      	str	r1, [r2, #0]
 80107b6:	d1e0      	bne.n	801077a <_free_r+0x26>
 80107b8:	681c      	ldr	r4, [r3, #0]
 80107ba:	685b      	ldr	r3, [r3, #4]
 80107bc:	6053      	str	r3, [r2, #4]
 80107be:	440c      	add	r4, r1
 80107c0:	6014      	str	r4, [r2, #0]
 80107c2:	e7da      	b.n	801077a <_free_r+0x26>
 80107c4:	d902      	bls.n	80107cc <_free_r+0x78>
 80107c6:	230c      	movs	r3, #12
 80107c8:	6003      	str	r3, [r0, #0]
 80107ca:	e7d6      	b.n	801077a <_free_r+0x26>
 80107cc:	6825      	ldr	r5, [r4, #0]
 80107ce:	1961      	adds	r1, r4, r5
 80107d0:	428b      	cmp	r3, r1
 80107d2:	bf04      	itt	eq
 80107d4:	6819      	ldreq	r1, [r3, #0]
 80107d6:	685b      	ldreq	r3, [r3, #4]
 80107d8:	6063      	str	r3, [r4, #4]
 80107da:	bf04      	itt	eq
 80107dc:	1949      	addeq	r1, r1, r5
 80107de:	6021      	streq	r1, [r4, #0]
 80107e0:	6054      	str	r4, [r2, #4]
 80107e2:	e7ca      	b.n	801077a <_free_r+0x26>
 80107e4:	b003      	add	sp, #12
 80107e6:	bd30      	pop	{r4, r5, pc}
 80107e8:	200006e0 	.word	0x200006e0

080107ec <_Balloc>:
 80107ec:	b570      	push	{r4, r5, r6, lr}
 80107ee:	69c6      	ldr	r6, [r0, #28]
 80107f0:	4604      	mov	r4, r0
 80107f2:	460d      	mov	r5, r1
 80107f4:	b976      	cbnz	r6, 8010814 <_Balloc+0x28>
 80107f6:	2010      	movs	r0, #16
 80107f8:	f7fe f848 	bl	800e88c <malloc>
 80107fc:	4602      	mov	r2, r0
 80107fe:	61e0      	str	r0, [r4, #28]
 8010800:	b920      	cbnz	r0, 801080c <_Balloc+0x20>
 8010802:	4b18      	ldr	r3, [pc, #96]	; (8010864 <_Balloc+0x78>)
 8010804:	4818      	ldr	r0, [pc, #96]	; (8010868 <_Balloc+0x7c>)
 8010806:	216b      	movs	r1, #107	; 0x6b
 8010808:	f000 fe8c 	bl	8011524 <__assert_func>
 801080c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010810:	6006      	str	r6, [r0, #0]
 8010812:	60c6      	str	r6, [r0, #12]
 8010814:	69e6      	ldr	r6, [r4, #28]
 8010816:	68f3      	ldr	r3, [r6, #12]
 8010818:	b183      	cbz	r3, 801083c <_Balloc+0x50>
 801081a:	69e3      	ldr	r3, [r4, #28]
 801081c:	68db      	ldr	r3, [r3, #12]
 801081e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010822:	b9b8      	cbnz	r0, 8010854 <_Balloc+0x68>
 8010824:	2101      	movs	r1, #1
 8010826:	fa01 f605 	lsl.w	r6, r1, r5
 801082a:	1d72      	adds	r2, r6, #5
 801082c:	0092      	lsls	r2, r2, #2
 801082e:	4620      	mov	r0, r4
 8010830:	f7fe f816 	bl	800e860 <_calloc_r>
 8010834:	b160      	cbz	r0, 8010850 <_Balloc+0x64>
 8010836:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801083a:	e00e      	b.n	801085a <_Balloc+0x6e>
 801083c:	2221      	movs	r2, #33	; 0x21
 801083e:	2104      	movs	r1, #4
 8010840:	4620      	mov	r0, r4
 8010842:	f7fe f80d 	bl	800e860 <_calloc_r>
 8010846:	69e3      	ldr	r3, [r4, #28]
 8010848:	60f0      	str	r0, [r6, #12]
 801084a:	68db      	ldr	r3, [r3, #12]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d1e4      	bne.n	801081a <_Balloc+0x2e>
 8010850:	2000      	movs	r0, #0
 8010852:	bd70      	pop	{r4, r5, r6, pc}
 8010854:	6802      	ldr	r2, [r0, #0]
 8010856:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801085a:	2300      	movs	r3, #0
 801085c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010860:	e7f7      	b.n	8010852 <_Balloc+0x66>
 8010862:	bf00      	nop
 8010864:	0801727d 	.word	0x0801727d
 8010868:	080172fd 	.word	0x080172fd

0801086c <_Bfree>:
 801086c:	b570      	push	{r4, r5, r6, lr}
 801086e:	69c6      	ldr	r6, [r0, #28]
 8010870:	4605      	mov	r5, r0
 8010872:	460c      	mov	r4, r1
 8010874:	b976      	cbnz	r6, 8010894 <_Bfree+0x28>
 8010876:	2010      	movs	r0, #16
 8010878:	f7fe f808 	bl	800e88c <malloc>
 801087c:	4602      	mov	r2, r0
 801087e:	61e8      	str	r0, [r5, #28]
 8010880:	b920      	cbnz	r0, 801088c <_Bfree+0x20>
 8010882:	4b09      	ldr	r3, [pc, #36]	; (80108a8 <_Bfree+0x3c>)
 8010884:	4809      	ldr	r0, [pc, #36]	; (80108ac <_Bfree+0x40>)
 8010886:	218f      	movs	r1, #143	; 0x8f
 8010888:	f000 fe4c 	bl	8011524 <__assert_func>
 801088c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010890:	6006      	str	r6, [r0, #0]
 8010892:	60c6      	str	r6, [r0, #12]
 8010894:	b13c      	cbz	r4, 80108a6 <_Bfree+0x3a>
 8010896:	69eb      	ldr	r3, [r5, #28]
 8010898:	6862      	ldr	r2, [r4, #4]
 801089a:	68db      	ldr	r3, [r3, #12]
 801089c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80108a0:	6021      	str	r1, [r4, #0]
 80108a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80108a6:	bd70      	pop	{r4, r5, r6, pc}
 80108a8:	0801727d 	.word	0x0801727d
 80108ac:	080172fd 	.word	0x080172fd

080108b0 <__multadd>:
 80108b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108b4:	690d      	ldr	r5, [r1, #16]
 80108b6:	4607      	mov	r7, r0
 80108b8:	460c      	mov	r4, r1
 80108ba:	461e      	mov	r6, r3
 80108bc:	f101 0c14 	add.w	ip, r1, #20
 80108c0:	2000      	movs	r0, #0
 80108c2:	f8dc 3000 	ldr.w	r3, [ip]
 80108c6:	b299      	uxth	r1, r3
 80108c8:	fb02 6101 	mla	r1, r2, r1, r6
 80108cc:	0c1e      	lsrs	r6, r3, #16
 80108ce:	0c0b      	lsrs	r3, r1, #16
 80108d0:	fb02 3306 	mla	r3, r2, r6, r3
 80108d4:	b289      	uxth	r1, r1
 80108d6:	3001      	adds	r0, #1
 80108d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80108dc:	4285      	cmp	r5, r0
 80108de:	f84c 1b04 	str.w	r1, [ip], #4
 80108e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80108e6:	dcec      	bgt.n	80108c2 <__multadd+0x12>
 80108e8:	b30e      	cbz	r6, 801092e <__multadd+0x7e>
 80108ea:	68a3      	ldr	r3, [r4, #8]
 80108ec:	42ab      	cmp	r3, r5
 80108ee:	dc19      	bgt.n	8010924 <__multadd+0x74>
 80108f0:	6861      	ldr	r1, [r4, #4]
 80108f2:	4638      	mov	r0, r7
 80108f4:	3101      	adds	r1, #1
 80108f6:	f7ff ff79 	bl	80107ec <_Balloc>
 80108fa:	4680      	mov	r8, r0
 80108fc:	b928      	cbnz	r0, 801090a <__multadd+0x5a>
 80108fe:	4602      	mov	r2, r0
 8010900:	4b0c      	ldr	r3, [pc, #48]	; (8010934 <__multadd+0x84>)
 8010902:	480d      	ldr	r0, [pc, #52]	; (8010938 <__multadd+0x88>)
 8010904:	21ba      	movs	r1, #186	; 0xba
 8010906:	f000 fe0d 	bl	8011524 <__assert_func>
 801090a:	6922      	ldr	r2, [r4, #16]
 801090c:	3202      	adds	r2, #2
 801090e:	f104 010c 	add.w	r1, r4, #12
 8010912:	0092      	lsls	r2, r2, #2
 8010914:	300c      	adds	r0, #12
 8010916:	f7ff f895 	bl	800fa44 <memcpy>
 801091a:	4621      	mov	r1, r4
 801091c:	4638      	mov	r0, r7
 801091e:	f7ff ffa5 	bl	801086c <_Bfree>
 8010922:	4644      	mov	r4, r8
 8010924:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010928:	3501      	adds	r5, #1
 801092a:	615e      	str	r6, [r3, #20]
 801092c:	6125      	str	r5, [r4, #16]
 801092e:	4620      	mov	r0, r4
 8010930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010934:	080172ec 	.word	0x080172ec
 8010938:	080172fd 	.word	0x080172fd

0801093c <__hi0bits>:
 801093c:	0c03      	lsrs	r3, r0, #16
 801093e:	041b      	lsls	r3, r3, #16
 8010940:	b9d3      	cbnz	r3, 8010978 <__hi0bits+0x3c>
 8010942:	0400      	lsls	r0, r0, #16
 8010944:	2310      	movs	r3, #16
 8010946:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801094a:	bf04      	itt	eq
 801094c:	0200      	lsleq	r0, r0, #8
 801094e:	3308      	addeq	r3, #8
 8010950:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010954:	bf04      	itt	eq
 8010956:	0100      	lsleq	r0, r0, #4
 8010958:	3304      	addeq	r3, #4
 801095a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801095e:	bf04      	itt	eq
 8010960:	0080      	lsleq	r0, r0, #2
 8010962:	3302      	addeq	r3, #2
 8010964:	2800      	cmp	r0, #0
 8010966:	db05      	blt.n	8010974 <__hi0bits+0x38>
 8010968:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801096c:	f103 0301 	add.w	r3, r3, #1
 8010970:	bf08      	it	eq
 8010972:	2320      	moveq	r3, #32
 8010974:	4618      	mov	r0, r3
 8010976:	4770      	bx	lr
 8010978:	2300      	movs	r3, #0
 801097a:	e7e4      	b.n	8010946 <__hi0bits+0xa>

0801097c <__lo0bits>:
 801097c:	6803      	ldr	r3, [r0, #0]
 801097e:	f013 0207 	ands.w	r2, r3, #7
 8010982:	d00c      	beq.n	801099e <__lo0bits+0x22>
 8010984:	07d9      	lsls	r1, r3, #31
 8010986:	d422      	bmi.n	80109ce <__lo0bits+0x52>
 8010988:	079a      	lsls	r2, r3, #30
 801098a:	bf49      	itett	mi
 801098c:	085b      	lsrmi	r3, r3, #1
 801098e:	089b      	lsrpl	r3, r3, #2
 8010990:	6003      	strmi	r3, [r0, #0]
 8010992:	2201      	movmi	r2, #1
 8010994:	bf5c      	itt	pl
 8010996:	6003      	strpl	r3, [r0, #0]
 8010998:	2202      	movpl	r2, #2
 801099a:	4610      	mov	r0, r2
 801099c:	4770      	bx	lr
 801099e:	b299      	uxth	r1, r3
 80109a0:	b909      	cbnz	r1, 80109a6 <__lo0bits+0x2a>
 80109a2:	0c1b      	lsrs	r3, r3, #16
 80109a4:	2210      	movs	r2, #16
 80109a6:	b2d9      	uxtb	r1, r3
 80109a8:	b909      	cbnz	r1, 80109ae <__lo0bits+0x32>
 80109aa:	3208      	adds	r2, #8
 80109ac:	0a1b      	lsrs	r3, r3, #8
 80109ae:	0719      	lsls	r1, r3, #28
 80109b0:	bf04      	itt	eq
 80109b2:	091b      	lsreq	r3, r3, #4
 80109b4:	3204      	addeq	r2, #4
 80109b6:	0799      	lsls	r1, r3, #30
 80109b8:	bf04      	itt	eq
 80109ba:	089b      	lsreq	r3, r3, #2
 80109bc:	3202      	addeq	r2, #2
 80109be:	07d9      	lsls	r1, r3, #31
 80109c0:	d403      	bmi.n	80109ca <__lo0bits+0x4e>
 80109c2:	085b      	lsrs	r3, r3, #1
 80109c4:	f102 0201 	add.w	r2, r2, #1
 80109c8:	d003      	beq.n	80109d2 <__lo0bits+0x56>
 80109ca:	6003      	str	r3, [r0, #0]
 80109cc:	e7e5      	b.n	801099a <__lo0bits+0x1e>
 80109ce:	2200      	movs	r2, #0
 80109d0:	e7e3      	b.n	801099a <__lo0bits+0x1e>
 80109d2:	2220      	movs	r2, #32
 80109d4:	e7e1      	b.n	801099a <__lo0bits+0x1e>
	...

080109d8 <__i2b>:
 80109d8:	b510      	push	{r4, lr}
 80109da:	460c      	mov	r4, r1
 80109dc:	2101      	movs	r1, #1
 80109de:	f7ff ff05 	bl	80107ec <_Balloc>
 80109e2:	4602      	mov	r2, r0
 80109e4:	b928      	cbnz	r0, 80109f2 <__i2b+0x1a>
 80109e6:	4b05      	ldr	r3, [pc, #20]	; (80109fc <__i2b+0x24>)
 80109e8:	4805      	ldr	r0, [pc, #20]	; (8010a00 <__i2b+0x28>)
 80109ea:	f240 1145 	movw	r1, #325	; 0x145
 80109ee:	f000 fd99 	bl	8011524 <__assert_func>
 80109f2:	2301      	movs	r3, #1
 80109f4:	6144      	str	r4, [r0, #20]
 80109f6:	6103      	str	r3, [r0, #16]
 80109f8:	bd10      	pop	{r4, pc}
 80109fa:	bf00      	nop
 80109fc:	080172ec 	.word	0x080172ec
 8010a00:	080172fd 	.word	0x080172fd

08010a04 <__multiply>:
 8010a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a08:	4691      	mov	r9, r2
 8010a0a:	690a      	ldr	r2, [r1, #16]
 8010a0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010a10:	429a      	cmp	r2, r3
 8010a12:	bfb8      	it	lt
 8010a14:	460b      	movlt	r3, r1
 8010a16:	460c      	mov	r4, r1
 8010a18:	bfbc      	itt	lt
 8010a1a:	464c      	movlt	r4, r9
 8010a1c:	4699      	movlt	r9, r3
 8010a1e:	6927      	ldr	r7, [r4, #16]
 8010a20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010a24:	68a3      	ldr	r3, [r4, #8]
 8010a26:	6861      	ldr	r1, [r4, #4]
 8010a28:	eb07 060a 	add.w	r6, r7, sl
 8010a2c:	42b3      	cmp	r3, r6
 8010a2e:	b085      	sub	sp, #20
 8010a30:	bfb8      	it	lt
 8010a32:	3101      	addlt	r1, #1
 8010a34:	f7ff feda 	bl	80107ec <_Balloc>
 8010a38:	b930      	cbnz	r0, 8010a48 <__multiply+0x44>
 8010a3a:	4602      	mov	r2, r0
 8010a3c:	4b44      	ldr	r3, [pc, #272]	; (8010b50 <__multiply+0x14c>)
 8010a3e:	4845      	ldr	r0, [pc, #276]	; (8010b54 <__multiply+0x150>)
 8010a40:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010a44:	f000 fd6e 	bl	8011524 <__assert_func>
 8010a48:	f100 0514 	add.w	r5, r0, #20
 8010a4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010a50:	462b      	mov	r3, r5
 8010a52:	2200      	movs	r2, #0
 8010a54:	4543      	cmp	r3, r8
 8010a56:	d321      	bcc.n	8010a9c <__multiply+0x98>
 8010a58:	f104 0314 	add.w	r3, r4, #20
 8010a5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010a60:	f109 0314 	add.w	r3, r9, #20
 8010a64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010a68:	9202      	str	r2, [sp, #8]
 8010a6a:	1b3a      	subs	r2, r7, r4
 8010a6c:	3a15      	subs	r2, #21
 8010a6e:	f022 0203 	bic.w	r2, r2, #3
 8010a72:	3204      	adds	r2, #4
 8010a74:	f104 0115 	add.w	r1, r4, #21
 8010a78:	428f      	cmp	r7, r1
 8010a7a:	bf38      	it	cc
 8010a7c:	2204      	movcc	r2, #4
 8010a7e:	9201      	str	r2, [sp, #4]
 8010a80:	9a02      	ldr	r2, [sp, #8]
 8010a82:	9303      	str	r3, [sp, #12]
 8010a84:	429a      	cmp	r2, r3
 8010a86:	d80c      	bhi.n	8010aa2 <__multiply+0x9e>
 8010a88:	2e00      	cmp	r6, #0
 8010a8a:	dd03      	ble.n	8010a94 <__multiply+0x90>
 8010a8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d05b      	beq.n	8010b4c <__multiply+0x148>
 8010a94:	6106      	str	r6, [r0, #16]
 8010a96:	b005      	add	sp, #20
 8010a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a9c:	f843 2b04 	str.w	r2, [r3], #4
 8010aa0:	e7d8      	b.n	8010a54 <__multiply+0x50>
 8010aa2:	f8b3 a000 	ldrh.w	sl, [r3]
 8010aa6:	f1ba 0f00 	cmp.w	sl, #0
 8010aaa:	d024      	beq.n	8010af6 <__multiply+0xf2>
 8010aac:	f104 0e14 	add.w	lr, r4, #20
 8010ab0:	46a9      	mov	r9, r5
 8010ab2:	f04f 0c00 	mov.w	ip, #0
 8010ab6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010aba:	f8d9 1000 	ldr.w	r1, [r9]
 8010abe:	fa1f fb82 	uxth.w	fp, r2
 8010ac2:	b289      	uxth	r1, r1
 8010ac4:	fb0a 110b 	mla	r1, sl, fp, r1
 8010ac8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010acc:	f8d9 2000 	ldr.w	r2, [r9]
 8010ad0:	4461      	add	r1, ip
 8010ad2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010ad6:	fb0a c20b 	mla	r2, sl, fp, ip
 8010ada:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010ade:	b289      	uxth	r1, r1
 8010ae0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010ae4:	4577      	cmp	r7, lr
 8010ae6:	f849 1b04 	str.w	r1, [r9], #4
 8010aea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010aee:	d8e2      	bhi.n	8010ab6 <__multiply+0xb2>
 8010af0:	9a01      	ldr	r2, [sp, #4]
 8010af2:	f845 c002 	str.w	ip, [r5, r2]
 8010af6:	9a03      	ldr	r2, [sp, #12]
 8010af8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010afc:	3304      	adds	r3, #4
 8010afe:	f1b9 0f00 	cmp.w	r9, #0
 8010b02:	d021      	beq.n	8010b48 <__multiply+0x144>
 8010b04:	6829      	ldr	r1, [r5, #0]
 8010b06:	f104 0c14 	add.w	ip, r4, #20
 8010b0a:	46ae      	mov	lr, r5
 8010b0c:	f04f 0a00 	mov.w	sl, #0
 8010b10:	f8bc b000 	ldrh.w	fp, [ip]
 8010b14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010b18:	fb09 220b 	mla	r2, r9, fp, r2
 8010b1c:	4452      	add	r2, sl
 8010b1e:	b289      	uxth	r1, r1
 8010b20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010b24:	f84e 1b04 	str.w	r1, [lr], #4
 8010b28:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010b2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010b30:	f8be 1000 	ldrh.w	r1, [lr]
 8010b34:	fb09 110a 	mla	r1, r9, sl, r1
 8010b38:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010b3c:	4567      	cmp	r7, ip
 8010b3e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010b42:	d8e5      	bhi.n	8010b10 <__multiply+0x10c>
 8010b44:	9a01      	ldr	r2, [sp, #4]
 8010b46:	50a9      	str	r1, [r5, r2]
 8010b48:	3504      	adds	r5, #4
 8010b4a:	e799      	b.n	8010a80 <__multiply+0x7c>
 8010b4c:	3e01      	subs	r6, #1
 8010b4e:	e79b      	b.n	8010a88 <__multiply+0x84>
 8010b50:	080172ec 	.word	0x080172ec
 8010b54:	080172fd 	.word	0x080172fd

08010b58 <__pow5mult>:
 8010b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b5c:	4615      	mov	r5, r2
 8010b5e:	f012 0203 	ands.w	r2, r2, #3
 8010b62:	4606      	mov	r6, r0
 8010b64:	460f      	mov	r7, r1
 8010b66:	d007      	beq.n	8010b78 <__pow5mult+0x20>
 8010b68:	4c25      	ldr	r4, [pc, #148]	; (8010c00 <__pow5mult+0xa8>)
 8010b6a:	3a01      	subs	r2, #1
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010b72:	f7ff fe9d 	bl	80108b0 <__multadd>
 8010b76:	4607      	mov	r7, r0
 8010b78:	10ad      	asrs	r5, r5, #2
 8010b7a:	d03d      	beq.n	8010bf8 <__pow5mult+0xa0>
 8010b7c:	69f4      	ldr	r4, [r6, #28]
 8010b7e:	b97c      	cbnz	r4, 8010ba0 <__pow5mult+0x48>
 8010b80:	2010      	movs	r0, #16
 8010b82:	f7fd fe83 	bl	800e88c <malloc>
 8010b86:	4602      	mov	r2, r0
 8010b88:	61f0      	str	r0, [r6, #28]
 8010b8a:	b928      	cbnz	r0, 8010b98 <__pow5mult+0x40>
 8010b8c:	4b1d      	ldr	r3, [pc, #116]	; (8010c04 <__pow5mult+0xac>)
 8010b8e:	481e      	ldr	r0, [pc, #120]	; (8010c08 <__pow5mult+0xb0>)
 8010b90:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010b94:	f000 fcc6 	bl	8011524 <__assert_func>
 8010b98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010b9c:	6004      	str	r4, [r0, #0]
 8010b9e:	60c4      	str	r4, [r0, #12]
 8010ba0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010ba4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010ba8:	b94c      	cbnz	r4, 8010bbe <__pow5mult+0x66>
 8010baa:	f240 2171 	movw	r1, #625	; 0x271
 8010bae:	4630      	mov	r0, r6
 8010bb0:	f7ff ff12 	bl	80109d8 <__i2b>
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8010bba:	4604      	mov	r4, r0
 8010bbc:	6003      	str	r3, [r0, #0]
 8010bbe:	f04f 0900 	mov.w	r9, #0
 8010bc2:	07eb      	lsls	r3, r5, #31
 8010bc4:	d50a      	bpl.n	8010bdc <__pow5mult+0x84>
 8010bc6:	4639      	mov	r1, r7
 8010bc8:	4622      	mov	r2, r4
 8010bca:	4630      	mov	r0, r6
 8010bcc:	f7ff ff1a 	bl	8010a04 <__multiply>
 8010bd0:	4639      	mov	r1, r7
 8010bd2:	4680      	mov	r8, r0
 8010bd4:	4630      	mov	r0, r6
 8010bd6:	f7ff fe49 	bl	801086c <_Bfree>
 8010bda:	4647      	mov	r7, r8
 8010bdc:	106d      	asrs	r5, r5, #1
 8010bde:	d00b      	beq.n	8010bf8 <__pow5mult+0xa0>
 8010be0:	6820      	ldr	r0, [r4, #0]
 8010be2:	b938      	cbnz	r0, 8010bf4 <__pow5mult+0x9c>
 8010be4:	4622      	mov	r2, r4
 8010be6:	4621      	mov	r1, r4
 8010be8:	4630      	mov	r0, r6
 8010bea:	f7ff ff0b 	bl	8010a04 <__multiply>
 8010bee:	6020      	str	r0, [r4, #0]
 8010bf0:	f8c0 9000 	str.w	r9, [r0]
 8010bf4:	4604      	mov	r4, r0
 8010bf6:	e7e4      	b.n	8010bc2 <__pow5mult+0x6a>
 8010bf8:	4638      	mov	r0, r7
 8010bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bfe:	bf00      	nop
 8010c00:	08017448 	.word	0x08017448
 8010c04:	0801727d 	.word	0x0801727d
 8010c08:	080172fd 	.word	0x080172fd

08010c0c <__lshift>:
 8010c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c10:	460c      	mov	r4, r1
 8010c12:	6849      	ldr	r1, [r1, #4]
 8010c14:	6923      	ldr	r3, [r4, #16]
 8010c16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010c1a:	68a3      	ldr	r3, [r4, #8]
 8010c1c:	4607      	mov	r7, r0
 8010c1e:	4691      	mov	r9, r2
 8010c20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010c24:	f108 0601 	add.w	r6, r8, #1
 8010c28:	42b3      	cmp	r3, r6
 8010c2a:	db0b      	blt.n	8010c44 <__lshift+0x38>
 8010c2c:	4638      	mov	r0, r7
 8010c2e:	f7ff fddd 	bl	80107ec <_Balloc>
 8010c32:	4605      	mov	r5, r0
 8010c34:	b948      	cbnz	r0, 8010c4a <__lshift+0x3e>
 8010c36:	4602      	mov	r2, r0
 8010c38:	4b28      	ldr	r3, [pc, #160]	; (8010cdc <__lshift+0xd0>)
 8010c3a:	4829      	ldr	r0, [pc, #164]	; (8010ce0 <__lshift+0xd4>)
 8010c3c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010c40:	f000 fc70 	bl	8011524 <__assert_func>
 8010c44:	3101      	adds	r1, #1
 8010c46:	005b      	lsls	r3, r3, #1
 8010c48:	e7ee      	b.n	8010c28 <__lshift+0x1c>
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	f100 0114 	add.w	r1, r0, #20
 8010c50:	f100 0210 	add.w	r2, r0, #16
 8010c54:	4618      	mov	r0, r3
 8010c56:	4553      	cmp	r3, sl
 8010c58:	db33      	blt.n	8010cc2 <__lshift+0xb6>
 8010c5a:	6920      	ldr	r0, [r4, #16]
 8010c5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010c60:	f104 0314 	add.w	r3, r4, #20
 8010c64:	f019 091f 	ands.w	r9, r9, #31
 8010c68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010c6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010c70:	d02b      	beq.n	8010cca <__lshift+0xbe>
 8010c72:	f1c9 0e20 	rsb	lr, r9, #32
 8010c76:	468a      	mov	sl, r1
 8010c78:	2200      	movs	r2, #0
 8010c7a:	6818      	ldr	r0, [r3, #0]
 8010c7c:	fa00 f009 	lsl.w	r0, r0, r9
 8010c80:	4310      	orrs	r0, r2
 8010c82:	f84a 0b04 	str.w	r0, [sl], #4
 8010c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c8a:	459c      	cmp	ip, r3
 8010c8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010c90:	d8f3      	bhi.n	8010c7a <__lshift+0x6e>
 8010c92:	ebac 0304 	sub.w	r3, ip, r4
 8010c96:	3b15      	subs	r3, #21
 8010c98:	f023 0303 	bic.w	r3, r3, #3
 8010c9c:	3304      	adds	r3, #4
 8010c9e:	f104 0015 	add.w	r0, r4, #21
 8010ca2:	4584      	cmp	ip, r0
 8010ca4:	bf38      	it	cc
 8010ca6:	2304      	movcc	r3, #4
 8010ca8:	50ca      	str	r2, [r1, r3]
 8010caa:	b10a      	cbz	r2, 8010cb0 <__lshift+0xa4>
 8010cac:	f108 0602 	add.w	r6, r8, #2
 8010cb0:	3e01      	subs	r6, #1
 8010cb2:	4638      	mov	r0, r7
 8010cb4:	612e      	str	r6, [r5, #16]
 8010cb6:	4621      	mov	r1, r4
 8010cb8:	f7ff fdd8 	bl	801086c <_Bfree>
 8010cbc:	4628      	mov	r0, r5
 8010cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8010cc6:	3301      	adds	r3, #1
 8010cc8:	e7c5      	b.n	8010c56 <__lshift+0x4a>
 8010cca:	3904      	subs	r1, #4
 8010ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8010cd4:	459c      	cmp	ip, r3
 8010cd6:	d8f9      	bhi.n	8010ccc <__lshift+0xc0>
 8010cd8:	e7ea      	b.n	8010cb0 <__lshift+0xa4>
 8010cda:	bf00      	nop
 8010cdc:	080172ec 	.word	0x080172ec
 8010ce0:	080172fd 	.word	0x080172fd

08010ce4 <__mcmp>:
 8010ce4:	b530      	push	{r4, r5, lr}
 8010ce6:	6902      	ldr	r2, [r0, #16]
 8010ce8:	690c      	ldr	r4, [r1, #16]
 8010cea:	1b12      	subs	r2, r2, r4
 8010cec:	d10e      	bne.n	8010d0c <__mcmp+0x28>
 8010cee:	f100 0314 	add.w	r3, r0, #20
 8010cf2:	3114      	adds	r1, #20
 8010cf4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010cf8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010cfc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010d00:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010d04:	42a5      	cmp	r5, r4
 8010d06:	d003      	beq.n	8010d10 <__mcmp+0x2c>
 8010d08:	d305      	bcc.n	8010d16 <__mcmp+0x32>
 8010d0a:	2201      	movs	r2, #1
 8010d0c:	4610      	mov	r0, r2
 8010d0e:	bd30      	pop	{r4, r5, pc}
 8010d10:	4283      	cmp	r3, r0
 8010d12:	d3f3      	bcc.n	8010cfc <__mcmp+0x18>
 8010d14:	e7fa      	b.n	8010d0c <__mcmp+0x28>
 8010d16:	f04f 32ff 	mov.w	r2, #4294967295
 8010d1a:	e7f7      	b.n	8010d0c <__mcmp+0x28>

08010d1c <__mdiff>:
 8010d1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d20:	460c      	mov	r4, r1
 8010d22:	4606      	mov	r6, r0
 8010d24:	4611      	mov	r1, r2
 8010d26:	4620      	mov	r0, r4
 8010d28:	4690      	mov	r8, r2
 8010d2a:	f7ff ffdb 	bl	8010ce4 <__mcmp>
 8010d2e:	1e05      	subs	r5, r0, #0
 8010d30:	d110      	bne.n	8010d54 <__mdiff+0x38>
 8010d32:	4629      	mov	r1, r5
 8010d34:	4630      	mov	r0, r6
 8010d36:	f7ff fd59 	bl	80107ec <_Balloc>
 8010d3a:	b930      	cbnz	r0, 8010d4a <__mdiff+0x2e>
 8010d3c:	4b3a      	ldr	r3, [pc, #232]	; (8010e28 <__mdiff+0x10c>)
 8010d3e:	4602      	mov	r2, r0
 8010d40:	f240 2137 	movw	r1, #567	; 0x237
 8010d44:	4839      	ldr	r0, [pc, #228]	; (8010e2c <__mdiff+0x110>)
 8010d46:	f000 fbed 	bl	8011524 <__assert_func>
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010d50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d54:	bfa4      	itt	ge
 8010d56:	4643      	movge	r3, r8
 8010d58:	46a0      	movge	r8, r4
 8010d5a:	4630      	mov	r0, r6
 8010d5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010d60:	bfa6      	itte	ge
 8010d62:	461c      	movge	r4, r3
 8010d64:	2500      	movge	r5, #0
 8010d66:	2501      	movlt	r5, #1
 8010d68:	f7ff fd40 	bl	80107ec <_Balloc>
 8010d6c:	b920      	cbnz	r0, 8010d78 <__mdiff+0x5c>
 8010d6e:	4b2e      	ldr	r3, [pc, #184]	; (8010e28 <__mdiff+0x10c>)
 8010d70:	4602      	mov	r2, r0
 8010d72:	f240 2145 	movw	r1, #581	; 0x245
 8010d76:	e7e5      	b.n	8010d44 <__mdiff+0x28>
 8010d78:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010d7c:	6926      	ldr	r6, [r4, #16]
 8010d7e:	60c5      	str	r5, [r0, #12]
 8010d80:	f104 0914 	add.w	r9, r4, #20
 8010d84:	f108 0514 	add.w	r5, r8, #20
 8010d88:	f100 0e14 	add.w	lr, r0, #20
 8010d8c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010d90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010d94:	f108 0210 	add.w	r2, r8, #16
 8010d98:	46f2      	mov	sl, lr
 8010d9a:	2100      	movs	r1, #0
 8010d9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010da0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010da4:	fa11 f88b 	uxtah	r8, r1, fp
 8010da8:	b299      	uxth	r1, r3
 8010daa:	0c1b      	lsrs	r3, r3, #16
 8010dac:	eba8 0801 	sub.w	r8, r8, r1
 8010db0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010db4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010db8:	fa1f f888 	uxth.w	r8, r8
 8010dbc:	1419      	asrs	r1, r3, #16
 8010dbe:	454e      	cmp	r6, r9
 8010dc0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010dc4:	f84a 3b04 	str.w	r3, [sl], #4
 8010dc8:	d8e8      	bhi.n	8010d9c <__mdiff+0x80>
 8010dca:	1b33      	subs	r3, r6, r4
 8010dcc:	3b15      	subs	r3, #21
 8010dce:	f023 0303 	bic.w	r3, r3, #3
 8010dd2:	3304      	adds	r3, #4
 8010dd4:	3415      	adds	r4, #21
 8010dd6:	42a6      	cmp	r6, r4
 8010dd8:	bf38      	it	cc
 8010dda:	2304      	movcc	r3, #4
 8010ddc:	441d      	add	r5, r3
 8010dde:	4473      	add	r3, lr
 8010de0:	469e      	mov	lr, r3
 8010de2:	462e      	mov	r6, r5
 8010de4:	4566      	cmp	r6, ip
 8010de6:	d30e      	bcc.n	8010e06 <__mdiff+0xea>
 8010de8:	f10c 0203 	add.w	r2, ip, #3
 8010dec:	1b52      	subs	r2, r2, r5
 8010dee:	f022 0203 	bic.w	r2, r2, #3
 8010df2:	3d03      	subs	r5, #3
 8010df4:	45ac      	cmp	ip, r5
 8010df6:	bf38      	it	cc
 8010df8:	2200      	movcc	r2, #0
 8010dfa:	4413      	add	r3, r2
 8010dfc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010e00:	b17a      	cbz	r2, 8010e22 <__mdiff+0x106>
 8010e02:	6107      	str	r7, [r0, #16]
 8010e04:	e7a4      	b.n	8010d50 <__mdiff+0x34>
 8010e06:	f856 8b04 	ldr.w	r8, [r6], #4
 8010e0a:	fa11 f288 	uxtah	r2, r1, r8
 8010e0e:	1414      	asrs	r4, r2, #16
 8010e10:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010e14:	b292      	uxth	r2, r2
 8010e16:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010e1a:	f84e 2b04 	str.w	r2, [lr], #4
 8010e1e:	1421      	asrs	r1, r4, #16
 8010e20:	e7e0      	b.n	8010de4 <__mdiff+0xc8>
 8010e22:	3f01      	subs	r7, #1
 8010e24:	e7ea      	b.n	8010dfc <__mdiff+0xe0>
 8010e26:	bf00      	nop
 8010e28:	080172ec 	.word	0x080172ec
 8010e2c:	080172fd 	.word	0x080172fd

08010e30 <__d2b>:
 8010e30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010e34:	460f      	mov	r7, r1
 8010e36:	2101      	movs	r1, #1
 8010e38:	ec59 8b10 	vmov	r8, r9, d0
 8010e3c:	4616      	mov	r6, r2
 8010e3e:	f7ff fcd5 	bl	80107ec <_Balloc>
 8010e42:	4604      	mov	r4, r0
 8010e44:	b930      	cbnz	r0, 8010e54 <__d2b+0x24>
 8010e46:	4602      	mov	r2, r0
 8010e48:	4b24      	ldr	r3, [pc, #144]	; (8010edc <__d2b+0xac>)
 8010e4a:	4825      	ldr	r0, [pc, #148]	; (8010ee0 <__d2b+0xb0>)
 8010e4c:	f240 310f 	movw	r1, #783	; 0x30f
 8010e50:	f000 fb68 	bl	8011524 <__assert_func>
 8010e54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010e58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010e5c:	bb2d      	cbnz	r5, 8010eaa <__d2b+0x7a>
 8010e5e:	9301      	str	r3, [sp, #4]
 8010e60:	f1b8 0300 	subs.w	r3, r8, #0
 8010e64:	d026      	beq.n	8010eb4 <__d2b+0x84>
 8010e66:	4668      	mov	r0, sp
 8010e68:	9300      	str	r3, [sp, #0]
 8010e6a:	f7ff fd87 	bl	801097c <__lo0bits>
 8010e6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010e72:	b1e8      	cbz	r0, 8010eb0 <__d2b+0x80>
 8010e74:	f1c0 0320 	rsb	r3, r0, #32
 8010e78:	fa02 f303 	lsl.w	r3, r2, r3
 8010e7c:	430b      	orrs	r3, r1
 8010e7e:	40c2      	lsrs	r2, r0
 8010e80:	6163      	str	r3, [r4, #20]
 8010e82:	9201      	str	r2, [sp, #4]
 8010e84:	9b01      	ldr	r3, [sp, #4]
 8010e86:	61a3      	str	r3, [r4, #24]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	bf14      	ite	ne
 8010e8c:	2202      	movne	r2, #2
 8010e8e:	2201      	moveq	r2, #1
 8010e90:	6122      	str	r2, [r4, #16]
 8010e92:	b1bd      	cbz	r5, 8010ec4 <__d2b+0x94>
 8010e94:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010e98:	4405      	add	r5, r0
 8010e9a:	603d      	str	r5, [r7, #0]
 8010e9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010ea0:	6030      	str	r0, [r6, #0]
 8010ea2:	4620      	mov	r0, r4
 8010ea4:	b003      	add	sp, #12
 8010ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010eaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010eae:	e7d6      	b.n	8010e5e <__d2b+0x2e>
 8010eb0:	6161      	str	r1, [r4, #20]
 8010eb2:	e7e7      	b.n	8010e84 <__d2b+0x54>
 8010eb4:	a801      	add	r0, sp, #4
 8010eb6:	f7ff fd61 	bl	801097c <__lo0bits>
 8010eba:	9b01      	ldr	r3, [sp, #4]
 8010ebc:	6163      	str	r3, [r4, #20]
 8010ebe:	3020      	adds	r0, #32
 8010ec0:	2201      	movs	r2, #1
 8010ec2:	e7e5      	b.n	8010e90 <__d2b+0x60>
 8010ec4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010ec8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010ecc:	6038      	str	r0, [r7, #0]
 8010ece:	6918      	ldr	r0, [r3, #16]
 8010ed0:	f7ff fd34 	bl	801093c <__hi0bits>
 8010ed4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010ed8:	e7e2      	b.n	8010ea0 <__d2b+0x70>
 8010eda:	bf00      	nop
 8010edc:	080172ec 	.word	0x080172ec
 8010ee0:	080172fd 	.word	0x080172fd

08010ee4 <__ssputs_r>:
 8010ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ee8:	688e      	ldr	r6, [r1, #8]
 8010eea:	461f      	mov	r7, r3
 8010eec:	42be      	cmp	r6, r7
 8010eee:	680b      	ldr	r3, [r1, #0]
 8010ef0:	4682      	mov	sl, r0
 8010ef2:	460c      	mov	r4, r1
 8010ef4:	4690      	mov	r8, r2
 8010ef6:	d82c      	bhi.n	8010f52 <__ssputs_r+0x6e>
 8010ef8:	898a      	ldrh	r2, [r1, #12]
 8010efa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010efe:	d026      	beq.n	8010f4e <__ssputs_r+0x6a>
 8010f00:	6965      	ldr	r5, [r4, #20]
 8010f02:	6909      	ldr	r1, [r1, #16]
 8010f04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010f08:	eba3 0901 	sub.w	r9, r3, r1
 8010f0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010f10:	1c7b      	adds	r3, r7, #1
 8010f12:	444b      	add	r3, r9
 8010f14:	106d      	asrs	r5, r5, #1
 8010f16:	429d      	cmp	r5, r3
 8010f18:	bf38      	it	cc
 8010f1a:	461d      	movcc	r5, r3
 8010f1c:	0553      	lsls	r3, r2, #21
 8010f1e:	d527      	bpl.n	8010f70 <__ssputs_r+0x8c>
 8010f20:	4629      	mov	r1, r5
 8010f22:	f7fd fce3 	bl	800e8ec <_malloc_r>
 8010f26:	4606      	mov	r6, r0
 8010f28:	b360      	cbz	r0, 8010f84 <__ssputs_r+0xa0>
 8010f2a:	6921      	ldr	r1, [r4, #16]
 8010f2c:	464a      	mov	r2, r9
 8010f2e:	f7fe fd89 	bl	800fa44 <memcpy>
 8010f32:	89a3      	ldrh	r3, [r4, #12]
 8010f34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f3c:	81a3      	strh	r3, [r4, #12]
 8010f3e:	6126      	str	r6, [r4, #16]
 8010f40:	6165      	str	r5, [r4, #20]
 8010f42:	444e      	add	r6, r9
 8010f44:	eba5 0509 	sub.w	r5, r5, r9
 8010f48:	6026      	str	r6, [r4, #0]
 8010f4a:	60a5      	str	r5, [r4, #8]
 8010f4c:	463e      	mov	r6, r7
 8010f4e:	42be      	cmp	r6, r7
 8010f50:	d900      	bls.n	8010f54 <__ssputs_r+0x70>
 8010f52:	463e      	mov	r6, r7
 8010f54:	6820      	ldr	r0, [r4, #0]
 8010f56:	4632      	mov	r2, r6
 8010f58:	4641      	mov	r1, r8
 8010f5a:	f7fe fccb 	bl	800f8f4 <memmove>
 8010f5e:	68a3      	ldr	r3, [r4, #8]
 8010f60:	1b9b      	subs	r3, r3, r6
 8010f62:	60a3      	str	r3, [r4, #8]
 8010f64:	6823      	ldr	r3, [r4, #0]
 8010f66:	4433      	add	r3, r6
 8010f68:	6023      	str	r3, [r4, #0]
 8010f6a:	2000      	movs	r0, #0
 8010f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f70:	462a      	mov	r2, r5
 8010f72:	f000 fb07 	bl	8011584 <_realloc_r>
 8010f76:	4606      	mov	r6, r0
 8010f78:	2800      	cmp	r0, #0
 8010f7a:	d1e0      	bne.n	8010f3e <__ssputs_r+0x5a>
 8010f7c:	6921      	ldr	r1, [r4, #16]
 8010f7e:	4650      	mov	r0, sl
 8010f80:	f7ff fbe8 	bl	8010754 <_free_r>
 8010f84:	230c      	movs	r3, #12
 8010f86:	f8ca 3000 	str.w	r3, [sl]
 8010f8a:	89a3      	ldrh	r3, [r4, #12]
 8010f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f90:	81a3      	strh	r3, [r4, #12]
 8010f92:	f04f 30ff 	mov.w	r0, #4294967295
 8010f96:	e7e9      	b.n	8010f6c <__ssputs_r+0x88>

08010f98 <_svfiprintf_r>:
 8010f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f9c:	4698      	mov	r8, r3
 8010f9e:	898b      	ldrh	r3, [r1, #12]
 8010fa0:	061b      	lsls	r3, r3, #24
 8010fa2:	b09d      	sub	sp, #116	; 0x74
 8010fa4:	4607      	mov	r7, r0
 8010fa6:	460d      	mov	r5, r1
 8010fa8:	4614      	mov	r4, r2
 8010faa:	d50e      	bpl.n	8010fca <_svfiprintf_r+0x32>
 8010fac:	690b      	ldr	r3, [r1, #16]
 8010fae:	b963      	cbnz	r3, 8010fca <_svfiprintf_r+0x32>
 8010fb0:	2140      	movs	r1, #64	; 0x40
 8010fb2:	f7fd fc9b 	bl	800e8ec <_malloc_r>
 8010fb6:	6028      	str	r0, [r5, #0]
 8010fb8:	6128      	str	r0, [r5, #16]
 8010fba:	b920      	cbnz	r0, 8010fc6 <_svfiprintf_r+0x2e>
 8010fbc:	230c      	movs	r3, #12
 8010fbe:	603b      	str	r3, [r7, #0]
 8010fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8010fc4:	e0d0      	b.n	8011168 <_svfiprintf_r+0x1d0>
 8010fc6:	2340      	movs	r3, #64	; 0x40
 8010fc8:	616b      	str	r3, [r5, #20]
 8010fca:	2300      	movs	r3, #0
 8010fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8010fce:	2320      	movs	r3, #32
 8010fd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010fd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8010fd8:	2330      	movs	r3, #48	; 0x30
 8010fda:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011180 <_svfiprintf_r+0x1e8>
 8010fde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010fe2:	f04f 0901 	mov.w	r9, #1
 8010fe6:	4623      	mov	r3, r4
 8010fe8:	469a      	mov	sl, r3
 8010fea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010fee:	b10a      	cbz	r2, 8010ff4 <_svfiprintf_r+0x5c>
 8010ff0:	2a25      	cmp	r2, #37	; 0x25
 8010ff2:	d1f9      	bne.n	8010fe8 <_svfiprintf_r+0x50>
 8010ff4:	ebba 0b04 	subs.w	fp, sl, r4
 8010ff8:	d00b      	beq.n	8011012 <_svfiprintf_r+0x7a>
 8010ffa:	465b      	mov	r3, fp
 8010ffc:	4622      	mov	r2, r4
 8010ffe:	4629      	mov	r1, r5
 8011000:	4638      	mov	r0, r7
 8011002:	f7ff ff6f 	bl	8010ee4 <__ssputs_r>
 8011006:	3001      	adds	r0, #1
 8011008:	f000 80a9 	beq.w	801115e <_svfiprintf_r+0x1c6>
 801100c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801100e:	445a      	add	r2, fp
 8011010:	9209      	str	r2, [sp, #36]	; 0x24
 8011012:	f89a 3000 	ldrb.w	r3, [sl]
 8011016:	2b00      	cmp	r3, #0
 8011018:	f000 80a1 	beq.w	801115e <_svfiprintf_r+0x1c6>
 801101c:	2300      	movs	r3, #0
 801101e:	f04f 32ff 	mov.w	r2, #4294967295
 8011022:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011026:	f10a 0a01 	add.w	sl, sl, #1
 801102a:	9304      	str	r3, [sp, #16]
 801102c:	9307      	str	r3, [sp, #28]
 801102e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011032:	931a      	str	r3, [sp, #104]	; 0x68
 8011034:	4654      	mov	r4, sl
 8011036:	2205      	movs	r2, #5
 8011038:	f814 1b01 	ldrb.w	r1, [r4], #1
 801103c:	4850      	ldr	r0, [pc, #320]	; (8011180 <_svfiprintf_r+0x1e8>)
 801103e:	f7ef f93f 	bl	80002c0 <memchr>
 8011042:	9a04      	ldr	r2, [sp, #16]
 8011044:	b9d8      	cbnz	r0, 801107e <_svfiprintf_r+0xe6>
 8011046:	06d0      	lsls	r0, r2, #27
 8011048:	bf44      	itt	mi
 801104a:	2320      	movmi	r3, #32
 801104c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011050:	0711      	lsls	r1, r2, #28
 8011052:	bf44      	itt	mi
 8011054:	232b      	movmi	r3, #43	; 0x2b
 8011056:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801105a:	f89a 3000 	ldrb.w	r3, [sl]
 801105e:	2b2a      	cmp	r3, #42	; 0x2a
 8011060:	d015      	beq.n	801108e <_svfiprintf_r+0xf6>
 8011062:	9a07      	ldr	r2, [sp, #28]
 8011064:	4654      	mov	r4, sl
 8011066:	2000      	movs	r0, #0
 8011068:	f04f 0c0a 	mov.w	ip, #10
 801106c:	4621      	mov	r1, r4
 801106e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011072:	3b30      	subs	r3, #48	; 0x30
 8011074:	2b09      	cmp	r3, #9
 8011076:	d94d      	bls.n	8011114 <_svfiprintf_r+0x17c>
 8011078:	b1b0      	cbz	r0, 80110a8 <_svfiprintf_r+0x110>
 801107a:	9207      	str	r2, [sp, #28]
 801107c:	e014      	b.n	80110a8 <_svfiprintf_r+0x110>
 801107e:	eba0 0308 	sub.w	r3, r0, r8
 8011082:	fa09 f303 	lsl.w	r3, r9, r3
 8011086:	4313      	orrs	r3, r2
 8011088:	9304      	str	r3, [sp, #16]
 801108a:	46a2      	mov	sl, r4
 801108c:	e7d2      	b.n	8011034 <_svfiprintf_r+0x9c>
 801108e:	9b03      	ldr	r3, [sp, #12]
 8011090:	1d19      	adds	r1, r3, #4
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	9103      	str	r1, [sp, #12]
 8011096:	2b00      	cmp	r3, #0
 8011098:	bfbb      	ittet	lt
 801109a:	425b      	neglt	r3, r3
 801109c:	f042 0202 	orrlt.w	r2, r2, #2
 80110a0:	9307      	strge	r3, [sp, #28]
 80110a2:	9307      	strlt	r3, [sp, #28]
 80110a4:	bfb8      	it	lt
 80110a6:	9204      	strlt	r2, [sp, #16]
 80110a8:	7823      	ldrb	r3, [r4, #0]
 80110aa:	2b2e      	cmp	r3, #46	; 0x2e
 80110ac:	d10c      	bne.n	80110c8 <_svfiprintf_r+0x130>
 80110ae:	7863      	ldrb	r3, [r4, #1]
 80110b0:	2b2a      	cmp	r3, #42	; 0x2a
 80110b2:	d134      	bne.n	801111e <_svfiprintf_r+0x186>
 80110b4:	9b03      	ldr	r3, [sp, #12]
 80110b6:	1d1a      	adds	r2, r3, #4
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	9203      	str	r2, [sp, #12]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	bfb8      	it	lt
 80110c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80110c4:	3402      	adds	r4, #2
 80110c6:	9305      	str	r3, [sp, #20]
 80110c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011190 <_svfiprintf_r+0x1f8>
 80110cc:	7821      	ldrb	r1, [r4, #0]
 80110ce:	2203      	movs	r2, #3
 80110d0:	4650      	mov	r0, sl
 80110d2:	f7ef f8f5 	bl	80002c0 <memchr>
 80110d6:	b138      	cbz	r0, 80110e8 <_svfiprintf_r+0x150>
 80110d8:	9b04      	ldr	r3, [sp, #16]
 80110da:	eba0 000a 	sub.w	r0, r0, sl
 80110de:	2240      	movs	r2, #64	; 0x40
 80110e0:	4082      	lsls	r2, r0
 80110e2:	4313      	orrs	r3, r2
 80110e4:	3401      	adds	r4, #1
 80110e6:	9304      	str	r3, [sp, #16]
 80110e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110ec:	4825      	ldr	r0, [pc, #148]	; (8011184 <_svfiprintf_r+0x1ec>)
 80110ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80110f2:	2206      	movs	r2, #6
 80110f4:	f7ef f8e4 	bl	80002c0 <memchr>
 80110f8:	2800      	cmp	r0, #0
 80110fa:	d038      	beq.n	801116e <_svfiprintf_r+0x1d6>
 80110fc:	4b22      	ldr	r3, [pc, #136]	; (8011188 <_svfiprintf_r+0x1f0>)
 80110fe:	bb1b      	cbnz	r3, 8011148 <_svfiprintf_r+0x1b0>
 8011100:	9b03      	ldr	r3, [sp, #12]
 8011102:	3307      	adds	r3, #7
 8011104:	f023 0307 	bic.w	r3, r3, #7
 8011108:	3308      	adds	r3, #8
 801110a:	9303      	str	r3, [sp, #12]
 801110c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801110e:	4433      	add	r3, r6
 8011110:	9309      	str	r3, [sp, #36]	; 0x24
 8011112:	e768      	b.n	8010fe6 <_svfiprintf_r+0x4e>
 8011114:	fb0c 3202 	mla	r2, ip, r2, r3
 8011118:	460c      	mov	r4, r1
 801111a:	2001      	movs	r0, #1
 801111c:	e7a6      	b.n	801106c <_svfiprintf_r+0xd4>
 801111e:	2300      	movs	r3, #0
 8011120:	3401      	adds	r4, #1
 8011122:	9305      	str	r3, [sp, #20]
 8011124:	4619      	mov	r1, r3
 8011126:	f04f 0c0a 	mov.w	ip, #10
 801112a:	4620      	mov	r0, r4
 801112c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011130:	3a30      	subs	r2, #48	; 0x30
 8011132:	2a09      	cmp	r2, #9
 8011134:	d903      	bls.n	801113e <_svfiprintf_r+0x1a6>
 8011136:	2b00      	cmp	r3, #0
 8011138:	d0c6      	beq.n	80110c8 <_svfiprintf_r+0x130>
 801113a:	9105      	str	r1, [sp, #20]
 801113c:	e7c4      	b.n	80110c8 <_svfiprintf_r+0x130>
 801113e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011142:	4604      	mov	r4, r0
 8011144:	2301      	movs	r3, #1
 8011146:	e7f0      	b.n	801112a <_svfiprintf_r+0x192>
 8011148:	ab03      	add	r3, sp, #12
 801114a:	9300      	str	r3, [sp, #0]
 801114c:	462a      	mov	r2, r5
 801114e:	4b0f      	ldr	r3, [pc, #60]	; (801118c <_svfiprintf_r+0x1f4>)
 8011150:	a904      	add	r1, sp, #16
 8011152:	4638      	mov	r0, r7
 8011154:	f7fd fcf6 	bl	800eb44 <_printf_float>
 8011158:	1c42      	adds	r2, r0, #1
 801115a:	4606      	mov	r6, r0
 801115c:	d1d6      	bne.n	801110c <_svfiprintf_r+0x174>
 801115e:	89ab      	ldrh	r3, [r5, #12]
 8011160:	065b      	lsls	r3, r3, #25
 8011162:	f53f af2d 	bmi.w	8010fc0 <_svfiprintf_r+0x28>
 8011166:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011168:	b01d      	add	sp, #116	; 0x74
 801116a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801116e:	ab03      	add	r3, sp, #12
 8011170:	9300      	str	r3, [sp, #0]
 8011172:	462a      	mov	r2, r5
 8011174:	4b05      	ldr	r3, [pc, #20]	; (801118c <_svfiprintf_r+0x1f4>)
 8011176:	a904      	add	r1, sp, #16
 8011178:	4638      	mov	r0, r7
 801117a:	f7fd ff87 	bl	800f08c <_printf_i>
 801117e:	e7eb      	b.n	8011158 <_svfiprintf_r+0x1c0>
 8011180:	08017454 	.word	0x08017454
 8011184:	0801745e 	.word	0x0801745e
 8011188:	0800eb45 	.word	0x0800eb45
 801118c:	08010ee5 	.word	0x08010ee5
 8011190:	0801745a 	.word	0x0801745a

08011194 <__sfputc_r>:
 8011194:	6893      	ldr	r3, [r2, #8]
 8011196:	3b01      	subs	r3, #1
 8011198:	2b00      	cmp	r3, #0
 801119a:	b410      	push	{r4}
 801119c:	6093      	str	r3, [r2, #8]
 801119e:	da08      	bge.n	80111b2 <__sfputc_r+0x1e>
 80111a0:	6994      	ldr	r4, [r2, #24]
 80111a2:	42a3      	cmp	r3, r4
 80111a4:	db01      	blt.n	80111aa <__sfputc_r+0x16>
 80111a6:	290a      	cmp	r1, #10
 80111a8:	d103      	bne.n	80111b2 <__sfputc_r+0x1e>
 80111aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111ae:	f7fe bb0b 	b.w	800f7c8 <__swbuf_r>
 80111b2:	6813      	ldr	r3, [r2, #0]
 80111b4:	1c58      	adds	r0, r3, #1
 80111b6:	6010      	str	r0, [r2, #0]
 80111b8:	7019      	strb	r1, [r3, #0]
 80111ba:	4608      	mov	r0, r1
 80111bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111c0:	4770      	bx	lr

080111c2 <__sfputs_r>:
 80111c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111c4:	4606      	mov	r6, r0
 80111c6:	460f      	mov	r7, r1
 80111c8:	4614      	mov	r4, r2
 80111ca:	18d5      	adds	r5, r2, r3
 80111cc:	42ac      	cmp	r4, r5
 80111ce:	d101      	bne.n	80111d4 <__sfputs_r+0x12>
 80111d0:	2000      	movs	r0, #0
 80111d2:	e007      	b.n	80111e4 <__sfputs_r+0x22>
 80111d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111d8:	463a      	mov	r2, r7
 80111da:	4630      	mov	r0, r6
 80111dc:	f7ff ffda 	bl	8011194 <__sfputc_r>
 80111e0:	1c43      	adds	r3, r0, #1
 80111e2:	d1f3      	bne.n	80111cc <__sfputs_r+0xa>
 80111e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080111e8 <_vfiprintf_r>:
 80111e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111ec:	460d      	mov	r5, r1
 80111ee:	b09d      	sub	sp, #116	; 0x74
 80111f0:	4614      	mov	r4, r2
 80111f2:	4698      	mov	r8, r3
 80111f4:	4606      	mov	r6, r0
 80111f6:	b118      	cbz	r0, 8011200 <_vfiprintf_r+0x18>
 80111f8:	6a03      	ldr	r3, [r0, #32]
 80111fa:	b90b      	cbnz	r3, 8011200 <_vfiprintf_r+0x18>
 80111fc:	f7fe f9a4 	bl	800f548 <__sinit>
 8011200:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011202:	07d9      	lsls	r1, r3, #31
 8011204:	d405      	bmi.n	8011212 <_vfiprintf_r+0x2a>
 8011206:	89ab      	ldrh	r3, [r5, #12]
 8011208:	059a      	lsls	r2, r3, #22
 801120a:	d402      	bmi.n	8011212 <_vfiprintf_r+0x2a>
 801120c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801120e:	f7fe fc17 	bl	800fa40 <__retarget_lock_acquire_recursive>
 8011212:	89ab      	ldrh	r3, [r5, #12]
 8011214:	071b      	lsls	r3, r3, #28
 8011216:	d501      	bpl.n	801121c <_vfiprintf_r+0x34>
 8011218:	692b      	ldr	r3, [r5, #16]
 801121a:	b99b      	cbnz	r3, 8011244 <_vfiprintf_r+0x5c>
 801121c:	4629      	mov	r1, r5
 801121e:	4630      	mov	r0, r6
 8011220:	f7fe fb10 	bl	800f844 <__swsetup_r>
 8011224:	b170      	cbz	r0, 8011244 <_vfiprintf_r+0x5c>
 8011226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011228:	07dc      	lsls	r4, r3, #31
 801122a:	d504      	bpl.n	8011236 <_vfiprintf_r+0x4e>
 801122c:	f04f 30ff 	mov.w	r0, #4294967295
 8011230:	b01d      	add	sp, #116	; 0x74
 8011232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011236:	89ab      	ldrh	r3, [r5, #12]
 8011238:	0598      	lsls	r0, r3, #22
 801123a:	d4f7      	bmi.n	801122c <_vfiprintf_r+0x44>
 801123c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801123e:	f7fe fc00 	bl	800fa42 <__retarget_lock_release_recursive>
 8011242:	e7f3      	b.n	801122c <_vfiprintf_r+0x44>
 8011244:	2300      	movs	r3, #0
 8011246:	9309      	str	r3, [sp, #36]	; 0x24
 8011248:	2320      	movs	r3, #32
 801124a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801124e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011252:	2330      	movs	r3, #48	; 0x30
 8011254:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011408 <_vfiprintf_r+0x220>
 8011258:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801125c:	f04f 0901 	mov.w	r9, #1
 8011260:	4623      	mov	r3, r4
 8011262:	469a      	mov	sl, r3
 8011264:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011268:	b10a      	cbz	r2, 801126e <_vfiprintf_r+0x86>
 801126a:	2a25      	cmp	r2, #37	; 0x25
 801126c:	d1f9      	bne.n	8011262 <_vfiprintf_r+0x7a>
 801126e:	ebba 0b04 	subs.w	fp, sl, r4
 8011272:	d00b      	beq.n	801128c <_vfiprintf_r+0xa4>
 8011274:	465b      	mov	r3, fp
 8011276:	4622      	mov	r2, r4
 8011278:	4629      	mov	r1, r5
 801127a:	4630      	mov	r0, r6
 801127c:	f7ff ffa1 	bl	80111c2 <__sfputs_r>
 8011280:	3001      	adds	r0, #1
 8011282:	f000 80a9 	beq.w	80113d8 <_vfiprintf_r+0x1f0>
 8011286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011288:	445a      	add	r2, fp
 801128a:	9209      	str	r2, [sp, #36]	; 0x24
 801128c:	f89a 3000 	ldrb.w	r3, [sl]
 8011290:	2b00      	cmp	r3, #0
 8011292:	f000 80a1 	beq.w	80113d8 <_vfiprintf_r+0x1f0>
 8011296:	2300      	movs	r3, #0
 8011298:	f04f 32ff 	mov.w	r2, #4294967295
 801129c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80112a0:	f10a 0a01 	add.w	sl, sl, #1
 80112a4:	9304      	str	r3, [sp, #16]
 80112a6:	9307      	str	r3, [sp, #28]
 80112a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80112ac:	931a      	str	r3, [sp, #104]	; 0x68
 80112ae:	4654      	mov	r4, sl
 80112b0:	2205      	movs	r2, #5
 80112b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112b6:	4854      	ldr	r0, [pc, #336]	; (8011408 <_vfiprintf_r+0x220>)
 80112b8:	f7ef f802 	bl	80002c0 <memchr>
 80112bc:	9a04      	ldr	r2, [sp, #16]
 80112be:	b9d8      	cbnz	r0, 80112f8 <_vfiprintf_r+0x110>
 80112c0:	06d1      	lsls	r1, r2, #27
 80112c2:	bf44      	itt	mi
 80112c4:	2320      	movmi	r3, #32
 80112c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112ca:	0713      	lsls	r3, r2, #28
 80112cc:	bf44      	itt	mi
 80112ce:	232b      	movmi	r3, #43	; 0x2b
 80112d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112d4:	f89a 3000 	ldrb.w	r3, [sl]
 80112d8:	2b2a      	cmp	r3, #42	; 0x2a
 80112da:	d015      	beq.n	8011308 <_vfiprintf_r+0x120>
 80112dc:	9a07      	ldr	r2, [sp, #28]
 80112de:	4654      	mov	r4, sl
 80112e0:	2000      	movs	r0, #0
 80112e2:	f04f 0c0a 	mov.w	ip, #10
 80112e6:	4621      	mov	r1, r4
 80112e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80112ec:	3b30      	subs	r3, #48	; 0x30
 80112ee:	2b09      	cmp	r3, #9
 80112f0:	d94d      	bls.n	801138e <_vfiprintf_r+0x1a6>
 80112f2:	b1b0      	cbz	r0, 8011322 <_vfiprintf_r+0x13a>
 80112f4:	9207      	str	r2, [sp, #28]
 80112f6:	e014      	b.n	8011322 <_vfiprintf_r+0x13a>
 80112f8:	eba0 0308 	sub.w	r3, r0, r8
 80112fc:	fa09 f303 	lsl.w	r3, r9, r3
 8011300:	4313      	orrs	r3, r2
 8011302:	9304      	str	r3, [sp, #16]
 8011304:	46a2      	mov	sl, r4
 8011306:	e7d2      	b.n	80112ae <_vfiprintf_r+0xc6>
 8011308:	9b03      	ldr	r3, [sp, #12]
 801130a:	1d19      	adds	r1, r3, #4
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	9103      	str	r1, [sp, #12]
 8011310:	2b00      	cmp	r3, #0
 8011312:	bfbb      	ittet	lt
 8011314:	425b      	neglt	r3, r3
 8011316:	f042 0202 	orrlt.w	r2, r2, #2
 801131a:	9307      	strge	r3, [sp, #28]
 801131c:	9307      	strlt	r3, [sp, #28]
 801131e:	bfb8      	it	lt
 8011320:	9204      	strlt	r2, [sp, #16]
 8011322:	7823      	ldrb	r3, [r4, #0]
 8011324:	2b2e      	cmp	r3, #46	; 0x2e
 8011326:	d10c      	bne.n	8011342 <_vfiprintf_r+0x15a>
 8011328:	7863      	ldrb	r3, [r4, #1]
 801132a:	2b2a      	cmp	r3, #42	; 0x2a
 801132c:	d134      	bne.n	8011398 <_vfiprintf_r+0x1b0>
 801132e:	9b03      	ldr	r3, [sp, #12]
 8011330:	1d1a      	adds	r2, r3, #4
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	9203      	str	r2, [sp, #12]
 8011336:	2b00      	cmp	r3, #0
 8011338:	bfb8      	it	lt
 801133a:	f04f 33ff 	movlt.w	r3, #4294967295
 801133e:	3402      	adds	r4, #2
 8011340:	9305      	str	r3, [sp, #20]
 8011342:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011418 <_vfiprintf_r+0x230>
 8011346:	7821      	ldrb	r1, [r4, #0]
 8011348:	2203      	movs	r2, #3
 801134a:	4650      	mov	r0, sl
 801134c:	f7ee ffb8 	bl	80002c0 <memchr>
 8011350:	b138      	cbz	r0, 8011362 <_vfiprintf_r+0x17a>
 8011352:	9b04      	ldr	r3, [sp, #16]
 8011354:	eba0 000a 	sub.w	r0, r0, sl
 8011358:	2240      	movs	r2, #64	; 0x40
 801135a:	4082      	lsls	r2, r0
 801135c:	4313      	orrs	r3, r2
 801135e:	3401      	adds	r4, #1
 8011360:	9304      	str	r3, [sp, #16]
 8011362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011366:	4829      	ldr	r0, [pc, #164]	; (801140c <_vfiprintf_r+0x224>)
 8011368:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801136c:	2206      	movs	r2, #6
 801136e:	f7ee ffa7 	bl	80002c0 <memchr>
 8011372:	2800      	cmp	r0, #0
 8011374:	d03f      	beq.n	80113f6 <_vfiprintf_r+0x20e>
 8011376:	4b26      	ldr	r3, [pc, #152]	; (8011410 <_vfiprintf_r+0x228>)
 8011378:	bb1b      	cbnz	r3, 80113c2 <_vfiprintf_r+0x1da>
 801137a:	9b03      	ldr	r3, [sp, #12]
 801137c:	3307      	adds	r3, #7
 801137e:	f023 0307 	bic.w	r3, r3, #7
 8011382:	3308      	adds	r3, #8
 8011384:	9303      	str	r3, [sp, #12]
 8011386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011388:	443b      	add	r3, r7
 801138a:	9309      	str	r3, [sp, #36]	; 0x24
 801138c:	e768      	b.n	8011260 <_vfiprintf_r+0x78>
 801138e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011392:	460c      	mov	r4, r1
 8011394:	2001      	movs	r0, #1
 8011396:	e7a6      	b.n	80112e6 <_vfiprintf_r+0xfe>
 8011398:	2300      	movs	r3, #0
 801139a:	3401      	adds	r4, #1
 801139c:	9305      	str	r3, [sp, #20]
 801139e:	4619      	mov	r1, r3
 80113a0:	f04f 0c0a 	mov.w	ip, #10
 80113a4:	4620      	mov	r0, r4
 80113a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80113aa:	3a30      	subs	r2, #48	; 0x30
 80113ac:	2a09      	cmp	r2, #9
 80113ae:	d903      	bls.n	80113b8 <_vfiprintf_r+0x1d0>
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d0c6      	beq.n	8011342 <_vfiprintf_r+0x15a>
 80113b4:	9105      	str	r1, [sp, #20]
 80113b6:	e7c4      	b.n	8011342 <_vfiprintf_r+0x15a>
 80113b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80113bc:	4604      	mov	r4, r0
 80113be:	2301      	movs	r3, #1
 80113c0:	e7f0      	b.n	80113a4 <_vfiprintf_r+0x1bc>
 80113c2:	ab03      	add	r3, sp, #12
 80113c4:	9300      	str	r3, [sp, #0]
 80113c6:	462a      	mov	r2, r5
 80113c8:	4b12      	ldr	r3, [pc, #72]	; (8011414 <_vfiprintf_r+0x22c>)
 80113ca:	a904      	add	r1, sp, #16
 80113cc:	4630      	mov	r0, r6
 80113ce:	f7fd fbb9 	bl	800eb44 <_printf_float>
 80113d2:	4607      	mov	r7, r0
 80113d4:	1c78      	adds	r0, r7, #1
 80113d6:	d1d6      	bne.n	8011386 <_vfiprintf_r+0x19e>
 80113d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80113da:	07d9      	lsls	r1, r3, #31
 80113dc:	d405      	bmi.n	80113ea <_vfiprintf_r+0x202>
 80113de:	89ab      	ldrh	r3, [r5, #12]
 80113e0:	059a      	lsls	r2, r3, #22
 80113e2:	d402      	bmi.n	80113ea <_vfiprintf_r+0x202>
 80113e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80113e6:	f7fe fb2c 	bl	800fa42 <__retarget_lock_release_recursive>
 80113ea:	89ab      	ldrh	r3, [r5, #12]
 80113ec:	065b      	lsls	r3, r3, #25
 80113ee:	f53f af1d 	bmi.w	801122c <_vfiprintf_r+0x44>
 80113f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80113f4:	e71c      	b.n	8011230 <_vfiprintf_r+0x48>
 80113f6:	ab03      	add	r3, sp, #12
 80113f8:	9300      	str	r3, [sp, #0]
 80113fa:	462a      	mov	r2, r5
 80113fc:	4b05      	ldr	r3, [pc, #20]	; (8011414 <_vfiprintf_r+0x22c>)
 80113fe:	a904      	add	r1, sp, #16
 8011400:	4630      	mov	r0, r6
 8011402:	f7fd fe43 	bl	800f08c <_printf_i>
 8011406:	e7e4      	b.n	80113d2 <_vfiprintf_r+0x1ea>
 8011408:	08017454 	.word	0x08017454
 801140c:	0801745e 	.word	0x0801745e
 8011410:	0800eb45 	.word	0x0800eb45
 8011414:	080111c3 	.word	0x080111c3
 8011418:	0801745a 	.word	0x0801745a

0801141c <__swhatbuf_r>:
 801141c:	b570      	push	{r4, r5, r6, lr}
 801141e:	460c      	mov	r4, r1
 8011420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011424:	2900      	cmp	r1, #0
 8011426:	b096      	sub	sp, #88	; 0x58
 8011428:	4615      	mov	r5, r2
 801142a:	461e      	mov	r6, r3
 801142c:	da0d      	bge.n	801144a <__swhatbuf_r+0x2e>
 801142e:	89a3      	ldrh	r3, [r4, #12]
 8011430:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011434:	f04f 0100 	mov.w	r1, #0
 8011438:	bf0c      	ite	eq
 801143a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801143e:	2340      	movne	r3, #64	; 0x40
 8011440:	2000      	movs	r0, #0
 8011442:	6031      	str	r1, [r6, #0]
 8011444:	602b      	str	r3, [r5, #0]
 8011446:	b016      	add	sp, #88	; 0x58
 8011448:	bd70      	pop	{r4, r5, r6, pc}
 801144a:	466a      	mov	r2, sp
 801144c:	f000 f848 	bl	80114e0 <_fstat_r>
 8011450:	2800      	cmp	r0, #0
 8011452:	dbec      	blt.n	801142e <__swhatbuf_r+0x12>
 8011454:	9901      	ldr	r1, [sp, #4]
 8011456:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801145a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801145e:	4259      	negs	r1, r3
 8011460:	4159      	adcs	r1, r3
 8011462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011466:	e7eb      	b.n	8011440 <__swhatbuf_r+0x24>

08011468 <__smakebuf_r>:
 8011468:	898b      	ldrh	r3, [r1, #12]
 801146a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801146c:	079d      	lsls	r5, r3, #30
 801146e:	4606      	mov	r6, r0
 8011470:	460c      	mov	r4, r1
 8011472:	d507      	bpl.n	8011484 <__smakebuf_r+0x1c>
 8011474:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011478:	6023      	str	r3, [r4, #0]
 801147a:	6123      	str	r3, [r4, #16]
 801147c:	2301      	movs	r3, #1
 801147e:	6163      	str	r3, [r4, #20]
 8011480:	b002      	add	sp, #8
 8011482:	bd70      	pop	{r4, r5, r6, pc}
 8011484:	ab01      	add	r3, sp, #4
 8011486:	466a      	mov	r2, sp
 8011488:	f7ff ffc8 	bl	801141c <__swhatbuf_r>
 801148c:	9900      	ldr	r1, [sp, #0]
 801148e:	4605      	mov	r5, r0
 8011490:	4630      	mov	r0, r6
 8011492:	f7fd fa2b 	bl	800e8ec <_malloc_r>
 8011496:	b948      	cbnz	r0, 80114ac <__smakebuf_r+0x44>
 8011498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801149c:	059a      	lsls	r2, r3, #22
 801149e:	d4ef      	bmi.n	8011480 <__smakebuf_r+0x18>
 80114a0:	f023 0303 	bic.w	r3, r3, #3
 80114a4:	f043 0302 	orr.w	r3, r3, #2
 80114a8:	81a3      	strh	r3, [r4, #12]
 80114aa:	e7e3      	b.n	8011474 <__smakebuf_r+0xc>
 80114ac:	89a3      	ldrh	r3, [r4, #12]
 80114ae:	6020      	str	r0, [r4, #0]
 80114b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114b4:	81a3      	strh	r3, [r4, #12]
 80114b6:	9b00      	ldr	r3, [sp, #0]
 80114b8:	6163      	str	r3, [r4, #20]
 80114ba:	9b01      	ldr	r3, [sp, #4]
 80114bc:	6120      	str	r0, [r4, #16]
 80114be:	b15b      	cbz	r3, 80114d8 <__smakebuf_r+0x70>
 80114c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80114c4:	4630      	mov	r0, r6
 80114c6:	f000 f81d 	bl	8011504 <_isatty_r>
 80114ca:	b128      	cbz	r0, 80114d8 <__smakebuf_r+0x70>
 80114cc:	89a3      	ldrh	r3, [r4, #12]
 80114ce:	f023 0303 	bic.w	r3, r3, #3
 80114d2:	f043 0301 	orr.w	r3, r3, #1
 80114d6:	81a3      	strh	r3, [r4, #12]
 80114d8:	89a3      	ldrh	r3, [r4, #12]
 80114da:	431d      	orrs	r5, r3
 80114dc:	81a5      	strh	r5, [r4, #12]
 80114de:	e7cf      	b.n	8011480 <__smakebuf_r+0x18>

080114e0 <_fstat_r>:
 80114e0:	b538      	push	{r3, r4, r5, lr}
 80114e2:	4d07      	ldr	r5, [pc, #28]	; (8011500 <_fstat_r+0x20>)
 80114e4:	2300      	movs	r3, #0
 80114e6:	4604      	mov	r4, r0
 80114e8:	4608      	mov	r0, r1
 80114ea:	4611      	mov	r1, r2
 80114ec:	602b      	str	r3, [r5, #0]
 80114ee:	f7f4 fdfd 	bl	80060ec <_fstat>
 80114f2:	1c43      	adds	r3, r0, #1
 80114f4:	d102      	bne.n	80114fc <_fstat_r+0x1c>
 80114f6:	682b      	ldr	r3, [r5, #0]
 80114f8:	b103      	cbz	r3, 80114fc <_fstat_r+0x1c>
 80114fa:	6023      	str	r3, [r4, #0]
 80114fc:	bd38      	pop	{r3, r4, r5, pc}
 80114fe:	bf00      	nop
 8011500:	20000824 	.word	0x20000824

08011504 <_isatty_r>:
 8011504:	b538      	push	{r3, r4, r5, lr}
 8011506:	4d06      	ldr	r5, [pc, #24]	; (8011520 <_isatty_r+0x1c>)
 8011508:	2300      	movs	r3, #0
 801150a:	4604      	mov	r4, r0
 801150c:	4608      	mov	r0, r1
 801150e:	602b      	str	r3, [r5, #0]
 8011510:	f7f4 fe10 	bl	8006134 <_isatty>
 8011514:	1c43      	adds	r3, r0, #1
 8011516:	d102      	bne.n	801151e <_isatty_r+0x1a>
 8011518:	682b      	ldr	r3, [r5, #0]
 801151a:	b103      	cbz	r3, 801151e <_isatty_r+0x1a>
 801151c:	6023      	str	r3, [r4, #0]
 801151e:	bd38      	pop	{r3, r4, r5, pc}
 8011520:	20000824 	.word	0x20000824

08011524 <__assert_func>:
 8011524:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011526:	4614      	mov	r4, r2
 8011528:	461a      	mov	r2, r3
 801152a:	4b09      	ldr	r3, [pc, #36]	; (8011550 <__assert_func+0x2c>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	4605      	mov	r5, r0
 8011530:	68d8      	ldr	r0, [r3, #12]
 8011532:	b14c      	cbz	r4, 8011548 <__assert_func+0x24>
 8011534:	4b07      	ldr	r3, [pc, #28]	; (8011554 <__assert_func+0x30>)
 8011536:	9100      	str	r1, [sp, #0]
 8011538:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801153c:	4906      	ldr	r1, [pc, #24]	; (8011558 <__assert_func+0x34>)
 801153e:	462b      	mov	r3, r5
 8011540:	f000 f85c 	bl	80115fc <fiprintf>
 8011544:	f000 f86c 	bl	8011620 <abort>
 8011548:	4b04      	ldr	r3, [pc, #16]	; (801155c <__assert_func+0x38>)
 801154a:	461c      	mov	r4, r3
 801154c:	e7f3      	b.n	8011536 <__assert_func+0x12>
 801154e:	bf00      	nop
 8011550:	200001fc 	.word	0x200001fc
 8011554:	0801746f 	.word	0x0801746f
 8011558:	0801747c 	.word	0x0801747c
 801155c:	080174aa 	.word	0x080174aa

08011560 <__ascii_mbtowc>:
 8011560:	b082      	sub	sp, #8
 8011562:	b901      	cbnz	r1, 8011566 <__ascii_mbtowc+0x6>
 8011564:	a901      	add	r1, sp, #4
 8011566:	b142      	cbz	r2, 801157a <__ascii_mbtowc+0x1a>
 8011568:	b14b      	cbz	r3, 801157e <__ascii_mbtowc+0x1e>
 801156a:	7813      	ldrb	r3, [r2, #0]
 801156c:	600b      	str	r3, [r1, #0]
 801156e:	7812      	ldrb	r2, [r2, #0]
 8011570:	1e10      	subs	r0, r2, #0
 8011572:	bf18      	it	ne
 8011574:	2001      	movne	r0, #1
 8011576:	b002      	add	sp, #8
 8011578:	4770      	bx	lr
 801157a:	4610      	mov	r0, r2
 801157c:	e7fb      	b.n	8011576 <__ascii_mbtowc+0x16>
 801157e:	f06f 0001 	mvn.w	r0, #1
 8011582:	e7f8      	b.n	8011576 <__ascii_mbtowc+0x16>

08011584 <_realloc_r>:
 8011584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011588:	4680      	mov	r8, r0
 801158a:	4614      	mov	r4, r2
 801158c:	460e      	mov	r6, r1
 801158e:	b921      	cbnz	r1, 801159a <_realloc_r+0x16>
 8011590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011594:	4611      	mov	r1, r2
 8011596:	f7fd b9a9 	b.w	800e8ec <_malloc_r>
 801159a:	b92a      	cbnz	r2, 80115a8 <_realloc_r+0x24>
 801159c:	f7ff f8da 	bl	8010754 <_free_r>
 80115a0:	4625      	mov	r5, r4
 80115a2:	4628      	mov	r0, r5
 80115a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115a8:	f000 f841 	bl	801162e <_malloc_usable_size_r>
 80115ac:	4284      	cmp	r4, r0
 80115ae:	4607      	mov	r7, r0
 80115b0:	d802      	bhi.n	80115b8 <_realloc_r+0x34>
 80115b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80115b6:	d812      	bhi.n	80115de <_realloc_r+0x5a>
 80115b8:	4621      	mov	r1, r4
 80115ba:	4640      	mov	r0, r8
 80115bc:	f7fd f996 	bl	800e8ec <_malloc_r>
 80115c0:	4605      	mov	r5, r0
 80115c2:	2800      	cmp	r0, #0
 80115c4:	d0ed      	beq.n	80115a2 <_realloc_r+0x1e>
 80115c6:	42bc      	cmp	r4, r7
 80115c8:	4622      	mov	r2, r4
 80115ca:	4631      	mov	r1, r6
 80115cc:	bf28      	it	cs
 80115ce:	463a      	movcs	r2, r7
 80115d0:	f7fe fa38 	bl	800fa44 <memcpy>
 80115d4:	4631      	mov	r1, r6
 80115d6:	4640      	mov	r0, r8
 80115d8:	f7ff f8bc 	bl	8010754 <_free_r>
 80115dc:	e7e1      	b.n	80115a2 <_realloc_r+0x1e>
 80115de:	4635      	mov	r5, r6
 80115e0:	e7df      	b.n	80115a2 <_realloc_r+0x1e>

080115e2 <__ascii_wctomb>:
 80115e2:	b149      	cbz	r1, 80115f8 <__ascii_wctomb+0x16>
 80115e4:	2aff      	cmp	r2, #255	; 0xff
 80115e6:	bf85      	ittet	hi
 80115e8:	238a      	movhi	r3, #138	; 0x8a
 80115ea:	6003      	strhi	r3, [r0, #0]
 80115ec:	700a      	strbls	r2, [r1, #0]
 80115ee:	f04f 30ff 	movhi.w	r0, #4294967295
 80115f2:	bf98      	it	ls
 80115f4:	2001      	movls	r0, #1
 80115f6:	4770      	bx	lr
 80115f8:	4608      	mov	r0, r1
 80115fa:	4770      	bx	lr

080115fc <fiprintf>:
 80115fc:	b40e      	push	{r1, r2, r3}
 80115fe:	b503      	push	{r0, r1, lr}
 8011600:	4601      	mov	r1, r0
 8011602:	ab03      	add	r3, sp, #12
 8011604:	4805      	ldr	r0, [pc, #20]	; (801161c <fiprintf+0x20>)
 8011606:	f853 2b04 	ldr.w	r2, [r3], #4
 801160a:	6800      	ldr	r0, [r0, #0]
 801160c:	9301      	str	r3, [sp, #4]
 801160e:	f7ff fdeb 	bl	80111e8 <_vfiprintf_r>
 8011612:	b002      	add	sp, #8
 8011614:	f85d eb04 	ldr.w	lr, [sp], #4
 8011618:	b003      	add	sp, #12
 801161a:	4770      	bx	lr
 801161c:	200001fc 	.word	0x200001fc

08011620 <abort>:
 8011620:	b508      	push	{r3, lr}
 8011622:	2006      	movs	r0, #6
 8011624:	f000 f834 	bl	8011690 <raise>
 8011628:	2001      	movs	r0, #1
 801162a:	f000 fa27 	bl	8011a7c <_exit>

0801162e <_malloc_usable_size_r>:
 801162e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011632:	1f18      	subs	r0, r3, #4
 8011634:	2b00      	cmp	r3, #0
 8011636:	bfbc      	itt	lt
 8011638:	580b      	ldrlt	r3, [r1, r0]
 801163a:	18c0      	addlt	r0, r0, r3
 801163c:	4770      	bx	lr

0801163e <_raise_r>:
 801163e:	291f      	cmp	r1, #31
 8011640:	b538      	push	{r3, r4, r5, lr}
 8011642:	4604      	mov	r4, r0
 8011644:	460d      	mov	r5, r1
 8011646:	d904      	bls.n	8011652 <_raise_r+0x14>
 8011648:	2316      	movs	r3, #22
 801164a:	6003      	str	r3, [r0, #0]
 801164c:	f04f 30ff 	mov.w	r0, #4294967295
 8011650:	bd38      	pop	{r3, r4, r5, pc}
 8011652:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011654:	b112      	cbz	r2, 801165c <_raise_r+0x1e>
 8011656:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801165a:	b94b      	cbnz	r3, 8011670 <_raise_r+0x32>
 801165c:	4620      	mov	r0, r4
 801165e:	f000 f831 	bl	80116c4 <_getpid_r>
 8011662:	462a      	mov	r2, r5
 8011664:	4601      	mov	r1, r0
 8011666:	4620      	mov	r0, r4
 8011668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801166c:	f000 b818 	b.w	80116a0 <_kill_r>
 8011670:	2b01      	cmp	r3, #1
 8011672:	d00a      	beq.n	801168a <_raise_r+0x4c>
 8011674:	1c59      	adds	r1, r3, #1
 8011676:	d103      	bne.n	8011680 <_raise_r+0x42>
 8011678:	2316      	movs	r3, #22
 801167a:	6003      	str	r3, [r0, #0]
 801167c:	2001      	movs	r0, #1
 801167e:	e7e7      	b.n	8011650 <_raise_r+0x12>
 8011680:	2400      	movs	r4, #0
 8011682:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011686:	4628      	mov	r0, r5
 8011688:	4798      	blx	r3
 801168a:	2000      	movs	r0, #0
 801168c:	e7e0      	b.n	8011650 <_raise_r+0x12>
	...

08011690 <raise>:
 8011690:	4b02      	ldr	r3, [pc, #8]	; (801169c <raise+0xc>)
 8011692:	4601      	mov	r1, r0
 8011694:	6818      	ldr	r0, [r3, #0]
 8011696:	f7ff bfd2 	b.w	801163e <_raise_r>
 801169a:	bf00      	nop
 801169c:	200001fc 	.word	0x200001fc

080116a0 <_kill_r>:
 80116a0:	b538      	push	{r3, r4, r5, lr}
 80116a2:	4d07      	ldr	r5, [pc, #28]	; (80116c0 <_kill_r+0x20>)
 80116a4:	2300      	movs	r3, #0
 80116a6:	4604      	mov	r4, r0
 80116a8:	4608      	mov	r0, r1
 80116aa:	4611      	mov	r1, r2
 80116ac:	602b      	str	r3, [r5, #0]
 80116ae:	f7f4 fd59 	bl	8006164 <_kill>
 80116b2:	1c43      	adds	r3, r0, #1
 80116b4:	d102      	bne.n	80116bc <_kill_r+0x1c>
 80116b6:	682b      	ldr	r3, [r5, #0]
 80116b8:	b103      	cbz	r3, 80116bc <_kill_r+0x1c>
 80116ba:	6023      	str	r3, [r4, #0]
 80116bc:	bd38      	pop	{r3, r4, r5, pc}
 80116be:	bf00      	nop
 80116c0:	20000824 	.word	0x20000824

080116c4 <_getpid_r>:
 80116c4:	f7f4 bd2e 	b.w	8006124 <_getpid>

080116c8 <log10f>:
 80116c8:	b508      	push	{r3, lr}
 80116ca:	ed2d 8b02 	vpush	{d8}
 80116ce:	eeb0 8a40 	vmov.f32	s16, s0
 80116d2:	f000 f889 	bl	80117e8 <__ieee754_log10f>
 80116d6:	eeb4 8a48 	vcmp.f32	s16, s16
 80116da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116de:	d60f      	bvs.n	8011700 <log10f+0x38>
 80116e0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80116e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116e8:	d80a      	bhi.n	8011700 <log10f+0x38>
 80116ea:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80116ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116f2:	d108      	bne.n	8011706 <log10f+0x3e>
 80116f4:	f7fe f97a 	bl	800f9ec <__errno>
 80116f8:	2322      	movs	r3, #34	; 0x22
 80116fa:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801171c <log10f+0x54>
 80116fe:	6003      	str	r3, [r0, #0]
 8011700:	ecbd 8b02 	vpop	{d8}
 8011704:	bd08      	pop	{r3, pc}
 8011706:	f7fe f971 	bl	800f9ec <__errno>
 801170a:	ecbd 8b02 	vpop	{d8}
 801170e:	2321      	movs	r3, #33	; 0x21
 8011710:	6003      	str	r3, [r0, #0]
 8011712:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011716:	4802      	ldr	r0, [pc, #8]	; (8011720 <log10f+0x58>)
 8011718:	f000 b804 	b.w	8011724 <nanf>
 801171c:	ff800000 	.word	0xff800000
 8011720:	080174aa 	.word	0x080174aa

08011724 <nanf>:
 8011724:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801172c <nanf+0x8>
 8011728:	4770      	bx	lr
 801172a:	bf00      	nop
 801172c:	7fc00000 	.word	0x7fc00000

08011730 <fmaxf>:
 8011730:	b508      	push	{r3, lr}
 8011732:	ed2d 8b02 	vpush	{d8}
 8011736:	eeb0 8a40 	vmov.f32	s16, s0
 801173a:	eef0 8a60 	vmov.f32	s17, s1
 801173e:	f000 f813 	bl	8011768 <__fpclassifyf>
 8011742:	b148      	cbz	r0, 8011758 <fmaxf+0x28>
 8011744:	eeb0 0a68 	vmov.f32	s0, s17
 8011748:	f000 f80e 	bl	8011768 <__fpclassifyf>
 801174c:	b130      	cbz	r0, 801175c <fmaxf+0x2c>
 801174e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011756:	dc01      	bgt.n	801175c <fmaxf+0x2c>
 8011758:	eeb0 8a68 	vmov.f32	s16, s17
 801175c:	eeb0 0a48 	vmov.f32	s0, s16
 8011760:	ecbd 8b02 	vpop	{d8}
 8011764:	bd08      	pop	{r3, pc}
	...

08011768 <__fpclassifyf>:
 8011768:	ee10 3a10 	vmov	r3, s0
 801176c:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8011770:	d00d      	beq.n	801178e <__fpclassifyf+0x26>
 8011772:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8011776:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801177a:	d30a      	bcc.n	8011792 <__fpclassifyf+0x2a>
 801177c:	4b07      	ldr	r3, [pc, #28]	; (801179c <__fpclassifyf+0x34>)
 801177e:	1e42      	subs	r2, r0, #1
 8011780:	429a      	cmp	r2, r3
 8011782:	d908      	bls.n	8011796 <__fpclassifyf+0x2e>
 8011784:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8011788:	4258      	negs	r0, r3
 801178a:	4158      	adcs	r0, r3
 801178c:	4770      	bx	lr
 801178e:	2002      	movs	r0, #2
 8011790:	4770      	bx	lr
 8011792:	2004      	movs	r0, #4
 8011794:	4770      	bx	lr
 8011796:	2003      	movs	r0, #3
 8011798:	4770      	bx	lr
 801179a:	bf00      	nop
 801179c:	007ffffe 	.word	0x007ffffe

080117a0 <roundf>:
 80117a0:	ee10 0a10 	vmov	r0, s0
 80117a4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80117a8:	3a7f      	subs	r2, #127	; 0x7f
 80117aa:	2a16      	cmp	r2, #22
 80117ac:	dc15      	bgt.n	80117da <roundf+0x3a>
 80117ae:	2a00      	cmp	r2, #0
 80117b0:	da08      	bge.n	80117c4 <roundf+0x24>
 80117b2:	3201      	adds	r2, #1
 80117b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80117b8:	d101      	bne.n	80117be <roundf+0x1e>
 80117ba:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80117be:	ee00 3a10 	vmov	s0, r3
 80117c2:	4770      	bx	lr
 80117c4:	4907      	ldr	r1, [pc, #28]	; (80117e4 <roundf+0x44>)
 80117c6:	4111      	asrs	r1, r2
 80117c8:	4208      	tst	r0, r1
 80117ca:	d0fa      	beq.n	80117c2 <roundf+0x22>
 80117cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80117d0:	4113      	asrs	r3, r2
 80117d2:	4403      	add	r3, r0
 80117d4:	ea23 0301 	bic.w	r3, r3, r1
 80117d8:	e7f1      	b.n	80117be <roundf+0x1e>
 80117da:	2a80      	cmp	r2, #128	; 0x80
 80117dc:	d1f1      	bne.n	80117c2 <roundf+0x22>
 80117de:	ee30 0a00 	vadd.f32	s0, s0, s0
 80117e2:	4770      	bx	lr
 80117e4:	007fffff 	.word	0x007fffff

080117e8 <__ieee754_log10f>:
 80117e8:	b508      	push	{r3, lr}
 80117ea:	ee10 2a10 	vmov	r2, s0
 80117ee:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80117f2:	ed2d 8b02 	vpush	{d8}
 80117f6:	d108      	bne.n	801180a <__ieee754_log10f+0x22>
 80117f8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8011880 <__ieee754_log10f+0x98>
 80117fc:	eddf 7a21 	vldr	s15, [pc, #132]	; 8011884 <__ieee754_log10f+0x9c>
 8011800:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8011804:	ecbd 8b02 	vpop	{d8}
 8011808:	bd08      	pop	{r3, pc}
 801180a:	2a00      	cmp	r2, #0
 801180c:	da02      	bge.n	8011814 <__ieee754_log10f+0x2c>
 801180e:	ee30 7a40 	vsub.f32	s14, s0, s0
 8011812:	e7f3      	b.n	80117fc <__ieee754_log10f+0x14>
 8011814:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8011818:	db02      	blt.n	8011820 <__ieee754_log10f+0x38>
 801181a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801181e:	e7f1      	b.n	8011804 <__ieee754_log10f+0x1c>
 8011820:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8011824:	bfbf      	itttt	lt
 8011826:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8011888 <__ieee754_log10f+0xa0>
 801182a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801182e:	f06f 0118 	mvnlt.w	r1, #24
 8011832:	ee17 2a90 	vmovlt	r2, s15
 8011836:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801183a:	bfa8      	it	ge
 801183c:	2100      	movge	r1, #0
 801183e:	3b7f      	subs	r3, #127	; 0x7f
 8011840:	440b      	add	r3, r1
 8011842:	0fd9      	lsrs	r1, r3, #31
 8011844:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8011848:	ee07 3a90 	vmov	s15, r3
 801184c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8011850:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8011854:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8011858:	ee00 3a10 	vmov	s0, r3
 801185c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8011860:	f000 f81a 	bl	8011898 <__ieee754_logf>
 8011864:	eddf 7a09 	vldr	s15, [pc, #36]	; 801188c <__ieee754_log10f+0xa4>
 8011868:	ee20 0a27 	vmul.f32	s0, s0, s15
 801186c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011890 <__ieee754_log10f+0xa8>
 8011870:	eea8 0a27 	vfma.f32	s0, s16, s15
 8011874:	eddf 7a07 	vldr	s15, [pc, #28]	; 8011894 <__ieee754_log10f+0xac>
 8011878:	eea8 0a27 	vfma.f32	s0, s16, s15
 801187c:	e7c2      	b.n	8011804 <__ieee754_log10f+0x1c>
 801187e:	bf00      	nop
 8011880:	cc000000 	.word	0xcc000000
 8011884:	00000000 	.word	0x00000000
 8011888:	4c000000 	.word	0x4c000000
 801188c:	3ede5bd9 	.word	0x3ede5bd9
 8011890:	355427db 	.word	0x355427db
 8011894:	3e9a2080 	.word	0x3e9a2080

08011898 <__ieee754_logf>:
 8011898:	ee10 3a10 	vmov	r3, s0
 801189c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80118a0:	d106      	bne.n	80118b0 <__ieee754_logf+0x18>
 80118a2:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8011a3c <__ieee754_logf+0x1a4>
 80118a6:	eddf 7a66 	vldr	s15, [pc, #408]	; 8011a40 <__ieee754_logf+0x1a8>
 80118aa:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80118ae:	4770      	bx	lr
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	da02      	bge.n	80118ba <__ieee754_logf+0x22>
 80118b4:	ee30 7a40 	vsub.f32	s14, s0, s0
 80118b8:	e7f5      	b.n	80118a6 <__ieee754_logf+0xe>
 80118ba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80118be:	db02      	blt.n	80118c6 <__ieee754_logf+0x2e>
 80118c0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80118c4:	4770      	bx	lr
 80118c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80118ca:	bfb8      	it	lt
 80118cc:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 8011a44 <__ieee754_logf+0x1ac>
 80118d0:	485d      	ldr	r0, [pc, #372]	; (8011a48 <__ieee754_logf+0x1b0>)
 80118d2:	bfbe      	ittt	lt
 80118d4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80118d8:	f06f 0118 	mvnlt.w	r1, #24
 80118dc:	ee17 3a90 	vmovlt	r3, s15
 80118e0:	ea4f 52e3 	mov.w	r2, r3, asr #23
 80118e4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80118e8:	4418      	add	r0, r3
 80118ea:	bfa8      	it	ge
 80118ec:	2100      	movge	r1, #0
 80118ee:	3a7f      	subs	r2, #127	; 0x7f
 80118f0:	440a      	add	r2, r1
 80118f2:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 80118f6:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 80118fa:	4319      	orrs	r1, r3
 80118fc:	ee00 1a10 	vmov	s0, r1
 8011900:	4952      	ldr	r1, [pc, #328]	; (8011a4c <__ieee754_logf+0x1b4>)
 8011902:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8011906:	f103 000f 	add.w	r0, r3, #15
 801190a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801190e:	4001      	ands	r1, r0
 8011910:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011914:	bb89      	cbnz	r1, 801197a <__ieee754_logf+0xe2>
 8011916:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801191a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801191e:	d10f      	bne.n	8011940 <__ieee754_logf+0xa8>
 8011920:	2a00      	cmp	r2, #0
 8011922:	f000 8087 	beq.w	8011a34 <__ieee754_logf+0x19c>
 8011926:	ee07 2a90 	vmov	s15, r2
 801192a:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8011a50 <__ieee754_logf+0x1b8>
 801192e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8011a54 <__ieee754_logf+0x1bc>
 8011932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011936:	ee27 0a80 	vmul.f32	s0, s15, s0
 801193a:	eea7 0a87 	vfma.f32	s0, s15, s14
 801193e:	4770      	bx	lr
 8011940:	eddf 6a45 	vldr	s13, [pc, #276]	; 8011a58 <__ieee754_logf+0x1c0>
 8011944:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011948:	eee0 7a66 	vfms.f32	s15, s0, s13
 801194c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011950:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011954:	b912      	cbnz	r2, 801195c <__ieee754_logf+0xc4>
 8011956:	ee30 0a47 	vsub.f32	s0, s0, s14
 801195a:	4770      	bx	lr
 801195c:	ee07 2a90 	vmov	s15, r2
 8011960:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8011a50 <__ieee754_logf+0x1b8>
 8011964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011968:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801196c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8011970:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8011a54 <__ieee754_logf+0x1bc>
 8011974:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8011978:	4770      	bx	lr
 801197a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801197e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011982:	eddf 5a36 	vldr	s11, [pc, #216]	; 8011a5c <__ieee754_logf+0x1c4>
 8011986:	eddf 4a36 	vldr	s9, [pc, #216]	; 8011a60 <__ieee754_logf+0x1c8>
 801198a:	4936      	ldr	r1, [pc, #216]	; (8011a64 <__ieee754_logf+0x1cc>)
 801198c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8011990:	4419      	add	r1, r3
 8011992:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8011996:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801199a:	430b      	orrs	r3, r1
 801199c:	2b00      	cmp	r3, #0
 801199e:	ee07 2a90 	vmov	s15, r2
 80119a2:	ee26 5a06 	vmul.f32	s10, s12, s12
 80119a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80119aa:	ee25 7a05 	vmul.f32	s14, s10, s10
 80119ae:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8011a68 <__ieee754_logf+0x1d0>
 80119b2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80119b6:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8011a6c <__ieee754_logf+0x1d4>
 80119ba:	eee7 5a87 	vfma.f32	s11, s15, s14
 80119be:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8011a70 <__ieee754_logf+0x1d8>
 80119c2:	eee7 7a24 	vfma.f32	s15, s14, s9
 80119c6:	eddf 4a2b 	vldr	s9, [pc, #172]	; 8011a74 <__ieee754_logf+0x1dc>
 80119ca:	eee7 4a87 	vfma.f32	s9, s15, s14
 80119ce:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8011a78 <__ieee754_logf+0x1e0>
 80119d2:	eee4 7a87 	vfma.f32	s15, s9, s14
 80119d6:	ee67 7a85 	vmul.f32	s15, s15, s10
 80119da:	eee5 7a87 	vfma.f32	s15, s11, s14
 80119de:	dd1a      	ble.n	8011a16 <__ieee754_logf+0x17e>
 80119e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80119e4:	ee20 7a07 	vmul.f32	s14, s0, s14
 80119e8:	ee27 7a00 	vmul.f32	s14, s14, s0
 80119ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80119f0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80119f4:	b912      	cbnz	r2, 80119fc <__ieee754_logf+0x164>
 80119f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80119fa:	e7ac      	b.n	8011956 <__ieee754_logf+0xbe>
 80119fc:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8011a50 <__ieee754_logf+0x1b8>
 8011a00:	eee6 7a86 	vfma.f32	s15, s13, s12
 8011a04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011a08:	ee37 0a40 	vsub.f32	s0, s14, s0
 8011a0c:	eddf 7a11 	vldr	s15, [pc, #68]	; 8011a54 <__ieee754_logf+0x1bc>
 8011a10:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8011a14:	4770      	bx	lr
 8011a16:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011a1a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011a1e:	b912      	cbnz	r2, 8011a26 <__ieee754_logf+0x18e>
 8011a20:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011a24:	4770      	bx	lr
 8011a26:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8011a50 <__ieee754_logf+0x1b8>
 8011a2a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8011a2e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011a32:	e7eb      	b.n	8011a0c <__ieee754_logf+0x174>
 8011a34:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8011a40 <__ieee754_logf+0x1a8>
 8011a38:	4770      	bx	lr
 8011a3a:	bf00      	nop
 8011a3c:	cc000000 	.word	0xcc000000
 8011a40:	00000000 	.word	0x00000000
 8011a44:	4c000000 	.word	0x4c000000
 8011a48:	004afb20 	.word	0x004afb20
 8011a4c:	007ffff0 	.word	0x007ffff0
 8011a50:	3717f7d1 	.word	0x3717f7d1
 8011a54:	3f317180 	.word	0x3f317180
 8011a58:	3eaaaaab 	.word	0x3eaaaaab
 8011a5c:	3e1cd04f 	.word	0x3e1cd04f
 8011a60:	3e178897 	.word	0x3e178897
 8011a64:	ffcf5c30 	.word	0xffcf5c30
 8011a68:	3e638e29 	.word	0x3e638e29
 8011a6c:	3ecccccd 	.word	0x3ecccccd
 8011a70:	3e3a3325 	.word	0x3e3a3325
 8011a74:	3e924925 	.word	0x3e924925
 8011a78:	3f2aaaab 	.word	0x3f2aaaab

08011a7c <_exit>:
 8011a7c:	e7fe      	b.n	8011a7c <_exit>
	...

08011a80 <_init>:
 8011a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a82:	bf00      	nop
 8011a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a86:	bc08      	pop	{r3}
 8011a88:	469e      	mov	lr, r3
 8011a8a:	4770      	bx	lr

08011a8c <_fini>:
 8011a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a8e:	bf00      	nop
 8011a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a92:	bc08      	pop	{r3}
 8011a94:	469e      	mov	lr, r3
 8011a96:	4770      	bx	lr
